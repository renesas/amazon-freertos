   1              	# 1 "D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_pac
   1              	@/*******************************************************************************
   0              	
   0              	
   0              	
   2              	@* DISCLAIMER
   3              	@* This software is supplied by Renesas Electronics Corporation and is only
   4              	@* intended for use with Renesas products. No other uses are authorized. This
   5              	@* software is owned by Renesas Electronics Corporation and is protected under
   6              	@* all applicable laws, including copyright laws.
   7              	@* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   8              	@* THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT
   9              	@* LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
  10              	@* AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.
  11              	@* TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS
  12              	@* ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
  13              	@* FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR
  14              	@* ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE
  15              	@* BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  16              	@* Renesas reserves the right, without notice, to make changes to this software
  17              	@* and to discontinue the availability of this software. By using this software,
  18              	@* you agree to the additional terms and conditions found by accessing the
  19              	@* following link:
  20              	@* http://www.renesas.com/disclaimer
  21              	@* Copyright (C) 2018 Renesas Electronics Corporation. All rights reserved.
  22              	@*******************************************************************************/
  23              	@/*******************************************************************************
  24              	@* File Name   : irqfiq_handler.asm
  25              	@* Description : IRQ, FIQ handler
  26              	@*******************************************************************************/
  27              	
  28              	@ Standard definitions of mode bits and interrupt (I & F) flags in PSRs
  29              	    .EQU    SYS_MODE, 0x1f
  30              	
  31              	@ INTC_GICC_IAR register address
  32              	    .EQU    INTC_GICC_IAR_ADDR,  0xE822200C
  33              	@ INTC_GICC_EOIR register address
  34              	    .EQU    INTC_GICC_EOIR_ADDR, 0xE8222010
  35              	@ INTC_GICD_ISACTIVER0 register address
  36              	    .EQU    INTC_GICD_ISACTIVER0_ADDR, 0xE8221300
  37              	@ INTC_GICD_IPRIORITYR0 register address
  38              	    .EQU    INTC_GICD_IPRIORITYR0_ADDR, 0xE8221400
  39              	@ INTC_GICC_HPPIR register address
  40              	    .EQU    INTC_GICC_HPPIR_ADDR, 0xE8222018
  41              	
  42              	@==================================================================
  43              	@ Entry point for the FIQ handler
  44              	@==================================================================
  45              	    .section    IRQ_FIQ_HANDLER, #execinstr
  46              	    .arm
  47              	
  48              	    .extern  NMI_Handler_Interrupt
  49              	    .extern  INTC_Handler_Interrupt
  50              	
  51              	    .global  irq_handler
  52              	    .global  fiq_handler
  53              	
  54              	
  55              	@******************************************************************************
  56              	@ Function Name : fiq_handler
  57              	@ Description   : This function is the assembler function executed when the FIQ
  58              	@               : interrupt is generated.
  59              	@******************************************************************************
  60              	fiq_handler:
  61 0000 04E04EE2 	    SUB     lr, lr, #4
  62 0004 1F056DF9 	    SRSDB   sp!, #SYS_MODE              @;; Store LR_fiq and SPSR_fiq in system mode stack
  63 0008 1F0002F1 	    CPS     #SYS_MODE                   @;; Switch to system mode
  64 000c 0F102DE9 	    PUSH    {r0-r3, r12}                @;; Store other AAPCS registers
  65 0010 0D10A0E1 	    MOV     r1, sp                      @;;
  66 0014 041001E2 	    AND     r1, r1, #4                  @;; Make alignment for stack
  67 0018 01D04DE0 	    SUB     sp, sp, r1                  @;;
  68 001c 02402DE9 	    PUSH    {r1, lr}
  69 0020 FEFFFFEB 	    BL      NMI_Handler_Interrupt       @;; Call NMI Handler
  70 0024 0240BDE8 	    POP     {r1, lr}
  71 0028 01D08DE0 	    ADD     sp, sp, r1
  72 002c 0F10BDE8 	    POP     {r0-r3, r12}                @;; Restore registers
  73 0030 000ABDF8 	    RFEIA   sp!                         @;; Return from system mode stack using RFE
  74              	
  75              	
  76              	@******************************************************************************
  77              	@ Function Name : irq_handler
  78              	@ Description   : This function is the assembler function executed when the IRQ
  79              	@               : interrupt is generated. After saving the stack pointer and
  80              	@               : the stack for general registers and obtaining the INTC interrupt
  81              	@               : source ID, calls the IntcIrqHandler_interrupt function written
  82              	@               : in C language to execute the processing for the INTC interrupt
  83              	@               : handler corresponding to the interrupt source ID.
  84              	@               : After the INTC interrupt handler processing, restores
  85              	@               : the stack pointer and the general registers from the stack and
  86              	@               : returns from the IRQ interrupt processing.
  87              	@******************************************************************************
  88              	irq_handler:
  89 0034 04E04EE2 	    SUB     lr, lr, #4
  90 0038 1F056DF9 	    SRSDB   sp!, #SYS_MODE              @;; Store LR_irq and SPSR_irq in system mode stack
  91 003c 1F0002F1 	    CPS     #SYS_MODE                   @;; Switch to system mode
  92 0040 0F102DE9 	    PUSH    {r0-r3, r12}                @;; Store other AAPCS registers
  93 0044 7C109FE5 	    LDR     r1, =INTC_GICC_HPPIR_ADDR
  94 0048 003091E5 	    LDR     r3, [r1]
  95 004c 78209FE5 	    LDR     r2, =INTC_GICC_IAR_ADDR
  96 0050 000092E5 	    LDR     r0, [r2]                    @;; Read INTC_GICC_IAR_ADDR
  97 0054 74209FE5 	    LDR     r2, =0x000003FF
  98 0058 023000E0 	    AND     r3, r0, r2
  99 005c 70109FE5 	    LDR     r1, =0x000003FE
 100 0060 010053E1 	    CMP     r3, r1
 101 0064 1300005A 	    BPL     int_not_active
 102 0068 000053E3 	    CMP     r3, #0
 103 006c 0C00000A 	    BEQ     int_check
 104              	int_active:
 105 0070 04002DE5 	    PUSH    {r0}
 106 0074 0D10A0E1 	    MOV     r1, sp                      @;;
 107 0078 041001E2 	    AND     r1, r1, #4                  @;; Make alignment for stack
 108 007c 01D04DE0 	    SUB     sp, sp, r1                  @;;
 109 0080 02402DE9 	    PUSH    {r1, lr}
 110 0084 FEFFFFEB 	    BL      INTC_Handler_Interrupt      @;; First argument(r0) = GICC_IAR_ADDR read value
 111 0088 0240BDE8 	    POP     {r1, lr}
 112 008c 01D08DE0 	    ADD     sp, sp, r1
 113 0090 04009DE4 	    POP     {r0}
 114 0094 3C209FE5 	    LDR     r2, =INTC_GICC_EOIR_ADDR
 115 0098 000082E5 	    STR     r0, [r2]                    @;; Write GICC_EOIR
 116              	end_of_handler:
 117 009c 0F10BDE8 	    POP     {r0-r3, r12}                @;; Restore registers
 118 00a0 000ABDF8 	    RFEIA   sp!                         @;; Return from system mode stack using RFE
 119              	
 120              	int_check:
 121 00a4 30209FE5 	    LDR     r2, =INTC_GICD_ISACTIVER0_ADDR
 122 00a8 003092E5 	    LDR     r3, [r2]
 123 00ac 013003E2 	    AND     r3, r3, #0x00000001
 124 00b0 000053E3 	    CMP     r3, #0
 125 00b4 EDFFFF1A 	    BNE     int_active
 126              	int_not_active:
 127 00b8 20209FE5 	    LDR     r2, =INTC_GICD_IPRIORITYR0_ADDR
 128 00bc 003092E5 	    LDR     r3, [r2]
 129 00c0 003082E5 	    STR     r3, [r2]
 130 00c4 F4FFFFEA 	    B       end_of_handler
 131              	
 132              	Literals3:
 133 00c8 182022E8 	    .LTORG
 133      0C2022E8 
 133      FF030000 
 133      FE030000 
 133      102022E8 
 134              	
 135              	
 136              	    .END
DEFINED SYMBOLS
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:29     *ABS*:0000001f SYS_MODE
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:32     *ABS*:e822200c INTC_GICC_IAR_ADDR
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:34     *ABS*:e8222010 INTC_GICC_EOIR_ADDR
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:36     *ABS*:e8221300 INTC_GICD_ISACTIVER0_ADDR
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:38     *ABS*:e8221400 INTC_GICD_IPRIORITYR0_ADDR
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:40     *ABS*:e8222018 INTC_GICC_HPPIR_ADDR
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:88     IRQ_FIQ_HANDLER:00000034 irq_handler
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:60     IRQ_FIQ_HANDLER:00000000 fiq_handler
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:61     IRQ_FIQ_HANDLER:00000000 $a
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:126    IRQ_FIQ_HANDLER:000000b8 int_not_active
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:120    IRQ_FIQ_HANDLER:000000a4 int_check
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:104    IRQ_FIQ_HANDLER:00000070 int_active
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:116    IRQ_FIQ_HANDLER:0000009c end_of_handler
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:132    IRQ_FIQ_HANDLER:000000c8 Literals3
D:/Work/DeviceTester/amazon-freertos/lib/third_party/mcu_vendor/renesas/rz_mcu_boards/core_package/generate/compiler/asm/irqfiq_handler.asm:133    IRQ_FIQ_HANDLER:000000c8 $d

UNDEFINED SYMBOLS
NMI_Handler_Interrupt
INTC_Handler_Interrupt
