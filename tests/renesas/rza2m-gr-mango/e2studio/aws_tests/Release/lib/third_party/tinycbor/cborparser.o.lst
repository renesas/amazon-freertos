   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"cborparser.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.is_fixed_type,"ax",%progbits
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  20              		.fpu neon
  22              	is_fixed_type:
  23              	.LFB56:
  24              		.file 1 "D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor/cborparser.c"
   1:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /****************************************************************************
   2:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** **
   3:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** Copyright (C) 2016 Intel Corporation
   4:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** **
   5:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** Permission is hereby granted, free of charge, to any person obtaining a copy
   6:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** of this software and associated documentation files (the "Software"), to deal
   7:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** in the Software without restriction, including without limitation the rights
   8:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** copies of the Software, and to permit persons to whom the Software is
  10:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** furnished to do so, subject to the following conditions:
  11:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** **
  12:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** The above copyright notice and this permission notice shall be included in
  13:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** all copies or substantial portions of the Software.
  14:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** **
  15:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ** THE SOFTWARE.
  22:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** **
  23:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** ****************************************************************************/
  24:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
  25:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #define _BSD_SOURCE 1
  26:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #define _DEFAULT_SOURCE 1
  27:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #ifndef __STDC_LIMIT_MACROS
  28:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #  define __STDC_LIMIT_MACROS 1
  29:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #endif
  30:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
  31:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #include "cbor.h"
  32:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #include "cborconstants_p.h"
  33:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #include "compilersupport_p.h"
  34:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #include "extract_number_p.h"
  35:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
  36:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #include <assert.h>
  37:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #include <string.h>
  38:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
  39:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #include "assert_p.h"       /* Always include last */
  40:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
  41:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #ifndef CBOR_PARSER_MAX_RECURSIONS
  42:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #  define CBOR_PARSER_MAX_RECURSIONS 1024
  43:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #endif
  44:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
  45:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
  46:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \defgroup CborParsing Parsing CBOR streams
  47:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \brief Group of functions used to parse CBOR streams.
  48:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
  49:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * TinyCBOR provides functions for pull-based stream parsing of a CBOR-encoded
  50:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * payload. The main data type for the parsing is a CborValue, which behaves
  51:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * like an iterator and can be used to extract the encoded data. It is first
  52:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * initialized with a call to cbor_parser_init() and is usually used to extract
  53:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * exactly one item, most often an array or map.
  54:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
  55:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Nested CborValue objects can be parsed using cbor_value_enter_container().
  56:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Each call to cbor_value_enter_container() must be matched by a call to
  57:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_leave_container(), with the exact same parameters.
  58:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
  59:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * The example below initializes a CborParser object, begins the parsing with a
  60:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * CborValue and decodes a single integer:
  61:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
  62:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \code
  63:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * int extract_int(const uint8_t *buffer, size_t len)
  64:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * {
  65:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     CborParser parser;
  66:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     CborValue value;
  67:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     int result;
  68:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     cbor_parser_init(buffer, len, 0, &buffer, &value);
  69:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     cbor_value_get_int(&value, &result);
  70:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     return result;
  71:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * }
  72:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \endcode
  73:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
  74:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * The code above does no error checking, which means it assumes the data comes
  75:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * from a source trusted to send one properly-encoded integer. The following
  76:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * example does the exact same operation, but includes error parsing and
  77:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * returns 0 on parsing failure:
  78:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
  79:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \code
  80:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * int extract_int(const uint8_t *buffer, size_t len)
  81:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * {
  82:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     CborParser parser;
  83:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     CborValue value;
  84:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     int result;
  85:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     if (cbor_parser_init(buffer, len, 0, &buffer, &value) != CborNoError)
  86:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *         return 0;
  87:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     if (!cbor_value_is_integer(&value) ||
  88:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *             cbor_value_get_int(&value, &result) != CborNoError)
  89:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *         return 0;
  90:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     return result;
  91:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * }
  92:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \endcode
  93:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
  94:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Note, in the example above, that one can't distinguish a parsing failure
  95:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * from an encoded value of zero. Reporting a parsing error is left as an
  96:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * exercise to the reader.
  97:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
  98:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * The code above does not execute a range-check either: it is possible that
  99:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * the value decoded from the CBOR stream encodes a number larger than what can
 100:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * be represented in a variable of type \c{int}. If detecting that case is
 101:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * important, the code should call cbor_value_get_int_checked() instead.
 102:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 103:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * <h3 class="groupheader">Memory and parsing constraints</h3>
 104:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 105:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * TinyCBOR is designed to run with little memory and with minimal overhead.
 106:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Except where otherwise noted, the parser functions always run on constant
 107:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * time (O(1)), do not recurse and never allocate memory (thus, stack usage is
 108:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * bounded and is O(1)).
 109:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 110:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * <h3 class="groupheader">Error handling and preconditions</h3>
 111:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 112:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * All functions operating on a CborValue return a CborError condition, with
 113:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * CborNoError standing for the normal situation in which no parsing error
 114:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * occurred. All functions may return parsing errors in case the stream cannot
 115:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * be decoded properly, be it due to corrupted data or due to reaching the end
 116:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * of the input buffer.
 117:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 118:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Error conditions must not be ignored. All decoder functions have undefined
 119:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behavior if called after an error has been reported, and may crash.
 120:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 121:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Some functions are also documented to have preconditions, like
 122:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_get_int() requiring that the input be an integral value.
 123:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Violation of preconditions also results in undefined behavior and the
 124:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * program may crash.
 125:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 126:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 127:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 128:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \addtogroup CborParsing
 129:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * @{
 130:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 131:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 132:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 133:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \struct CborValue
 134:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 135:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * This type contains one value parsed from the CBOR stream. Each CborValue
 136:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behaves as an iterator in a StAX-style parser.
 137:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 138:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \if privatedocs
 139:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Implementation details: the CborValue contains these fields:
 140:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \list
 141:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *   \li ptr: pointer to the actual data
 142:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *   \li flags: flags from the decoder
 143:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *   \li extra: partially decoded integer value (0, 1 or 2 bytes)
 144:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *   \li remaining: remaining items in this collection after this item or UINT32_MAX if length is u
 145:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \endlist
 146:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \endif
 147:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 148:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 149:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** static CborError extract_length(const CborParser *parser, const uint8_t **ptr, size_t *len)
 150:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 151:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint64_t v;
 152:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     CborError err = extract_number(ptr, parser->end, &v);
 153:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (err) {
 154:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *len = 0;
 155:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return err;
 156:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 157:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 158:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     *len = (size_t)v;
 159:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (v != *len)
 160:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorDataTooLarge;
 161:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 162:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 163:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 164:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** static bool is_fixed_type(uint8_t type)
 165:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
  25              		.loc 1 165 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 166:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
  31              		.loc 1 166 0
  32 0000 DF0000E2 		and	r0, r0, #223
  33              	.LVL1:
  34 0004 400050E3 		cmp	r0, #64
  35 0008 0200000A 		beq	.L3
  36              		.loc 1 166 0 is_stmt 0 discriminator 1
  37 000c 800050E2 		subs	r0, r0, #128
  38 0010 0100A013 		movne	r0, #1
  39 0014 1EFF2FE1 		bx	lr
  40              	.L3:
  41 0018 0000A0E3 		mov	r0, #0
 167:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****            type != CborMapType;
 168:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
  42              		.loc 1 168 0 is_stmt 1
  43 001c 1EFF2FE1 		bx	lr
  44              		.cfi_endproc
  45              	.LFE56:
  47              		.section	.text.iterate_noop,"ax",%progbits
  48              		.align	2
  49              		.syntax unified
  50              		.arm
  51              		.fpu neon
  53              	iterate_noop:
  54              	.LFB71:
 169:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 170:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** static CborError preparse_value(CborValue *it)
 171:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 172:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     const CborParser *parser = it->parser;
 173:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->type = CborInvalidType;
 174:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 175:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     /* are we at the end? */
 176:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (it->ptr == parser->end)
 177:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorUnexpectedEOF;
 178:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 179:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint8_t descriptor = *it->ptr;
 180:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint8_t type = descriptor & MajorTypeMask;
 181:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->type = type;
 182:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->flags = 0;
 183:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->extra = (descriptor &= SmallValueMask);
 184:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 185:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (descriptor > Value64Bit) {
 186:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (unlikely(descriptor != IndefiniteLength))
 187:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
 188:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (likely(!is_fixed_type(type))) {
 189:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             /* special case */
 190:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->flags |= CborIteratorFlag_UnknownLength;
 191:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->type = type;
 192:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborNoError;
 193:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         }
 194:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
 195:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 196:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 197:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
 198:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (bytesNeeded + 1 > (size_t)(parser->end - it->ptr))
 199:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorUnexpectedEOF;
 200:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 201:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint8_t majortype = type >> MajorTypeShift;
 202:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (majortype == NegativeIntegerType) {
 203:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->flags |= CborIteratorFlag_NegativeInteger;
 204:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->type = CborIntegerType;
 205:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     } else if (majortype == SimpleTypesType) {
 206:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         switch (descriptor) {
 207:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case FalseValue:
 208:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->extra = false;
 209:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->type = CborBooleanType;
 210:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             break;
 211:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 212:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case SinglePrecisionFloat:
 213:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case DoublePrecisionFloat:
 214:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->flags |= CborIteratorFlag_IntegerValueTooLarge;
 215:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             /* fall through */
 216:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case TrueValue:
 217:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case NullValue:
 218:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case UndefinedValue:
 219:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case HalfPrecisionFloat:
 220:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->type = *it->ptr;
 221:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             break;
 222:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 223:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case SimpleTypeInNextByte:
 224:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->extra = (uint8_t)it->ptr[1];
 225:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #ifndef CBOR_PARSER_NO_STRICT_CHECKS
 226:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (unlikely(it->extra < 32)) {
 227:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 it->type = CborInvalidType;
 228:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return CborErrorIllegalSimpleType;
 229:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             }
 230:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #endif
 231:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             break;
 232:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 233:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case 28:
 234:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case 29:
 235:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case 30:
 236:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case Break:
 237:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             assert(false);  /* these conditions can't be reached */
 238:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborErrorUnexpectedBreak;
 239:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         }
 240:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborNoError;
 241:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 242:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 243:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     /* try to decode up to 16 bits */
 244:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (descriptor < Value8Bit)
 245:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborNoError;
 246:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 247:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (descriptor == Value8Bit)
 248:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->extra = (uint8_t)it->ptr[1];
 249:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     else if (descriptor == Value16Bit)
 250:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->extra = get16(it->ptr + 1);
 251:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     else
 252:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
 253:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 254:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 255:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 256:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** static CborError preparse_next_value(CborValue *it)
 257:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 258:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (it->remaining != UINT32_MAX) {
 259:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         /* don't decrement the item count if the current item is tag: they don't count */
 260:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (it->type != CborTagType && !--it->remaining) {
 261:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->type = CborInvalidType;
 262:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborNoError;
 263:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         }
 264:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     } else if (it->remaining == UINT32_MAX && it->ptr != it->parser->end && *it->ptr == (uint8_t)Br
 265:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         /* end of map or array */
 266:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         ++it->ptr;
 267:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->type = CborInvalidType;
 268:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->remaining = 0;
 269:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborNoError;
 270:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 271:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 272:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return preparse_value(it);
 273:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 274:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 275:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** static CborError advance_internal(CborValue *it)
 276:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 277:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint64_t length;
 278:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     CborError err = extract_number(&it->ptr, it->parser->end, &length);
 279:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(err == CborNoError);
 280:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 281:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (it->type == CborByteStringType || it->type == CborTextStringType) {
 282:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         assert(length == (size_t)length);
 283:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
 284:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->ptr += length;
 285:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 286:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 287:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return preparse_next_value(it);
 288:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 289:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 290:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /** \internal
 291:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 292:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Decodes the CBOR integer value when it is larger than the 16 bits available
 293:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * in value->extra. This function requires that value->flags have the
 294:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * CborIteratorFlag_IntegerValueTooLarge flag set.
 295:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 296:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * This function is also used to extract single- and double-precision floating
 297:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * point values (SinglePrecisionFloat == Value32Bit and DoublePrecisionFloat ==
 298:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Value64Bit).
 299:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 300:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** uint64_t _cbor_value_decode_int64_internal(const CborValue *value)
 301:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 302:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
 303:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****            value->type == CborFloatType || value->type == CborDoubleType);
 304:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 305:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     /* since the additional information can only be Value32Bit or Value64Bit,
 306:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      * we just need to test for the one bit those two options differ */
 307:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert((*value->ptr & SmallValueMask) == Value32Bit || (*value->ptr & SmallValueMask) == Value6
 308:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if ((*value->ptr & 1) == (Value32Bit & 1))
 309:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return get32(value->ptr + 1);
 310:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 311:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert((*value->ptr & SmallValueMask) == Value64Bit);
 312:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return get64(value->ptr + 1);
 313:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 314:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 315:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 316:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Initializes the CBOR parser for parsing \a size bytes beginning at \a
 317:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * buffer. Parsing will use flags set in \a flags. The iterator to the first
 318:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * element is returned in \a it.
 319:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 320:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * The \a parser structure needs to remain valid throughout the decoding
 321:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * process. It is not thread-safe to share one CborParser among multiple
 322:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * threads iterating at the same time, but the object can be copied so multiple
 323:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * threads can iterate.
 324:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 325:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_parser_init(const uint8_t *buffer, size_t size, int flags, CborParser *parser, CborV
 326:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 327:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     memset(parser, 0, sizeof(*parser));
 328:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     parser->end = buffer + size;
 329:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     parser->flags = flags;
 330:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->parser = parser;
 331:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->ptr = buffer;
 332:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->remaining = 1;      /* there's one type altogether, usually an array or map */
 333:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return preparse_value(it);
 334:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 335:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 336:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 337:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_at_end(const CborValue *it)
 338:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 339:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if \a it has reached the end of the iteration, usually when
 340:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * advancing after the last item in an array or map.
 341:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 342:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * In the case of the outermost CborValue object, this function returns true
 343:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * after decoding a single element. A pointer to the first byte of the
 344:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * remaining data (if any) can be obtained with cbor_value_get_next_byte().
 345:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 346:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_advance(), cbor_value_is_valid(), cbor_value_get_next_byte()
 347:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 348:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 349:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 350:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn const uint8_t *cbor_value_get_next_byte(const CborValue *it)
 351:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 352:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns a pointer to the next byte that would be decoded if this CborValue
 353:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * object were advanced.
 354:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 355:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * This function is useful if cbor_value_at_end() returns true for the
 356:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * outermost CborValue: the pointer returned is the first byte of the data
 357:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * remaining in the buffer, if any. Code can decide whether to begin decoding a
 358:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * new CBOR data stream from this point, or parse some other data appended to
 359:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * the same buffer.
 360:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 361:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * This function may be used even after a parsing error. If that occurred,
 362:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * then this function returns a pointer to where the parsing error occurred.
 363:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Note that the error recovery is not precise and the pointer may not indicate
 364:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * the exact byte containing bad data.
 365:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 366:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_at_end()
 367:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 368:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 369:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 370:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_valid(const CborValue *it)
 371:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 372:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a it contains a valid value. Invalid iterators
 373:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * happen when iteration reaches the end of a container (see \ref
 374:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_at_end()) or when a search function resulted in no matches.
 375:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 376:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_advance(), cbor_valie_at_end(), cbor_value_get_type()
 377:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 378:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 379:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 380:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Advances the CBOR value \a it by one fixed-size position. Fixed-size types
 381:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * are: integers, tags, simple types (including boolean, null and undefined
 382:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * values) and floating point types.
 383:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 384:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the type is not of fixed size, this function has undefined behavior. Code
 385:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * must be sure that the current type is one of the fixed-size types before
 386:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * calling this function. This function is provided because it can guarantee
 387:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * that runs in constant time (O(1)).
 388:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 389:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the caller is not able to determine whether the type is fixed or not, code
 390:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * can use the cbor_value_advance() function instead.
 391:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 392:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_at_end(), cbor_value_advance(), cbor_value_enter_container(), cbor_value_leave_co
 393:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 394:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_value_advance_fixed(CborValue *it)
 395:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 396:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(it->type != CborInvalidType);
 397:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(is_fixed_type(it->type));
 398:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (!it->remaining)
 399:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorAdvancePastEOF;
 400:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return advance_internal(it);
 401:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 402:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 403:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** static CborError advance_recursive(CborValue *it, int nestingLevel)
 404:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 405:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (is_fixed_type(it->type))
 406:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return advance_internal(it);
 407:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 408:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (!cbor_value_is_container(it)) {
 409:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         size_t len = SIZE_MAX;
 410:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return _cbor_value_copy_string(it, NULL, &len, it);
 411:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 412:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 413:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     /* map or array */
 414:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
 415:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorNestingTooDeep;
 416:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 417:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     CborError err;
 418:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     CborValue recursed;
 419:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     err = cbor_value_enter_container(it, &recursed);
 420:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (err)
 421:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return err;
 422:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     while (!cbor_value_at_end(&recursed)) {
 423:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         err = advance_recursive(&recursed, nestingLevel + 1);
 424:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
 425:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return err;
 426:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 427:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return cbor_value_leave_container(it, &recursed);
 428:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 429:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 430:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 431:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 432:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Advances the CBOR value \a it by one element, skipping over containers.
 433:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Unlike cbor_value_advance_fixed(), this function can be called on a CBOR
 434:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * value of any type. However, if the type is a container (map or array) or a
 435:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * string with a chunked payload, this function will not run in constant time
 436:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * and will recurse into itself (it will run on O(n) time for the number of
 437:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * elements or chunks and will use O(n) memory for the number of nested
 438:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * containers).
 439:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 440:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_at_end(), cbor_value_advance_fixed(), cbor_value_enter_container(), cbor_value_le
 441:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 442:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_value_advance(CborValue *it)
 443:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 444:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(it->type != CborInvalidType);
 445:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (!it->remaining)
 446:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorAdvancePastEOF;
 447:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return advance_recursive(it, 0);
 448:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 449:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 450:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 451:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_tag(const CborValue *value)
 452:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 453:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR tag.
 454:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 455:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_tag(), cbor_value_skip_tag()
 456:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 457:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 458:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 459:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_tag(const CborValue *value, CborTag *result)
 460:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 461:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the CBOR tag value that \a value points to and stores it in \a
 462:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * result. If the iterator \a value does not point to a CBOR tag value, the
 463:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behavior is undefined, so checking with \ref cbor_value_get_type or with
 464:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \ref cbor_value_is_tag is recommended.
 465:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 466:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_tag()
 467:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 468:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 469:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 470:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Advances the CBOR value \a it until it no longer points to a tag. If \a it is
 471:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * already not pointing to a tag, then this function returns it unchanged.
 472:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 473:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * This function does not run in constant time: it will run on O(n) for n being
 474:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * the number of tags. It does use constant memory (O(1) memory requirements).
 475:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 476:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_advance_fixed(), cbor_value_advance()
 477:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 478:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_value_skip_tag(CborValue *it)
 479:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 480:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     while (cbor_value_is_tag(it)) {
 481:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         CborError err = cbor_value_advance_fixed(it);
 482:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
 483:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return err;
 484:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 485:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 486:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 487:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 488:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 489:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_container(const CborValue *it)
 490:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 491:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the \a it value is a container and requires recursion in
 492:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * order to decode (maps and arrays), false otherwise.
 493:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 494:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 495:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 496:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Creates a CborValue iterator pointing to the first element of the container
 497:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * represented by \a it and saves it in \a recursed. The \a it container object
 498:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * needs to be kept and passed again to cbor_value_leave_container() in order
 499:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * to continue iterating past this container.
 500:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 501:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * The \a it CborValue iterator must point to a container.
 502:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 503:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_container(), cbor_value_leave_container(), cbor_value_advance()
 504:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 505:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_value_enter_container(const CborValue *it, CborValue *recursed)
 506:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 507:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     CborError err;
 508:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_container(it));
 509:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     *recursed = *it;
 510:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 511:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (it->flags & CborIteratorFlag_UnknownLength) {
 512:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         recursed->remaining = UINT32_MAX;
 513:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         ++recursed->ptr;
 514:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         err = preparse_value(recursed);
 515:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err != CborErrorUnexpectedBreak)
 516:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return err;
 517:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         /* actually, break was expected here
 518:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****          * it's just an empty container */
 519:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         ++recursed->ptr;
 520:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     } else {
 521:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         uint64_t len;
 522:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         err = extract_number(&recursed->ptr, recursed->parser->end, &len);
 523:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         assert(err == CborNoError);
 524:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 525:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         recursed->remaining = (uint32_t)len;
 526:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (recursed->remaining != len || len == UINT32_MAX) {
 527:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             /* back track the pointer to indicate where the error occurred */
 528:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             recursed->ptr = it->ptr;
 529:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborErrorDataTooLarge;
 530:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         }
 531:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (recursed->type == CborMapType) {
 532:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             /* maps have keys and values, so we need to multiply by 2 */
 533:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (recursed->remaining > UINT32_MAX / 2) {
 534:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 /* back track the pointer to indicate where the error occurred */
 535:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 recursed->ptr = it->ptr;
 536:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return CborErrorDataTooLarge;
 537:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             }
 538:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             recursed->remaining *= 2;
 539:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         }
 540:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (len != 0)
 541:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return preparse_value(recursed);
 542:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 543:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 544:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     /* the case of the empty container */
 545:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     recursed->type = CborInvalidType;
 546:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     recursed->remaining = 0;
 547:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 548:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 549:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 550:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 551:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Updates \a it to point to the next element after the container. The \a
 552:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * recursed object needs to point to the element obtained either by advancing
 553:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * the last element of the container (via cbor_value_advance(),
 554:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_advance_fixed(), a nested cbor_value_leave_container(), or the \c
 555:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * next pointer from cbor_value_copy_string() or cbor_value_dup_string()).
 556:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 557:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * The \a it and \a recursed parameters must be the exact same as passed to
 558:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_enter_container().
 559:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 560:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_enter_container(), cbor_value_at_end()
 561:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 562:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_value_leave_container(CborValue *it, const CborValue *recursed)
 563:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 564:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_container(it));
 565:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(recursed->type == CborInvalidType);
 566:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->ptr = recursed->ptr;
 567:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return preparse_next_value(it);
 568:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 569:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 570:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 571:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 572:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborType cbor_value_get_type(const CborValue *value)
 573:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 574:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns the type of the CBOR value that the iterator \a value points to. If
 575:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \a value does not point to a valid value, this function returns \ref
 576:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * CborInvalidType.
 577:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 578:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * TinyCBOR also provides functions to test directly if a given CborValue object
 579:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * is of a given type, like cbor_value_is_text_string() and cbor_value_is_null().
 580:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 581:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid()
 582:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 583:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 584:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 585:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_null(const CborValue *value)
 586:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 587:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR null type.
 588:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 589:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_is_undefined()
 590:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 591:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 592:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 593:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_undefined(const CborValue *value)
 594:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 595:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR undefined type.
 596:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 597:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_is_null()
 598:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 599:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 600:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 601:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_boolean(const CborValue *value)
 602:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 603:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR boolean
 604:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * type (true or false).
 605:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 606:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_get_boolean()
 607:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 608:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 609:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 610:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_boolean(const CborValue *value, bool *result)
 611:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 612:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the boolean value that \a value points to and stores it in \a
 613:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * result. If the iterator \a value does not point to a boolean value, the
 614:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behavior is undefined, so checking with \ref cbor_value_get_type or with
 615:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \ref cbor_value_is_boolean is recommended.
 616:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 617:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_boolean()
 618:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 619:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 620:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 621:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_simple_type(const CborValue *value)
 622:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 623:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR Simple Type
 624:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * type (other than true, false, null and undefined).
 625:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 626:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_get_simple_type()
 627:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 628:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 629:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 630:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_simple_type(const CborValue *value, uint8_t *result)
 631:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 632:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the CBOR Simple Type value that \a value points to and stores it
 633:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * in \a result. If the iterator \a value does not point to a simple_type
 634:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * value, the behavior is undefined, so checking with \ref cbor_value_get_type
 635:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * or with \ref cbor_value_is_simple_type is recommended.
 636:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 637:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_simple_type()
 638:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 639:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 640:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 641:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_integer(const CborValue *value)
 642:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 643:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR integer
 644:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * type.
 645:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 646:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_get_int, cbor_value_get_int64, cbor_value_get_uint64, cbor
 647:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 648:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 649:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 650:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_unsigned_integer(const CborValue *value)
 651:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 652:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR unsigned
 653:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * integer type (positive values or zero).
 654:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 655:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_get_uint64()
 656:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 657:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 658:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 659:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_negative_integer(const CborValue *value)
 660:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 661:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR negative
 662:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * integer type.
 663:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 664:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_get_int, cbor_value_get_int64, cbor_value_get_raw_integer
 665:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 666:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 667:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 668:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_int(const CborValue *value, int *result)
 669:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 670:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the CBOR integer value that \a value points to and stores it in \a
 671:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * result. If the iterator \a value does not point to an integer value, the
 672:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behavior is undefined, so checking with \ref cbor_value_get_type or with
 673:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \ref cbor_value_is_integer is recommended.
 674:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 675:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Note that this function does not do range-checking: integral values that do
 676:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * not fit in a variable of type \c{int} are silently truncated to fit. Use
 677:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_get_int_checked() that is not acceptable.
 678:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 679:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_integer()
 680:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 681:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 682:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 683:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
 684:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 685:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the CBOR integer value that \a value points to and stores it in \a
 686:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * result. If the iterator \a value does not point to an integer value, the
 687:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behavior is undefined, so checking with \ref cbor_value_get_type or with
 688:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \ref cbor_value_is_integer is recommended.
 689:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 690:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Note that this function does not do range-checking: integral values that do
 691:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * not fit in a variable of type \c{int64_t} are silently truncated to fit. Use
 692:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_get_int64_checked() that is not acceptable.
 693:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 694:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_integer()
 695:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 696:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 697:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 698:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_uint64(const CborValue *value, uint64_t *result)
 699:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 700:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the CBOR integer value that \a value points to and stores it in \a
 701:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * result. If the iterator \a value does not point to an unsigned integer
 702:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * value, the behavior is undefined, so checking with \ref cbor_value_get_type
 703:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * or with \ref cbor_value_is_unsigned_integer is recommended.
 704:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 705:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_unsigned_integer()
 706:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 707:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 708:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 709:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_raw_integer(const CborValue *value, uint64_t *result)
 710:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 711:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the CBOR integer value that \a value points to and stores it in \a
 712:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * result. If the iterator \a value does not point to an integer value, the
 713:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behavior is undefined, so checking with \ref cbor_value_get_type or with
 714:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \ref cbor_value_is_integer is recommended.
 715:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 716:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * This function is provided because CBOR negative integers can assume values
 717:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * that cannot be represented with normal 64-bit integer variables.
 718:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 719:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the integer is unsigned (that is, if cbor_value_is_unsigned_integer()
 720:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * returns true), then \a result will contain the actual value. If the integer
 721:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * is negative, then \a result will contain the absolute value of that integer,
 722:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * minus one. That is, \c {actual = -result - 1}. On architectures using two's
 723:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * complement for representation of negative integers, it is equivalent to say
 724:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * that \a result will contain the bitwise negation of the actual value.
 725:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 726:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_integer()
 727:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 728:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 729:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 730:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the CBOR integer value that \a value points to and stores it in \a
 731:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * result. If the iterator \a value does not point to an integer value, the
 732:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behavior is undefined, so checking with \ref cbor_value_get_type or with
 733:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \ref cbor_value_is_integer is recommended.
 734:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 735:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Unlike cbor_value_get_int64(), this function performs a check to see if the
 736:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * stored integer fits in \a result without data loss. If the number is outside
 737:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * the valid range for the data type, this function returns the recoverable
 738:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * error CborErrorDataTooLarge. In that case, use either
 739:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_get_uint64() (if the number is positive) or
 740:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_get_raw_integer().
 741:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 742:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_integer(), cbor_value_get_int64(
 743:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 744:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_value_get_int64_checked(const CborValue *value, int64_t *result)
 745:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 746:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_integer(value));
 747:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint64_t v = _cbor_value_extract_int64_helper(value);
 748:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 749:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     /* Check before converting, as the standard says (C11 6.3.1.3 paragraph 3):
 750:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      * "[if] the new type is signed and the value cannot be represented in it; either the
 751:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      *  result is implementation-defined or an implementation-defined signal is raised."
 752:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      *
 753:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      * The range for int64_t is -2^63 to 2^63-1 (int64_t is required to be
 754:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      * two's complement, C11 7.20.1.1 paragraph 3), which in CBOR is
 755:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      * represented the same way, differing only on the "sign bit" (the major
 756:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      * type).
 757:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      */
 758:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 759:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (unlikely(v > (uint64_t)INT64_MAX))
 760:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorDataTooLarge;
 761:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 762:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     *result = v;
 763:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (value->flags & CborIteratorFlag_NegativeInteger)
 764:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *result = -*result - 1;
 765:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 766:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 767:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 768:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 769:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the CBOR integer value that \a value points to and stores it in \a
 770:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * result. If the iterator \a value does not point to an integer value, the
 771:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behavior is undefined, so checking with \ref cbor_value_get_type or with
 772:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \ref cbor_value_is_integer is recommended.
 773:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 774:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Unlike cbor_value_get_int(), this function performs a check to see if the
 775:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * stored integer fits in \a result without data loss. If the number is outside
 776:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * the valid range for the data type, this function returns the recoverable
 777:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * error CborErrorDataTooLarge. In that case, use one of the other integer
 778:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * functions to obtain the value.
 779:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 780:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_integer(), cbor_value_get_int64(
 781:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     cbor_value_get_uint64(), cbor_value_get_int64_checked(), cbor_value_get_raw_integer()
 782:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 783:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_value_get_int_checked(const CborValue *value, int *result)
 784:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 785:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_integer(value));
 786:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint64_t v = _cbor_value_extract_int64_helper(value);
 787:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 788:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     /* Check before converting, as the standard says (C11 6.3.1.3 paragraph 3):
 789:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      * "[if] the new type is signed and the value cannot be represented in it; either the
 790:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      *  result is implementation-defined or an implementation-defined signal is raised."
 791:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      *
 792:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      * But we can convert from signed to unsigned without fault (paragraph 2).
 793:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      *
 794:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      * The range for int is implementation-defined and int is not guaranteed use
 795:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      * two's complement representation (int32_t is).
 796:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****      */
 797:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 798:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (value->flags & CborIteratorFlag_NegativeInteger) {
 799:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (unlikely(v > (unsigned) -(INT_MIN + 1)))
 800:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborErrorDataTooLarge;
 801:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 802:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *result = (int)v;
 803:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *result = -*result - 1;
 804:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     } else {
 805:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (unlikely(v > (uint64_t)INT_MAX))
 806:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborErrorDataTooLarge;
 807:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 808:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *result = (int)v;
 809:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 810:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 811:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 812:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 813:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 814:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 815:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_length_known(const CborValue *value)
 816:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 817:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the length of this type is known without calculation. That
 818:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * is, if the length of this CBOR string, map or array is encoded in the data
 819:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * stream, this function returns true. If the length is not encoded, it returns
 820:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * false.
 821:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 822:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the length is known, code can call cbor_value_get_string_length(),
 823:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_get_array_length() or cbor_value_get_map_length() to obtain the
 824:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * length. If the length is not known but is necessary, code can use the
 825:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_calculate_string_length() function (no equivalent function is
 826:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * provided for maps and arrays).
 827:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 828:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 829:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 830:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_text_string(const CborValue *value)
 831:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 832:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR text
 833:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * string. CBOR text strings are UTF-8 encoded and usually contain
 834:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * human-readable text.
 835:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 836:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_get_string_length(), cbor_value_calculate_string_length(),
 837:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     cbor_value_copy_text_string(), cbor_value_dup_text_string()
 838:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 839:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 840:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 841:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_byte_string(const CborValue *value)
 842:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 843:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR text
 844:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * string. CBOR byte strings are binary data with no specified encoding or
 845:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * format.
 846:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 847:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_get_string_length(), cbor_value_calculate_string_length(),
 848:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *     cbor_value_copy_byte_string(), cbor_value_dup_byte_string()
 849:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 850:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 851:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 852:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_string_length(const CborValue *value, size_t *length)
 853:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 854:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Extracts the length of the byte or text string that \a value points to and
 855:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * stores it in \a result. If the iterator \a value does not point to a text
 856:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * string or a byte string, the behaviour is undefined, so checking with \ref
 857:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_get_type, with \ref cbor_value_is_text_string or \ref
 858:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_is_byte_string is recommended.
 859:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 860:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the length of this string is not encoded in the CBOR data stream, this
 861:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * function will return the recoverable error CborErrorUnknownLength. You may
 862:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * also check whether that is the case by using cbor_value_is_length_known().
 863:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 864:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the length of the string is required but the length was not encoded, use
 865:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_calculate_string_length(), but note that that function does not
 866:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * run in constant time.
 867:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 868:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \note On 32-bit platforms, this function will return error condition of \ref
 869:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * CborErrorDataTooLarge if the stream indicates a length that is too big to
 870:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * fit in 32-bit.
 871:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 872:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_is_length_known(), cbor_value_calculate_string_length()
 873:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 874:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 875:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
 876:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Calculates the length of the byte or text string that \a value points to and
 877:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * stores it in \a len. If the iterator \a value does not point to a text
 878:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * string or a byte string, the behaviour is undefined, so checking with \ref
 879:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_get_type, with \ref cbor_value_is_text_string or \ref
 880:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_is_byte_string is recommended.
 881:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 882:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * This function is different from cbor_value_get_string_length() in that it
 883:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * calculates the length even for strings sent in chunks. For that reason, this
 884:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * function may not run in constant time (it will run in O(n) time on the
 885:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * number of chunks). It does use constant memory (O(1)).
 886:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 887:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \note On 32-bit platforms, this function will return error condition of \ref
 888:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * CborErrorDataTooLarge if the stream indicates a length that is too big to
 889:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * fit in 32-bit.
 890:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
 891:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_string_length(), cbor_value_copy_string(), cbor_value_is_length_known()
 892:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
 893:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_value_calculate_string_length(const CborValue *value, size_t *len)
 894:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 895:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     *len = SIZE_MAX;
 896:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return _cbor_value_copy_string(value, NULL, len, NULL);
 897:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 898:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 899:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /* We return uintptr_t so that we can pass memcpy directly as the iteration
 900:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * function. The choice is to optimize for memcpy, which is used in the base
 901:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * parser API (cbor_value_copy_string), while memcmp is used in convenience API
 902:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * only. */
 903:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** typedef uintptr_t (*IterateFunction)(char *, const uint8_t *, size_t);
 904:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 905:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** static uintptr_t iterate_noop(char *dest, const uint8_t *src, size_t len)
 906:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
  55              		.loc 1 906 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              	.LVL2:
 907:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     (void)dest;
 908:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     (void)src;
 909:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     (void)len;
 910:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return true;
 911:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
  61              		.loc 1 911 0
  62 0000 0100A0E3 		mov	r0, #1
  63              	.LVL3:
  64 0004 1EFF2FE1 		bx	lr
  65              		.cfi_endproc
  66              	.LFE71:
  68              		.section	.text.get16,"ax",%progbits
  69              		.align	2
  70              		.syntax unified
  71              		.arm
  72              		.fpu neon
  74              	get16:
  75              	.LFB51:
  76              		.file 2 "D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor/extract_number_p.h"
   1:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** /****************************************************************************
   2:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** **
   3:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** Copyright (C) 2015 Intel Corporation
   4:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** **
   5:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** Permission is hereby granted, free of charge, to any person obtaining a copy
   6:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** of this software and associated documentation files (the "Software"), to deal
   7:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** in the Software without restriction, including without limitation the rights
   8:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** copies of the Software, and to permit persons to whom the Software is
  10:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** furnished to do so, subject to the following conditions:
  11:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** **
  12:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** The above copyright notice and this permission notice shall be included in
  13:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** all copies or substantial portions of the Software.
  14:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** **
  15:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ** THE SOFTWARE.
  22:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** **
  23:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** ****************************************************************************/
  24:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** 
  25:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** #define _BSD_SOURCE 1
  26:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** #define _DEFAULT_SOURCE 1
  27:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** #include "cbor.h"
  28:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** #include "cborconstants_p.h"
  29:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** #include "compilersupport_p.h"
  30:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** #include <stdlib.h>
  31:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** 
  32:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** static inline uint16_t get16(const uint8_t *ptr)
  33:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** {
  77              		.loc 2 33 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 8
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              	.LVL4:
  82 0000 07402DE9 		push	{r0, r1, r2, lr}
  83              		.cfi_def_cfa_offset 16
  84              		.cfi_offset 14, -4
  34:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     uint16_t result;
  35:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     memcpy(&result, ptr, sizeof(result));
  85              		.loc 2 35 0
  86 0004 0010A0E1 		mov	r1, r0
  87 0008 0220A0E3 		mov	r2, #2
  88 000c 06008DE2 		add	r0, sp, #6
  89              	.LVL5:
  90 0010 FEFFFFEB 		bl	memcpy
  91              	.LVL6:
  36:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     return cbor_ntohs(result);
  92              		.loc 2 36 0
  93 0014 B630DDE1 		ldrh	r3, [sp, #6]
  94 0018 0304A0E1 		lsl	r0, r3, #8
  95 001c 230480E1 		orr	r0, r0, r3, lsr #8
  37:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** }
  96              		.loc 2 37 0
  97 0020 7000FFE6 		uxth	r0, r0
  98 0024 0CD08DE2 		add	sp, sp, #12
  99              		.cfi_def_cfa_offset 4
 100              		@ sp needed
 101 0028 04F09DE4 		ldr	pc, [sp], #4
 102              		.cfi_endproc
 103              	.LFE51:
 105              		.section	.text.iterate_memcpy,"ax",%progbits
 106              		.align	2
 107              		.syntax unified
 108              		.arm
 109              		.fpu neon
 111              	iterate_memcpy:
 112              	.LFB73:
 912:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 913:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** static uintptr_t iterate_memcmp(char *s1, const uint8_t *s2, size_t len)
 914:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 915:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return memcmp(s1, (const char *)s2, len) == 0;
 916:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 917:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 918:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** static uintptr_t iterate_memcpy(char *dest, const uint8_t *src, size_t len)
 919:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 113              		.loc 1 919 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.LVL7:
 920:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return (uintptr_t)memcpy(dest, src, len);
 119              		.loc 1 920 0
 120 0000 FEFFFFEA 		b	memcpy
 121              	.LVL8:
 122              		.cfi_endproc
 123              	.LFE73:
 125              		.section	.text.preparse_value,"ax",%progbits
 126              		.align	2
 127              		.syntax unified
 128              		.arm
 129              		.fpu neon
 131              	preparse_value:
 132              	.LFB57:
 171:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     const CborParser *parser = it->parser;
 133              		.loc 1 171 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              	.LVL9:
 172:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->type = CborInvalidType;
 138              		.loc 1 172 0
 139 0000 003090E5 		ldr	r3, [r0]
 140              	.LVL10:
 173:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 141              		.loc 1 173 0
 142 0004 0020E0E3 		mvn	r2, #0
 171:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     const CborParser *parser = it->parser;
 143              		.loc 1 171 0
 144 0008 10402DE9 		push	{r4, lr}
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 4, -8
 147              		.cfi_offset 14, -4
 176:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorUnexpectedEOF;
 148              		.loc 1 176 0
 149 000c 04C090E5 		ldr	ip, [r0, #4]
 173:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 150              		.loc 1 173 0
 151 0010 0E20C0E5 		strb	r2, [r0, #14]
 176:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorUnexpectedEOF;
 152              		.loc 1 176 0
 153 0014 00E093E5 		ldr	lr, [r3]
 154 0018 0E005CE1 		cmp	ip, lr
 155 001c 0100001A 		bne	.L9
 156              	.LVL11:
 157              	.L15:
 177:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 158              		.loc 1 177 0
 159 0020 010100E3 		movw	r0, #257
 160 0024 1080BDE8 		pop	{r4, pc}
 161              	.LVL12:
 162              	.L9:
 179:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint8_t type = descriptor & MajorTypeMask;
 163              		.loc 1 179 0
 164 0028 0030DCE5 		ldrb	r3, [ip]	@ zero_extendqisi2
 165              	.LVL13:
 182:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->extra = (descriptor &= SmallValueMask);
 166              		.loc 1 182 0
 167 002c 0020A0E3 		mov	r2, #0
 168 0030 0040A0E1 		mov	r4, r0
 169 0034 0F20C0E5 		strb	r2, [r0, #15]
 180:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->type = type;
 170              		.loc 1 180 0
 171 0038 E01003E2 		and	r1, r3, #224
 172              	.LVL14:
 183:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 173              		.loc 1 183 0
 174 003c 1F3003E2 		and	r3, r3, #31
 175              	.LVL15:
 185:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (unlikely(descriptor != IndefiniteLength))
 176              		.loc 1 185 0
 177 0040 1B0053E3 		cmp	r3, #27
 181:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->flags = 0;
 178              		.loc 1 181 0
 179 0044 0E10C0E5 		strb	r1, [r0, #14]
 183:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 180              		.loc 1 183 0
 181 0048 BC30C0E1 		strh	r3, [r0, #12]	@ movhi
 185:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (unlikely(descriptor != IndefiniteLength))
 182              		.loc 1 185 0
 183 004c 0E00009A 		bls	.L11
 186:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
 184              		.loc 1 186 0
 185 0050 1F0053E3 		cmp	r3, #31
 187:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (likely(!is_fixed_type(type))) {
 186              		.loc 1 187 0
 187 0054 03310013 		movwne	r3, #259
 188              	.LVL16:
 186:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
 189              		.loc 1 186 0
 190 0058 0700001A 		bne	.L32
 188:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             /* special case */
 191              		.loc 1 188 0
 192 005c 0100A0E1 		mov	r0, r1
 193              	.LVL17:
 194 0060 FEFFFFEB 		bl	is_fixed_type
 195              	.LVL18:
 196 0064 000050E3 		cmp	r0, #0
 197 0068 0200001A 		bne	.L13
 190:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->type = type;
 198              		.loc 1 190 0
 199 006c 0430A0E3 		mov	r3, #4
 200 0070 0F30C4E5 		strb	r3, [r4, #15]
 192:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         }
 201              		.loc 1 192 0
 202 0074 1080BDE8 		pop	{r4, pc}
 203              	.L13:
 194:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 204              		.loc 1 194 0
 205 0078 023100E3 		movw	r3, #258
 206              	.L32:
 207 007c E00051E3 		cmp	r1, #224
 208 0080 050100E3 		movw	r0, #261
 209 0084 0300A001 		moveq	r0, r3
 210 0088 1080BDE8 		pop	{r4, pc}
 211              	.LVL19:
 212              	.L11:
 197:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (bytesNeeded + 1 > (size_t)(parser->end - it->ptr))
 213              		.loc 1 197 0
 214 008c 170053E3 		cmp	r3, #23
 198:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorUnexpectedEOF;
 215              		.loc 1 198 0
 216 0090 0CE04EE0 		sub	lr, lr, ip
 197:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (bytesNeeded + 1 > (size_t)(parser->end - it->ptr))
 217              		.loc 1 197 0
 218 0094 0120A083 		movhi	r2, #1
 219 0098 18004382 		subhi	r0, r3, #24
 220              	.LVL20:
 221 009c 1220A081 		lslhi	r2, r2, r0
 222              	.LVL21:
 198:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorUnexpectedEOF;
 223              		.loc 1 198 0
 224 00a0 012082E2 		add	r2, r2, #1
 225              	.LVL22:
 226 00a4 0E0052E1 		cmp	r2, lr
 227 00a8 DCFFFF8A 		bhi	.L15
 201:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (majortype == NegativeIntegerType) {
 228              		.loc 1 201 0
 229 00ac A112A0E1 		lsr	r1, r1, #5
 230              	.LVL23:
 202:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->flags |= CborIteratorFlag_NegativeInteger;
 231              		.loc 1 202 0
 232 00b0 010051E3 		cmp	r1, #1
 233 00b4 1200001A 		bne	.L16
 203:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->type = CborIntegerType;
 234              		.loc 1 203 0
 235 00b8 0220A0E3 		mov	r2, #2
 236              	.LVL24:
 237 00bc 0F20C4E5 		strb	r2, [r4, #15]
 204:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     } else if (majortype == SimpleTypesType) {
 238              		.loc 1 204 0
 239 00c0 0020A0E3 		mov	r2, #0
 240 00c4 0E20C4E5 		strb	r2, [r4, #14]
 241              	.LVL25:
 242              	.L17:
 244:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborNoError;
 243              		.loc 1 244 0
 244 00c8 170053E3 		cmp	r3, #23
 245 00cc 2300009A 		bls	.L30
 247:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->extra = (uint8_t)it->ptr[1];
 246              		.loc 1 247 0
 247 00d0 180053E3 		cmp	r3, #24
 248:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     else if (descriptor == Value16Bit)
 248              		.loc 1 248 0
 249 00d4 0130DC05 		ldrbeq	r3, [ip, #1]	@ zero_extendqisi2
 250              	.LVL26:
 251 00d8 BC30C401 		strheq	r3, [r4, #12]	@ movhi
 247:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->extra = (uint8_t)it->ptr[1];
 252              		.loc 1 247 0
 253 00dc 1F00000A 		beq	.L30
 249:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->extra = get16(it->ptr + 1);
 254              		.loc 1 249 0
 255 00e0 190053E3 		cmp	r3, #25
 252:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 256              		.loc 1 252 0
 257 00e4 0F30D415 		ldrbne	r3, [r4, #15]	@ zero_extendqisi2
 258 00e8 01308313 		orrne	r3, r3, #1
 259 00ec 0F30C415 		strbne	r3, [r4, #15]
 249:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->extra = get16(it->ptr + 1);
 260              		.loc 1 249 0
 261 00f0 1A00001A 		bne	.L30
 250:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     else
 262              		.loc 1 250 0
 263 00f4 01008CE2 		add	r0, ip, #1
 264 00f8 FEFFFFEB 		bl	get16
 265              	.LVL27:
 266 00fc BC00C4E1 		strh	r0, [r4, #12]	@ movhi
 267 0100 160000EA 		b	.L30
 268              	.LVL28:
 269              	.L16:
 205:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         switch (descriptor) {
 270              		.loc 1 205 0
 271 0104 070051E3 		cmp	r1, #7
 272 0108 EEFFFF1A 		bne	.L17
 206:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         case FalseValue:
 273              		.loc 1 206 0
 274 010c 143043E2 		sub	r3, r3, #20
 275              	.LVL29:
 276 0110 070053E3 		cmp	r3, #7
 277 0114 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 278 0118 100000EA 		b	.L30
 279              	.L19:
 280 011c 3C010000 		.word	.L18
 281 0120 58010000 		.word	.L20
 282 0124 58010000 		.word	.L20
 283 0128 58010000 		.word	.L20
 284 012c 68010000 		.word	.L21
 285 0130 58010000 		.word	.L20
 286 0134 50010000 		.word	.L22
 287 0138 50010000 		.word	.L22
 288              	.L18:
 208:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->type = CborBooleanType;
 289              		.loc 1 208 0
 290 013c 0000A0E3 		mov	r0, #0
 209:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             break;
 291              		.loc 1 209 0
 292 0140 0A30E0E3 		mvn	r3, #10
 293              	.LVL30:
 208:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->type = CborBooleanType;
 294              		.loc 1 208 0
 295 0144 BC00C4E1 		strh	r0, [r4, #12]	@ movhi
 209:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             break;
 296              		.loc 1 209 0
 297 0148 0E30C4E5 		strb	r3, [r4, #14]
 298              	.LVL31:
 210:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 299              		.loc 1 210 0
 300 014c 1080BDE8 		pop	{r4, pc}
 301              	.LVL32:
 302              	.L22:
 214:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             /* fall through */
 303              		.loc 1 214 0
 304 0150 0130A0E3 		mov	r3, #1
 305              	.LVL33:
 306 0154 0F30C4E5 		strb	r3, [r4, #15]
 307              	.L20:
 220:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             break;
 308              		.loc 1 220 0
 309 0158 0030DCE5 		ldrb	r3, [ip]	@ zero_extendqisi2
 310 015c 0E30C4E5 		strb	r3, [r4, #14]
 311              	.LVL34:
 312              	.L30:
 240:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 313              		.loc 1 240 0
 314 0160 0000A0E3 		mov	r0, #0
 254:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 315              		.loc 1 254 0
 316 0164 1080BDE8 		pop	{r4, pc}
 317              	.LVL35:
 318              	.L21:
 224:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #ifndef CBOR_PARSER_NO_STRICT_CHECKS
 319              		.loc 1 224 0
 320 0168 0130DCE5 		ldrb	r3, [ip, #1]	@ zero_extendqisi2
 321              	.LVL36:
 226:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 it->type = CborInvalidType;
 322              		.loc 1 226 0
 323 016c 1F0053E3 		cmp	r3, #31
 224:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** #ifndef CBOR_PARSER_NO_STRICT_CHECKS
 324              		.loc 1 224 0
 325 0170 BC30C4E1 		strh	r3, [r4, #12]	@ movhi
 226:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 it->type = CborInvalidType;
 326              		.loc 1 226 0
 327 0174 F9FFFF8A 		bhi	.L30
 227:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return CborErrorIllegalSimpleType;
 328              		.loc 1 227 0
 329 0178 0030E0E3 		mvn	r3, #0
 228:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             }
 330              		.loc 1 228 0
 331 017c 060100E3 		movw	r0, #262
 227:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return CborErrorIllegalSimpleType;
 332              		.loc 1 227 0
 333 0180 0E30C4E5 		strb	r3, [r4, #14]
 334              	.LVL37:
 228:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             }
 335              		.loc 1 228 0
 336 0184 1080BDE8 		pop	{r4, pc}
 337              		.cfi_endproc
 338              	.LFE57:
 340              		.section	.text.preparse_next_value,"ax",%progbits
 341              		.align	2
 342              		.syntax unified
 343              		.arm
 344              		.fpu neon
 346              	preparse_next_value:
 347              	.LFB58:
 257:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (it->remaining != UINT32_MAX) {
 348              		.loc 1 257 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353              	.LVL38:
 258:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         /* don't decrement the item count if the current item is tag: they don't count */
 354              		.loc 1 258 0
 355 0000 083090E5 		ldr	r3, [r0, #8]
 356 0004 010073E3 		cmn	r3, #1
 357 0008 0900000A 		beq	.L34
 260:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->type = CborInvalidType;
 358              		.loc 1 260 0
 359 000c 0E20D0E5 		ldrb	r2, [r0, #14]	@ zero_extendqisi2
 360 0010 C00052E3 		cmp	r2, #192
 361 0014 0500000A 		beq	.L35
 260:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->type = CborInvalidType;
 362              		.loc 1 260 0 is_stmt 0 discriminator 1
 363 0018 013043E2 		sub	r3, r3, #1
 364 001c 000053E3 		cmp	r3, #0
 365 0020 083080E5 		str	r3, [r0, #8]
 261:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborNoError;
 366              		.loc 1 261 0 is_stmt 1 discriminator 1
 367 0024 0030E003 		mvneq	r3, #0
 368 0028 0E30C005 		strbeq	r3, [r0, #14]
 260:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             it->type = CborInvalidType;
 369              		.loc 1 260 0 discriminator 1
 370 002c 0C00000A 		beq	.L33
 371              	.L35:
 272:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 372              		.loc 1 272 0
 373 0030 FEFFFFEA 		b	preparse_value
 374              	.LVL39:
 375              	.L34:
 264:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         /* end of map or array */
 376              		.loc 1 264 0 discriminator 1
 377 0034 060090E8 		ldm	r0, {r1, r2}
 378 0038 001091E5 		ldr	r1, [r1]
 379 003c 010052E1 		cmp	r2, r1
 380 0040 FAFFFF0A 		beq	.L35
 264:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         /* end of map or array */
 381              		.loc 1 264 0 is_stmt 0 discriminator 2
 382 0044 0010D2E5 		ldrb	r1, [r2]	@ zero_extendqisi2
 383 0048 FF0051E3 		cmp	r1, #255
 384 004c F7FFFF1A 		bne	.L35
 266:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->type = CborInvalidType;
 385              		.loc 1 266 0 is_stmt 1
 386 0050 012082E2 		add	r2, r2, #1
 267:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->remaining = 0;
 387              		.loc 1 267 0
 388 0054 0E30C0E5 		strb	r3, [r0, #14]
 268:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborNoError;
 389              		.loc 1 268 0
 390 0058 0030A0E3 		mov	r3, #0
 266:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->type = CborInvalidType;
 391              		.loc 1 266 0
 392 005c 042080E5 		str	r2, [r0, #4]
 268:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborNoError;
 393              		.loc 1 268 0
 394 0060 083080E5 		str	r3, [r0, #8]
 395              	.L33:
 273:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 396              		.loc 1 273 0
 397 0064 0000A0E3 		mov	r0, #0
 398              	.LVL40:
 399 0068 1EFF2FE1 		bx	lr
 400              		.cfi_endproc
 401              	.LFE58:
 403              		.section	.text.extract_number,"ax",%progbits
 404              		.align	2
 405              		.syntax unified
 406              		.arm
 407              		.fpu neon
 409              	extract_number:
 410              	.LFB54:
  38:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** 
  39:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** static inline uint32_t get32(const uint8_t *ptr)
  40:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** {
  41:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     uint32_t result;
  42:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     memcpy(&result, ptr, sizeof(result));
  43:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     return cbor_ntohl(result);
  44:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** }
  45:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** 
  46:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** static inline uint64_t get64(const uint8_t *ptr)
  47:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** {
  48:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     uint64_t result;
  49:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     memcpy(&result, ptr, sizeof(result));
  50:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     return cbor_ntohll(result);
  51:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** }
  52:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** 
  53:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** static CborError extract_number(const uint8_t **ptr, const uint8_t *end, uint64_t *len)
  54:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** {
 411              		.loc 2 54 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 8
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              	.LVL41:
 416 0000 73402DE9 		push	{r0, r1, r4, r5, r6, lr}
 417              		.cfi_def_cfa_offset 24
 418              		.cfi_offset 4, -16
 419              		.cfi_offset 5, -12
 420              		.cfi_offset 6, -8
 421              		.cfi_offset 14, -4
 422              		.loc 2 54 0
 423 0004 01C0A0E1 		mov	ip, r1
  55:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     uint8_t additional_information = **ptr & SmallValueMask;
 424              		.loc 2 55 0
 425 0008 00E090E5 		ldr	lr, [r0]
 426 000c 0E10A0E1 		mov	r1, lr
 427              	.LVL42:
 428 0010 0130D1E4 		ldrb	r3, [r1], #1	@ zero_extendqisi2
 429 0014 1F3003E2 		and	r3, r3, #31
 430              	.LVL43:
  56:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     ++*ptr;
 431              		.loc 2 56 0
 432 0018 001080E5 		str	r1, [r0]
  57:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     if (additional_information < Value8Bit) {
 433              		.loc 2 57 0
 434 001c 170053E3 		cmp	r3, #23
 435 0020 0500008A 		bhi	.L41
  58:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         *len = additional_information;
 436              		.loc 2 58 0
 437 0024 7300EFE6 		uxtb	r0, r3
 438              	.LVL44:
 439 0028 0010A0E3 		mov	r1, #0
 440 002c F000C2E1 		strd	r0, [r2]
 441              	.LVL45:
 442              	.L51:
  59:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         return CborNoError;
  60:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     }
  61:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     if (unlikely(additional_information > Value64Bit))
  62:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         return CborErrorIllegalNumber;
  63:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** 
  64:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
  65:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     if (unlikely(bytesNeeded > (size_t)(end - *ptr))) {
  66:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         return CborErrorUnexpectedEOF;
  67:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     } else if (bytesNeeded == 1) {
  68:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         *len = (uint8_t)(*ptr)[0];
  69:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     } else if (bytesNeeded == 2) {
  70:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         *len = get16(*ptr);
  71:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     } else if (bytesNeeded == 4) {
  72:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         *len = get32(*ptr);
  73:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     } else {
  74:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         *len = get64(*ptr);
  75:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     }
  76:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     *ptr += bytesNeeded;
  77:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     return CborNoError;
 443              		.loc 2 77 0
 444 0030 0000A0E3 		mov	r0, #0
 445              	.L40:
  78:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** }
 446              		.loc 2 78 0
 447 0034 08D08DE2 		add	sp, sp, #8
 448              		.cfi_remember_state
 449              		.cfi_def_cfa_offset 16
 450              		@ sp needed
 451 0038 7080BDE8 		pop	{r4, r5, r6, pc}
 452              	.LVL46:
 453              	.L41:
 454              		.cfi_restore_state
  61:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         return CborErrorIllegalNumber;
 455              		.loc 2 61 0
 456 003c 1B0053E3 		cmp	r3, #27
  62:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** 
 457              		.loc 2 62 0
 458 0040 05010083 		movwhi	r0, #261
 459              	.LVL47:
  61:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         return CborErrorIllegalNumber;
 460              		.loc 2 61 0
 461 0044 FAFFFF8A 		bhi	.L40
  64:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     if (unlikely(bytesNeeded > (size_t)(end - *ptr))) {
 462              		.loc 2 64 0
 463 0048 183043E2 		sub	r3, r3, #24
 464              	.LVL48:
 465 004c 0150A0E3 		mov	r5, #1
 466 0050 1553A0E1 		lsl	r5, r5, r3
 467              	.LVL49:
  65:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         return CborErrorUnexpectedEOF;
 468              		.loc 2 65 0
 469 0054 01C04CE0 		sub	ip, ip, r1
 470              	.LVL50:
 471 0058 0C0055E1 		cmp	r5, ip
  66:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     } else if (bytesNeeded == 1) {
 472              		.loc 2 66 0
 473 005c 01010083 		movwhi	r0, #257
  65:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         return CborErrorUnexpectedEOF;
 474              		.loc 2 65 0
 475 0060 F3FFFF8A 		bhi	.L40
  67:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         *len = (uint8_t)(*ptr)[0];
 476              		.loc 2 67 0
 477 0064 010055E3 		cmp	r5, #1
 478 0068 0240A0E1 		mov	r4, r2
 479 006c 0060A0E1 		mov	r6, r0
 480 0070 0600001A 		bne	.L43
  68:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     } else if (bytesNeeded == 2) {
 481              		.loc 2 68 0
 482 0074 0120DEE5 		ldrb	r2, [lr, #1]	@ zero_extendqisi2
 483              	.LVL51:
 484 0078 0030A0E3 		mov	r3, #0
 485              	.LVL52:
 486 007c F020C4E1 		strd	r2, [r4]
 487              	.L44:
  76:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     return CborNoError;
 488              		.loc 2 76 0
 489 0080 003096E5 		ldr	r3, [r6]
 490 0084 053083E0 		add	r3, r3, r5
 491 0088 003086E5 		str	r3, [r6]
 492 008c E7FFFFEA 		b	.L51
 493              	.LVL53:
 494              	.L43:
  69:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         *len = get16(*ptr);
 495              		.loc 2 69 0
 496 0090 020055E3 		cmp	r5, #2
 497 0094 0500001A 		bne	.L45
  70:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     } else if (bytesNeeded == 4) {
 498              		.loc 2 70 0
 499 0098 0100A0E1 		mov	r0, r1
 500 009c FEFFFFEB 		bl	get16
 501              	.LVL54:
 502 00a0 B00B80EE 		vdup.16	d16, r0
 503 00a4 B000D0F3 		vshr.u64	d16, d16, #48
 504 00a8 000BC4ED 		vstr.64	d16, [r4]	@ int
 505 00ac F3FFFFEA 		b	.L44
 506              	.LVL55:
 507              	.L45:
  71:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****         *len = get32(*ptr);
 508              		.loc 2 71 0
 509 00b0 040055E3 		cmp	r5, #4
 510 00b4 0800001A 		bne	.L46
 511              	.LVL56:
 512              	.LBB46:
 513              	.LBB47:
  42:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     return cbor_ntohl(result);
 514              		.loc 2 42 0
 515 00b8 0520A0E1 		mov	r2, r5
 516              	.LVL57:
 517 00bc 0D00A0E1 		mov	r0, sp
 518 00c0 FEFFFFEB 		bl	memcpy
 519              	.LVL58:
  43:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** }
 520              		.loc 2 43 0
 521 00c4 00309DE5 		ldr	r3, [sp]
 522 00c8 333FBFE6 		rev	r3, r3
 523              	.LBE47:
 524              	.LBE46:
  72:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     } else {
 525              		.loc 2 72 0
 526 00cc 003084E5 		str	r3, [r4]
 527 00d0 0030A0E3 		mov	r3, #0
 528              	.L50:
  74:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     }
 529              		.loc 2 74 0
 530 00d4 043084E5 		str	r3, [r4, #4]
 531 00d8 E8FFFFEA 		b	.L44
 532              	.LVL59:
 533              	.L46:
 534              	.LBB48:
 535              	.LBB49:
  49:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     return cbor_ntohll(result);
 536              		.loc 2 49 0
 537 00dc 0820A0E3 		mov	r2, #8
 538              	.LVL60:
 539 00e0 0D00A0E1 		mov	r0, sp
 540 00e4 FEFFFFEB 		bl	memcpy
 541              	.LVL61:
  50:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** }
 542              		.loc 2 50 0
 543 00e8 04209DE5 		ldr	r2, [sp, #4]
 544 00ec 00309DE5 		ldr	r3, [sp]
 545 00f0 322FBFE6 		rev	r2, r2
 546 00f4 333FBFE6 		rev	r3, r3
 547              	.LBE49:
 548              	.LBE48:
  74:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     }
 549              		.loc 2 74 0
 550 00f8 002084E5 		str	r2, [r4]
 551 00fc F4FFFFEA 		b	.L50
 552              		.cfi_endproc
 553              	.LFE54:
 555              		.section	.text.advance_internal,"ax",%progbits
 556              		.align	2
 557              		.syntax unified
 558              		.arm
 559              		.fpu neon
 561              	advance_internal:
 562              	.LFB59:
 276:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint64_t length;
 563              		.loc 1 276 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 8
 566              		@ frame_needed = 0, uses_anonymous_args = 0
 567              	.LVL62:
 568 0000 13402DE9 		push	{r0, r1, r4, lr}
 569              		.cfi_def_cfa_offset 16
 570              		.cfi_offset 4, -8
 571              		.cfi_offset 14, -4
 276:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint64_t length;
 572              		.loc 1 276 0
 573 0004 0040A0E1 		mov	r4, r0
 278:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(err == CborNoError);
 574              		.loc 1 278 0
 575 0008 043090E4 		ldr	r3, [r0], #4
 576              	.LVL63:
 577 000c 0D20A0E1 		mov	r2, sp
 578 0010 001093E5 		ldr	r1, [r3]
 579 0014 FEFFFFEB 		bl	extract_number
 580              	.LVL64:
 279:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 581              		.loc 1 279 0
 582 0018 000050E3 		cmp	r0, #0
 583 001c 0400000A 		beq	.L53
 279:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 584              		.loc 1 279 0 is_stmt 0 discriminator 1
 585 0020 70309FE5 		ldr	r3, .L59
 586 0024 171100E3 		movw	r1, #279
 587 0028 6C209FE5 		ldr	r2, .L59+4
 588              	.L58:
 282:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
 589              		.loc 1 282 0 is_stmt 1 discriminator 1
 590 002c 6C009FE5 		ldr	r0, .L59+8
 591              	.LVL65:
 592 0030 FEFFFFEB 		bl	__assert_func
 593              	.LVL66:
 594              	.L53:
 281:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         assert(length == (size_t)length);
 595              		.loc 1 281 0
 596 0034 0E30D4E5 		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 597 0038 DF3003E2 		and	r3, r3, #223
 598 003c 400053E3 		cmp	r3, #64
 599 0040 1000001A 		bne	.L54
 282:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
 600              		.loc 1 282 0
 601 0044 D020CDE1 		ldrd	r2, [sp]
 602 0048 0010A0E3 		mov	r1, #0
 603 004c 010053E1 		cmp	r3, r1
 604 0050 02005201 		cmpeq	r2, r2
 282:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
 605              		.loc 1 282 0 is_stmt 0 discriminator 1
 606 0054 48309F15 		ldrne	r3, .L59+12
 607 0058 1A110013 		movwne	r1, #282
 608 005c 38209F15 		ldrne	r2, .L59+4
 609 0060 F1FFFF1A 		bne	.L58
 610              	.L55:
 283:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->ptr += length;
 611              		.loc 1 283 0 is_stmt 1
 612 0064 0F10D4E5 		ldrb	r1, [r4, #15]	@ zero_extendqisi2
 613 0068 040011E3 		tst	r1, #4
 284:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 614              		.loc 1 284 0
 615 006c 04309405 		ldreq	r3, [r4, #4]
 616 0070 02308300 		addeq	r3, r3, r2
 617 0074 04308405 		streq	r3, [r4, #4]
 283:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->ptr += length;
 618              		.loc 1 283 0
 283:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         it->ptr += length;
 619              		.loc 1 283 0 is_stmt 0 discriminator 1
 620 0078 28309F15 		ldrne	r3, .L59+16
 621 007c 1B110013 		movwne	r1, #283
 622 0080 14209F15 		ldrne	r2, .L59+4
 623 0084 E8FFFF1A 		bne	.L58
 624              	.L54:
 287:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 625              		.loc 1 287 0 is_stmt 1
 626 0088 0400A0E1 		mov	r0, r4
 627              	.LVL67:
 628 008c FEFFFFEB 		bl	preparse_next_value
 629              	.LVL68:
 288:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 630              		.loc 1 288 0
 631 0090 08D08DE2 		add	sp, sp, #8
 632              		.cfi_def_cfa_offset 8
 633              		@ sp needed
 634 0094 1080BDE8 		pop	{r4, pc}
 635              	.LVL69:
 636              	.L60:
 637              		.align	2
 638              	.L59:
 639 0098 00000000 		.word	.LC0
 640 009c 00000000 		.word	.LANCHOR0
 641 00a0 13000000 		.word	.LC1
 642 00a4 5E000000 		.word	.LC2
 643 00a8 77000000 		.word	.LC3
 644              		.cfi_endproc
 645              	.LFE59:
 647              		.section	.text.iterate_memcmp,"ax",%progbits
 648              		.align	2
 649              		.syntax unified
 650              		.arm
 651              		.fpu neon
 653              	iterate_memcmp:
 654              	.LFB72:
 914:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return memcmp(s1, (const char *)s2, len) == 0;
 655              		.loc 1 914 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              	.LVL70:
 660 0000 10402DE9 		push	{r4, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 4, -8
 663              		.cfi_offset 14, -4
 915:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 664              		.loc 1 915 0
 665 0004 FEFFFFEB 		bl	memcmp
 666              	.LVL71:
 916:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 667              		.loc 1 916 0
 668 0008 100F6FE1 		clz	r0, r0
 669 000c A002A0E1 		lsr	r0, r0, #5
 670 0010 1080BDE8 		pop	{r4, pc}
 671              		.cfi_endproc
 672              	.LFE72:
 674              		.section	.text.iterate_string_chunks,"ax",%progbits
 675              		.align	2
 676              		.syntax unified
 677              		.arm
 678              		.fpu neon
 680              	iterate_string_chunks:
 681              	.LFB74:
 921:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 922:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 923:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
 924:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                                        bool *result, CborValue *next, IterateFunction func)
 925:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 682              		.loc 1 925 0
 683              		.cfi_startproc
 684              		@ args = 8, pretend = 0, frame = 24
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686              	.LVL72:
 687 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 688              		.cfi_def_cfa_offset 36
 689              		.cfi_offset 4, -36
 690              		.cfi_offset 5, -32
 691              		.cfi_offset 6, -28
 692              		.cfi_offset 7, -24
 693              		.cfi_offset 8, -20
 694              		.cfi_offset 9, -16
 695              		.cfi_offset 10, -12
 696              		.cfi_offset 11, -8
 697              		.cfi_offset 14, -4
 698 0004 0360A0E1 		mov	r6, r3
 926:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
 699              		.loc 1 926 0
 700 0008 0E30D0E5 		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 701              	.LVL73:
 925:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
 702              		.loc 1 925 0
 703 000c 1CD04DE2 		sub	sp, sp, #28
 704              		.cfi_def_cfa_offset 64
 925:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
 705              		.loc 1 925 0
 706 0010 40709DE5 		ldr	r7, [sp, #64]
 707              		.loc 1 926 0
 708 0014 DF3003E2 		and	r3, r3, #223
 709 0018 400053E3 		cmp	r3, #64
 710 001c 0400000A 		beq	.L64
 711              		.loc 1 926 0 is_stmt 0 discriminator 2
 712 0020 24329FE5 		ldr	r3, .L104
 713 0024 9E1300E3 		movw	r1, #926
 714              	.LVL74:
 715 0028 20229FE5 		ldr	r2, .L104+4
 716              	.LVL75:
 717 002c 20029FE5 		ldr	r0, .L104+8
 718              	.LVL76:
 719 0030 FEFFFFEB 		bl	__assert_func
 720              	.LVL77:
 721              	.L64:
 722 0034 02A0A0E1 		mov	r10, r2
 927:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 928:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     size_t total;
 929:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     CborError err;
 930:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     const uint8_t *ptr = value->ptr;
 931:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (cbor_value_is_length_known(value)) {
 723              		.loc 1 931 0 is_stmt 1
 724 0038 0F20D0E5 		ldrb	r2, [r0, #15]	@ zero_extendqisi2
 725              	.LVL78:
 930:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (cbor_value_is_length_known(value)) {
 726              		.loc 1 930 0
 727 003c 043090E5 		ldr	r3, [r0, #4]
 728 0040 0040A0E1 		mov	r4, r0
 729 0044 01B0A0E1 		mov	fp, r1
 730              		.loc 1 931 0
 731 0048 040012E3 		tst	r2, #4
 930:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (cbor_value_is_length_known(value)) {
 732              		.loc 1 930 0
 733 004c 0C308DE5 		str	r3, [sp, #12]
 734              	.LVL79:
 735              		.loc 1 931 0
 736 0050 3A00001A 		bne	.L65
 737              	.LVL80:
 738              	.LBB58:
 739              	.LBB59:
 152:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (err) {
 740              		.loc 1 152 0
 741 0054 003090E5 		ldr	r3, [r0]
 742 0058 10208DE2 		add	r2, sp, #16
 743 005c 0C008DE2 		add	r0, sp, #12
 744              	.LVL81:
 745 0060 001093E5 		ldr	r1, [r3]
 746              	.LVL82:
 747 0064 FEFFFFEB 		bl	extract_number
 748              	.LVL83:
 153:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *len = 0;
 749              		.loc 1 153 0
 750 0068 000050E3 		cmp	r0, #0
 751 006c 3E00001A 		bne	.L63
 158:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (v != *len)
 752              		.loc 1 158 0
 753 0070 D081CDE1 		ldrd	r8, [sp, #16]
 159:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorDataTooLarge;
 754              		.loc 1 159 0
 755 0074 0030A0E3 		mov	r3, #0
 756 0078 090053E1 		cmp	r3, r9
 158:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (v != *len)
 757              		.loc 1 158 0
 758 007c 0850A0E1 		mov	r5, r8
 759              	.LVL84:
 159:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorDataTooLarge;
 760              		.loc 1 159 0
 761 0080 08005801 		cmpeq	r8, r8
 762 0084 6E00001A 		bne	.L87
 763              	.LVL85:
 764              	.LBE59:
 765              	.LBE58:
 932:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         /* easy case: fixed length */
 933:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         err = extract_length(value->parser, &ptr, &total);
 934:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
 935:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return err;
 936:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (total > (size_t)(value->parser->end - ptr))
 766              		.loc 1 936 0
 767 0088 003094E5 		ldr	r3, [r4]
 768 008c 0C109DE5 		ldr	r1, [sp, #12]
 769 0090 003093E5 		ldr	r3, [r3]
 770 0094 013043E0 		sub	r3, r3, r1
 771 0098 080053E1 		cmp	r3, r8
 772 009c 3100003A 		bcc	.L76
 937:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborErrorUnexpectedEOF;
 938:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (total <= *buflen)
 773              		.loc 1 938 0
 774 00a0 00309AE5 		ldr	r3, [r10]
 775 00a4 080053E1 		cmp	r3, r8
 776 00a8 0500003A 		bcc	.L68
 939:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             *result = !!func(buffer, ptr, total);
 777              		.loc 1 939 0
 778 00ac 0820A0E1 		mov	r2, r8
 779 00b0 0B00A0E1 		mov	r0, fp
 780 00b4 44309DE5 		ldr	r3, [sp, #68]
 781 00b8 33FF2FE1 		blx	r3
 782              	.LVL86:
 783 00bc 000090E2 		adds	r0, r0, #0
 784 00c0 0100A013 		movne	r0, #1
 785              	.L68:
 940:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         else
 941:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             *result = false;
 942:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         ptr += total;
 786              		.loc 1 942 0
 787 00c4 0C309DE5 		ldr	r3, [sp, #12]
 941:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         ptr += total;
 788              		.loc 1 941 0
 789 00c8 0000C6E5 		strb	r0, [r6]
 790              		.loc 1 942 0
 791 00cc 088083E0 		add	r8, r3, r8
 792 00d0 0C808DE5 		str	r8, [sp, #12]
 793              	.L70:
 943:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     } else {
 944:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         /* chunked */
 945:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         ++ptr;
 946:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         total = 0;
 947:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *result = true;
 948:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         while (true) {
 949:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             size_t chunkLen;
 950:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             size_t newTotal;
 951:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 952:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (ptr == value->parser->end)
 953:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return CborErrorUnexpectedEOF;
 954:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 955:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (*ptr == (uint8_t)BreakByte) {
 956:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 ++ptr;
 957:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 break;
 958:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             }
 959:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 960:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             /* is this the right type? */
 961:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if ((*ptr & MajorTypeMask) != value->type)
 962:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return CborErrorIllegalType;
 963:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 964:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             err = extract_length(value->parser, &ptr, &chunkLen);
 965:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (err)
 966:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return err;
 967:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 968:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
 969:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return CborErrorDataTooLarge;
 970:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 971:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (chunkLen > (size_t)(value->parser->end - ptr))
 972:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return CborErrorUnexpectedEOF;
 973:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 974:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (*result && *buflen >= newTotal)
 975:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 *result = !!func(buffer + total, ptr, chunkLen);
 976:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             else
 977:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 *result = false;
 978:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 979:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             ptr += chunkLen;
 980:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             total = newTotal;
 981:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         }
 982:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 983:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 984:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     /* is there enough room for the ending NUL byte? */
 985:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (*result && *buflen > total) {
 794              		.loc 1 985 0
 795 00d4 0030D6E5 		ldrb	r3, [r6]	@ zero_extendqisi2
 796 00d8 000053E3 		cmp	r3, #0
 797 00dc 0C00000A 		beq	.L80
 798              		.loc 1 985 0 is_stmt 0 discriminator 1
 799 00e0 00309AE5 		ldr	r3, [r10]
 800 00e4 050053E1 		cmp	r3, r5
 801 00e8 0900009A 		bls	.L80
 802              	.LBB60:
 986:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         uint8_t nul[] = { 0 };
 803              		.loc 1 986 0 is_stmt 1
 804 00ec 18108DE2 		add	r1, sp, #24
 805 00f0 0030A0E3 		mov	r3, #0
 806 00f4 083061E5 		strb	r3, [r1, #-8]!
 987:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *result = !!func(buffer + total, nul, 1);
 807              		.loc 1 987 0
 808 00f8 0120A0E3 		mov	r2, #1
 809 00fc 05008BE0 		add	r0, fp, r5
 810 0100 44309DE5 		ldr	r3, [sp, #68]
 811 0104 33FF2FE1 		blx	r3
 812              	.LVL87:
 813 0108 000090E2 		adds	r0, r0, #0
 814 010c 0100A013 		movne	r0, #1
 815 0110 0000C6E5 		strb	r0, [r6]
 816              	.L80:
 817              	.LBE60:
 988:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 989:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     *buflen = total;
 990:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 991:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (next) {
 818              		.loc 1 991 0
 819 0114 000057E3 		cmp	r7, #0
 989:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 820              		.loc 1 989 0
 821 0118 00508AE5 		str	r5, [r10]
 992:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *next = *value;
 993:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         next->ptr = ptr;
 994:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return preparse_next_value(next);
 995:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 996:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 822              		.loc 1 996 0
 823 011c 0700A001 		moveq	r0, r7
 991:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *next = *value;
 824              		.loc 1 991 0
 825 0120 1100000A 		beq	.L63
 992:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *next = *value;
 826              		.loc 1 992 0
 827 0124 0F0094E8 		ldm	r4, {r0, r1, r2, r3}
 828 0128 0F0087E8 		stm	r7, {r0, r1, r2, r3}
 994:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 829              		.loc 1 994 0
 830 012c 0700A0E1 		mov	r0, r7
 993:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return preparse_next_value(next);
 831              		.loc 1 993 0
 832 0130 0C309DE5 		ldr	r3, [sp, #12]
 833 0134 043087E5 		str	r3, [r7, #4]
 994:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 834              		.loc 1 994 0
 835 0138 FEFFFFEB 		bl	preparse_next_value
 836              	.LVL88:
 837 013c 0A0000EA 		b	.L63
 838              	.LVL89:
 839              	.L65:
 945:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         total = 0;
 840              		.loc 1 945 0
 841 0140 013083E2 		add	r3, r3, #1
 946:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *result = true;
 842              		.loc 1 946 0
 843 0144 0050A0E3 		mov	r5, #0
 945:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         total = 0;
 844              		.loc 1 945 0
 845 0148 0C308DE5 		str	r3, [sp, #12]
 846              	.LVL90:
 947:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         while (true) {
 847              		.loc 1 947 0
 848 014c 0130A0E3 		mov	r3, #1
 849 0150 0030C6E5 		strb	r3, [r6]
 850              	.LVL91:
 851              	.L79:
 852              	.LBB61:
 952:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return CborErrorUnexpectedEOF;
 853              		.loc 1 952 0
 854 0154 003094E5 		ldr	r3, [r4]
 855 0158 001093E5 		ldr	r1, [r3]
 856 015c 0C309DE5 		ldr	r3, [sp, #12]
 857 0160 030051E1 		cmp	r1, r3
 858 0164 0200001A 		bne	.L71
 859              	.L76:
 953:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 860              		.loc 1 953 0
 861 0168 010100E3 		movw	r0, #257
 862              	.LVL92:
 863              	.L63:
 864              	.LBE61:
 997:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 865              		.loc 1 997 0
 866 016c 1CD08DE2 		add	sp, sp, #28
 867              		.cfi_remember_state
 868              		.cfi_def_cfa_offset 36
 869              		@ sp needed
 870 0170 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 871              	.LVL93:
 872              	.L71:
 873              		.cfi_restore_state
 874              	.LBB70:
 955:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 ++ptr;
 875              		.loc 1 955 0
 876 0174 0020D3E5 		ldrb	r2, [r3]	@ zero_extendqisi2
 877 0178 FF0052E3 		cmp	r2, #255
 956:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 break;
 878              		.loc 1 956 0
 879 017c 01308302 		addeq	r3, r3, #1
 880 0180 0C308D05 		streq	r3, [sp, #12]
 881              	.LVL94:
 882 0184 D2FFFF0A 		beq	.L70
 883              	.L73:
 961:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return CborErrorIllegalType;
 884              		.loc 1 961 0
 885 0188 0E30D4E5 		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 886 018c 1F20C2E3 		bic	r2, r2, #31
 887 0190 030052E1 		cmp	r2, r3
 888 0194 2800001A 		bne	.L86
 889              	.LVL95:
 890              	.LBB62:
 891              	.LBB63:
 152:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (err) {
 892              		.loc 1 152 0
 893 0198 10208DE2 		add	r2, sp, #16
 894 019c 0C008DE2 		add	r0, sp, #12
 895              	.LVL96:
 896 01a0 FEFFFFEB 		bl	extract_number
 897              	.LVL97:
 153:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *len = 0;
 898              		.loc 1 153 0
 899 01a4 000050E3 		cmp	r0, #0
 900 01a8 EFFFFF1A 		bne	.L63
 158:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (v != *len)
 901              		.loc 1 158 0
 902 01ac D081CDE1 		ldrd	r8, [sp, #16]
 903              	.LVL98:
 159:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorDataTooLarge;
 904              		.loc 1 159 0
 905 01b0 0030A0E3 		mov	r3, #0
 906 01b4 030059E1 		cmp	r9, r3
 907 01b8 08005801 		cmpeq	r8, r8
 908 01bc 2000001A 		bne	.L87
 909              	.LVL99:
 910              	.LBE63:
 911              	.LBE62:
 912              	.LBB65:
 913              	.LBB66:
 914              		.file 3 "D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor/compilersupport_p.h"
   1:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** /****************************************************************************
   2:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** **
   3:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** Copyright (C) 2015 Intel Corporation
   4:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** **
   5:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** Permission is hereby granted, free of charge, to any person obtaining a copy
   6:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** of this software and associated documentation files (the "Software"), to deal
   7:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** in the Software without restriction, including without limitation the rights
   8:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** copies of the Software, and to permit persons to whom the Software is
  10:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** furnished to do so, subject to the following conditions:
  11:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** **
  12:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** The above copyright notice and this permission notice shall be included in
  13:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** all copies or substantial portions of the Software.
  14:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** **
  15:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ** THE SOFTWARE.
  22:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** **
  23:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** ****************************************************************************/
  24:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  25:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef COMPILERSUPPORT_H
  26:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #define COMPILERSUPPORT_H
  27:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  28:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #include "cbor.h"
  29:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  30:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef _BSD_SOURCE
  31:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define _BSD_SOURCE
  32:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
  33:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef _DEFAULT_SOURCE
  34:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define _DEFAULT_SOURCE
  35:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
  36:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #include <assert.h>
  37:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #include <float.h>
  38:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #include <stddef.h>
  39:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #include <stdint.h>
  40:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #include <string.h>
  41:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  42:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef __cplusplus
  43:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  include <stdbool.h>
  44:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
  45:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  46:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifdef __F16C__
  47:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  include <immintrin.h>
  48:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
  49:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  50:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || (defined(__cplusplus) && __cplusp
  51:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define cbor_static_assert(x)         static_assert(x, #x)
  52:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #elif !defined(__cplusplus) && defined(__GNUC__) && (__GNUC__ * 100 + __GNUC_MINOR__ >= 406) && (__
  53:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define cbor_static_assert(x)         _Static_assert(x, #x)
  54:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #else
  55:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define cbor_static_assert(x)         ((void)sizeof(char[2*!!(x) - 1]))
  56:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
  57:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__cplusplus)
  58:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** /* inline is a keyword */
  59:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #else
  60:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** /* use the definition from cbor.h */
  61:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define inline    CBOR_INLINE
  62:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
  63:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  64:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef STRINGIFY
  65:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #define STRINGIFY(x)            STRINGIFY2(x)
  66:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
  67:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #define STRINGIFY2(x)           #x
  68:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  69:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #if !defined(UINT32_MAX) || !defined(INT64_MAX)
  70:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** /* C89? We can define UINT32_MAX portably, but not INT64_MAX */
  71:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  error "Your system has stdint.h but that doesn't define UINT32_MAX or INT64_MAX"
  72:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
  73:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  74:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef DBL_DECIMAL_DIG
  75:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** /* DBL_DECIMAL_DIG is C11 */
  76:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define DBL_DECIMAL_DIG       17
  77:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
  78:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #define DBL_DECIMAL_DIG_STR     STRINGIFY(DBL_DECIMAL_DIG)
  79:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  80:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef __has_builtin
  81:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define __has_builtin(x)  0
  82:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
  83:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  84:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
  85:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** /* Disable this optimization for TI ARM compiler v18 or higher because it has some issues
  86:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** with these intrinsics. */
  87:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #if !defined(__TI_COMPILER_VERSION__) || __TI_COMPILER_VERSION__ < 18000000
  88:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #if (defined(__GNUC__) && (__GNUC__ * 100 + __GNUC_MINOR__ >= 403)) || \
  89:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h ****     (__has_builtin(__builtin_bswap64) && __has_builtin(__builtin_bswap32))
  90:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
  91:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_ntohll     __builtin_bswap64
  92:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_htonll     __builtin_bswap64
  93:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_ntohl      __builtin_bswap32
  94:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_htonl      __builtin_bswap32
  95:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    ifdef __INTEL_COMPILER
  96:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define cbor_ntohs    _bswap16
  97:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define cbor_htons    _bswap16
  98:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    elif (__GNUC__ * 100 + __GNUC_MINOR__ >= 608) || __has_builtin(__builtin_bswap16)
  99:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define cbor_ntohs    __builtin_bswap16
 100:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define cbor_htons    __builtin_bswap16
 101:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    else
 102:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define cbor_ntohs(x) (((uint16_t)x >> 8) | ((uint16_t)x << 8))
 103:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define cbor_htons    cbor_ntohs
 104:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    endif
 105:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  else
 106:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_ntohll
 107:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_htonll
 108:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_ntohl
 109:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_htonl
 110:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_ntohs
 111:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_htons
 112:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  endif
 113:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #elif defined(__sun)
 114:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  include <sys/byteorder.h>
 115:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #elif defined(_MSC_VER)
 116:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** /* MSVC, which implies Windows, which implies little-endian and sizeof(long) == 4 */
 117:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define cbor_ntohll       _byteswap_uint64
 118:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define cbor_htonll       _byteswap_uint64
 119:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define cbor_ntohl        _byteswap_ulong
 120:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define cbor_htonl        _byteswap_ulong
 121:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define cbor_ntohs        _byteswap_ushort
 122:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define cbor_htons        _byteswap_ushort
 123:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #elif defined(__RX) && defined(__CCRX__)
 124:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  include <builtin.h>
 125:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  if defined(__LIT)
 126:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_ntohll(x)  ((cbor_ntohl(((uint32_t)(x))) * UINT64_C(0x100000000)) + (cbor_ntohl(((
 127:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_htonll     cbor_ntohll
 128:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_ntohl      _builtin_revl
 129:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_htonl      _builtin_revl
 130:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_ntohs      _builtin_revw
 131:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_htons      _builtin_revw
 132:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  else
 133:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_ntohll
 134:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_htonll
 135:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_ntohl
 136:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_htonl
 137:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_ntohs
 138:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    define cbor_htons
 139:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  endif
 140:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
 141:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
 142:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef cbor_ntohs
 143:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #   define cbor_ntohs(x) (((uint16_t)x >> 8) | ((uint16_t)x << 8))
 144:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #   define cbor_htons    cbor_ntohs
 145:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** //#  include <netinet/in.h>
 146:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** //#  define cbor_ntohs        ntohs
 147:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** //#  define cbor_htons        htons
 148:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
 149:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef cbor_ntohl
 150:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** //#  include <netinet/in.h>
 151:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** //#  define cbor_ntohl        ntohl
 152:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** //#  define cbor_htonl        htonl
 153:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  	define cbor_ntohl(x)     ((((uint32_t)x >> 24) & 0xff) | (((uint32_t)x >> 8) & 0xff00) | (((uin
 154:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  	define cbor_htonl        cbor_ntohl
 155:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
 156:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef cbor_ntohll
 157:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define cbor_ntohll       ntohll
 158:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define cbor_htonll       htonll
 159:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** /* ntohll isn't usually defined */
 160:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  ifndef ntohll
 161:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    if defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__) && __BYTE_ORDER__ == __ORDER_BIG_E
 162:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define ntohll
 163:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define htonll
 164:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    elif defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_
 165:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define ntohll(x)       ((ntohl((uint32_t)(x)) * UINT64_C(0x100000000)) + (ntohl((x) >> 32)))
 166:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define htonll          ntohll
 167:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #	elif __little_endian__ == 1
 168:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define ntohll(x)       ((cbor_ntohl(((uint32_t)(x))) * UINT64_C(0x100000000)) + (cbor_ntohl(
 169:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      define htonll          ntohll
 170:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    else
 171:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #      error "Unable to determine byte order!"
 172:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #    endif
 173:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  endif
 174:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
 175:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
 176:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
 177:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifdef __cplusplus
 178:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define CONST_CAST(t, v)  const_cast<t>(v)
 179:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #else
 180:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** /* C-style const_cast without triggering a warning with -Wcast-qual */
 181:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define CONST_CAST(t, v)  (t)(uintptr_t)(v)
 182:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
 183:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
 184:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifdef __GNUC__
 185:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef likely
 186:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define likely(x)     __builtin_expect(!!(x), 1)
 187:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
 188:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #ifndef unlikely
 189:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define unlikely(x)   __builtin_expect(!!(x), 0)
 190:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
 191:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define unreachable() __builtin_unreachable()
 192:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #elif defined(_MSC_VER)
 193:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define likely(x)     (x)
 194:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define unlikely(x)   (x)
 195:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define unreachable() __assume(0)
 196:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #else
 197:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define likely(x)     (x)
 198:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define unlikely(x)   (x)
 199:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  define unreachable() do {} while (0)
 200:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
 201:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
 202:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #if defined(__GNUC__) && !defined(__INTEL_COMPILER) && !defined(__clang__) && \
 203:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h ****     (__GNUC__ * 100 + __GNUC_MINOR__ >= 404)
 204:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #  pragma GCC optimize("-ffunction-sections")
 205:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #endif
 206:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** 
 207:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
 208:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** {
 209:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h **** #if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__built
 210:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\compilersupport_p.h ****     return __builtin_add_overflow(v1, v2, r);
 915              		.loc 3 210 0
 916 01c0 083095E0 		adds	r3, r5, r8
 917 01c4 1E00002A 		bcs	.L87
 918              	.LBE66:
 919              	.LBE65:
 971:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return CborErrorUnexpectedEOF;
 920              		.loc 1 971 0
 921 01c8 002094E5 		ldr	r2, [r4]
 922 01cc 0C109DE5 		ldr	r1, [sp, #12]
 923 01d0 002092E5 		ldr	r2, [r2]
 924 01d4 012042E0 		sub	r2, r2, r1
 925 01d8 080052E1 		cmp	r2, r8
 926 01dc E1FFFF3A 		bcc	.L76
 974:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 *result = !!func(buffer + total, ptr, chunkLen);
 927              		.loc 1 974 0
 928 01e0 0020D6E5 		ldrb	r2, [r6]	@ zero_extendqisi2
 929 01e4 000052E3 		cmp	r2, #0
 930 01e8 1000000A 		beq	.L77
 974:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 *result = !!func(buffer + total, ptr, chunkLen);
 931              		.loc 1 974 0 is_stmt 0 discriminator 1
 932 01ec 00209AE5 		ldr	r2, [r10]
 933 01f0 030052E1 		cmp	r2, r3
 934 01f4 0D00003A 		bcc	.L77
 935 01f8 04308DE5 		str	r3, [sp, #4]
 975:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             else
 936              		.loc 1 975 0 is_stmt 1
 937 01fc 0820A0E1 		mov	r2, r8
 938 0200 44309DE5 		ldr	r3, [sp, #68]
 939 0204 05008BE0 		add	r0, fp, r5
 940 0208 33FF2FE1 		blx	r3
 941              	.LVL100:
 942 020c 04309DE5 		ldr	r3, [sp, #4]
 943 0210 000090E2 		adds	r0, r0, #0
 944 0214 0100A013 		movne	r0, #1
 945 0218 0000C6E5 		strb	r0, [r6]
 946              	.L78:
 979:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             total = newTotal;
 947              		.loc 1 979 0
 948 021c 0C209DE5 		ldr	r2, [sp, #12]
 949              	.LBB68:
 950              	.LBB67:
 951              		.loc 3 210 0
 952 0220 0350A0E1 		mov	r5, r3
 953              	.LVL101:
 954              	.LBE67:
 955              	.LBE68:
 979:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             total = newTotal;
 956              		.loc 1 979 0
 957 0224 088082E0 		add	r8, r2, r8
 958              	.LVL102:
 959 0228 0C808DE5 		str	r8, [sp, #12]
 960              	.LVL103:
 961              	.LBE70:
 948:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             size_t chunkLen;
 962              		.loc 1 948 0
 963 022c C8FFFFEA 		b	.L79
 964              	.LVL104:
 965              	.L77:
 966              	.LBB71:
 977:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 967              		.loc 1 977 0
 968 0230 0020A0E3 		mov	r2, #0
 969 0234 0020C6E5 		strb	r2, [r6]
 970 0238 F7FFFFEA 		b	.L78
 971              	.LVL105:
 972              	.L86:
 962:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 973              		.loc 1 962 0
 974 023c 410FA0E3 		mov	r0, #260
 975 0240 C9FFFFEA 		b	.L63
 976              	.L87:
 977              	.LBB69:
 978              	.LBB64:
 160:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 979              		.loc 1 160 0
 980 0244 010BA0E3 		mov	r0, #1024
 981 0248 C7FFFFEA 		b	.L63
 982              	.L105:
 983              		.align	2
 984              	.L104:
 985 024c 00000000 		.word	.LC4
 986 0250 00000000 		.word	.LANCHOR1
 987 0254 13000000 		.word	.LC1
 988              	.LBE64:
 989              	.LBE69:
 990              	.LBE71:
 991              		.cfi_endproc
 992              	.LFE74:
 994              		.section	.text._cbor_value_decode_int64_internal,"ax",%progbits
 995              		.align	2
 996              		.global	_cbor_value_decode_int64_internal
 997              		.syntax unified
 998              		.arm
 999              		.fpu neon
 1001              	_cbor_value_decode_int64_internal:
 1002              	.LFB60:
 301:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
 1003              		.loc 1 301 0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 8
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
 1007              	.LVL106:
 1008 0000 13402DE9 		push	{r0, r1, r4, lr}
 1009              		.cfi_def_cfa_offset 16
 1010              		.cfi_offset 4, -8
 1011              		.cfi_offset 14, -4
 302:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****            value->type == CborFloatType || value->type == CborDoubleType);
 1012              		.loc 1 302 0
 1013 0004 0F30D0E5 		ldrb	r3, [r0, #15]	@ zero_extendqisi2
 1014 0008 010013E3 		tst	r3, #1
 1015 000c 0900001A 		bne	.L107
 302:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****            value->type == CborFloatType || value->type == CborDoubleType);
 1016              		.loc 1 302 0 is_stmt 0 discriminator 1
 1017 0010 0E30D0E5 		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 1018 0014 063083E2 		add	r3, r3, #6
 1019 0018 7330EFE6 		uxtb	r3, r3
 1020 001c 010053E3 		cmp	r3, #1
 1021 0020 0400009A 		bls	.L107
 302:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****            value->type == CborFloatType || value->type == CborDoubleType);
 1022              		.loc 1 302 0 discriminator 3
 1023 0024 90309FE5 		ldr	r3, .L114
 1024 0028 2F1100E3 		movw	r1, #303
 1025 002c 8C209FE5 		ldr	r2, .L114+4
 1026              	.LVL107:
 1027              	.L113:
 307:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if ((*value->ptr & 1) == (Value32Bit & 1))
 1028              		.loc 1 307 0 is_stmt 1 discriminator 1
 1029 0030 8C009FE5 		ldr	r0, .L114+8
 1030 0034 FEFFFFEB 		bl	__assert_func
 1031              	.LVL108:
 1032              	.L107:
 307:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if ((*value->ptr & 1) == (Value32Bit & 1))
 1033              		.loc 1 307 0 is_stmt 0
 1034 0038 043090E5 		ldr	r3, [r0, #4]
 1035 003c 0010D3E5 		ldrb	r1, [r3]	@ zero_extendqisi2
 1036 0040 1F2001E2 		and	r2, r1, #31
 1037 0044 1A0042E2 		sub	r0, r2, #26
 1038              	.LVL109:
 1039 0048 010050E3 		cmp	r0, #1
 307:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if ((*value->ptr & 1) == (Value32Bit & 1))
 1040              		.loc 1 307 0 discriminator 1
 1041 004c 74309F85 		ldrhi	r3, .L114+12
 1042 0050 33110083 		movwhi	r1, #307
 1043 0054 64209F85 		ldrhi	r2, .L114+4
 1044 0058 F4FFFF8A 		bhi	.L113
 1045              	.L108:
 308:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return get32(value->ptr + 1);
 1046              		.loc 1 308 0 is_stmt 1
 1047 005c 014011E2 		ands	r4, r1, #1
 1048 0060 011083E2 		add	r1, r3, #1
 1049 0064 0700001A 		bne	.L109
 1050              	.LVL110:
 1051              	.LBB76:
 1052              	.LBB77:
  42:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     return cbor_ntohl(result);
 1053              		.loc 2 42 0
 1054 0068 0420A0E3 		mov	r2, #4
 1055 006c 0D00A0E1 		mov	r0, sp
 1056 0070 FEFFFFEB 		bl	memcpy
 1057              	.LVL111:
  43:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** }
 1058              		.loc 2 43 0
 1059 0074 00009DE5 		ldr	r0, [sp]
 1060              	.LBE77:
 1061              	.LBE76:
 309:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1062              		.loc 1 309 0
 1063 0078 0410A0E1 		mov	r1, r4
 1064              	.LBB79:
 1065              	.LBB78:
  43:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** }
 1066              		.loc 2 43 0
 1067 007c 300FBFE6 		rev	r0, r0
 1068              	.L106:
 1069              	.LBE78:
 1070              	.LBE79:
 313:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1071              		.loc 1 313 0
 1072 0080 08D08DE2 		add	sp, sp, #8
 1073              		.cfi_remember_state
 1074              		.cfi_def_cfa_offset 8
 1075              		@ sp needed
 1076 0084 1080BDE8 		pop	{r4, pc}
 1077              	.L109:
 1078              		.cfi_restore_state
 311:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return get64(value->ptr + 1);
 1079              		.loc 1 311 0
 1080 0088 1B0052E3 		cmp	r2, #27
 311:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return get64(value->ptr + 1);
 1081              		.loc 1 311 0 is_stmt 0 discriminator 1
 1082 008c 38309F15 		ldrne	r3, .L114+16
 1083 0090 37110013 		movwne	r1, #311
 1084 0094 24209F15 		ldrne	r2, .L114+4
 1085 0098 E4FFFF1A 		bne	.L113
 1086              	.L111:
 1087              	.LVL112:
 1088              	.LBB80:
 1089              	.LBB81:
  49:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h ****     return cbor_ntohll(result);
 1090              		.loc 2 49 0 is_stmt 1
 1091 009c 0820A0E3 		mov	r2, #8
 1092 00a0 0D00A0E1 		mov	r0, sp
 1093 00a4 FEFFFFEB 		bl	memcpy
 1094              	.LVL113:
  50:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\extract_number_p.h **** }
 1095              		.loc 2 50 0
 1096 00a8 04009DE5 		ldr	r0, [sp, #4]
 1097 00ac 00109DE5 		ldr	r1, [sp]
 1098 00b0 300FBFE6 		rev	r0, r0
 1099 00b4 311FBFE6 		rev	r1, r1
 1100              	.LBE81:
 1101              	.LBE80:
 312:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1102              		.loc 1 312 0
 1103 00b8 F0FFFFEA 		b	.L106
 1104              	.L115:
 1105              		.align	2
 1106              	.L114:
 1107 00bc 00000000 		.word	.LC5
 1108 00c0 00000000 		.word	.LANCHOR2
 1109 00c4 13000000 		.word	.LC1
 1110 00c8 76000000 		.word	.LC6
 1111 00cc D3000000 		.word	.LC7
 1112              		.cfi_endproc
 1113              	.LFE60:
 1115              		.section	.text.cbor_parser_init,"ax",%progbits
 1116              		.align	2
 1117              		.global	cbor_parser_init
 1118              		.syntax unified
 1119              		.arm
 1120              		.fpu neon
 1122              	cbor_parser_init:
 1123              	.LFB61:
 326:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     memset(parser, 0, sizeof(*parser));
 1124              		.loc 1 326 0
 1125              		.cfi_startproc
 1126              		@ args = 4, pretend = 0, frame = 0
 1127              		@ frame_needed = 0, uses_anonymous_args = 0
 1128              	.LVL114:
 1129 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1130              		.cfi_def_cfa_offset 24
 1131              		.cfi_offset 4, -24
 1132              		.cfi_offset 5, -20
 1133              		.cfi_offset 6, -16
 1134              		.cfi_offset 7, -12
 1135              		.cfi_offset 8, -8
 1136              		.cfi_offset 14, -4
 326:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     memset(parser, 0, sizeof(*parser));
 1137              		.loc 1 326 0
 1138 0004 0070A0E1 		mov	r7, r0
 1139 0008 18409DE5 		ldr	r4, [sp, #24]
 1140 000c 0280A0E1 		mov	r8, r2
 1141 0010 0160A0E1 		mov	r6, r1
 327:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     parser->end = buffer + size;
 1142              		.loc 1 327 0
 1143 0014 0300A0E1 		mov	r0, r3
 1144              	.LVL115:
 1145 0018 0820A0E3 		mov	r2, #8
 1146              	.LVL116:
 1147 001c 0010A0E3 		mov	r1, #0
 1148              	.LVL117:
 326:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     memset(parser, 0, sizeof(*parser));
 1149              		.loc 1 326 0
 1150 0020 0350A0E1 		mov	r5, r3
 328:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     parser->flags = flags;
 1151              		.loc 1 328 0
 1152 0024 066087E0 		add	r6, r7, r6
 1153              	.LVL118:
 327:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     parser->end = buffer + size;
 1154              		.loc 1 327 0
 1155 0028 FEFFFFEB 		bl	memset
 1156              	.LVL119:
 332:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return preparse_value(it);
 1157              		.loc 1 332 0
 1158 002c 0130A0E3 		mov	r3, #1
 329:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->parser = parser;
 1159              		.loc 1 329 0
 1160 0030 400185E8 		stm	r5, {r6, r8}
 333:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1161              		.loc 1 333 0
 1162 0034 0400A0E1 		mov	r0, r4
 331:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->remaining = 1;      /* there's one type altogether, usually an array or map */
 1163              		.loc 1 331 0
 1164 0038 A00084E8 		stm	r4, {r5, r7}
 332:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return preparse_value(it);
 1165              		.loc 1 332 0
 1166 003c 083084E5 		str	r3, [r4, #8]
 334:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1167              		.loc 1 334 0
 1168 0040 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}
 1169              		.cfi_restore 14
 1170              		.cfi_restore 8
 1171              		.cfi_restore 7
 1172              		.cfi_restore 6
 1173              		.cfi_restore 5
 1174              		.cfi_restore 4
 1175              		.cfi_def_cfa_offset 0
 1176              	.LVL120:
 333:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1177              		.loc 1 333 0
 1178 0044 FEFFFFEA 		b	preparse_value
 1179              	.LVL121:
 1180              		.cfi_endproc
 1181              	.LFE61:
 1183              		.section	.text.cbor_value_advance_fixed,"ax",%progbits
 1184              		.align	2
 1185              		.global	cbor_value_advance_fixed
 1186              		.syntax unified
 1187              		.arm
 1188              		.fpu neon
 1190              	cbor_value_advance_fixed:
 1191              	.LFB62:
 395:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(it->type != CborInvalidType);
 1192              		.loc 1 395 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196              	.LVL122:
 1197 0000 10402DE9 		push	{r4, lr}
 1198              		.cfi_def_cfa_offset 8
 1199              		.cfi_offset 4, -8
 1200              		.cfi_offset 14, -4
 395:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(it->type != CborInvalidType);
 1201              		.loc 1 395 0
 1202 0004 0030A0E1 		mov	r3, r0
 396:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(is_fixed_type(it->type));
 1203              		.loc 1 396 0
 1204 0008 0E00D0E5 		ldrb	r0, [r0, #14]	@ zero_extendqisi2
 1205              	.LVL123:
 1206 000c FF0050E3 		cmp	r0, #255
 1207 0010 0400001A 		bne	.L119
 1208              	.LVL124:
 1209              	.LBB84:
 1210              	.LBB85:
 1211 0014 44309FE5 		ldr	r3, .L124
 1212              	.LVL125:
 1213 0018 631FA0E3 		mov	r1, #396
 1214 001c 40209FE5 		ldr	r2, .L124+4
 1215              	.LVL126:
 1216              	.L123:
 1217              	.LBE85:
 1218              	.LBE84:
 397:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (!it->remaining)
 1219              		.loc 1 397 0 discriminator 1
 1220 0020 40009FE5 		ldr	r0, .L124+8
 1221 0024 FEFFFFEB 		bl	__assert_func
 1222              	.LVL127:
 1223              	.L119:
 397:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (!it->remaining)
 1224              		.loc 1 397 0 is_stmt 0
 1225 0028 FEFFFFEB 		bl	is_fixed_type
 1226              	.LVL128:
 1227 002c 000050E3 		cmp	r0, #0
 397:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (!it->remaining)
 1228              		.loc 1 397 0 discriminator 1
 1229 0030 34309F05 		ldreq	r3, .L124+12
 1230              	.LVL129:
 1231 0034 8D110003 		movweq	r1, #397
 1232 0038 24209F05 		ldreq	r2, .L124+4
 1233 003c F7FFFF0A 		beq	.L123
 1234              	.LVL130:
 1235              	.L120:
 398:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorAdvancePastEOF;
 1236              		.loc 1 398 0 is_stmt 1
 1237 0040 082093E5 		ldr	r2, [r3, #8]
 1238 0044 000052E3 		cmp	r2, #0
 1239 0048 0200000A 		beq	.L121
 400:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1240              		.loc 1 400 0
 1241 004c 0300A0E1 		mov	r0, r3
 401:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1242              		.loc 1 401 0
 1243 0050 1040BDE8 		pop	{r4, lr}
 1244              		.cfi_remember_state
 1245              		.cfi_restore 14
 1246              		.cfi_restore 4
 1247              		.cfi_def_cfa_offset 0
 400:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1248              		.loc 1 400 0
 1249 0054 FEFFFFEA 		b	advance_internal
 1250              	.LVL131:
 1251              	.L121:
 1252              		.cfi_restore_state
 401:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1253              		.loc 1 401 0
 1254 0058 0300A0E3 		mov	r0, #3
 1255 005c 1080BDE8 		pop	{r4, pc}
 1256              	.L125:
 1257              		.align	2
 1258              	.L124:
 1259 0060 00000000 		.word	.LC8
 1260 0064 00000000 		.word	.LANCHOR3
 1261 0068 13000000 		.word	.LC1
 1262 006c 1C000000 		.word	.LC9
 1263              		.cfi_endproc
 1264              	.LFE62:
 1266              		.section	.text.cbor_value_skip_tag,"ax",%progbits
 1267              		.align	2
 1268              		.global	cbor_value_skip_tag
 1269              		.syntax unified
 1270              		.arm
 1271              		.fpu neon
 1273              	cbor_value_skip_tag:
 1274              	.LFB65:
 479:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     while (cbor_value_is_tag(it)) {
 1275              		.loc 1 479 0
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 0
 1278              		@ frame_needed = 0, uses_anonymous_args = 0
 1279              	.LVL132:
 1280 0000 10402DE9 		push	{r4, lr}
 1281              		.cfi_def_cfa_offset 8
 1282              		.cfi_offset 4, -8
 1283              		.cfi_offset 14, -4
 1284 0004 0040A0E1 		mov	r4, r0
 1285              	.LVL133:
 1286              	.L127:
 480:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         CborError err = cbor_value_advance_fixed(it);
 1287              		.loc 1 480 0
 1288 0008 0E30D4E5 		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 1289 000c C00053E3 		cmp	r3, #192
 1290 0010 0100000A 		beq	.L129
 485:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1291              		.loc 1 485 0
 1292 0014 0000A0E3 		mov	r0, #0
 486:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1293              		.loc 1 486 0
 1294 0018 1080BDE8 		pop	{r4, pc}
 1295              	.L129:
 1296              	.LBB86:
 481:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
 1297              		.loc 1 481 0
 1298 001c 0400A0E1 		mov	r0, r4
 1299 0020 FEFFFFEB 		bl	cbor_value_advance_fixed
 1300              	.LVL134:
 482:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return err;
 1301              		.loc 1 482 0
 1302 0024 000050E3 		cmp	r0, #0
 1303 0028 F6FFFF0A 		beq	.L127
 1304 002c 1080BDE8 		pop	{r4, pc}
 1305              	.LBE86:
 1306              		.cfi_endproc
 1307              	.LFE65:
 1309              		.section	.text.cbor_value_enter_container,"ax",%progbits
 1310              		.align	2
 1311              		.global	cbor_value_enter_container
 1312              		.syntax unified
 1313              		.arm
 1314              		.fpu neon
 1316              	cbor_value_enter_container:
 1317              	.LFB66:
 506:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     CborError err;
 1318              		.loc 1 506 0
 1319              		.cfi_startproc
 1320              		@ args = 0, pretend = 0, frame = 8
 1321              		@ frame_needed = 0, uses_anonymous_args = 0
 1322              	.LVL135:
 1323 0000 F7402DE9 		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1324              		.cfi_def_cfa_offset 32
 1325              		.cfi_offset 4, -20
 1326              		.cfi_offset 5, -16
 1327              		.cfi_offset 6, -12
 1328              		.cfi_offset 7, -8
 1329              		.cfi_offset 14, -4
 1330              	.LBB87:
 1331              	.LBB88:
 1332              		.file 4 "D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor/cbor.h"
   1:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** /****************************************************************************
   2:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** **
   3:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** Copyright (C) 2015 Intel Corporation
   4:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** **
   5:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** Permission is hereby granted, free of charge, to any person obtaining a copy
   6:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** of this software and associated documentation files (the "Software"), to deal
   7:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** in the Software without restriction, including without limitation the rights
   8:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** copies of the Software, and to permit persons to whom the Software is
  10:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** furnished to do so, subject to the following conditions:
  11:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** **
  12:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** The above copyright notice and this permission notice shall be included in
  13:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** all copies or substantial portions of the Software.
  14:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** **
  15:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ** THE SOFTWARE.
  22:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** **
  23:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** ****************************************************************************/
  24:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
  25:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #ifndef CBOR_H
  26:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #define CBOR_H
  27:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
  28:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #include <assert.h>
  29:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #include <limits.h>
  30:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #include <stddef.h>
  31:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #include <stdint.h>
  32:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #include <string.h>
  33:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #include <stdio.h>
  34:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
  35:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #include "assert_p.h"       /* Always include last */
  36:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
  37:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #ifdef __cplusplus
  38:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** extern "C" {
  39:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #else
  40:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #include <stdbool.h>
  41:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #endif
  42:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
  43:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #ifndef SIZE_MAX
  44:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** /* Some systems fail to define SIZE_MAX in <stdint.h>, even though C99 requires it...
  45:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****  * Conversion from signed to unsigned is defined in 6.3.1.3 (Signed and unsigned integers) p2,
  46:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****  * which says: "the value is converted by repeatedly adding or subtracting one more than the
  47:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****  * maximum value that can be represented in the new type until the value is in the range of the
  48:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****  * new type."
  49:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****  * So -1 gets converted to size_t by adding SIZE_MAX + 1, which results in SIZE_MAX.
  50:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****  */
  51:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #  define SIZE_MAX ((size_t)-1)
  52:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #endif
  53:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
  54:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #ifndef CBOR_API
  55:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #  define CBOR_API
  56:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #endif
  57:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #ifndef CBOR_PRIVATE_API
  58:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #  define CBOR_PRIVATE_API
  59:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #endif
  60:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #ifndef CBOR_INLINE_API
  61:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #  if defined(__cplusplus)
  62:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #    define CBOR_INLINE inline
  63:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #    define CBOR_INLINE_API inline
  64:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #  else
  65:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #    define CBOR_INLINE_API static CBOR_INLINE
  66:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #    if defined(_MSC_VER)
  67:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #      define CBOR_INLINE __inline
  68:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #    elif defined(__GNUC__)
  69:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #      define CBOR_INLINE __inline__
  70:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #    elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
  71:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #      define CBOR_INLINE inline
  72:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #    else
  73:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #      define CBOR_INLINE
  74:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #    endif
  75:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #  endif
  76:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** #endif
  77:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
  78:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** typedef enum CborType {
  79:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborIntegerType     = 0x00,
  80:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborByteStringType  = 0x40,
  81:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborTextStringType  = 0x60,
  82:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborArrayType       = 0x80,
  83:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborMapType         = 0xa0,
  84:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborTagType         = 0xc0,
  85:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborSimpleType      = 0xe0,
  86:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborBooleanType     = 0xf5,
  87:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborNullType        = 0xf6,
  88:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborUndefinedType   = 0xf7,
  89:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborHalfFloatType   = 0xf9,
  90:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborFloatType       = 0xfa,
  91:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborDoubleType      = 0xfb,
  92:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
  93:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborInvalidType     = 0xff              /* equivalent to the break byte, so it will never be us
  94:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** } CborType;
  95:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
  96:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** typedef uint64_t CborTag;
  97:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** typedef enum CborKnownTags {
  98:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborDateTimeStringTag          = 0,        /* RFC 3339 format: YYYY-MM-DD hh:mm:ss+zzzz */
  99:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborUnixTime_tTag              = 1,
 100:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborPositiveBignumTag          = 2,
 101:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborNegativeBignumTag          = 3,
 102:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborDecimalTag                 = 4,
 103:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborBigfloatTag                = 5,
 104:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborExpectedBase64urlTag       = 21,
 105:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborExpectedBase64Tag          = 22,
 106:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborExpectedBase16Tag          = 23,
 107:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborUriTag                     = 32,
 108:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborBase64urlTag               = 33,
 109:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborBase64Tag                  = 34,
 110:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborRegularExpressionTag       = 35,
 111:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborMimeMessageTag             = 36,       /* RFC 2045-2047 */
 112:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborSignatureTag               = 55799
 113:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** } CborKnownTags;
 114:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 115:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** /* Error API */
 116:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 117:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** typedef enum CborError {
 118:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborNoError = 0,
 119:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 120:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     /* errors in all modes */
 121:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborUnknownError,
 122:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorUnknownLength,         /* request for length in array, map, or string with indetermina
 123:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorAdvancePastEOF,
 124:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorIO,
 125:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 126:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     /* parser errors streaming errors */
 127:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorGarbageAtEnd = 256,
 128:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorUnexpectedEOF,
 129:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorUnexpectedBreak,
 130:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorUnknownType,           /* can only heppen in major type 7 */
 131:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorIllegalType,           /* type not allowed here */
 132:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorIllegalNumber,
 133:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorIllegalSimpleType,     /* types of value less than 32 encoded in two bytes */
 134:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 135:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     /* parser errors in strict mode parsing only */
 136:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorUnknownSimpleType = 512,
 137:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorUnknownTag,
 138:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorInappropriateTagForType,
 139:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorDuplicateObjectKeys,
 140:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorInvalidUtf8TextString,
 141:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 142:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     /* encoder errors */
 143:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorTooManyItems = 768,
 144:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorTooFewItems,
 145:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 146:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     /* internal implementation errors */
 147:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorDataTooLarge = 1024,
 148:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorNestingTooDeep,
 149:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorUnsupportedType,
 150:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 151:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     /* errors in converting to JSON */
 152:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorJsonObjectKeyIsAggregate,
 153:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorJsonObjectKeyNotString,
 154:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorJsonNotImplemented,
 155:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 156:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorOutOfMemory = (int) (~0U / 2 + 1),
 157:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborErrorInternalError = (int) ~0U
 158:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** } CborError;
 159:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 160:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API const char *cbor_error_string(CborError error);
 161:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 162:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** /* Encoder API */
 163:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** struct CborEncoder
 164:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** {
 165:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     union {
 166:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****         uint8_t *ptr;
 167:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****         ptrdiff_t bytes_needed;
 168:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     } data;
 169:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     const uint8_t *end;
 170:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     size_t added;
 171:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     int flags;
 172:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** };
 173:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** typedef struct CborEncoder CborEncoder;
 174:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 175:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** static const size_t CborIndefiniteLength = SIZE_MAX;
 176:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 177:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API void cbor_encoder_init(CborEncoder *encoder, uint8_t *buffer, size_t size, int flags);
 178:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encode_uint(CborEncoder *encoder, uint64_t value);
 179:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encode_int(CborEncoder *encoder, int64_t value);
 180:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
 181:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
 182:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
 183:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length)
 184:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
 185:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** { return cbor_encode_text_string(encoder, string, strlen(string)); }
 186:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encode_byte_string(CborEncoder *encoder, const uint8_t *string, size_t leng
 187:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encode_floating_point(CborEncoder *encoder, CborType fpType, const void *va
 188:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 189:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API CborError cbor_encode_boolean(CborEncoder *encoder, bool value)
 190:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** { return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
 191:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API CborError cbor_encode_null(CborEncoder *encoder)
 192:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** { return cbor_encode_simple_value(encoder, CborNullType & 0x1f); }
 193:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API CborError cbor_encode_undefined(CborEncoder *encoder)
 194:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** { return cbor_encode_simple_value(encoder, CborUndefinedType & 0x1f); }
 195:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 196:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API CborError cbor_encode_half_float(CborEncoder *encoder, const void *value)
 197:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** { return cbor_encode_floating_point(encoder, CborHalfFloatType, value); }
 198:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API CborError cbor_encode_float(CborEncoder *encoder, float value)
 199:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** { return cbor_encode_floating_point(encoder, CborFloatType, &value); }
 200:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API CborError cbor_encode_double(CborEncoder *encoder, double value)
 201:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** { return cbor_encode_floating_point(encoder, CborDoubleType, &value); }
 202:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 203:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_
 204:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t le
 205:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerE
 206:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_encoder_close_container_checked(CborEncoder *encoder, const CborEncoder *co
 207:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 208:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API size_t cbor_encoder_get_buffer_size(const CborEncoder *encoder, const uint8_t *buff
 209:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** {
 210:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     return (size_t)(encoder->data.ptr - buffer);
 211:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** }
 212:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 213:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API size_t cbor_encoder_get_extra_bytes_needed(const CborEncoder *encoder)
 214:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** {
 215:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     return encoder->end ? 0 : (size_t)encoder->data.bytes_needed;
 216:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** }
 217:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 218:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** /* Parser API */
 219:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 220:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** enum CborParserIteratorFlags
 221:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** {
 222:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborIteratorFlag_IntegerValueTooLarge   = 0x01,
 223:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborIteratorFlag_NegativeInteger        = 0x02,
 224:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborIteratorFlag_UnknownLength          = 0x04,
 225:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     CborIteratorFlag_ContainerIsMap         = 0x20
 226:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** };
 227:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 228:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** struct CborParser
 229:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** {
 230:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     const uint8_t *end;
 231:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     int flags;
 232:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** };
 233:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** typedef struct CborParser CborParser;
 234:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 235:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** struct CborValue
 236:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** {
 237:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     const CborParser *parser;
 238:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     const uint8_t *ptr;
 239:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     uint32_t remaining;
 240:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     uint16_t extra;
 241:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     uint8_t type;
 242:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     uint8_t flags;
 243:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** };
 244:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** typedef struct CborValue CborValue;
 245:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 246:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_parser_init(const uint8_t *buffer, size_t size, int flags, CborParser *pars
 247:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 248:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API bool cbor_value_at_end(const CborValue *it)
 249:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** { return it->remaining == 0; }
 250:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API const uint8_t *cbor_value_get_next_byte(const CborValue *it)
 251:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** { return it->ptr; }
 252:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_value_advance_fixed(CborValue *it);
 253:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_value_advance(CborValue *it);
 254:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API bool cbor_value_is_container(const CborValue *it)
 255:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** { return it->type == CborArrayType || it->type == CborMapType; }
 1333              		.loc 4 255 0
 1334 0004 0E30D0E5 		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 1335              	.LBE88:
 1336              	.LBE87:
 508:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     *recursed = *it;
 1337              		.loc 1 508 0
 1338 0008 DF3003E2 		and	r3, r3, #223
 1339 000c 800053E3 		cmp	r3, #128
 1340 0010 0400000A 		beq	.L132
 508:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     *recursed = *it;
 1341              		.loc 1 508 0 is_stmt 0 discriminator 1
 1342 0014 10319FE5 		ldr	r3, .L147
 1343 0018 7F1FA0E3 		mov	r1, #508
 1344              	.LVL136:
 1345 001c 0C219FE5 		ldr	r2, .L147+4
 1346              	.LVL137:
 1347              	.L146:
 1348              	.LBB89:
 523:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1349              		.loc 1 523 0 is_stmt 1 discriminator 1
 1350 0020 0C019FE5 		ldr	r0, .L147+8
 1351 0024 FEFFFFEB 		bl	__assert_func
 1352              	.LVL138:
 1353              	.L132:
 1354 0028 0050A0E1 		mov	r5, r0
 1355 002c 0140A0E1 		mov	r4, r1
 1356              	.LBE89:
 509:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1357              		.loc 1 509 0
 1358 0030 0F0090E8 		ldm	r0, {r0, r1, r2, r3}
 1359              	.LVL139:
 1360 0034 0F0084E8 		stm	r4, {r0, r1, r2, r3}
 511:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         recursed->remaining = UINT32_MAX;
 1361              		.loc 1 511 0
 1362 0038 0F30D5E5 		ldrb	r3, [r5, #15]	@ zero_extendqisi2
 1363 003c 040013E3 		tst	r3, #4
 1364 0040 0D00000A 		beq	.L133
 512:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         ++recursed->ptr;
 1365              		.loc 1 512 0
 1366 0044 0030E0E3 		mvn	r3, #0
 513:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         err = preparse_value(recursed);
 1367              		.loc 1 513 0
 1368 0048 011081E2 		add	r1, r1, #1
 512:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         ++recursed->ptr;
 1369              		.loc 1 512 0
 1370 004c 083084E5 		str	r3, [r4, #8]
 514:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err != CborErrorUnexpectedBreak)
 1371              		.loc 1 514 0
 1372 0050 0400A0E1 		mov	r0, r4
 513:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         err = preparse_value(recursed);
 1373              		.loc 1 513 0
 1374 0054 041084E5 		str	r1, [r4, #4]
 514:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err != CborErrorUnexpectedBreak)
 1375              		.loc 1 514 0
 1376 0058 FEFFFFEB 		bl	preparse_value
 1377              	.LVL140:
 515:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return err;
 1378              		.loc 1 515 0
 1379 005c 023100E3 		movw	r3, #258
 1380 0060 030050E1 		cmp	r0, r3
 519:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     } else {
 1381              		.loc 1 519 0
 1382 0064 04309405 		ldreq	r3, [r4, #4]
 1383 0068 01308302 		addeq	r3, r3, #1
 1384 006c 04308405 		streq	r3, [r4, #4]
 515:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return err;
 1385              		.loc 1 515 0
 1386 0070 2800000A 		beq	.L135
 1387              	.LVL141:
 1388              	.L131:
 548:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1389              		.loc 1 548 0
 1390 0074 0CD08DE2 		add	sp, sp, #12
 1391              		.cfi_remember_state
 1392              		.cfi_def_cfa_offset 20
 1393              		@ sp needed
 1394 0078 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 1395              	.LVL142:
 1396              	.L133:
 1397              		.cfi_restore_state
 1398              	.LBB90:
 522:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         assert(err == CborNoError);
 1399              		.loc 1 522 0
 1400 007c 001090E5 		ldr	r1, [r0]
 1401 0080 0D20A0E1 		mov	r2, sp
 1402 0084 040084E2 		add	r0, r4, #4
 1403 0088 FEFFFFEB 		bl	extract_number
 1404              	.LVL143:
 523:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1405              		.loc 1 523 0
 1406 008c 000050E3 		cmp	r0, #0
 523:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1407              		.loc 1 523 0 is_stmt 0 discriminator 1
 1408 0090 A0309F15 		ldrne	r3, .L147+12
 1409 0094 0B120013 		movwne	r1, #523
 1410 0098 90209F15 		ldrne	r2, .L147+4
 1411 009c DFFFFF1A 		bne	.L146
 1412              	.L136:
 525:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (recursed->remaining != len || len == UINT32_MAX) {
 1413              		.loc 1 525 0 is_stmt 1
 1414 00a0 D020CDE1 		ldrd	r2, [sp]
 526:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             /* back track the pointer to indicate where the error occurred */
 1415              		.loc 1 526 0
 1416 00a4 0010A0E3 		mov	r1, #0
 1417 00a8 0070A0E3 		mov	r7, #0
 1418 00ac 0060E0E3 		mvn	r6, #0
 1419 00b0 030051E1 		cmp	r1, r3
 525:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (recursed->remaining != len || len == UINT32_MAX) {
 1420              		.loc 1 525 0
 1421 00b4 082084E5 		str	r2, [r4, #8]
 526:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             /* back track the pointer to indicate where the error occurred */
 1422              		.loc 1 526 0
 1423 00b8 02005201 		cmpeq	r2, r2
 1424 00bc 0110A013 		movne	r1, #1
 1425 00c0 0010A003 		moveq	r1, #0
 1426 00c4 070053E1 		cmp	r3, r7
 1427 00c8 06005201 		cmpeq	r2, r6
 1428 00cc 01108103 		orreq	r1, r1, #1
 1429 00d0 000051E3 		cmp	r1, #0
 1430 00d4 0300000A 		beq	.L137
 1431              	.L140:
 528:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborErrorDataTooLarge;
 1432              		.loc 1 528 0
 1433 00d8 043095E5 		ldr	r3, [r5, #4]
 529:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         }
 1434              		.loc 1 529 0
 1435 00dc 010BA0E3 		mov	r0, #1024
 1436              	.LVL144:
 528:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborErrorDataTooLarge;
 1437              		.loc 1 528 0
 1438 00e0 043084E5 		str	r3, [r4, #4]
 529:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         }
 1439              		.loc 1 529 0
 1440 00e4 E2FFFFEA 		b	.L131
 1441              	.LVL145:
 1442              	.L137:
 531:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             /* maps have keys and values, so we need to multiply by 2 */
 1443              		.loc 1 531 0
 1444 00e8 0E10D4E5 		ldrb	r1, [r4, #14]	@ zero_extendqisi2
 1445 00ec A00051E3 		cmp	r1, #160
 1446 00f0 0300001A 		bne	.L139
 533:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 /* back track the pointer to indicate where the error occurred */
 1447              		.loc 1 533 0
 1448 00f4 000052E3 		cmp	r2, #0
 1449 00f8 F6FFFFBA 		blt	.L140
 538:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         }
 1450              		.loc 1 538 0
 1451 00fc 8210A0E1 		lsl	r1, r2, #1
 1452 0100 081084E5 		str	r1, [r4, #8]
 1453              	.L139:
 540:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return preparse_value(recursed);
 1454              		.loc 1 540 0
 1455 0104 033092E1 		orrs	r3, r2, r3
 1456 0108 0200000A 		beq	.L135
 541:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 1457              		.loc 1 541 0
 1458 010c 0400A0E1 		mov	r0, r4
 1459              	.LVL146:
 1460 0110 FEFFFFEB 		bl	preparse_value
 1461              	.LVL147:
 1462 0114 D6FFFFEA 		b	.L131
 1463              	.LVL148:
 1464              	.L135:
 1465              	.LBE90:
 545:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     recursed->remaining = 0;
 1466              		.loc 1 545 0
 1467 0118 0030E0E3 		mvn	r3, #0
 546:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 1468              		.loc 1 546 0
 1469 011c 0000A0E3 		mov	r0, #0
 1470              	.LVL149:
 545:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     recursed->remaining = 0;
 1471              		.loc 1 545 0
 1472 0120 0E30C4E5 		strb	r3, [r4, #14]
 546:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 1473              		.loc 1 546 0
 1474 0124 080084E5 		str	r0, [r4, #8]
 547:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1475              		.loc 1 547 0
 1476 0128 D1FFFFEA 		b	.L131
 1477              	.L148:
 1478              		.align	2
 1479              	.L147:
 1480 012c 00000000 		.word	.LC10
 1481 0130 00000000 		.word	.LANCHOR4
 1482 0134 13000000 		.word	.LC1
 1483 0138 00000000 		.word	.LC0
 1484              		.cfi_endproc
 1485              	.LFE66:
 1487              		.section	.text.cbor_value_leave_container,"ax",%progbits
 1488              		.align	2
 1489              		.global	cbor_value_leave_container
 1490              		.syntax unified
 1491              		.arm
 1492              		.fpu neon
 1494              	cbor_value_leave_container:
 1495              	.LFB67:
 563:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_container(it));
 1496              		.loc 1 563 0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 0
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 1500              	.LVL150:
 1501 0000 10402DE9 		push	{r4, lr}
 1502              		.cfi_def_cfa_offset 8
 1503              		.cfi_offset 4, -8
 1504              		.cfi_offset 14, -4
 1505              	.LBB97:
 1506              	.LBB98:
 1507              		.loc 4 255 0
 1508 0004 0E30D0E5 		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 1509              	.LBE98:
 1510              	.LBE97:
 564:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(recursed->type == CborInvalidType);
 1511              		.loc 1 564 0
 1512 0008 DF3003E2 		and	r3, r3, #223
 1513 000c 800053E3 		cmp	r3, #128
 1514 0010 0400000A 		beq	.L150
 1515              	.LVL151:
 1516              	.LBB99:
 1517              	.LBB100:
 1518 0014 34309FE5 		ldr	r3, .L154
 1519 0018 8D1FA0E3 		mov	r1, #564
 1520              	.LVL152:
 1521 001c 30209FE5 		ldr	r2, .L154+4
 1522              	.LVL153:
 1523              	.L153:
 1524              	.LBE100:
 1525              	.LBE99:
 565:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->ptr = recursed->ptr;
 1526              		.loc 1 565 0 discriminator 1
 1527 0020 30009FE5 		ldr	r0, .L154+8
 1528              	.LVL154:
 1529 0024 FEFFFFEB 		bl	__assert_func
 1530              	.LVL155:
 1531              	.L150:
 565:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->ptr = recursed->ptr;
 1532              		.loc 1 565 0 is_stmt 0
 1533 0028 0E30D1E5 		ldrb	r3, [r1, #14]	@ zero_extendqisi2
 1534 002c FF0053E3 		cmp	r3, #255
 565:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     it->ptr = recursed->ptr;
 1535              		.loc 1 565 0 discriminator 1
 1536 0030 24309F15 		ldrne	r3, .L154+12
 1537 0034 35120013 		movwne	r1, #565
 1538              	.LVL156:
 1539 0038 14209F15 		ldrne	r2, .L154+4
 1540 003c F7FFFF1A 		bne	.L153
 1541              	.LVL157:
 1542              	.L151:
 566:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return preparse_next_value(it);
 1543              		.loc 1 566 0 is_stmt 1
 1544 0040 043091E5 		ldr	r3, [r1, #4]
 568:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1545              		.loc 1 568 0
 1546 0044 1040BDE8 		pop	{r4, lr}
 1547              		.cfi_restore 14
 1548              		.cfi_restore 4
 1549              		.cfi_def_cfa_offset 0
 566:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return preparse_next_value(it);
 1550              		.loc 1 566 0
 1551 0048 043080E5 		str	r3, [r0, #4]
 567:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1552              		.loc 1 567 0
 1553 004c FEFFFFEA 		b	preparse_next_value
 1554              	.LVL158:
 1555              	.L155:
 1556              		.align	2
 1557              	.L154:
 1558 0050 00000000 		.word	.LC10
 1559 0054 00000000 		.word	.LANCHOR5
 1560 0058 13000000 		.word	.LC1
 1561 005c 00000000 		.word	.LC11
 1562              		.cfi_endproc
 1563              	.LFE67:
 1565              		.section	.text.cbor_value_get_int64_checked,"ax",%progbits
 1566              		.align	2
 1567              		.global	cbor_value_get_int64_checked
 1568              		.syntax unified
 1569              		.arm
 1570              		.fpu neon
 1572              	cbor_value_get_int64_checked:
 1573              	.LFB68:
 745:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_integer(value));
 1574              		.loc 1 745 0
 1575              		.cfi_startproc
 1576              		@ args = 0, pretend = 0, frame = 0
 1577              		@ frame_needed = 0, uses_anonymous_args = 0
 1578              	.LVL159:
 1579 0000 70402DE9 		push	{r4, r5, r6, lr}
 1580              		.cfi_def_cfa_offset 16
 1581              		.cfi_offset 4, -16
 1582              		.cfi_offset 5, -12
 1583              		.cfi_offset 6, -8
 1584              		.cfi_offset 14, -4
 746:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint64_t v = _cbor_value_extract_int64_helper(value);
 1585              		.loc 1 746 0
 1586 0004 0E30D0E5 		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 1587 0008 000053E3 		cmp	r3, #0
 1588 000c 0400000A 		beq	.L157
 746:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint64_t v = _cbor_value_extract_int64_helper(value);
 1589              		.loc 1 746 0 is_stmt 0 discriminator 1
 1590 0010 60309FE5 		ldr	r3, .L165
 1591 0014 EA1200E3 		movw	r1, #746
 1592              	.LVL160:
 1593 0018 5C209FE5 		ldr	r2, .L165+4
 1594 001c 5C009FE5 		ldr	r0, .L165+8
 1595              	.LVL161:
 1596 0020 FEFFFFEB 		bl	__assert_func
 1597              	.LVL162:
 1598              	.L157:
 1599              	.LBB105:
 1600              	.LBB106:
 256:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_value_enter_container(const CborValue *it, CborValue *recursed);
 257:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_API CborError cbor_value_leave_container(CborValue *it, const CborValue *recursed);
 258:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** 
 259:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_PRIVATE_API uint64_t _cbor_value_decode_int64_internal(const CborValue *value);
 260:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** CBOR_INLINE_API uint64_t _cbor_value_extract_int64_helper(const CborValue *value)
 261:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h **** {
 262:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****     return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
 263:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cbor.h ****                 _cbor_value_decode_int64_internal(value) : value->extra;
 1601              		.loc 4 263 0 is_stmt 1
 1602 0024 0F30D0E5 		ldrb	r3, [r0, #15]	@ zero_extendqisi2
 1603 0028 0040A0E1 		mov	r4, r0
 1604 002c 0150A0E1 		mov	r5, r1
 1605              	.LVL163:
 1606 0030 010013E3 		tst	r3, #1
 1607 0034 BC00D001 		ldrheq	r0, [r0, #12]
 1608              	.LVL164:
 1609 0038 0010A003 		moveq	r1, #0
 1610              	.LVL165:
 1611 003c 0000000A 		beq	.L159
 1612              	.LVL166:
 1613              	.LBB107:
 1614              	.LBB108:
 1615 0040 FEFFFFEB 		bl	_cbor_value_decode_int64_internal
 1616              	.LVL167:
 1617              	.L159:
 1618              	.LBE108:
 1619              	.LBE107:
 1620              	.LBE106:
 1621              	.LBE105:
 759:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorDataTooLarge;
 1622              		.loc 1 759 0
 1623 0044 000050E3 		cmp	r0, #0
 1624 0048 0030D1E2 		sbcs	r3, r1, #0
 1625 004c 070000BA 		blt	.L161
 762:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (value->flags & CborIteratorFlag_NegativeInteger)
 1626              		.loc 1 762 0
 1627 0050 F000C5E1 		strd	r0, [r5]
 763:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *result = -*result - 1;
 1628              		.loc 1 763 0
 1629 0054 0F30D4E5 		ldrb	r3, [r4, #15]	@ zero_extendqisi2
 1630 0058 023013E2 		ands	r3, r3, #2
 764:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 1631              		.loc 1 764 0
 1632 005c 0000E011 		mvnne	r0, r0
 1633 0060 0110E011 		mvnne	r1, r1
 1634 0064 F000C511 		strdne	r0, [r5]
 1635              	.L164:
 765:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1636              		.loc 1 765 0
 1637 0068 0000A0E3 		mov	r0, #0
 1638 006c 7080BDE8 		pop	{r4, r5, r6, pc}
 1639              	.L161:
 760:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1640              		.loc 1 760 0
 1641 0070 010BA0E3 		mov	r0, #1024
 1642 0074 7080BDE8 		pop	{r4, r5, r6, pc}
 1643              	.L166:
 1644              		.align	2
 1645              	.L165:
 1646 0078 00000000 		.word	.LC12
 1647 007c 00000000 		.word	.LANCHOR6
 1648 0080 13000000 		.word	.LC1
 1649              		.cfi_endproc
 1650              	.LFE68:
 1652              		.section	.text.cbor_value_get_int_checked,"ax",%progbits
 1653              		.align	2
 1654              		.global	cbor_value_get_int_checked
 1655              		.syntax unified
 1656              		.arm
 1657              		.fpu neon
 1659              	cbor_value_get_int_checked:
 1660              	.LFB69:
 784:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_integer(value));
 1661              		.loc 1 784 0
 1662              		.cfi_startproc
 1663              		@ args = 0, pretend = 0, frame = 0
 1664              		@ frame_needed = 0, uses_anonymous_args = 0
 1665              	.LVL168:
 1666 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1667              		.cfi_def_cfa_offset 24
 1668              		.cfi_offset 4, -24
 1669              		.cfi_offset 5, -20
 1670              		.cfi_offset 6, -16
 1671              		.cfi_offset 7, -12
 1672              		.cfi_offset 8, -8
 1673              		.cfi_offset 14, -4
 785:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint64_t v = _cbor_value_extract_int64_helper(value);
 1674              		.loc 1 785 0
 1675 0004 0E30D0E5 		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 1676 0008 000053E3 		cmp	r3, #0
 1677 000c 0400000A 		beq	.L168
 785:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint64_t v = _cbor_value_extract_int64_helper(value);
 1678              		.loc 1 785 0 is_stmt 0 discriminator 1
 1679 0010 70309FE5 		ldr	r3, .L177
 1680 0014 111300E3 		movw	r1, #785
 1681              	.LVL169:
 1682 0018 6C209FE5 		ldr	r2, .L177+4
 1683 001c 6C009FE5 		ldr	r0, .L177+8
 1684              	.LVL170:
 1685 0020 FEFFFFEB 		bl	__assert_func
 1686              	.LVL171:
 1687              	.L168:
 1688              	.LBB113:
 1689              	.LBB114:
 1690              		.loc 4 263 0 is_stmt 1
 1691 0024 0F30D0E5 		ldrb	r3, [r0, #15]	@ zero_extendqisi2
 1692 0028 0040A0E1 		mov	r4, r0
 1693 002c 0150A0E1 		mov	r5, r1
 1694              	.LVL172:
 1695 0030 010013E3 		tst	r3, #1
 1696 0034 BC00D001 		ldrheq	r0, [r0, #12]
 1697              	.LVL173:
 1698 0038 0010A003 		moveq	r1, #0
 1699              	.LVL174:
 1700 003c 0000000A 		beq	.L170
 1701              	.LVL175:
 1702              	.LBB115:
 1703              	.LBB116:
 1704 0040 FEFFFFEB 		bl	_cbor_value_decode_int64_internal
 1705              	.LVL176:
 1706              	.L170:
 1707              	.LBE116:
 1708              	.LBE115:
 1709              	.LBE114:
 1710              	.LBE113:
 798:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (unlikely(v > (unsigned) -(INT_MIN + 1)))
 1711              		.loc 1 798 0
 1712 0044 0F30D4E5 		ldrb	r3, [r4, #15]	@ zero_extendqisi2
 1713 0048 0261E0E3 		mvn	r6, #-2147483648
 1714 004c 0070A0E3 		mov	r7, #0
 1715 0050 023013E2 		ands	r3, r3, #2
 1716 0054 0600000A 		beq	.L171
 799:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborErrorDataTooLarge;
 1717              		.loc 1 799 0
 1718 0058 070051E1 		cmp	r1, r7
 1719 005c 06005001 		cmpeq	r0, r6
 1720 0060 0600008A 		bhi	.L174
 803:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     } else {
 1721              		.loc 1 803 0
 1722 0064 0000E0E1 		mvn	r0, r0
 1723              	.L176:
 1724 0068 000085E5 		str	r0, [r5]
 810:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1725              		.loc 1 810 0
 1726 006c 0000A0E3 		mov	r0, #0
 1727 0070 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1728              	.L171:
 805:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return CborErrorDataTooLarge;
 1729              		.loc 1 805 0
 1730 0074 070051E1 		cmp	r1, r7
 1731 0078 06005001 		cmpeq	r0, r6
 1732 007c F9FFFF9A 		bls	.L176
 1733              	.L174:
 800:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1734              		.loc 1 800 0
 1735 0080 010BA0E3 		mov	r0, #1024
 812:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1736              		.loc 1 812 0
 1737 0084 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1738              	.L178:
 1739              		.align	2
 1740              	.L177:
 1741 0088 00000000 		.word	.LC12
 1742 008c 00000000 		.word	.LANCHOR7
 1743 0090 13000000 		.word	.LC1
 1744              		.cfi_endproc
 1745              	.LFE69:
 1747              		.section	.text._cbor_value_copy_string,"ax",%progbits
 1748              		.align	2
 1749              		.global	_cbor_value_copy_string
 1750              		.syntax unified
 1751              		.arm
 1752              		.fpu neon
 1754              	_cbor_value_copy_string:
 1755              	.LFB75:
 998:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 999:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1000:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_copy_text_string(const CborValue *value, char *buffer, size_t *buflen, 
1001:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1002:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Copies the string pointed by \a value into the buffer provided at \a buffer
1003:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * of \a buflen bytes. If \a buffer is a NULL pointer, this function will not
1004:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * copy anything and will only update the \a next value.
1005:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1006:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the iterator \a value does not point to a text string, the behaviour is
1007:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * undefined, so checking with \ref cbor_value_get_type or \ref
1008:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_is_text_string is recommended.
1009:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1010:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the provided buffer length was too small, this function returns an error
1011:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * condition of \ref CborErrorOutOfMemory. If you need to calculate the length
1012:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * of the string in order to preallocate a buffer, use
1013:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_calculate_string_length().
1014:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1015:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * On success, this function sets the number of bytes copied to \c{*buflen}. If
1016:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * the buffer is large enough, this function will insert a null byte after the
1017:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * last copied byte, to facilitate manipulation of text strings. That byte is
1018:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * not included in the returned value of \c{*buflen}.
1019:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1020:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * The \a next pointer, if not null, will be updated to point to the next item
1021:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * after this string. If \a value points to the last item, then \a next will be
1022:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * invalid.
1023:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1024:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * This function may not run in constant time (it will run in O(n) time on the
1025:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * number of chunks). It requires constant memory (O(1)).
1026:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1027:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \note This function does not perform UTF-8 validation on the incoming text
1028:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * string.
1029:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1030:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_dup_text_string(), cbor_value_copy_byte_string(), cbor_value_get_string_length(),
1031:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1032:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1033:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1034:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_copy_byte_string(const CborValue *value, uint8_t *buffer, size_t *bufle
1035:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1036:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Copies the string pointed by \a value into the buffer provided at \a buffer
1037:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * of \a buflen bytes. If \a buffer is a NULL pointer, this function will not
1038:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * copy anything and will only update the \a next value.
1039:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1040:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the iterator \a value does not point to a byte string, the behaviour is
1041:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * undefined, so checking with \ref cbor_value_get_type or \ref
1042:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_is_byte_string is recommended.
1043:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1044:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the provided buffer length was too small, this function returns an error
1045:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * condition of \ref CborErrorOutOfMemory. If you need to calculate the length
1046:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * of the string in order to preallocate a buffer, use
1047:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_calculate_string_length().
1048:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1049:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * On success, this function sets the number of bytes copied to \c{*buflen}. If
1050:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * the buffer is large enough, this function will insert a null byte after the
1051:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * last copied byte, to facilitate manipulation of null-terminated strings.
1052:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * That byte is not included in the returned value of \c{*buflen}.
1053:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1054:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * The \a next pointer, if not null, will be updated to point to the next item
1055:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * after this string. If \a value points to the last item, then \a next will be
1056:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * invalid.
1057:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1058:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * This function may not run in constant time (it will run in O(n) time on the
1059:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * number of chunks). It requires constant memory (O(1)).
1060:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1061:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(),
1062:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1063:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1064:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
1065:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                                  size_t *buflen, CborValue *next)
1066:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 1756              		.loc 1 1066 0
 1757              		.cfi_startproc
 1758              		@ args = 0, pretend = 0, frame = 8
 1759              		@ frame_needed = 0, uses_anonymous_args = 0
 1760              	.LVL177:
 1761 0000 1F402DE9 		push	{r0, r1, r2, r3, r4, lr}
 1762              		.cfi_def_cfa_offset 24
 1763              		.cfi_offset 14, -4
1067:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     bool copied_all;
1068:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
 1764              		.loc 1 1068 0
 1765 0004 000051E3 		cmp	r1, #0
 1766 0008 2CE09FE5 		ldr	lr, .L184
 1767 000c 2CC09FE5 		ldr	ip, .L184+4
 1768 0010 0EC0A001 		moveq	ip, lr
 1769 0014 08108DE8 		stm	sp, {r3, ip}
 1770 0018 0F308DE2 		add	r3, sp, #15
 1771              	.LVL178:
 1772 001c FEFFFFEB 		bl	iterate_string_chunks
 1773              	.LVL179:
1069:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                                           buffer ? iterate_memcpy : iterate_noop);
1070:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return err ? err :
 1774              		.loc 1 1070 0
 1775 0020 000050E3 		cmp	r0, #0
 1776 0024 0200001A 		bne	.L179
 1777              		.loc 1 1070 0 is_stmt 0 discriminator 1
 1778 0028 0F30DDE5 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 1779 002c 000053E3 		cmp	r3, #0
 1780 0030 0201A003 		moveq	r0, #-2147483648
 1781              	.LVL180:
 1782              	.L179:
1071:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                  copied_all ? CborNoError : CborErrorOutOfMemory;
1072:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1783              		.loc 1 1072 0 is_stmt 1
 1784 0034 14D08DE2 		add	sp, sp, #20
 1785              		.cfi_def_cfa_offset 4
 1786              		@ sp needed
 1787 0038 04F09DE4 		ldr	pc, [sp], #4
 1788              	.L185:
 1789              		.align	2
 1790              	.L184:
 1791 003c 00000000 		.word	iterate_noop
 1792 0040 00000000 		.word	iterate_memcpy
 1793              		.cfi_endproc
 1794              	.LFE75:
 1796              		.section	.text.advance_recursive,"ax",%progbits
 1797              		.align	2
 1798              		.syntax unified
 1799              		.arm
 1800              		.fpu neon
 1802              	advance_recursive:
 1803              	.LFB63:
 404:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (is_fixed_type(it->type))
 1804              		.loc 1 404 0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 16
 1807              		@ frame_needed = 0, uses_anonymous_args = 0
 1808              	.LVL181:
 1809 0000 30402DE9 		push	{r4, r5, lr}
 1810              		.cfi_def_cfa_offset 12
 1811              		.cfi_offset 4, -12
 1812              		.cfi_offset 5, -8
 1813              		.cfi_offset 14, -4
 1814 0004 0040A0E1 		mov	r4, r0
 405:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return advance_internal(it);
 1815              		.loc 1 405 0
 1816 0008 0E30D0E5 		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 404:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (is_fixed_type(it->type))
 1817              		.loc 1 404 0
 1818 000c 14D04DE2 		sub	sp, sp, #20
 1819              		.cfi_def_cfa_offset 32
 404:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (is_fixed_type(it->type))
 1820              		.loc 1 404 0
 1821 0010 0150A0E1 		mov	r5, r1
 405:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return advance_internal(it);
 1822              		.loc 1 405 0
 1823 0014 0300A0E1 		mov	r0, r3
 1824              	.LVL182:
 1825 0018 FEFFFFEB 		bl	is_fixed_type
 1826              	.LVL183:
 1827 001c 001050E2 		subs	r1, r0, #0
 1828              	.LVL184:
 1829 0020 0300000A 		beq	.L187
 406:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1830              		.loc 1 406 0
 1831 0024 0400A0E1 		mov	r0, r4
 1832 0028 FEFFFFEB 		bl	advance_internal
 1833              	.LVL185:
 1834              	.L186:
 428:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1835              		.loc 1 428 0
 1836 002c 14D08DE2 		add	sp, sp, #20
 1837              		.cfi_remember_state
 1838              		.cfi_def_cfa_offset 12
 1839              		@ sp needed
 1840 0030 3080BDE8 		pop	{r4, r5, pc}
 1841              	.LVL186:
 1842              	.L187:
 1843              		.cfi_restore_state
 408:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         size_t len = SIZE_MAX;
 1844              		.loc 1 408 0
 1845 0034 DF3003E2 		and	r3, r3, #223
 1846 0038 800053E3 		cmp	r3, #128
 1847 003c 0600000A 		beq	.L189
 1848              	.LBB117:
 409:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return _cbor_value_copy_string(it, NULL, &len, it);
 1849              		.loc 1 409 0
 1850 0040 10208DE2 		add	r2, sp, #16
 1851 0044 0030E0E3 		mvn	r3, #0
 1852 0048 103022E5 		str	r3, [r2, #-16]!
 410:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
 1853              		.loc 1 410 0
 1854 004c 0400A0E1 		mov	r0, r4
 1855 0050 0430A0E1 		mov	r3, r4
 1856 0054 FEFFFFEB 		bl	_cbor_value_copy_string
 1857              	.LVL187:
 1858 0058 F3FFFFEA 		b	.L186
 1859              	.L189:
 1860              	.LBE117:
 414:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorNestingTooDeep;
 1861              		.loc 1 414 0
 1862 005c 010B55E3 		cmp	r5, #1024
 415:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1863              		.loc 1 415 0
 1864 0060 01040003 		movweq	r0, #1025
 414:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorNestingTooDeep;
 1865              		.loc 1 414 0
 1866 0064 F0FFFF0A 		beq	.L186
 419:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (err)
 1867              		.loc 1 419 0
 1868 0068 0D10A0E1 		mov	r1, sp
 1869 006c 0400A0E1 		mov	r0, r4
 1870 0070 FEFFFFEB 		bl	cbor_value_enter_container
 1871              	.LVL188:
 420:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return err;
 1872              		.loc 1 420 0
 1873 0074 000050E3 		cmp	r0, #0
 423:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
 1874              		.loc 1 423 0
 1875 0078 01508502 		addeq	r5, r5, #1
 1876              	.LVL189:
 420:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return err;
 1877              		.loc 1 420 0
 1878 007c EAFFFF1A 		bne	.L186
 1879              	.L190:
 1880              	.LVL190:
 422:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         err = advance_recursive(&recursed, nestingLevel + 1);
 1881              		.loc 1 422 0
 1882 0080 08309DE5 		ldr	r3, [sp, #8]
 1883 0084 000053E3 		cmp	r3, #0
 1884 0088 0300001A 		bne	.L191
 427:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1885              		.loc 1 427 0
 1886 008c 0D10A0E1 		mov	r1, sp
 1887 0090 0400A0E1 		mov	r0, r4
 1888              	.LVL191:
 1889 0094 FEFFFFEB 		bl	cbor_value_leave_container
 1890              	.LVL192:
 1891 0098 E3FFFFEA 		b	.L186
 1892              	.LVL193:
 1893              	.L191:
 423:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
 1894              		.loc 1 423 0
 1895 009c 0510A0E1 		mov	r1, r5
 1896 00a0 0D00A0E1 		mov	r0, sp
 1897              	.LVL194:
 1898 00a4 D5FFFFEB 		bl	advance_recursive
 1899              	.LVL195:
 424:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             return err;
 1900              		.loc 1 424 0
 1901 00a8 000050E3 		cmp	r0, #0
 1902 00ac F3FFFF0A 		beq	.L190
 1903 00b0 DDFFFFEA 		b	.L186
 1904              		.cfi_endproc
 1905              	.LFE63:
 1907              		.section	.text.cbor_value_advance,"ax",%progbits
 1908              		.align	2
 1909              		.global	cbor_value_advance
 1910              		.syntax unified
 1911              		.arm
 1912              		.fpu neon
 1914              	cbor_value_advance:
 1915              	.LFB64:
 443:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(it->type != CborInvalidType);
 1916              		.loc 1 443 0
 1917              		.cfi_startproc
 1918              		@ args = 0, pretend = 0, frame = 0
 1919              		@ frame_needed = 0, uses_anonymous_args = 0
 1920              	.LVL196:
 444:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (!it->remaining)
 1921              		.loc 1 444 0
 1922 0000 0E20D0E5 		ldrb	r2, [r0, #14]	@ zero_extendqisi2
 1923 0004 FF0052E3 		cmp	r2, #255
 1924 0008 0500001A 		bne	.L195
 1925              	.LVL197:
 443:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(it->type != CborInvalidType);
 1926              		.loc 1 443 0
 1927 000c 10402DE9 		push	{r4, lr}
 1928              		.cfi_def_cfa_offset 8
 1929              		.cfi_offset 4, -8
 1930              		.cfi_offset 14, -4
 1931              	.LBB120:
 1932              	.LBB121:
 444:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (!it->remaining)
 1933              		.loc 1 444 0
 1934 0010 6F1FA0E3 		mov	r1, #444
 1935 0014 24309FE5 		ldr	r3, .L200
 1936 0018 24209FE5 		ldr	r2, .L200+4
 1937 001c 24009FE5 		ldr	r0, .L200+8
 1938              	.LVL198:
 1939 0020 FEFFFFEB 		bl	__assert_func
 1940              	.LVL199:
 1941              	.L195:
 1942              		.cfi_def_cfa_offset 0
 1943              		.cfi_restore 4
 1944              		.cfi_restore 14
 1945              	.LBE121:
 1946              	.LBE120:
 445:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborErrorAdvancePastEOF;
 1947              		.loc 1 445 0
 1948 0024 083090E5 		ldr	r3, [r0, #8]
 1949 0028 000053E3 		cmp	r3, #0
 1950 002c 0100000A 		beq	.L196
 447:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1951              		.loc 1 447 0
 1952 0030 0010A0E3 		mov	r1, #0
 1953 0034 FEFFFFEA 		b	advance_recursive
 1954              	.LVL200:
 1955              	.L196:
 448:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
 1956              		.loc 1 448 0
 1957 0038 0300A0E3 		mov	r0, #3
 1958              	.LVL201:
 1959 003c 1EFF2FE1 		bx	lr
 1960              	.L201:
 1961              		.align	2
 1962              	.L200:
 1963 0040 00000000 		.word	.LC8
 1964 0044 00000000 		.word	.LANCHOR8
 1965 0048 13000000 		.word	.LC1
 1966              		.cfi_endproc
 1967              	.LFE64:
 1969              		.section	.text.cbor_value_calculate_string_length,"ax",%progbits
 1970              		.align	2
 1971              		.global	cbor_value_calculate_string_length
 1972              		.syntax unified
 1973              		.arm
 1974              		.fpu neon
 1976              	cbor_value_calculate_string_length:
 1977              	.LFB70:
 894:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     *len = SIZE_MAX;
 1978              		.loc 1 894 0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 0
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
 1982              		@ link register save eliminated.
 1983              	.LVL202:
 895:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return _cbor_value_copy_string(value, NULL, len, NULL);
 1984              		.loc 1 895 0
 1985 0000 0030E0E3 		mvn	r3, #0
 894:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     *len = SIZE_MAX;
 1986              		.loc 1 894 0
 1987 0004 0120A0E1 		mov	r2, r1
 895:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return _cbor_value_copy_string(value, NULL, len, NULL);
 1988              		.loc 1 895 0
 1989 0008 003081E5 		str	r3, [r1]
 896:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 1990              		.loc 1 896 0
 1991 000c 0030A0E3 		mov	r3, #0
 1992 0010 0310A0E1 		mov	r1, r3
 1993              	.LVL203:
 1994 0014 FEFFFFEA 		b	_cbor_value_copy_string
 1995              	.LVL204:
 1996              		.cfi_endproc
 1997              	.LFE70:
 1999              		.section	.text.cbor_value_text_string_equals,"ax",%progbits
 2000              		.align	2
 2001              		.global	cbor_value_text_string_equals
 2002              		.syntax unified
 2003              		.arm
 2004              		.fpu neon
 2006              	cbor_value_text_string_equals:
 2007              	.LFB76:
1073:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1074:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1075:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Compares the entry \a value with the string \a string and store the result
1076:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * in \a result. If the value is different from \a string \a result will
1077:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * contain \c false.
1078:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1079:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * The entry at \a value may be a tagged string. If \a is not a string or a
1080:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * tagged string, the comparison result will be false.
1081:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1082:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * CBOR requires text strings to be encoded in UTF-8, but this function does
1083:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * not validate either the strings in the stream or the string \a string to be
1084:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * matched. Moreover, comparison is done on strict codepoint comparison,
1085:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * without any Unicode normalization.
1086:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1087:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * This function may not run in constant time (it will run in O(n) time on the
1088:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * number of chunks). It requires constant memory (O(1)).
1089:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1090:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_skip_tag(), cbor_value_copy_text_string()
1091:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1092:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_value_text_string_equals(const CborValue *value, const char *string, bool *result)
1093:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 2008              		.loc 1 1093 0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 24
 2011              		@ frame_needed = 0, uses_anonymous_args = 0
 2012              	.LVL205:
 2013 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 2014              		.cfi_def_cfa_offset 20
 2015              		.cfi_offset 4, -20
 2016              		.cfi_offset 5, -16
 2017              		.cfi_offset 6, -12
 2018              		.cfi_offset 7, -8
 2019              		.cfi_offset 14, -4
 2020 0004 0160A0E1 		mov	r6, r1
 2021 0008 0270A0E1 		mov	r7, r2
 2022 000c 24D04DE2 		sub	sp, sp, #36
 2023              		.cfi_def_cfa_offset 56
1094:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     CborValue copy = *value;
 2024              		.loc 1 1094 0
 2025 0010 10408DE2 		add	r4, sp, #16
 2026 0014 0F0090E8 		ldm	r0, {r0, r1, r2, r3}
 2027              	.LVL206:
 2028 0018 0F0084E8 		stm	r4, {r0, r1, r2, r3}
1095:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     CborError err = cbor_value_skip_tag(&copy);
 2029              		.loc 1 1095 0
 2030 001c 0400A0E1 		mov	r0, r4
 2031 0020 FEFFFFEB 		bl	cbor_value_skip_tag
 2032              	.LVL207:
1096:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (err)
 2033              		.loc 1 1096 0
 2034 0024 005050E2 		subs	r5, r0, #0
 2035 0028 0F00001A 		bne	.L203
 2036              	.LVL208:
1097:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return err;
1098:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (!cbor_value_is_text_string(&copy)) {
 2037              		.loc 1 1098 0
 2038 002c 1E30DDE5 		ldrb	r3, [sp, #30]	@ zero_extendqisi2
 2039 0030 600053E3 		cmp	r3, #96
1099:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *result = false;
 2040              		.loc 1 1099 0
 2041 0034 0050C715 		strbne	r5, [r7]
1098:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         *result = false;
 2042              		.loc 1 1098 0
 2043 0038 0B00001A 		bne	.L203
1100:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         return CborNoError;
1101:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
1102:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1103:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     size_t len = strlen(string);
 2044              		.loc 1 1103 0
 2045 003c 0600A0E1 		mov	r0, r6
 2046              	.LVL209:
 2047 0040 FEFFFFEB 		bl	strlen
 2048              	.LVL210:
1104:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return iterate_string_chunks(&copy, CONST_CAST(char *, string), &len, result, NULL, iterate_mem
 2049              		.loc 1 1104 0
 2050 0044 2C309FE5 		ldr	r3, .L207
1103:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return iterate_string_chunks(&copy, CONST_CAST(char *, string), &len, result, NULL, iterate_mem
 2051              		.loc 1 1103 0
 2052 0048 20208DE2 		add	r2, sp, #32
 2053 004c 140022E5 		str	r0, [r2, #-20]!
 2054              		.loc 1 1104 0
 2055 0050 0610A0E1 		mov	r1, r6
 2056 0054 00508DE5 		str	r5, [sp]
 2057 0058 0400A0E1 		mov	r0, r4
 2058 005c 04308DE5 		str	r3, [sp, #4]
 2059 0060 0730A0E1 		mov	r3, r7
 2060 0064 FEFFFFEB 		bl	iterate_string_chunks
 2061              	.LVL211:
 2062 0068 0050A0E1 		mov	r5, r0
 2063              	.LVL212:
 2064              	.L203:
1105:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 2065              		.loc 1 1105 0
 2066 006c 0500A0E1 		mov	r0, r5
 2067 0070 24D08DE2 		add	sp, sp, #36
 2068              		.cfi_def_cfa_offset 20
 2069              		@ sp needed
 2070 0074 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 2071              	.LVL213:
 2072              	.L208:
 2073              		.align	2
 2074              	.L207:
 2075 0078 00000000 		.word	iterate_memcmp
 2076              		.cfi_endproc
 2077              	.LFE76:
 2079              		.section	.text.cbor_value_map_find_value,"ax",%progbits
 2080              		.align	2
 2081              		.global	cbor_value_map_find_value
 2082              		.syntax unified
 2083              		.arm
 2084              		.fpu neon
 2086              	cbor_value_map_find_value:
 2087              	.LFB77:
1106:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1107:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1108:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_array(const CborValue *value)
1109:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1110:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR array.
1111:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1112:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_is_map()
1113:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1114:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1115:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1116:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_array_length(const CborValue *value, size_t *length)
1117:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1118:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Extracts the length of the CBOR array that \a value points to and stores it
1119:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * in \a result. If the iterator \a value does not point to a CBOR array, the
1120:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behaviour is undefined, so checking with \ref cbor_value_get_type or \ref
1121:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_is_array is recommended.
1122:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1123:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the length of this array is not encoded in the CBOR data stream, this
1124:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * function will return the recoverable error CborErrorUnknownLength. You may
1125:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * also check whether that is the case by using cbor_value_is_length_known().
1126:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1127:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \note On 32-bit platforms, this function will return error condition of \ref
1128:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * CborErrorDataTooLarge if the stream indicates a length that is too big to
1129:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * fit in 32-bit.
1130:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1131:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_is_length_known()
1132:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1133:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1134:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1135:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_map(const CborValue *value)
1136:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1137:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR map.
1138:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1139:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_is_array()
1140:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1141:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1142:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1143:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_map_length(const CborValue *value, size_t *length)
1144:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1145:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Extracts the length of the CBOR map that \a value points to and stores it in
1146:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \a result. If the iterator \a value does not point to a CBOR map, the
1147:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behaviour is undefined, so checking with \ref cbor_value_get_type or \ref
1148:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_is_map is recommended.
1149:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1150:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the length of this map is not encoded in the CBOR data stream, this
1151:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * function will return the recoverable error CborErrorUnknownLength. You may
1152:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * also check whether that is the case by using cbor_value_is_length_known().
1153:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1154:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \note On 32-bit platforms, this function will return error condition of \ref
1155:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * CborErrorDataTooLarge if the stream indicates a length that is too big to
1156:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * fit in 32-bit.
1157:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1158:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_is_length_known()
1159:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1160:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1161:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1162:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Attempts to find the value in map \a map that corresponds to the text string
1163:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * entry \a string. If the iterator \a value does not point to a CBOR map, the
1164:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * behaviour is undefined, so checking with \ref cbor_value_get_type or \ref
1165:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_is_map is recommended.
1166:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1167:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * If the item is found, it is stored in \a result. If no item is found
1168:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * matching the key, then \a result will contain an element of type \ref
1169:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * CborInvalidType. Matching is performed using
1170:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_text_string_equals(), so tagged strings will also match.
1171:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1172:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * This function has a time complexity of O(n) where n is the number of
1173:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * elements in the map to be searched. In addition, this function is has O(n)
1174:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * memory requirement based on the number of nested containers (maps or arrays)
1175:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * found as elements of this map.
1176:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1177:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_text_string_equals(), cbor_value_advance()
1178:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1179:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_value_map_find_value(const CborValue *map, const char *string, CborValue *element)
1180:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 2088              		.loc 1 1180 0
 2089              		.cfi_startproc
 2090              		@ args = 0, pretend = 0, frame = 8
 2091              		@ frame_needed = 0, uses_anonymous_args = 0
 2092              	.LVL214:
 2093 0000 FF412DE9 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 2094              		.cfi_def_cfa_offset 40
 2095              		.cfi_offset 4, -24
 2096              		.cfi_offset 5, -20
 2097              		.cfi_offset 6, -16
 2098              		.cfi_offset 7, -12
 2099              		.cfi_offset 8, -8
 2100              		.cfi_offset 14, -4
1181:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_map(map));
 2101              		.loc 1 1181 0
 2102 0004 0E30D0E5 		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 2103 0008 A00053E3 		cmp	r3, #160
 2104 000c 0400000A 		beq	.L210
 2105              		.loc 1 1181 0 is_stmt 0 discriminator 1
 2106 0010 F8309FE5 		ldr	r3, .L225
 2107 0014 9D1400E3 		movw	r1, #1181
 2108              	.LVL215:
 2109 0018 F4209FE5 		ldr	r2, .L225+4
 2110              	.LVL216:
 2111 001c F4009FE5 		ldr	r0, .L225+8
 2112              	.LVL217:
 2113 0020 FEFFFFEB 		bl	__assert_func
 2114              	.LVL218:
 2115              	.L210:
 2116 0024 0050A0E1 		mov	r5, r0
 2117 0028 0240A0E1 		mov	r4, r2
1182:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     size_t len = strlen(string);
 2118              		.loc 1 1182 0 is_stmt 1
 2119 002c 0100A0E1 		mov	r0, r1
 2120              	.LVL219:
 2121 0030 0160A0E1 		mov	r6, r1
 2122 0034 FEFFFFEB 		bl	strlen
 2123              	.LVL220:
1183:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     CborError err = cbor_value_enter_container(map, element);
 2124              		.loc 1 1183 0
 2125 0038 0410A0E1 		mov	r1, r4
1182:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     size_t len = strlen(string);
 2126              		.loc 1 1182 0
 2127 003c 0070A0E1 		mov	r7, r0
 2128              	.LVL221:
 2129              		.loc 1 1183 0
 2130 0040 0500A0E1 		mov	r0, r5
 2131              	.LVL222:
 2132 0044 FEFFFFEB 		bl	cbor_value_enter_container
 2133              	.LVL223:
1184:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (err)
 2134              		.loc 1 1184 0
 2135 0048 005050E2 		subs	r5, r0, #0
 2136              	.LVL224:
 2137              	.LBB122:
1185:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         goto error;
1186:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1187:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     while (!cbor_value_at_end(element)) {
1188:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         /* find the non-tag so we can compare */
1189:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         err = cbor_value_skip_tag(element);
1190:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
1191:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             goto error;
1192:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (cbor_value_is_text_string(element)) {
1193:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             bool equals;
1194:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             size_t dummyLen = len;
1195:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             err = iterate_string_chunks(element, CONST_CAST(char *, string), &dummyLen,
 2138              		.loc 1 1195 0
 2139 004c C8809F05 		ldreq	r8, .L225+12
 2140              	.LBE122:
1184:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     if (err)
 2141              		.loc 1 1184 0
 2142 0050 2600000A 		beq	.L212
 2143 0054 0500A0E1 		mov	r0, r5
 2144              	.L211:
1196:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                                         &equals, element, iterate_memcmp);
1197:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (err)
1198:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 goto error;
1199:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (equals)
1200:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return preparse_value(element);
1201:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         } else {
1202:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             /* skip this key */
1203:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             err = cbor_value_advance(element);
1204:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (err)
1205:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 goto error;
1206:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         }
1207:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1208:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         /* skip this value */
1209:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         err = cbor_value_skip_tag(element);
1210:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
1211:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             goto error;
1212:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         err = cbor_value_advance(element);
1213:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
1214:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             goto error;
1215:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     }
1216:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1217:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     /* not found */
1218:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     element->type = CborInvalidType;
1219:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
1220:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1221:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** error:
1222:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     element->type = CborInvalidType;
 2145              		.loc 1 1222 0
 2146 0058 0030E0E3 		mvn	r3, #0
 2147 005c 0E30C4E5 		strb	r3, [r4, #14]
 2148 0060 140000EA 		b	.L224
 2149              	.LVL225:
 2150              	.L218:
1189:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
 2151              		.loc 1 1189 0
 2152 0064 0400A0E1 		mov	r0, r4
 2153              	.LVL226:
 2154 0068 FEFFFFEB 		bl	cbor_value_skip_tag
 2155              	.LVL227:
1190:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             goto error;
 2156              		.loc 1 1190 0
 2157 006c 000050E3 		cmp	r0, #0
 2158 0070 F8FFFF1A 		bne	.L211
 2159              	.LVL228:
1192:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             bool equals;
 2160              		.loc 1 1192 0
 2161 0074 0E30D4E5 		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 2162 0078 600053E3 		cmp	r3, #96
 2163 007c 0F00001A 		bne	.L213
 2164              	.LBB123:
1195:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                                         &equals, element, iterate_memcmp);
 2165              		.loc 1 1195 0
 2166 0080 10018DE8 		stm	sp, {r4, r8}
 2167 0084 0B308DE2 		add	r3, sp, #11
 2168 0088 0C208DE2 		add	r2, sp, #12
 2169 008c 0610A0E1 		mov	r1, r6
 2170 0090 0400A0E1 		mov	r0, r4
 2171              	.LVL229:
1194:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             err = iterate_string_chunks(element, CONST_CAST(char *, string), &dummyLen,
 2172              		.loc 1 1194 0
 2173 0094 0C708DE5 		str	r7, [sp, #12]
1195:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                                         &equals, element, iterate_memcmp);
 2174              		.loc 1 1195 0
 2175 0098 FEFFFFEB 		bl	iterate_string_chunks
 2176              	.LVL230:
1197:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 goto error;
 2177              		.loc 1 1197 0
 2178 009c 000050E3 		cmp	r0, #0
 2179 00a0 ECFFFF1A 		bne	.L211
1199:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 return preparse_value(element);
 2180              		.loc 1 1199 0
 2181 00a4 0B30DDE5 		ldrb	r3, [sp, #11]	@ zero_extendqisi2
 2182 00a8 000053E3 		cmp	r3, #0
 2183 00ac 0700000A 		beq	.L217
1200:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         } else {
 2184              		.loc 1 1200 0
 2185 00b0 0400A0E1 		mov	r0, r4
 2186              	.LVL231:
 2187 00b4 FEFFFFEB 		bl	preparse_value
 2188              	.LVL232:
 2189              	.L224:
 2190              	.LBE123:
1223:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return err;
 2191              		.loc 1 1223 0
 2192 00b8 0050A0E1 		mov	r5, r0
 2193 00bc 100000EA 		b	.L209
 2194              	.LVL233:
 2195              	.L213:
1203:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             if (err)
 2196              		.loc 1 1203 0
 2197 00c0 0400A0E1 		mov	r0, r4
 2198              	.LVL234:
 2199 00c4 FEFFFFEB 		bl	cbor_value_advance
 2200              	.LVL235:
1204:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****                 goto error;
 2201              		.loc 1 1204 0
 2202 00c8 000050E3 		cmp	r0, #0
 2203 00cc E1FFFF1A 		bne	.L211
 2204              	.L217:
1209:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
 2205              		.loc 1 1209 0
 2206 00d0 0400A0E1 		mov	r0, r4
 2207              	.LVL236:
 2208 00d4 FEFFFFEB 		bl	cbor_value_skip_tag
 2209              	.LVL237:
1210:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             goto error;
 2210              		.loc 1 1210 0
 2211 00d8 000050E3 		cmp	r0, #0
 2212 00dc DDFFFF1A 		bne	.L211
1212:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         if (err)
 2213              		.loc 1 1212 0
 2214 00e0 0400A0E1 		mov	r0, r4
 2215              	.LVL238:
 2216 00e4 FEFFFFEB 		bl	cbor_value_advance
 2217              	.LVL239:
1213:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****             goto error;
 2218              		.loc 1 1213 0
 2219 00e8 000050E3 		cmp	r0, #0
 2220 00ec D9FFFF1A 		bne	.L211
 2221              	.LVL240:
 2222              	.L212:
1187:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****         /* find the non-tag so we can compare */
 2223              		.loc 1 1187 0
 2224 00f0 083094E5 		ldr	r3, [r4, #8]
 2225 00f4 000053E3 		cmp	r3, #0
 2226 00f8 D9FFFF1A 		bne	.L218
1218:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
 2227              		.loc 1 1218 0
 2228 00fc 0030E0E3 		mvn	r3, #0
 2229 0100 0E30C4E5 		strb	r3, [r4, #14]
 2230              	.LVL241:
 2231              	.L209:
1224:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 2232              		.loc 1 1224 0
 2233 0104 0500A0E1 		mov	r0, r5
 2234 0108 10D08DE2 		add	sp, sp, #16
 2235              		.cfi_def_cfa_offset 24
 2236              		@ sp needed
 2237 010c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 2238              	.LVL242:
 2239              	.L226:
 2240              		.align	2
 2241              	.L225:
 2242 0110 00000000 		.word	.LC13
 2243 0114 00000000 		.word	.LANCHOR9
 2244 0118 13000000 		.word	.LC1
 2245 011c 00000000 		.word	iterate_memcmp
 2246              		.cfi_endproc
 2247              	.LFE77:
 2249              		.section	.text.cbor_value_get_half_float,"ax",%progbits
 2250              		.align	2
 2251              		.global	cbor_value_get_half_float
 2252              		.syntax unified
 2253              		.arm
 2254              		.fpu neon
 2256              	cbor_value_get_half_float:
 2257              	.LFB78:
1225:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1226:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1227:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_float(const CborValue *value)
1228:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1229:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR
1230:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * single-precision floating point (32-bit).
1231:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1232:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_is_double(), cbor_value_is_half_float()
1233:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1234:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1235:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1236:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_float(const CborValue *value, float *result)
1237:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1238:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the CBOR single-precision floating point (32-bit) value that \a
1239:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * value points to and stores it in \a result. If the iterator \a value does
1240:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * not point to a single-precision floating point value, the behavior is
1241:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * undefined, so checking with \ref cbor_value_get_type or with \ref
1242:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_is_float is recommended.
1243:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1244:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_float(), cbor_value_get_double()
1245:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1246:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1247:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1248:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_double(const CborValue *value)
1249:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1250:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR
1251:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * double-precision floating point (64-bit).
1252:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1253:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_is_float(), cbor_value_is_half_float()
1254:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1255:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1256:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1257:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn CborError cbor_value_get_double(const CborValue *value, float *result)
1258:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1259:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the CBOR double-precision floating point (64-bit) value that \a
1260:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * value points to and stores it in \a result. If the iterator \a value does
1261:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * not point to a double-precision floating point value, the behavior is
1262:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * undefined, so checking with \ref cbor_value_get_type or with \ref
1263:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_is_double is recommended.
1264:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1265:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_double(), cbor_value_get_float()
1266:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1267:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1268:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1269:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \fn bool cbor_value_is_half_float(const CborValue *value)
1270:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1271:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Returns true if the iterator \a value is valid and points to a CBOR
1272:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * single-precision floating point (16-bit).
1273:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1274:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_is_valid(), cbor_value_is_double(), cbor_value_is_float()
1275:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1276:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1277:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** /**
1278:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Retrieves the CBOR half-precision floating point (16-bit) value that \a
1279:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * value points to and stores it in \a result. If the iterator \a value does
1280:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * not point to a half-precision floating point value, the behavior is
1281:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * undefined, so checking with \ref cbor_value_get_type or with \ref
1282:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * cbor_value_is_half_float is recommended.
1283:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1284:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * Note: since the C language does not have a standard type for half-precision
1285:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * floating point, this function takes a \c{void *} as a parameter for the
1286:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * storage area, which must be at least 16 bits wide.
1287:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  *
1288:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  * \sa cbor_value_get_type(), cbor_value_is_valid(), cbor_value_is_half_float(), cbor_value_get_flo
1289:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****  */
1290:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** CborError cbor_value_get_half_float(const CborValue *value, void *result)
1291:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** {
 2258              		.loc 1 1291 0
 2259              		.cfi_startproc
 2260              		@ args = 0, pretend = 0, frame = 8
 2261              		@ frame_needed = 0, uses_anonymous_args = 0
 2262              	.LVL243:
 2263 0000 13402DE9 		push	{r0, r1, r4, lr}
 2264              		.cfi_def_cfa_offset 16
 2265              		.cfi_offset 4, -8
 2266              		.cfi_offset 14, -4
1292:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     assert(cbor_value_is_half_float(value));
 2267              		.loc 1 1292 0
 2268 0004 0E30D0E5 		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 2269 0008 F90053E3 		cmp	r3, #249
 2270 000c 0400000A 		beq	.L228
 2271              		.loc 1 1292 0 is_stmt 0 discriminator 1
 2272 0010 3C309FE5 		ldr	r3, .L230
 2273 0014 0C1500E3 		movw	r1, #1292
 2274              	.LVL244:
 2275 0018 38209FE5 		ldr	r2, .L230+4
 2276 001c 38009FE5 		ldr	r0, .L230+8
 2277              	.LVL245:
 2278 0020 FEFFFFEB 		bl	__assert_func
 2279              	.LVL246:
 2280              	.L228:
1293:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** 
1294:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     /* size has been computed already */
1295:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     uint16_t v = get16(value->ptr + 1);
 2281              		.loc 1 1295 0 is_stmt 1
 2282 0024 040090E5 		ldr	r0, [r0, #4]
 2283              	.LVL247:
 2284 0028 0140A0E1 		mov	r4, r1
 2285 002c 010080E2 		add	r0, r0, #1
 2286 0030 FEFFFFEB 		bl	get16
 2287              	.LVL248:
 2288 0034 08108DE2 		add	r1, sp, #8
1296:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     memcpy(result, &v, sizeof(v));
 2289              		.loc 1 1296 0
 2290 0038 0220A0E3 		mov	r2, #2
1295:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     memcpy(result, &v, sizeof(v));
 2291              		.loc 1 1295 0
 2292 003c B20061E1 		strh	r0, [r1, #-2]!	@ movhi
 2293              		.loc 1 1296 0
 2294 0040 0400A0E1 		mov	r0, r4
 2295 0044 FEFFFFEB 		bl	memcpy
 2296              	.LVL249:
1297:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c ****     return CborNoError;
1298:D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor\cborparser.c **** }
 2297              		.loc 1 1298 0
 2298 0048 0000A0E3 		mov	r0, #0
 2299 004c 08D08DE2 		add	sp, sp, #8
 2300              		.cfi_def_cfa_offset 8
 2301              		@ sp needed
 2302 0050 1080BDE8 		pop	{r4, pc}
 2303              	.LVL250:
 2304              	.L231:
 2305              		.align	2
 2306              	.L230:
 2307 0054 00000000 		.word	.LC14
 2308 0058 00000000 		.word	.LANCHOR10
 2309 005c 13000000 		.word	.LC1
 2310              		.cfi_endproc
 2311              	.LFE78:
 2313              		.section	.rodata.__func__.7398,"a",%progbits
 2314              		.set	.LANCHOR0,. + 0
 2317              	__func__.7398:
 2318 0000 61647661 		.ascii	"advance_internal\000"
 2318      6E63655F 
 2318      696E7465 
 2318      726E616C 
 2318      00
 2319              		.section	.rodata.__func__.7402,"a",%progbits
 2320              		.set	.LANCHOR2,. + 0
 2323              	__func__.7402:
 2324 0000 5F63626F 		.ascii	"_cbor_value_decode_int64_internal\000"
 2324      725F7661 
 2324      6C75655F 
 2324      6465636F 
 2324      64655F69 
 2325              		.section	.rodata.__func__.7413,"a",%progbits
 2326              		.set	.LANCHOR3,. + 0
 2329              	__func__.7413:
 2330 0000 63626F72 		.ascii	"cbor_value_advance_fixed\000"
 2330      5F76616C 
 2330      75655F61 
 2330      6476616E 
 2330      63655F66 
 2331              		.section	.rodata.__func__.7427,"a",%progbits
 2332              		.set	.LANCHOR8,. + 0
 2335              	__func__.7427:
 2336 0000 63626F72 		.ascii	"cbor_value_advance\000"
 2336      5F76616C 
 2336      75655F61 
 2336      6476616E 
 2336      636500
 2337              		.section	.rodata.__func__.7440,"a",%progbits
 2338              		.set	.LANCHOR4,. + 0
 2341              	__func__.7440:
 2342 0000 63626F72 		.ascii	"cbor_value_enter_container\000"
 2342      5F76616C 
 2342      75655F65 
 2342      6E746572 
 2342      5F636F6E 
 2343              		.section	.rodata.__func__.7446,"a",%progbits
 2344              		.set	.LANCHOR5,. + 0
 2347              	__func__.7446:
 2348 0000 63626F72 		.ascii	"cbor_value_leave_container\000"
 2348      5F76616C 
 2348      75655F6C 
 2348      65617665 
 2348      5F636F6E 
 2349              		.section	.rodata.__func__.7451,"a",%progbits
 2350              		.set	.LANCHOR6,. + 0
 2353              	__func__.7451:
 2354 0000 63626F72 		.ascii	"cbor_value_get_int64_checked\000"
 2354      5F76616C 
 2354      75655F67 
 2354      65745F69 
 2354      6E743634 
 2355              		.section	.rodata.__func__.7457,"a",%progbits
 2356              		.set	.LANCHOR7,. + 0
 2359              	__func__.7457:
 2360 0000 63626F72 		.ascii	"cbor_value_get_int_checked\000"
 2360      5F76616C 
 2360      75655F67 
 2360      65745F69 
 2360      6E745F63 
 2361              		.section	.rodata.__func__.7490,"a",%progbits
 2362              		.set	.LANCHOR1,. + 0
 2365              	__func__.7490:
 2366 0000 69746572 		.ascii	"iterate_string_chunks\000"
 2366      6174655F 
 2366      73747269 
 2366      6E675F63 
 2366      68756E6B 
 2367              		.section	.rodata.__func__.7520,"a",%progbits
 2368              		.set	.LANCHOR9,. + 0
 2371              	__func__.7520:
 2372 0000 63626F72 		.ascii	"cbor_value_map_find_value\000"
 2372      5F76616C 
 2372      75655F6D 
 2372      61705F66 
 2372      696E645F 
 2373              		.section	.rodata.__func__.7533,"a",%progbits
 2374              		.set	.LANCHOR10,. + 0
 2377              	__func__.7533:
 2378 0000 63626F72 		.ascii	"cbor_value_get_half_float\000"
 2378      5F76616C 
 2378      75655F67 
 2378      65745F68 
 2378      616C665F 
 2379              		.section	.rodata._cbor_value_decode_int64_internal.str1.1,"aMS",%progbits,1
 2380              	.LC5:
 2381 0000 76616C75 		.ascii	"value->flags & CborIteratorFlag_IntegerValueTooLarg"
 2381      652D3E66 
 2381      6C616773 
 2381      20262043 
 2381      626F7249 
 2382 0033 65207C7C 		.ascii	"e || value->type == CborFloatType || value->type =="
 2382      2076616C 
 2382      75652D3E 
 2382      74797065 
 2382      203D3D20 
 2383 0066 2043626F 		.ascii	" CborDoubleType\000"
 2383      72446F75 
 2383      626C6554 
 2383      79706500 
 2384              	.LC6:
 2385 0076 282A7661 		.ascii	"(*value->ptr & SmallValueMask) == Value32Bit || (*v"
 2385      6C75652D 
 2385      3E707472 
 2385      20262053 
 2385      6D616C6C 
 2386 00a9 616C7565 		.ascii	"alue->ptr & SmallValueMask) == Value64Bit\000"
 2386      2D3E7074 
 2386      72202620 
 2386      536D616C 
 2386      6C56616C 
 2387              	.LC7:
 2388 00d3 282A7661 		.ascii	"(*value->ptr & SmallValueMask) == Value64Bit\000"
 2388      6C75652D 
 2388      3E707472 
 2388      20262053 
 2388      6D616C6C 
 2389              		.section	.rodata.advance_internal.str1.1,"aMS",%progbits,1
 2390              	.LC0:
 2391 0000 65727220 		.ascii	"err == CborNoError\000"
 2391      3D3D2043 
 2391      626F724E 
 2391      6F457272 
 2391      6F7200
 2392              	.LC1:
 2393 0013 443A2F57 		.ascii	"D:/Work/DeviceTester/amazon-freertos/lib/third_part"
 2393      6F726B2F 
 2393      44657669 
 2393      63655465 
 2393      73746572 
 2394 0046 792F7469 		.ascii	"y/tinycbor/cborparser.c\000"
 2394      6E796362 
 2394      6F722F63 
 2394      626F7270 
 2394      61727365 
 2395              	.LC2:
 2396 005e 6C656E67 		.ascii	"length == (size_t)length\000"
 2396      7468203D 
 2396      3D202873 
 2396      697A655F 
 2396      74296C65 
 2397              	.LC3:
 2398 0077 2869742D 		.ascii	"(it->flags & CborIteratorFlag_UnknownLength) == 0\000"
 2398      3E666C61 
 2398      67732026 
 2398      2043626F 
 2398      72497465 
 2399              		.section	.rodata.cbor_value_advance_fixed.str1.1,"aMS",%progbits,1
 2400              	.LC8:
 2401 0000 69742D3E 		.ascii	"it->type != CborInvalidType\000"
 2401      74797065 
 2401      20213D20 
 2401      43626F72 
 2401      496E7661 
 2402              	.LC9:
 2403 001c 69735F66 		.ascii	"is_fixed_type(it->type)\000"
 2403      69786564 
 2403      5F747970 
 2403      65286974 
 2403      2D3E7479 
 2404              		.section	.rodata.cbor_value_enter_container.str1.1,"aMS",%progbits,1
 2405              	.LC10:
 2406 0000 63626F72 		.ascii	"cbor_value_is_container(it)\000"
 2406      5F76616C 
 2406      75655F69 
 2406      735F636F 
 2406      6E746169 
 2407              		.section	.rodata.cbor_value_get_half_float.str1.1,"aMS",%progbits,1
 2408              	.LC14:
 2409 0000 63626F72 		.ascii	"cbor_value_is_half_float(value)\000"
 2409      5F76616C 
 2409      75655F69 
 2409      735F6861 
 2409      6C665F66 
 2410              		.section	.rodata.cbor_value_get_int64_checked.str1.1,"aMS",%progbits,1
 2411              	.LC12:
 2412 0000 63626F72 		.ascii	"cbor_value_is_integer(value)\000"
 2412      5F76616C 
 2412      75655F69 
 2412      735F696E 
 2412      74656765 
 2413              		.section	.rodata.cbor_value_leave_container.str1.1,"aMS",%progbits,1
 2414              	.LC11:
 2415 0000 72656375 		.ascii	"recursed->type == CborInvalidType\000"
 2415      72736564 
 2415      2D3E7479 
 2415      7065203D 
 2415      3D204362 
 2416              		.section	.rodata.cbor_value_map_find_value.str1.1,"aMS",%progbits,1
 2417              	.LC13:
 2418 0000 63626F72 		.ascii	"cbor_value_is_map(map)\000"
 2418      5F76616C 
 2418      75655F69 
 2418      735F6D61 
 2418      70286D61 
 2419              		.section	.rodata.iterate_string_chunks.str1.1,"aMS",%progbits,1
 2420              	.LC4:
 2421 0000 63626F72 		.ascii	"cbor_value_is_byte_string(value) || cbor_value_is_t"
 2421      5F76616C 
 2421      75655F69 
 2421      735F6279 
 2421      74655F73 
 2422 0033 6578745F 		.ascii	"ext_string(value)\000"
 2422      73747269 
 2422      6E672876 
 2422      616C7565 
 2422      2900
 2423              		.text
 2424              	.Letext0:
 2425              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 2426              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 2427              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 2428              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 2429              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 2430              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 2431              		.file 11 "D:/Work/DeviceTester/amazon-freertos/lib/third_party/tinycbor/cborconstants_p.h"
 2432              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 2433              		.file 13 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 2434              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
DEFINED SYMBOLS
                            *ABS*:00000000 cborparser.c
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:17     .text.is_fixed_type:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:22     .text.is_fixed_type:00000000 is_fixed_type
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:48     .text.iterate_noop:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:53     .text.iterate_noop:00000000 iterate_noop
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:69     .text.get16:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:74     .text.get16:00000000 get16
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:106    .text.iterate_memcpy:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:111    .text.iterate_memcpy:00000000 iterate_memcpy
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:126    .text.preparse_value:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:131    .text.preparse_value:00000000 preparse_value
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:280    .text.preparse_value:0000011c $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:290    .text.preparse_value:0000013c $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:341    .text.preparse_next_value:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:346    .text.preparse_next_value:00000000 preparse_next_value
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:404    .text.extract_number:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:409    .text.extract_number:00000000 extract_number
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:556    .text.advance_internal:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:561    .text.advance_internal:00000000 advance_internal
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:639    .text.advance_internal:00000098 $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:648    .text.iterate_memcmp:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:653    .text.iterate_memcmp:00000000 iterate_memcmp
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:675    .text.iterate_string_chunks:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:680    .text.iterate_string_chunks:00000000 iterate_string_chunks
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:985    .text.iterate_string_chunks:0000024c $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:995    .text._cbor_value_decode_int64_internal:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1001   .text._cbor_value_decode_int64_internal:00000000 _cbor_value_decode_int64_internal
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1107   .text._cbor_value_decode_int64_internal:000000bc $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1116   .text.cbor_parser_init:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1122   .text.cbor_parser_init:00000000 cbor_parser_init
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1184   .text.cbor_value_advance_fixed:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1190   .text.cbor_value_advance_fixed:00000000 cbor_value_advance_fixed
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1259   .text.cbor_value_advance_fixed:00000060 $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1267   .text.cbor_value_skip_tag:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1273   .text.cbor_value_skip_tag:00000000 cbor_value_skip_tag
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1310   .text.cbor_value_enter_container:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1316   .text.cbor_value_enter_container:00000000 cbor_value_enter_container
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1480   .text.cbor_value_enter_container:0000012c $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1488   .text.cbor_value_leave_container:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1494   .text.cbor_value_leave_container:00000000 cbor_value_leave_container
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1558   .text.cbor_value_leave_container:00000050 $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1566   .text.cbor_value_get_int64_checked:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1572   .text.cbor_value_get_int64_checked:00000000 cbor_value_get_int64_checked
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1646   .text.cbor_value_get_int64_checked:00000078 $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1653   .text.cbor_value_get_int_checked:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1659   .text.cbor_value_get_int_checked:00000000 cbor_value_get_int_checked
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1741   .text.cbor_value_get_int_checked:00000088 $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1748   .text._cbor_value_copy_string:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1754   .text._cbor_value_copy_string:00000000 _cbor_value_copy_string
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1791   .text._cbor_value_copy_string:0000003c $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1797   .text.advance_recursive:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1802   .text.advance_recursive:00000000 advance_recursive
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1908   .text.cbor_value_advance:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1914   .text.cbor_value_advance:00000000 cbor_value_advance
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1963   .text.cbor_value_advance:00000040 $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1970   .text.cbor_value_calculate_string_length:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:1976   .text.cbor_value_calculate_string_length:00000000 cbor_value_calculate_string_length
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2000   .text.cbor_value_text_string_equals:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2006   .text.cbor_value_text_string_equals:00000000 cbor_value_text_string_equals
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2075   .text.cbor_value_text_string_equals:00000078 $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2080   .text.cbor_value_map_find_value:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2086   .text.cbor_value_map_find_value:00000000 cbor_value_map_find_value
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2242   .text.cbor_value_map_find_value:00000110 $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2250   .text.cbor_value_get_half_float:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2256   .text.cbor_value_get_half_float:00000000 cbor_value_get_half_float
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2307   .text.cbor_value_get_half_float:00000054 $d
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2317   .rodata.__func__.7398:00000000 __func__.7398
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2323   .rodata.__func__.7402:00000000 __func__.7402
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2329   .rodata.__func__.7413:00000000 __func__.7413
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2335   .rodata.__func__.7427:00000000 __func__.7427
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2341   .rodata.__func__.7440:00000000 __func__.7440
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2347   .rodata.__func__.7446:00000000 __func__.7446
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2353   .rodata.__func__.7451:00000000 __func__.7451
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2359   .rodata.__func__.7457:00000000 __func__.7457
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2365   .rodata.__func__.7490:00000000 __func__.7490
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2371   .rodata.__func__.7520:00000000 __func__.7520
C:\Users\a5089698\AppData\Local\Temp\cczXFVF4.s:2377   .rodata.__func__.7533:00000000 __func__.7533
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcpy
__assert_func
memcmp
memset
strlen
