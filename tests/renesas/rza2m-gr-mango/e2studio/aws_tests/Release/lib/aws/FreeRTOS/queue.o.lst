   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"queue.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  20              		.fpu neon
  22              	prvIsQueueEmpty:
  23              	.LFB32:
  24              		.file 1 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/queue.c"
   1:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*
   2:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * FreeRTOS Kernel V10.1.1
   3:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  *
   5:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * the Software without restriction, including without limitation the rights to
   8:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * subject to the following conditions:
  11:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  *
  12:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * copies or substantial portions of the Software.
  14:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  *
  15:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  *
  22:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * http://www.FreeRTOS.org
  23:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * http://aws.amazon.com/freertos
  24:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  *
  25:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * 1 tab == 4 spaces!
  26:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  */
  27:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  28:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #include <stdlib.h>
  29:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #include <string.h>
  30:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  31:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** task.h is included from an application file. */
  34:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  36:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #include "FreeRTOS.h"
  37:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #include "task.h"
  38:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #include "queue.h"
  39:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  40:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#include "croutine.h"
  42:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif
  43:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  44:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** for the header files above, but not in this file, in order to generate the
  47:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  50:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  51:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  55:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** being used for. */
  64:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #define uxQueueType						pcHead
  65:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  67:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** typedef struct QueuePointers
  68:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
  69:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** } QueuePointers_t;
  72:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  73:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** typedef struct SemaphoreData
  74:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
  75:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** } SemaphoreData_t;
  78:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  79:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** zero. */
  81:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  84:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	performed just because a higher priority task has been woken. */
  87:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  88:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #else
  89:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  90:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif
  91:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  92:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*
  93:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Definition of the queue used by the scheduler.
  94:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  */
  97:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
  98:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
  99:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	union
 103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	} u;
 107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#endif
 121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#endif
 125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		UBaseType_t uxQueueNumber;
 128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		uint8_t ucQueueType;
 129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#endif
 130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** } xQUEUE;
 132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** typedef xQUEUE Queue_t;
 136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*
 140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  */
 143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	more user friendly. */
 148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		QueueHandle_t xHandle;
 152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	} xQueueRegistryItem;
 153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	debuggers. */
 157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	array position being vacant. */
 162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*
 167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  */
 174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*
 177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  *
 179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  */
 181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*
 184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  *
 186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  */
 188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*
 191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * back of the queue.
 193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  */
 194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*
 197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Copies an item out of a queue.
 198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  */
 199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/*
 203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	 * the queue set that the queue contains data.
 205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	 */
 206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif
 208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*
 210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * dynamically to fill in the structure's members.
 212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  */
 213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*
 216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * as a mutex.
 219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  */
 220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( configUSE_MUTEXES == 1 )
 221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif
 223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( configUSE_MUTEXES == 1 )
 225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/*
 226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	 * that priority.
 231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	 */
 232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif
 234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*
 237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  * accessing the queue event lists.
 239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c ****  */
 240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #define prvLockQueue( pxQueue )								\
 241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskENTER_CRITICAL();									\
 242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{														\
 243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{													\
 245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}													\
 247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{													\
 249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}													\
 251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}														\
 252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskEXIT_CRITICAL()
 253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
 257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
 258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue );
 260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskENTER_CRITICAL();
 262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
 264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( xNewQueue == pdFALSE )
 271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			it will be possible to write to it. */
 277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
 284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
 289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
 294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskEXIT_CRITICAL();
 301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	versions. */
 304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return pdPASS;
 305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
 306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t *pxNewQueue;
 313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		supplied. */
 318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( pxStaticQueue != NULL );
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		should not be provided if the item size is 0. */
 322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			the real queue and semaphore structures. */
 330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		#endif /* configASSERT_DEFINED */
 335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		The address of a statically allocated storage area was also passed in
 338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		but is already set. */
 339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxNewQueue != NULL )
 342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				note this queue was allocated statically in case the queue is
 347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				later deleted. */
 348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
 355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return pxNewQueue;
 361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t *pxNewQueue;
 371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	size_t xQueueSizeInBytes;
 372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	uint8_t *pucQueueStorage;
 373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* There is not going to be a queue storage area. */
 379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
 382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			can be in the queue at any time. */
 385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
 396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		two bytes). */
 397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxNewQueue != NULL )
 400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Jump past the queue structure to find the location of the queue
 402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			storage area. */
 403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Queues can be created either statically or dynamically, so
 409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				note this task was created dynamically in case it is later
 410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				deleted. */
 411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
 418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			mtCOVERAGE_TEST_MARKER();
 421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return pxNewQueue;
 424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
 431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Remove compiler warnings about unused parameters should
 432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	( void ) ucQueueType;
 434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		value that is known to be within the memory map. */
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	else
 444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Set the head to the start of the queue storage area. */
 446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Initialise the queue members as described where the queue type is
 450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	defined. */
 451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
 469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( configUSE_MUTEXES == 1 )
 472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxNewQueue != NULL )
 476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* The queue create function will set all the queue structure members
 478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			correctly for a generic queue, but this function is creating a
 479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			in particular the information required for priority inheritance. */
 481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* In case this is a recursive mutex. */
 485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Start with the semaphore in the expected state. */
 490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
 493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceCREATE_MUTEX_FAILED();
 495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_MUTEXES */
 499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xNewQueue;
 506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return xNewQueue;
 512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_MUTEXES */
 515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xNewQueue;
 522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Prevent compiler warnings about unused parameters if
 525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		( void ) ucQueueType;
 527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return xNewQueue;
 532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_MUTEXES */
 535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	TaskHandle_t pxReturn;
 542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		identity of the mutex holder, as the holder may change between the
 548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		following critical section exiting and the function returning. */
 549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		taskENTER_CRITICAL();
 550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
 556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxReturn = NULL;
 558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		taskEXIT_CRITICAL();
 561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return pxReturn;
 563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif
 566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	TaskHandle_t pxReturn;
 573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( xSemaphore );
 575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		not required here. */
 579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
 584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxReturn = NULL;
 586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return pxReturn;
 589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif
 592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xReturn;
 599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( pxMutex );
 602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
 604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		this is the only condition we are interested in it does not matter if
 607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			uxRecursiveCallCount member. */
 618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Has the recursive call count unwound to 0? */
 621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				task that might be waiting to access the mutex. */
 625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
 628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
 630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdPASS;
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* The mutex cannot be given because the calling task is not the
 637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			holder. */
 638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdFAIL;
 639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return xReturn;
 644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xReturn;
 654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( pxMutex );
 657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Comments regarding mutual exclusion as per those within
 659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		xQueueGiveMutexRecursive(). */
 660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdPASS;
 667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
 669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			obtained.  The calling task may have entered the Blocked state
 674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			before reaching here. */
 675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( xReturn != pdFAIL )
 676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
 680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return xReturn;
 686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xHandle;
 696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxMaxCount != 0 );
 698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( xHandle != NULL )
 703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
 709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return xHandle;
 714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xHandle;
 724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxMaxCount != 0 );
 726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( xHandle != NULL )
 731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
 737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return xHandle;
 742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
 749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** TimeOut_t xTimeOut;
 751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
 752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue );
 754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#endif
 761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	allow return statements within the function itself.  This is done in the
 765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	interest of execution time efficiency. */
 766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	for( ;; )
 767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		taskENTER_CRITICAL();
 769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Is there room on the queue now?  The running task must be the
 771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			highest priority task wanting to access the queue.  If the head item
 772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			in the queue is to be overwritten then it does not matter if the
 773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			queue is full. */
 774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_SEND( pxQueue );
 777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							/* Do not notify the queue set as an existing item
 789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							was overwritten in the queue so the number of items
 790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							in the queue has not changed. */
 791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
 792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							/* The queue is a member of a queue set, and posting
 796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							to the queue set caused a higher priority task to
 797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							unblock. A context switch is required. */
 798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else
 801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
 806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						/* If there was a task waiting for data to arrive on the
 808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						queue then unblock it now. */
 809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
 813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								/* The unblocked task has a priority higher than
 814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								our own so yield immediately.  Yes it is ok to
 815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								do this from within the critical section - the
 816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								kernel takes care of that. */
 817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
 819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							else
 820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
 821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								mtCOVERAGE_TEST_MARKER();
 822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
 823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else if( xYieldRequired != pdFALSE )
 825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							/* This path is a special case that will only get
 827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							executed if the task was holding multiple mutexes
 828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							and the mutexes were given back in an order that is
 829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							different to that in which they were taken. */
 830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else
 833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
 835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#else /* configUSE_QUEUE_SETS */
 839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* If there was a task waiting for data to arrive on the
 843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					queue then unblock it now. */
 844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							/* The unblocked task has a priority higher than
 849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							our own so yield immediately.  Yes it is ok to do
 850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							this from within the critical section - the kernel
 851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							takes care of that. */
 852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else
 855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
 857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else if( xYieldRequired != pdFALSE )
 860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						/* This path is a special case that will only get
 862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						executed if the task was holding multiple mutexes and
 863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						the mutexes were given back in an order that is
 864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						different to that in which they were taken. */
 865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
 868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
 870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				taskEXIT_CRITICAL();
 875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				return pdPASS;
 876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
 878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* The queue was full and no block time is specified (or
 882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					the block time has expired) so leave now. */
 883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					taskEXIT_CRITICAL();
 884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* Return to the original privilege level before exiting
 886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					the function. */
 887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					return errQUEUE_FULL;
 889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* The queue was full and a block time was specified so
 893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					configure the timeout structure. */
 894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					xEntryTimeSet = pdTRUE;
 896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
 898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* Entry time was already set. */
 900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
 901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		taskEXIT_CRITICAL();
 905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		now the critical section has been exited. */
 908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		vTaskSuspendAll();
 910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvLockQueue( pxQueue );
 911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Unlocking the queue means queue events can effect the
 921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				event list.  It is possible that interrupts occurring now
 922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				remove this task from the event list again - but as the
 923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				scheduler is suspended the task will go onto the pending
 924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				ready last instead of the actual ready list. */
 925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvUnlockQueue( pxQueue );
 926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				ready list into the ready list - so it is feasible that this
 929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				task is already in a ready list before it yields - in which
 930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				case the yield will not cause a context switch unless there
 931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				is also a higher priority task in the pending ready list. */
 932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					portYIELD_WITHIN_API();
 935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
 938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Try again. */
 940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvUnlockQueue( pxQueue );
 941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				( void ) xTaskResumeAll();
 942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
 945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* The timeout has expired. */
 947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			prvUnlockQueue( pxQueue );
 948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) xTaskResumeAll();
 949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			return errQUEUE_FULL;
 952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	} /*lint -restore */
 954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
 955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
 959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
 960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxSavedInterruptStatus;
 961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
 962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue );
 964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	assigned a priority above the configured maximum system call priority.
 975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	read, instead return a flag to say whether a context switch is required or
 986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	post). */
 988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			called here even though the disinherit function does not check if
1000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			the scheduler is suspended before accessing the ready lists. */
1001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			be done when the queue is unlocked later. */
1005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( cTxLock == queueUNLOCKED )
1006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
1012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							/* The queue is a member of a queue set, and posting
1014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							to the queue set caused a higher priority task to
1015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							unblock.  A context switch is required. */
1016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							else
1021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								mtCOVERAGE_TEST_MARKER();
1023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else
1026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
1031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								/* The task waiting has a higher priority so
1037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								record that a context switch is required. */
1038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								{
1040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								}
1042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								else
1043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								{
1044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 									mtCOVERAGE_TEST_MARKER();
1045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								}
1046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							else
1048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								mtCOVERAGE_TEST_MARKER();
1050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else
1053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#else /* configUSE_QUEUE_SETS */
1059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							/* The task waiting has a higher priority so record that a
1065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							context	switch is required. */
1066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							else
1071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								mtCOVERAGE_TEST_MARKER();
1073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else
1076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
1081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				knows that data was posted while it was locked. */
1091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdPASS;
1095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
1097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = errQUEUE_FULL;
1100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
1102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return xReturn;
1105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
1106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
1107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
1110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
1111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxSavedInterruptStatus;
1112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
1113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	read, instead return a flag to say whether a context switch is required or
1117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	post). */
1119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue );
1121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	if the item size is not 0. */
1124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	interrupts, only tasks. */
1129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
1130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	assigned a priority above the configured maximum system call priority.
1139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		space'. */
1154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			messages (semaphores) available. */
1166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			be done when the queue is unlocked later. */
1170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( cTxLock == queueUNLOCKED )
1171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							/* The semaphore is a member of a queue set, and
1179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							posting	to the queue set caused a higher priority
1180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							task to	unblock.  A context switch is required. */
1181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							else
1186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								mtCOVERAGE_TEST_MARKER();
1188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else
1191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
1196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								/* The task waiting has a higher priority so
1202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								record that a context switch is required. */
1203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								{
1205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								}
1207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								else
1208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								{
1209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 									mtCOVERAGE_TEST_MARKER();
1210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								}
1211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							else
1213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								mtCOVERAGE_TEST_MARKER();
1215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else
1218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#else /* configUSE_QUEUE_SETS */
1224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							/* The task waiting has a higher priority so record that a
1230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							context	switch is required. */
1231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							else
1236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
1237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 								mtCOVERAGE_TEST_MARKER();
1238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
1239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else
1241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
1246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				knows that data was posted while it was locked. */
1256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdPASS;
1260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
1262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = errQUEUE_FULL;
1265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
1267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return xReturn;
1270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
1271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
1272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
1275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** TimeOut_t xTimeOut;
1277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
1278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Check the pointer is not NULL. */
1280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( ( pxQueue ) );
1281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	is zero (so no data is copied into the buffer. */
1284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Cannot block if the scheduler is suspended. */
1287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
1291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#endif
1292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	allow return statements within the function itself.  This is done in the
1296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	interest of execution time efficiency. */
1297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	for( ;; )
1298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		taskENTER_CRITICAL();
1300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			must be the highest priority task wanting to access the queue. */
1305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Data available, remove one item. */
1308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				task. */
1315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
1322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
1327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				taskEXIT_CRITICAL();
1332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				return pdPASS;
1333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* The queue was empty and no block time is specified (or
1339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					the block time has expired) so leave now. */
1340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					taskEXIT_CRITICAL();
1341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					return errQUEUE_EMPTY;
1343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* The queue was empty and a block time was specified so
1347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					configure the timeout structure. */
1348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					xEntryTimeSet = pdTRUE;
1350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
1352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* Entry time was already set. */
1354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		taskEXIT_CRITICAL();
1359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		now the critical section has been exited. */
1362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		vTaskSuspendAll();
1364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvLockQueue( pxQueue );
1365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvUnlockQueue( pxQueue );
1376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					portYIELD_WITHIN_API();
1379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
1381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				data. */
1389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvUnlockQueue( pxQueue );
1390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				( void ) xTaskResumeAll();
1391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
1394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			back and attempt to read the data. */
1397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			prvUnlockQueue( pxQueue );
1398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) xTaskResumeAll();
1399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				return errQUEUE_EMPTY;
1404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
1408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	} /*lint -restore */
1411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
1412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
1413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
1416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** TimeOut_t xTimeOut;
1418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
1419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( configUSE_MUTEXES == 1 )
1421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif
1423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Check the queue pointer is not NULL. */
1425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( ( pxQueue ) );
1426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	0. */
1429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Cannot block if the scheduler is suspended. */
1432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
1436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#endif
1437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	statements within the function itself.  This is done in the interest
1441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	of execution time efficiency. */
1442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	for( ;; )
1443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		taskENTER_CRITICAL();
1445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			number of messages in the queue is the semaphore's count value. */
1448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			must be the highest priority task wanting to access the queue. */
1452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						/* Record the information required to implement
1465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						priority inheritance should it become necessary. */
1466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
1469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#endif /* configUSE_MUTEXES */
1474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
1484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
1489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				taskEXIT_CRITICAL();
1494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				return pdPASS;
1495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* For inheritance to have occurred there must have been an
1501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if it were 0 the function would have exited. */
1503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					#if( configUSE_MUTEXES == 1 )
1504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					#endif /* configUSE_MUTEXES */
1508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* The semaphore count was 0 and no block time is specified
1510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					(or the block time has expired) so exit now. */
1511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					taskEXIT_CRITICAL();
1512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					return errQUEUE_EMPTY;
1514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* The semaphore count was 0 and a block time was specified
1518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					so configure the timeout structure ready to block. */
1519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					xEntryTimeSet = pdTRUE;
1521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
1523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* Entry time was already set. */
1525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		taskEXIT_CRITICAL();
1530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		now the critical section has been exited. */
1533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		vTaskSuspendAll();
1535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvLockQueue( pxQueue );
1536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			become available.  As semaphores are implemented with queues the
1543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						taskENTER_CRITICAL();
1553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
1555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						taskEXIT_CRITICAL();
1557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
1559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#endif
1564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvUnlockQueue( pxQueue );
1567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					portYIELD_WITHIN_API();
1570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
1572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				attempt to take the semaphore again. */
1580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvUnlockQueue( pxQueue );
1581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				( void ) xTaskResumeAll();
1582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
1585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Timed out. */
1587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			prvUnlockQueue( pxQueue );
1588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) xTaskResumeAll();
1589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			known to be available.  As semaphores are implemented by queues the
1593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* xInheritanceOccurred could only have be set if
1599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					test the mutex type again to check it is actually a mutex. */
1601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						taskENTER_CRITICAL();
1604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							/* This task blocking on the mutex caused another
1608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							task to inherit this task's priority.  Now this task
1609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							has timed out the priority should be disinherited
1610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							again, but only as low as the next highest priority
1611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							task that is waiting for the same mutex. */
1612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
1614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						taskEXIT_CRITICAL();
1616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				#endif /* configUSE_MUTEXES */
1619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				return errQUEUE_EMPTY;
1622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
1626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	} /*lint -restore */
1629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
1630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
1631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
1634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** TimeOut_t xTimeOut;
1636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** int8_t *pcOriginalReadPosition;
1637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
1638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Check the pointer is not NULL. */
1640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( ( pxQueue ) );
1641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	is zero (so no data is copied into the buffer. */
1644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Cannot block if the scheduler is suspended. */
1647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
1651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#endif
1652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	allow return statements within the function itself.  This is done in the
1656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	interest of execution time efficiency. */
1657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	for( ;; )
1658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		taskENTER_CRITICAL();
1660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			must be the highest priority task wanting to access the queue. */
1665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Remember the read position so it can be reset after the data
1668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				is read from the queue as this function is only peeking the
1669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				data, not removing it. */
1670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_PEEK( pxQueue );
1674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* The data is being left in the queue, so see if there are
1679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				any other tasks waiting for the data. */
1680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						/* The task waiting has a higher priority than this task. */
1685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
1688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
1693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				taskEXIT_CRITICAL();
1698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				return pdPASS;
1699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* The queue was empty and no block time is specified (or
1705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					the block time has expired) so leave now. */
1706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					taskEXIT_CRITICAL();
1707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					return errQUEUE_EMPTY;
1709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* The queue was empty and a block time was specified so
1713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					configure the timeout structure ready to enter the blocked
1714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					state. */
1715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					xEntryTimeSet = pdTRUE;
1717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
1719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* Entry time was already set. */
1721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		taskEXIT_CRITICAL();
1726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		now the critical section has been exited. */
1729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		vTaskSuspendAll();
1731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvLockQueue( pxQueue );
1732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvUnlockQueue( pxQueue );
1743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					portYIELD_WITHIN_API();
1746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
1748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				state, instead return to try and obtain the data. */
1756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvUnlockQueue( pxQueue );
1757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				( void ) xTaskResumeAll();
1758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
1761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			exit, otherwise go back and try to read the data again. */
1764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			prvUnlockQueue( pxQueue );
1765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) xTaskResumeAll();
1766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				return errQUEUE_EMPTY;
1771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
1775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	} /*lint -restore */
1778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
1779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
1780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
1783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
1784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxSavedInterruptStatus;
1785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
1786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue );
1788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	assigned a priority above the configured maximum system call priority.
1798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* If the queue is locked the event list will not be modified.
1821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			Instead update the lock count so the task that unlocks the queue
1822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			will know that an ISR has removed data while the queue was
1823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			locked. */
1824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( cRxLock == queueUNLOCKED )
1825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						/* The task waiting has a higher priority than us so
1831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						force a context switch. */
1832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else
1837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
1838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
1839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
1840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
1842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
1843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
1844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
1845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
1847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
1848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
1849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
1850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
1852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
1853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				knows that data was removed while it was locked. */
1855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
1857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdPASS;
1859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
1861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdFAIL;
1863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
1866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return xReturn;
1869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
1870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
1871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
1874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
1875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxSavedInterruptStatus;
1876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** int8_t *pcOriginalReadPosition;
1877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
1878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue );
1880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	assigned a priority above the configured maximum system call priority.
1891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Remember the read position so it can be reset as nothing is
1907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			actually being removed from the queue. */
1908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdPASS;
1913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
1915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdFAIL;
1917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
1920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return xReturn;
1923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
1924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
1925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
1928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxReturn;
1929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( xQueue );
1931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskENTER_CRITICAL();
1933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
1936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskEXIT_CRITICAL();
1937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return uxReturn;
1939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
1941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
1944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxReturn;
1945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
1946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue );
1948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskENTER_CRITICAL();
1950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
1953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskEXIT_CRITICAL();
1954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return uxReturn;
1956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
1958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
1961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxReturn;
1962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
1963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue );
1965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
1966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return uxReturn;
1968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
1970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
1973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
1974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue );
1976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	traceQUEUE_DELETE( pxQueue );
1977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		vQueueUnregisterQueue( pxQueue );
1981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
1982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#endif
1983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
1984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* The queue can only have been allocated dynamically - free it
1987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		again. */
1988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		vPortFree( pxQueue );
1989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
1990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
1992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		check before attempting to free the memory. */
1994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
1996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			vPortFree( pxQueue );
1997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
1998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
1999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			mtCOVERAGE_TEST_MARKER();
2001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#else
2004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		( void ) pxQueue;
2008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
2011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_TRACE_FACILITY */
2021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_TRACE_FACILITY */
2031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_TRACE_FACILITY */
2041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if( configUSE_MUTEXES == 1 )
2044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		priority, but the waiting task times out, then the holder should
2051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		disinherit the priority - but only down to the highest priority of any
2052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return the priority of the highest priority task that is waiting for the
2054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		mutex. */
2055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
2056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
2058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
2060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_MUTEXES */
2068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
2072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn = pdFALSE;
2073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxMessagesWaiting;
2074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* This function is called from a critical section. */
2076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* The mutex is no longer being held. */
2086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		#endif /* configUSE_MUTEXES */
2095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
2100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
2101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
2105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			mtCOVERAGE_TEST_MARKER();
2107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	else
2110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
2112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
2114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
2118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			mtCOVERAGE_TEST_MARKER();
2120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( xPosition == queueOVERWRITE )
2123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* An item is not being added but overwritten, so subtract
2127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				one from the recorded number of items in the queue so when
2128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				one is added again below the number of recorded items remains
2129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				correct. */
2130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				--uxMessagesWaiting;
2131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
2138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			mtCOVERAGE_TEST_MARKER();
2140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return xReturn;
2146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
2147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
2151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
2154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
2155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
2159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			mtCOVERAGE_TEST_MARKER();
2161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
2163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
2165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
2169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* The lock counts contains the number of extra data items placed or
2172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	locked items can be added or removed, but the event lists cannot be
2174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	updated. */
2175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskENTER_CRITICAL();
2176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* See if data was added to the queue while it was locked. */
2180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			blocked waiting for data to become available? */
2184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						/* The queue is a member of a queue set, and posting to
2191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						the queue set caused a higher priority task to unblock.
2192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						A context switch is required. */
2193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						vTaskMissedYield();
2194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
2196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
2198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
2201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* Tasks that are removed from the event list will get
2203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					added to the pending ready list as the scheduler is still
2204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					suspended. */
2205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
2209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							/* The task waiting has a higher priority so record that a
2210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							context	switch is required. */
2211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							vTaskMissedYield();
2212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
2213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						else
2214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
2215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							mtCOVERAGE_TEST_MARKER();
2216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
2217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
2219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						break;
2221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			#else /* configUSE_QUEUE_SETS */
2225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Tasks that are removed from the event list will get added to
2227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				the pending ready list as the scheduler is still suspended. */
2228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						/* The task waiting has a higher priority so record that
2233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						a context switch is required. */
2234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						vTaskMissedYield();
2235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
2237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
2239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
2242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					break;
2244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			--cTxLock;
2249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskEXIT_CRITICAL();
2254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* Do the same for the Rx lock. */
2256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskENTER_CRITICAL();
2257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					vTaskMissedYield();
2267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
2269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
2271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				--cRxLock;
2274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				break;
2278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskEXIT_CRITICAL();
2284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
2285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
  25              		.loc 1 2288 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 10402DE9 		push	{r4, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
  34              		.loc 1 2288 0
  35 0004 0040A0E1 		mov	r4, r0
2289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
2290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskENTER_CRITICAL();
  36              		.loc 1 2291 0
  37 0008 FEFFFFEB 		bl	vPortEnterCritical
  38              	.LVL1:
2292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  39              		.loc 1 2293 0
  40 000c 384094E5 		ldr	r4, [r4, #56]
  41              	.LVL2:
2294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdTRUE;
2296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
2298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdFALSE;
2300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskEXIT_CRITICAL();
  42              		.loc 1 2302 0
  43 0010 FEFFFFEB 		bl	vPortExitCritical
  44              	.LVL3:
2303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return xReturn;
2305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
  45              		.loc 1 2305 0
  46 0014 140F6FE1 		clz	r0, r4
  47 0018 A002A0E1 		lsr	r0, r0, #5
  48 001c 1080BDE8 		pop	{r4, pc}
  49              		.cfi_endproc
  50              	.LFE32:
  52              		.section	.text.prvCopyDataToQueue,"ax",%progbits
  53              		.align	2
  54              		.syntax unified
  55              		.arm
  56              		.fpu neon
  58              	prvCopyDataToQueue:
  59              	.LFB29:
2071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn = pdFALSE;
  60              		.loc 1 2071 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL4:
  65 0000 70402DE9 		push	{r4, r5, r6, lr}
  66              		.cfi_def_cfa_offset 16
  67              		.cfi_offset 4, -16
  68              		.cfi_offset 5, -12
  69              		.cfi_offset 6, -8
  70              		.cfi_offset 14, -4
2071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn = pdFALSE;
  71              		.loc 1 2071 0
  72 0004 0250A0E1 		mov	r5, r2
2079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
  73              		.loc 1 2079 0
  74 0008 402090E5 		ldr	r2, [r0, #64]
  75              	.LVL5:
2071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn = pdFALSE;
  76              		.loc 1 2071 0
  77 000c 0040A0E1 		mov	r4, r0
2077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  78              		.loc 1 2077 0
  79 0010 386090E5 		ldr	r6, [r0, #56]
  80              	.LVL6:
2079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
  81              		.loc 1 2079 0
  82 0014 000052E3 		cmp	r2, #0
  83 0018 0800001A 		bne	.L4
2083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
  84              		.loc 1 2083 0
  85 001c 005090E5 		ldr	r5, [r0]
  86              	.LVL7:
  87 0020 000055E3 		cmp	r5, #0
  88 0024 1100001A 		bne	.L10
2086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
  89              		.loc 1 2086 0
  90 0028 080090E5 		ldr	r0, [r0, #8]
  91              	.LVL8:
  92 002c FEFFFFEB 		bl	xTaskPriorityDisinherit
  93              	.LVL9:
2087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
  94              		.loc 1 2087 0
  95 0030 085084E5 		str	r5, [r4, #8]
  96              	.LVL10:
  97              	.L5:
2143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
  98              		.loc 1 2143 0
  99 0034 016086E2 		add	r6, r6, #1
 100              	.LVL11:
 101 0038 386084E5 		str	r6, [r4, #56]
2146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 102              		.loc 1 2146 0
 103 003c 7080BDE8 		pop	{r4, r5, r6, pc}
 104              	.LVL12:
 105              	.L4:
2096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 106              		.loc 1 2096 0
 107 0040 000055E3 		cmp	r5, #0
 108 0044 0B00001A 		bne	.L6
2098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 109              		.loc 1 2098 0
 110 0048 040090E5 		ldr	r0, [r0, #4]
 111              	.LVL13:
 112 004c FEFFFFEB 		bl	memcpy
 113              	.LVL14:
2099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 114              		.loc 1 2099 0
 115 0050 043094E5 		ldr	r3, [r4, #4]
 116 0054 402094E5 		ldr	r2, [r4, #64]
 117 0058 023083E0 		add	r3, r3, r2
2100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 118              		.loc 1 2100 0
 119 005c 082094E5 		ldr	r2, [r4, #8]
2099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 120              		.loc 1 2099 0
 121 0060 043084E5 		str	r3, [r4, #4]
2100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 122              		.loc 1 2100 0
 123 0064 020053E1 		cmp	r3, r2
2102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 124              		.loc 1 2102 0
 125 0068 00309425 		ldrcs	r3, [r4]
 126 006c 04308425 		strcs	r3, [r4, #4]
 127              	.LVL15:
 128              	.L10:
2072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxMessagesWaiting;
 129              		.loc 1 2072 0
 130 0070 0000A0E3 		mov	r0, #0
 131 0074 EEFFFFEA 		b	.L5
 132              	.LVL16:
 133              	.L6:
2111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 134              		.loc 1 2111 0
 135 0078 0C0090E5 		ldr	r0, [r0, #12]
 136              	.LVL17:
 137 007c FEFFFFEB 		bl	memcpy
 138              	.LVL18:
2112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 139              		.loc 1 2112 0
 140 0080 403094E5 		ldr	r3, [r4, #64]
 141 0084 0C2094E5 		ldr	r2, [r4, #12]
2113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 142              		.loc 1 2113 0
 143 0088 001094E5 		ldr	r1, [r4]
2112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 144              		.loc 1 2112 0
 145 008c 003063E2 		rsb	r3, r3, #0
 146 0090 032082E0 		add	r2, r2, r3
2113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 147              		.loc 1 2113 0
 148 0094 010052E1 		cmp	r2, r1
2112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 149              		.loc 1 2112 0
 150 0098 0C2084E5 		str	r2, [r4, #12]
2115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 151              		.loc 1 2115 0
 152 009c 08209435 		ldrcc	r2, [r4, #8]
 153 00a0 03308230 		addcc	r3, r2, r3
 154 00a4 0C308435 		strcc	r3, [r4, #12]
2122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 155              		.loc 1 2122 0
 156 00a8 020055E3 		cmp	r5, #2
 157 00ac EFFFFF1A 		bne	.L10
2124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 158              		.loc 1 2124 0
 159 00b0 000056E3 		cmp	r6, #0
2072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxMessagesWaiting;
 160              		.loc 1 2072 0
 161 00b4 0600A001 		moveq	r0, r6
2124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 162              		.loc 1 2124 0
 163 00b8 DDFFFF0A 		beq	.L5
2130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 164              		.loc 1 2130 0
 165 00bc 016046E2 		sub	r6, r6, #1
 166              	.LVL19:
 167 00c0 EAFFFFEA 		b	.L10
 168              		.cfi_endproc
 169              	.LFE29:
 171              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 172              		.align	2
 173              		.syntax unified
 174              		.arm
 175              		.fpu neon
 177              	prvCopyDataFromQueue:
 178              	.LFB30:
2150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 179              		.loc 1 2150 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              		@ link register save eliminated.
 184              	.LVL20:
2150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 185              		.loc 1 2150 0
 186 0000 0030A0E1 		mov	r3, r0
 187 0004 0100A0E1 		mov	r0, r1
 188              	.LVL21:
2151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 189              		.loc 1 2151 0
 190 0008 402093E5 		ldr	r2, [r3, #64]
 191 000c 000052E3 		cmp	r2, #0
 192 0010 1EFF2F01 		bxeq	lr
2153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 193              		.loc 1 2153 0
 194 0014 0C1093E5 		ldr	r1, [r3, #12]
 195              	.LVL22:
2154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 196              		.loc 1 2154 0
 197 0018 08C093E5 		ldr	ip, [r3, #8]
2153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 198              		.loc 1 2153 0
 199 001c 021081E0 		add	r1, r1, r2
2154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 200              		.loc 1 2154 0
 201 0020 0C0051E1 		cmp	r1, ip
2153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 202              		.loc 1 2153 0
 203 0024 0C1083E5 		str	r1, [r3, #12]
2156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 204              		.loc 1 2156 0
 205 0028 00109325 		ldrcs	r1, [r3]
 206 002c 0C108325 		strcs	r1, [r3, #12]
2162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 207              		.loc 1 2162 0
 208 0030 0C1093E5 		ldr	r1, [r3, #12]
 209 0034 FEFFFFEA 		b	memcpy
 210              	.LVL23:
 211              		.cfi_endproc
 212              	.LFE30:
 214              		.section	.text.prvUnlockQueue,"ax",%progbits
 215              		.align	2
 216              		.syntax unified
 217              		.arm
 218              		.fpu neon
 220              	prvUnlockQueue:
 221              	.LFB31:
2168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 222              		.loc 1 2168 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              	.LVL24:
 227 0000 70402DE9 		push	{r4, r5, r6, lr}
 228              		.cfi_def_cfa_offset 16
 229              		.cfi_offset 4, -16
 230              		.cfi_offset 5, -12
 231              		.cfi_offset 6, -8
 232              		.cfi_offset 14, -4
2168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 233              		.loc 1 2168 0
 234 0004 0040A0E1 		mov	r4, r0
2175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 235              		.loc 1 2175 0
 236 0008 FEFFFFEB 		bl	vPortEnterCritical
 237              	.LVL25:
 238              	.LBB2:
2230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 239              		.loc 1 2230 0
 240 000c 246084E2 		add	r6, r4, #36
2177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 241              		.loc 1 2177 0
 242 0010 4550D4E5 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 243 0014 7550AFE6 		sxtb	r5, r5
 244              	.LVL26:
 245              	.L17:
2180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 246              		.loc 1 2180 0
 247 0018 000055E3 		cmp	r5, #0
 248 001c 0C0000CA 		bgt	.L20
 249              	.L18:
2251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 250              		.loc 1 2251 0
 251 0020 0030E0E3 		mvn	r3, #0
 252              	.LBE2:
 253              	.LBB3:
2264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 254              		.loc 1 2264 0
 255 0024 106084E2 		add	r6, r4, #16
 256              	.LBE3:
 257              	.LBB4:
2251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 258              		.loc 1 2251 0
 259 0028 4530C4E5 		strb	r3, [r4, #69]
 260              	.LBE4:
2253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 261              		.loc 1 2253 0
 262 002c FEFFFFEB 		bl	vPortExitCritical
 263              	.LVL27:
2256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 264              		.loc 1 2256 0
 265 0030 FEFFFFEB 		bl	vPortEnterCritical
 266              	.LVL28:
 267              	.LBB5:
2258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 268              		.loc 1 2258 0
 269 0034 4450D4E5 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 270              	.LVL29:
 271 0038 7550AFE6 		sxtb	r5, r5
 272              	.LVL30:
 273              	.L21:
2260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 274              		.loc 1 2260 0
 275 003c 000055E3 		cmp	r5, #0
 276 0040 0E0000CA 		bgt	.L24
 277              	.L22:
2281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 278              		.loc 1 2281 0
 279 0044 0030E0E3 		mvn	r3, #0
 280 0048 4430C4E5 		strb	r3, [r4, #68]
 281              	.LBE5:
2284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 282              		.loc 1 2284 0
 283 004c 7040BDE8 		pop	{r4, r5, r6, lr}
 284              		.cfi_remember_state
 285              		.cfi_restore 14
 286              		.cfi_restore 6
 287              		.cfi_restore 5
 288              		.cfi_restore 4
 289              		.cfi_def_cfa_offset 0
 290              	.LVL31:
2283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
 291              		.loc 1 2283 0
 292 0050 FEFFFFEA 		b	vPortExitCritical
 293              	.LVL32:
 294              	.L20:
 295              		.cfi_restore_state
 296              	.LBB6:
2228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 297              		.loc 1 2228 0
 298 0054 243094E5 		ldr	r3, [r4, #36]
 299 0058 000053E3 		cmp	r3, #0
 300 005c EFFFFF0A 		beq	.L18
2230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 301              		.loc 1 2230 0
 302 0060 0600A0E1 		mov	r0, r6
 303 0064 FEFFFFEB 		bl	xTaskRemoveFromEventList
 304              	.LVL33:
 305 0068 000050E3 		cmp	r0, #0
 306 006c 0000000A 		beq	.L19
2234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 307              		.loc 1 2234 0
 308 0070 FEFFFFEB 		bl	vTaskMissedYield
 309              	.LVL34:
 310              	.L19:
 311 0074 015045E2 		sub	r5, r5, #1
 312              	.LVL35:
 313 0078 7550AFE6 		sxtb	r5, r5
 314              	.LVL36:
 315 007c E5FFFFEA 		b	.L17
 316              	.LVL37:
 317              	.L24:
 318              	.LBE6:
 319              	.LBB7:
2262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 320              		.loc 1 2262 0
 321 0080 103094E5 		ldr	r3, [r4, #16]
 322 0084 000053E3 		cmp	r3, #0
 323 0088 EDFFFF0A 		beq	.L22
2264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 324              		.loc 1 2264 0
 325 008c 0600A0E1 		mov	r0, r6
 326 0090 FEFFFFEB 		bl	xTaskRemoveFromEventList
 327              	.LVL38:
 328 0094 000050E3 		cmp	r0, #0
 329 0098 0000000A 		beq	.L23
2266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 330              		.loc 1 2266 0
 331 009c FEFFFFEB 		bl	vTaskMissedYield
 332              	.LVL39:
 333              	.L23:
 334 00a0 015045E2 		sub	r5, r5, #1
 335              	.LVL40:
 336 00a4 7550AFE6 		sxtb	r5, r5
 337              	.LVL41:
 338 00a8 E3FFFFEA 		b	.L21
 339              	.LBE7:
 340              		.cfi_endproc
 341              	.LFE31:
 343              		.section	.text.xQueueGenericReset,"ax",%progbits
 344              		.align	2
 345              		.global	xQueueGenericReset
 346              		.syntax unified
 347              		.arm
 348              		.fpu neon
 350              	xQueueGenericReset:
 351              	.LFB0:
 256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
 352              		.loc 1 256 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              	.LVL42:
 357 0000 70402DE9 		push	{r4, r5, r6, lr}
 358              		.cfi_def_cfa_offset 16
 359              		.cfi_offset 4, -16
 360              		.cfi_offset 5, -12
 361              		.cfi_offset 6, -8
 362              		.cfi_offset 14, -4
 259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 363              		.loc 1 259 0
 364 0004 004050E2 		subs	r4, r0, #0
 365 0008 0200001A 		bne	.L39
 366              	.LVL43:
 367              	.LBB10:
 368              	.LBB11:
 374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 369              		.loc 1 374 0
 370 000c 0110A0E3 		mov	r1, #1
 371              	.LVL44:
 372 0010 8C009FE5 		ldr	r0, .L48
 373              	.LVL45:
 374 0014 FEFFFFEB 		bl	longjmp
 375              	.LVL46:
 376              	.L39:
 377 0018 0150A0E1 		mov	r5, r1
 378              	.LBE11:
 379              	.LBE10:
 261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 380              		.loc 1 261 0
 381 001c FEFFFFEB 		bl	vPortEnterCritical
 382              	.LVL47:
 263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 383              		.loc 1 263 0
 384 0020 40C094E5 		ldr	ip, [r4, #64]
 385 0024 3C2094E5 		ldr	r2, [r4, #60]
 386 0028 000094E5 		ldr	r0, [r4]
 387 002c 920C03E0 		mul	r3, r2, ip
 265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 388              		.loc 1 265 0
 389 0030 040084E5 		str	r0, [r4, #4]
 263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 390              		.loc 1 263 0
 391 0034 032080E0 		add	r2, r0, r3
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 392              		.loc 1 266 0
 393 0038 0C3043E0 		sub	r3, r3, ip
 263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 394              		.loc 1 263 0
 395 003c 082084E5 		str	r2, [r4, #8]
 264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 396              		.loc 1 264 0
 397 0040 0020A0E3 		mov	r2, #0
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 398              		.loc 1 266 0
 399 0044 033080E0 		add	r3, r0, r3
 270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 400              		.loc 1 270 0
 401 0048 020055E1 		cmp	r5, r2
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 402              		.loc 1 266 0
 403 004c 0C3084E5 		str	r3, [r4, #12]
 267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 404              		.loc 1 267 0
 405 0050 0030E0E3 		mvn	r3, #0
 264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 406              		.loc 1 264 0
 407 0054 382084E5 		str	r2, [r4, #56]
 267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 408              		.loc 1 267 0
 409 0058 4430C4E5 		strb	r3, [r4, #68]
 268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 410              		.loc 1 268 0
 411 005c 4530C4E5 		strb	r3, [r4, #69]
 270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 412              		.loc 1 270 0
 413 0060 0A00001A 		bne	.L40
 277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 414              		.loc 1 277 0
 415 0064 103094E5 		ldr	r3, [r4, #16]
 416 0068 020053E1 		cmp	r3, r2
 417 006c 0400000A 		beq	.L42
 279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 418              		.loc 1 279 0
 419 0070 100084E2 		add	r0, r4, #16
 420 0074 FEFFFFEB 		bl	xTaskRemoveFromEventList
 421              	.LVL48:
 422 0078 000050E3 		cmp	r0, #0
 423 007c 0000000A 		beq	.L42
 281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 424              		.loc 1 281 0
 425              		.syntax divided
 426              	@ 281 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/queue.c" 1
 427 0080 000000EF 		SWI 0
 428              	@ 0 "" 2
 429              		.arm
 430              		.syntax unified
 431              	.L42:
 300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 432              		.loc 1 300 0
 433 0084 FEFFFFEB 		bl	vPortExitCritical
 434              	.LVL49:
 305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 435              		.loc 1 305 0
 436 0088 0100A0E3 		mov	r0, #1
 437 008c 7080BDE8 		pop	{r4, r5, r6, pc}
 438              	.L40:
 296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 439              		.loc 1 296 0
 440 0090 100084E2 		add	r0, r4, #16
 441 0094 FEFFFFEB 		bl	vListInitialise
 442              	.LVL50:
 297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 443              		.loc 1 297 0
 444 0098 240084E2 		add	r0, r4, #36
 445 009c FEFFFFEB 		bl	vListInitialise
 446              	.LVL51:
 447 00a0 F7FFFFEA 		b	.L42
 448              	.L49:
 449              		.align	2
 450              	.L48:
 451 00a4 28000000 		.word	Unity+40
 452              		.cfi_endproc
 453              	.LFE0:
 455              		.section	.text.xQueueGenericCreateStatic,"ax",%progbits
 456              		.align	2
 457              		.global	xQueueGenericCreateStatic
 458              		.syntax unified
 459              		.arm
 460              		.fpu neon
 462              	xQueueGenericCreateStatic:
 463              	.LFB1:
 311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t *pxNewQueue;
 464              		.loc 1 311 0
 465              		.cfi_startproc
 466              		@ args = 4, pretend = 0, frame = 8
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 468              	.LVL52:
 469 0000 13402DE9 		push	{r0, r1, r4, lr}
 470              		.cfi_def_cfa_offset 16
 471              		.cfi_offset 4, -8
 472              		.cfi_offset 14, -4
 314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 473              		.loc 1 314 0
 474 0004 000050E3 		cmp	r0, #0
 475 0008 0200001A 		bne	.L51
 476              	.LVL53:
 477              	.L52:
 314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 478              		.loc 1 314 0 is_stmt 0 discriminator 1
 479 000c 0110A0E3 		mov	r1, #1
 480              	.LVL54:
 481 0010 90009FE5 		ldr	r0, .L65
 482              	.LVL55:
 483 0014 FEFFFFEB 		bl	longjmp
 484              	.LVL56:
 485              	.L51:
 318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 486              		.loc 1 318 0 is_stmt 1
 487 0018 000053E3 		cmp	r3, #0
 488 001c 0340A0E1 		mov	r4, r3
 489 0020 F9FFFF0A 		beq	.L52
 322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 490              		.loc 1 322 0
 491 0024 003091E2 		adds	r3, r1, #0
 492              	.LVL57:
 493 0028 0130A013 		movne	r3, #1
 494 002c 000052E3 		cmp	r2, #0
 495 0030 01308303 		orreq	r3, r3, #1
 496 0034 000053E3 		cmp	r3, #0
 497 0038 F3FFFF0A 		beq	.L52
 323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 498              		.loc 1 323 0
 499 003c 113F6FE1 		clz	r3, r1
 500 0040 A332A0E1 		lsr	r3, r3, #5
 501 0044 000052E3 		cmp	r2, #0
 502 0048 01308313 		orrne	r3, r3, #1
 503 004c 000053E3 		cmp	r3, #0
 504 0050 EDFFFF0A 		beq	.L52
 505              	.LBB15:
 330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 506              		.loc 1 330 0
 507 0054 5030A0E3 		mov	r3, #80
 508 0058 04308DE5 		str	r3, [sp, #4]
 331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 509              		.loc 1 331 0
 510 005c 04309DE5 		ldr	r3, [sp, #4]
 511 0060 500053E3 		cmp	r3, #80
 512 0064 E8FFFF1A 		bne	.L52
 513              	.LBE15:
 514              	.LBB16:
 515              	.LBB17:
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 516              		.loc 1 441 0
 517 0068 000051E3 		cmp	r1, #0
 518              	.LBE17:
 519              	.LBE16:
 520              	.LBB21:
 332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 521              		.loc 1 332 0
 522 006c 04309DE5 		ldr	r3, [sp, #4]
 523              	.LVL58:
 524              	.LBE21:
 525              	.LBB22:
 526              	.LBB18:
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 527              		.loc 1 441 0
 528 0070 0420A001 		moveq	r2, r4
 529              	.LVL59:
 530              	.LBE18:
 531              	.LBE22:
 348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 532              		.loc 1 348 0
 533 0074 0130A0E3 		mov	r3, #1
 534 0078 4630C4E5 		strb	r3, [r4, #70]
 535              	.LVL60:
 536              	.LBB23:
 537              	.LBB19:
 451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 538              		.loc 1 451 0
 539 007c 3C0084E5 		str	r0, [r4, #60]
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 540              		.loc 1 453 0
 541 0080 0400A0E1 		mov	r0, r4
 542              	.LVL61:
 452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 543              		.loc 1 452 0
 544 0084 401084E5 		str	r1, [r4, #64]
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 545              		.loc 1 453 0
 546 0088 0310A0E1 		mov	r1, r3
 547              	.LVL62:
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 548              		.loc 1 441 0
 549 008c 002084E5 		str	r2, [r4]
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 550              		.loc 1 453 0
 551 0090 FEFFFFEB 		bl	xQueueGenericReset
 552              	.LVL63:
 457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 553              		.loc 1 457 0
 554 0094 1030DDE5 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 555              	.LBE19:
 556              	.LBE23:
 361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 557              		.loc 1 361 0
 558 0098 0400A0E1 		mov	r0, r4
 559              	.LBB24:
 560              	.LBB20:
 457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 561              		.loc 1 457 0
 562 009c 4C30C4E5 		strb	r3, [r4, #76]
 563              	.LVL64:
 564              	.LBE20:
 565              	.LBE24:
 361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 566              		.loc 1 361 0
 567 00a0 08D08DE2 		add	sp, sp, #8
 568              		.cfi_def_cfa_offset 8
 569              		@ sp needed
 570 00a4 1080BDE8 		pop	{r4, pc}
 571              	.LVL65:
 572              	.L66:
 573              		.align	2
 574              	.L65:
 575 00a8 28000000 		.word	Unity+40
 576              		.cfi_endproc
 577              	.LFE1:
 579              		.section	.text.xQueueGenericCreate,"ax",%progbits
 580              		.align	2
 581              		.global	xQueueGenericCreate
 582              		.syntax unified
 583              		.arm
 584              		.fpu neon
 586              	xQueueGenericCreate:
 587              	.LFB2:
 369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t *pxNewQueue;
 588              		.loc 1 369 0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 592              	.LVL66:
 593 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 594              		.cfi_def_cfa_offset 24
 595              		.cfi_offset 4, -24
 596              		.cfi_offset 5, -20
 597              		.cfi_offset 6, -16
 598              		.cfi_offset 7, -12
 599              		.cfi_offset 8, -8
 600              		.cfi_offset 14, -4
 374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 601              		.loc 1 374 0
 602 0004 006050E2 		subs	r6, r0, #0
 603 0008 0200001A 		bne	.L68
 604              	.LVL67:
 605              	.LBB29:
 606              	.LBB30:
 607 000c 0110A0E3 		mov	r1, #1
 608              	.LVL68:
 609 0010 54009FE5 		ldr	r0, .L76
 610              	.LVL69:
 611 0014 FEFFFFEB 		bl	longjmp
 612              	.LVL70:
 613              	.L68:
 614              	.LBE30:
 615              	.LBE29:
 385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 616              		.loc 1 385 0
 617 0018 910600E0 		mul	r0, r1, r6
 618              	.LVL71:
 619 001c 0150A0E1 		mov	r5, r1
 620 0020 0270A0E1 		mov	r7, r2
 621              	.LVL72:
 397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 622              		.loc 1 397 0
 623 0024 500080E2 		add	r0, r0, #80
 624 0028 FEFFFFEB 		bl	pvPortMalloc
 625              	.LVL73:
 399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 626              		.loc 1 399 0
 627 002c 004050E2 		subs	r4, r0, #0
 628 0030 0B00000A 		beq	.L67
 629              	.LVL74:
 411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 630              		.loc 1 411 0
 631 0034 0030A0E3 		mov	r3, #0
 632              	.LBB31:
 633              	.LBB32:
 451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 634              		.loc 1 451 0
 635 0038 3C6084E5 		str	r6, [r4, #60]
 435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 636              		.loc 1 435 0
 637 003c 030055E1 		cmp	r5, r3
 638              	.LBE32:
 639              	.LBE31:
 411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 640              		.loc 1 411 0
 641 0040 4630C4E5 		strb	r3, [r4, #70]
 642              	.LVL75:
 404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 643              		.loc 1 404 0
 644 0044 50308412 		addne	r3, r4, #80
 645              	.LBB34:
 646              	.LBB33:
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 647              		.loc 1 441 0
 648 0048 00408405 		streq	r4, [r4]
 446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 649              		.loc 1 446 0
 650 004c 00308415 		strne	r3, [r4]
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 651              		.loc 1 453 0
 652 0050 0110A0E3 		mov	r1, #1
 452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 653              		.loc 1 452 0
 654 0054 405084E5 		str	r5, [r4, #64]
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 655              		.loc 1 453 0
 656 0058 0400A0E1 		mov	r0, r4
 657 005c FEFFFFEB 		bl	xQueueGenericReset
 658              	.LVL76:
 457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 659              		.loc 1 457 0
 660 0060 4C70C4E5 		strb	r7, [r4, #76]
 661              	.LVL77:
 662              	.L67:
 663              	.LBE33:
 664              	.LBE34:
 424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 665              		.loc 1 424 0
 666 0064 0400A0E1 		mov	r0, r4
 667 0068 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 668              	.L77:
 669              		.align	2
 670              	.L76:
 671 006c 28000000 		.word	Unity+40
 672              		.cfi_endproc
 673              	.LFE2:
 675              		.section	.text.xQueueGetMutexHolder,"ax",%progbits
 676              		.align	2
 677              		.global	xQueueGetMutexHolder
 678              		.syntax unified
 679              		.arm
 680              		.fpu neon
 682              	xQueueGetMutexHolder:
 683              	.LFB7:
 540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	TaskHandle_t pxReturn;
 684              		.loc 1 540 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688              	.LVL78:
 689 0000 10402DE9 		push	{r4, lr}
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 4, -8
 692              		.cfi_offset 14, -4
 540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	TaskHandle_t pxReturn;
 693              		.loc 1 540 0
 694 0004 0040A0E1 		mov	r4, r0
 695              	.LVL79:
 549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 696              		.loc 1 549 0
 697 0008 FEFFFFEB 		bl	vPortEnterCritical
 698              	.LVL80:
 551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 699              		.loc 1 551 0
 700 000c 003094E5 		ldr	r3, [r4]
 701 0010 000053E3 		cmp	r3, #0
 553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 702              		.loc 1 553 0
 703 0014 08409405 		ldreq	r4, [r4, #8]
 704              	.LVL81:
 557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 705              		.loc 1 557 0
 706 0018 0040A013 		movne	r4, #0
 707              	.LVL82:
 560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 708              		.loc 1 560 0
 709 001c FEFFFFEB 		bl	vPortExitCritical
 710              	.LVL83:
 563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 711              		.loc 1 563 0
 712 0020 0400A0E1 		mov	r0, r4
 713 0024 1080BDE8 		pop	{r4, pc}
 714              		.cfi_endproc
 715              	.LFE7:
 717              		.section	.text.xQueueGetMutexHolderFromISR,"ax",%progbits
 718              		.align	2
 719              		.global	xQueueGetMutexHolderFromISR
 720              		.syntax unified
 721              		.arm
 722              		.fpu neon
 724              	xQueueGetMutexHolderFromISR:
 725              	.LFB8:
 571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	TaskHandle_t pxReturn;
 726              		.loc 1 571 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730              	.LVL84:
 574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 731              		.loc 1 574 0
 732 0000 000050E3 		cmp	r0, #0
 733 0004 0300001A 		bne	.L83
 571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	TaskHandle_t pxReturn;
 734              		.loc 1 571 0 discriminator 1
 735 0008 10402DE9 		push	{r4, lr}
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 4, -8
 738              		.cfi_offset 14, -4
 574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 739              		.loc 1 574 0 discriminator 1
 740 000c 0110A0E3 		mov	r1, #1
 741 0010 14009FE5 		ldr	r0, .L89
 742              	.LVL85:
 743 0014 FEFFFFEB 		bl	longjmp
 744              	.LVL86:
 745              	.L83:
 746              		.cfi_def_cfa_offset 0
 747              		.cfi_restore 4
 748              		.cfi_restore 14
 579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 749              		.loc 1 579 0
 750 0018 003090E5 		ldr	r3, [r0]
 751 001c 000053E3 		cmp	r3, #0
 581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 752              		.loc 1 581 0
 753 0020 08009005 		ldreq	r0, [r0, #8]
 754              	.LVL87:
 585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 755              		.loc 1 585 0
 756 0024 0000A013 		movne	r0, #0
 757              	.LVL88:
 589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 758              		.loc 1 589 0
 759 0028 1EFF2FE1 		bx	lr
 760              	.L90:
 761              		.align	2
 762              	.L89:
 763 002c 28000000 		.word	Unity+40
 764              		.cfi_endproc
 765              	.LFE8:
 767              		.section	.text.xQueueCreateCountingSemaphoreStatic,"ax",%progbits
 768              		.align	2
 769              		.global	xQueueCreateCountingSemaphoreStatic
 770              		.syntax unified
 771              		.arm
 772              		.fpu neon
 774              	xQueueCreateCountingSemaphoreStatic:
 775              	.LFB11:
 694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xHandle;
 776              		.loc 1 694 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              	.LVL89:
 781 0000 0230A0E1 		mov	r3, r2
 697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 782              		.loc 1 697 0
 783 0004 002050E2 		subs	r2, r0, #0
 784              	.LVL90:
 694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xHandle;
 785              		.loc 1 694 0
 786 0008 13402DE9 		push	{r0, r1, r4, lr}
 787              		.cfi_def_cfa_offset 16
 788              		.cfi_offset 4, -8
 789              		.cfi_offset 14, -4
 697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 790              		.loc 1 697 0
 791 000c 0200001A 		bne	.L92
 792              	.L93:
 697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 793              		.loc 1 697 0 is_stmt 0 discriminator 1
 794 0010 0110A0E3 		mov	r1, #1
 795              	.LVL91:
 796 0014 30009FE5 		ldr	r0, .L99
 797              	.LVL92:
 798 0018 FEFFFFEB 		bl	longjmp
 799              	.LVL93:
 800              	.L92:
 698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 801              		.loc 1 698 0 is_stmt 1
 802 001c 010052E1 		cmp	r2, r1
 803 0020 0140A0E1 		mov	r4, r1
 804 0024 F9FFFF3A 		bcc	.L93
 700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 805              		.loc 1 700 0
 806 0028 0220A0E3 		mov	r2, #2
 807 002c 00208DE5 		str	r2, [sp]
 808 0030 0020A0E3 		mov	r2, #0
 809 0034 0210A0E1 		mov	r1, r2
 810              	.LVL94:
 811 0038 FEFFFFEB 		bl	xQueueGenericCreateStatic
 812              	.LVL95:
 702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 813              		.loc 1 702 0
 814 003c 000050E3 		cmp	r0, #0
 704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 815              		.loc 1 704 0
 816 0040 38408015 		strne	r4, [r0, #56]
 714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 817              		.loc 1 714 0
 818 0044 08D08DE2 		add	sp, sp, #8
 819              		.cfi_def_cfa_offset 8
 820              		@ sp needed
 821 0048 1080BDE8 		pop	{r4, pc}
 822              	.LVL96:
 823              	.L100:
 824              		.align	2
 825              	.L99:
 826 004c 28000000 		.word	Unity+40
 827              		.cfi_endproc
 828              	.LFE11:
 830              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 831              		.align	2
 832              		.global	xQueueCreateCountingSemaphore
 833              		.syntax unified
 834              		.arm
 835              		.fpu neon
 837              	xQueueCreateCountingSemaphore:
 838              	.LFB12:
 722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xHandle;
 839              		.loc 1 722 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843              	.LVL97:
 725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 844              		.loc 1 725 0
 845 0000 003050E2 		subs	r3, r0, #0
 722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xHandle;
 846              		.loc 1 722 0
 847 0004 10402DE9 		push	{r4, lr}
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 4, -8
 850              		.cfi_offset 14, -4
 725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 851              		.loc 1 725 0
 852 0008 0200001A 		bne	.L102
 853              	.L103:
 725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 854              		.loc 1 725 0 is_stmt 0 discriminator 1
 855 000c 0110A0E3 		mov	r1, #1
 856              	.LVL98:
 857 0010 24009FE5 		ldr	r0, .L109
 858              	.LVL99:
 859 0014 FEFFFFEB 		bl	longjmp
 860              	.LVL100:
 861              	.L102:
 726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 862              		.loc 1 726 0 is_stmt 1
 863 0018 010053E1 		cmp	r3, r1
 864 001c 0140A0E1 		mov	r4, r1
 865 0020 F9FFFF3A 		bcc	.L103
 728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 866              		.loc 1 728 0
 867 0024 0220A0E3 		mov	r2, #2
 868 0028 0010A0E3 		mov	r1, #0
 869              	.LVL101:
 870 002c FEFFFFEB 		bl	xQueueGenericCreate
 871              	.LVL102:
 730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 872              		.loc 1 730 0
 873 0030 000050E3 		cmp	r0, #0
 732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 874              		.loc 1 732 0
 875 0034 38408015 		strne	r4, [r0, #56]
 742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 876              		.loc 1 742 0
 877 0038 1080BDE8 		pop	{r4, pc}
 878              	.L110:
 879              		.align	2
 880              	.L109:
 881 003c 28000000 		.word	Unity+40
 882              		.cfi_endproc
 883              	.LFE12:
 885              		.section	.text.xQueueGenericSend,"ax",%progbits
 886              		.align	2
 887              		.global	xQueueGenericSend
 888              		.syntax unified
 889              		.arm
 890              		.fpu neon
 892              	xQueueGenericSend:
 893              	.LFB13:
 748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 894              		.loc 1 748 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 16
 897              		@ frame_needed = 0, uses_anonymous_args = 0
 898              	.LVL103:
 899 0000 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}
 900              		.cfi_def_cfa_offset 28
 901              		.cfi_offset 4, -28
 902              		.cfi_offset 5, -24
 903              		.cfi_offset 6, -20
 904              		.cfi_offset 7, -16
 905              		.cfi_offset 8, -12
 906              		.cfi_offset 9, -8
 907              		.cfi_offset 14, -4
 753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 908              		.loc 1 753 0
 909 0004 004050E2 		subs	r4, r0, #0
 748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 910              		.loc 1 748 0
 911 0008 14D04DE2 		sub	sp, sp, #20
 912              		.cfi_def_cfa_offset 48
 748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 913              		.loc 1 748 0
 914 000c 04208DE5 		str	r2, [sp, #4]
 753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 915              		.loc 1 753 0
 916 0010 0200001A 		bne	.L112
 917              	.LVL104:
 918              	.L114:
 753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 919              		.loc 1 753 0 is_stmt 0 discriminator 1
 920 0014 0110A0E3 		mov	r1, #1
 921 0018 80019FE5 		ldr	r0, .L147
 922 001c FEFFFFEB 		bl	longjmp
 923              	.LVL105:
 924              	.L112:
 754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 925              		.loc 1 754 0 is_stmt 1
 926 0020 000051E3 		cmp	r1, #0
 927 0024 0180A0E1 		mov	r8, r1
 928 0028 0370A0E1 		mov	r7, r3
 929 002c 0200001A 		bne	.L113
 754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 930              		.loc 1 754 0 is_stmt 0 discriminator 2
 931 0030 403094E5 		ldr	r3, [r4, #64]
 932              	.LVL106:
 933 0034 000053E3 		cmp	r3, #0
 934 0038 F5FFFF1A 		bne	.L114
 935              	.L113:
 755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 936              		.loc 1 755 0 is_stmt 1
 937 003c 020057E3 		cmp	r7, #2
 938 0040 0200001A 		bne	.L115
 755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 939              		.loc 1 755 0 is_stmt 0 discriminator 2
 940 0044 3C3094E5 		ldr	r3, [r4, #60]
 941 0048 010053E3 		cmp	r3, #1
 942 004c F0FFFF1A 		bne	.L114
 943              	.L115:
 758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 944              		.loc 1 758 0 is_stmt 1
 945 0050 FEFFFFEB 		bl	xTaskGetSchedulerState
 946              	.LVL107:
 947 0054 000050E3 		cmp	r0, #0
 948 0058 0060A013 		movne	r6, #0
 949 005c 0200001A 		bne	.L116
 950              	.L131:
 758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 951              		.loc 1 758 0 is_stmt 0 discriminator 2
 952 0060 04609DE5 		ldr	r6, [sp, #4]
 953 0064 000056E3 		cmp	r6, #0
 954 0068 E9FFFF1A 		bne	.L114
 955              	.L116:
 910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 956              		.loc 1 910 0 is_stmt 1
 957 006c 0090A0E3 		mov	r9, #0
 958 0070 280000EA 		b	.L132
 959              	.LVL108:
 960              	.L117:
 879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 961              		.loc 1 879 0
 962 0074 04509DE5 		ldr	r5, [sp, #4]
 963 0078 000055E3 		cmp	r5, #0
 964 007c 0200001A 		bne	.L123
 883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 965              		.loc 1 883 0
 966 0080 FEFFFFEB 		bl	vPortExitCritical
 967              	.LVL109:
 968              	.L145:
 951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 969              		.loc 1 951 0
 970 0084 0000A0E3 		mov	r0, #0
 971 0088 3A0000EA 		b	.L111
 972              	.LVL110:
 973              	.L123:
 890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 974              		.loc 1 890 0
 975 008c 000056E3 		cmp	r6, #0
 976 0090 0100001A 		bne	.L124
 894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					xEntryTimeSet = pdTRUE;
 977              		.loc 1 894 0
 978 0094 08008DE2 		add	r0, sp, #8
 979 0098 FEFFFFEB 		bl	vTaskInternalSetTimeOutState
 980              	.LVL111:
 981              	.L124:
 904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 982              		.loc 1 904 0
 983 009c FEFFFFEB 		bl	vPortExitCritical
 984              	.LVL112:
 909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvLockQueue( pxQueue );
 985              		.loc 1 909 0
 986 00a0 FEFFFFEB 		bl	vTaskSuspendAll
 987              	.LVL113:
 910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 988              		.loc 1 910 0
 989 00a4 FEFFFFEB 		bl	vPortEnterCritical
 990              	.LVL114:
 991 00a8 4430D4E5 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 992 00ac FF0053E3 		cmp	r3, #255
 993 00b0 4490C405 		strbeq	r9, [r4, #68]
 994 00b4 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 995 00b8 FF0053E3 		cmp	r3, #255
 996 00bc 4590C405 		strbeq	r9, [r4, #69]
 997 00c0 FEFFFFEB 		bl	vPortExitCritical
 998              	.LVL115:
 913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 999              		.loc 1 913 0
 1000 00c4 04108DE2 		add	r1, sp, #4
 1001 00c8 08008DE2 		add	r0, sp, #8
 1002 00cc FEFFFFEB 		bl	xTaskCheckForTimeOut
 1003              	.LVL116:
 1004 00d0 000050E3 		cmp	r0, #0
 1005 00d4 2D00001A 		bne	.L127
 1006              	.LVL117:
 1007              	.LBB37:
 1008              	.LBB38:
2306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
2310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
2311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
2312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue );
2314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		xReturn = pdTRUE;
2317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	else
2319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		xReturn = pdFALSE;
2321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return xReturn;
2324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
2329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
2330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskENTER_CRITICAL();
 1009              		.loc 1 2331 0
 1010 00d8 FEFFFFEB 		bl	vPortEnterCritical
 1011              	.LVL118:
2332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1012              		.loc 1 2333 0
 1013 00dc 386094E5 		ldr	r6, [r4, #56]
 1014 00e0 3C5094E5 		ldr	r5, [r4, #60]
 1015              	.LVL119:
2334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdTRUE;
2336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
2338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdFALSE;
2340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	taskEXIT_CRITICAL();
 1016              		.loc 1 2342 0
 1017 00e4 FEFFFFEB 		bl	vPortExitCritical
 1018              	.LVL120:
 1019              	.LBE38:
 1020              	.LBE37:
 915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1021              		.loc 1 915 0
 1022 00e8 050056E1 		cmp	r6, r5
 1023 00ec 2300001A 		bne	.L128
 918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1024              		.loc 1 918 0
 1025 00f0 04109DE5 		ldr	r1, [sp, #4]
 1026 00f4 100084E2 		add	r0, r4, #16
 1027 00f8 FEFFFFEB 		bl	vTaskPlaceOnEventList
 1028              	.LVL121:
 925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1029              		.loc 1 925 0
 1030 00fc 0400A0E1 		mov	r0, r4
 1031 0100 FEFFFFEB 		bl	prvUnlockQueue
 1032              	.LVL122:
 932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 1033              		.loc 1 932 0
 1034 0104 FEFFFFEB 		bl	xTaskResumeAll
 1035              	.LVL123:
 1036 0108 000050E3 		cmp	r0, #0
 1037 010c 0000001A 		bne	.L129
 934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 1038              		.loc 1 934 0
 1039              		.syntax divided
 1040              	@ 934 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/queue.c" 1
 1041 0110 000000EF 		SWI 0
 1042              	@ 0 "" 2
 1043              		.arm
 1044              		.syntax unified
 1045              	.L129:
 1046 0114 0160A0E3 		mov	r6, #1
 1047              	.LVL124:
 1048              	.L132:
 768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1049              		.loc 1 768 0
 1050 0118 FEFFFFEB 		bl	vPortEnterCritical
 1051              	.LVL125:
 774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1052              		.loc 1 774 0
 1053 011c 023047E2 		sub	r3, r7, #2
 1054 0120 381094E5 		ldr	r1, [r4, #56]
 1055 0124 3C2094E5 		ldr	r2, [r4, #60]
 1056 0128 133F6FE1 		clz	r3, r3
 1057 012c A332A0E1 		lsr	r3, r3, #5
 1058 0130 020051E1 		cmp	r1, r2
 1059 0134 01308333 		orrcc	r3, r3, #1
 1060 0138 000053E3 		cmp	r3, #0
 1061 013c CCFFFF0A 		beq	.L117
 840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1062              		.loc 1 840 0
 1063 0140 0720A0E1 		mov	r2, r7
 1064 0144 0810A0E1 		mov	r1, r8
 1065 0148 0400A0E1 		mov	r0, r4
 1066 014c FEFFFFEB 		bl	prvCopyDataToQueue
 1067              	.LVL126:
 844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 1068              		.loc 1 844 0
 1069 0150 243094E5 		ldr	r3, [r4, #36]
 1070 0154 000053E3 		cmp	r3, #0
 1071 0158 0100000A 		beq	.L118
 846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 1072              		.loc 1 846 0
 1073 015c 240084E2 		add	r0, r4, #36
 1074              	.LVL127:
 1075 0160 FEFFFFEB 		bl	xTaskRemoveFromEventList
 1076              	.LVL128:
 1077              	.L118:
 859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 1078              		.loc 1 859 0
 1079 0164 000050E3 		cmp	r0, #0
 1080 0168 0000000A 		beq	.L120
 865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 1081              		.loc 1 865 0
 1082              		.syntax divided
 1083              	@ 865 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/queue.c" 1
 1084 016c 000000EF 		SWI 0
 1085              	@ 0 "" 2
 1086              		.arm
 1087              		.syntax unified
 1088              	.L120:
 874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				return pdPASS;
 1089              		.loc 1 874 0
 1090 0170 FEFFFFEB 		bl	vPortExitCritical
 1091              	.LVL129:
 875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 1092              		.loc 1 875 0
 1093 0174 0100A0E3 		mov	r0, #1
 1094              	.LVL130:
 1095              	.L111:
 954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 1096              		.loc 1 954 0
 1097 0178 14D08DE2 		add	sp, sp, #20
 1098              		.cfi_remember_state
 1099              		.cfi_def_cfa_offset 28
 1100              		@ sp needed
 1101 017c F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1102              	.LVL131:
 1103              	.L128:
 1104              		.cfi_restore_state
 940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				( void ) xTaskResumeAll();
 1105              		.loc 1 940 0
 1106 0180 0400A0E1 		mov	r0, r4
 1107 0184 FEFFFFEB 		bl	prvUnlockQueue
 1108              	.LVL132:
 941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 1109              		.loc 1 941 0
 1110 0188 FEFFFFEB 		bl	xTaskResumeAll
 1111              	.LVL133:
 1112 018c E0FFFFEA 		b	.L129
 1113              	.L127:
 947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) xTaskResumeAll();
 1114              		.loc 1 947 0
 1115 0190 0400A0E1 		mov	r0, r4
 1116 0194 FEFFFFEB 		bl	prvUnlockQueue
 1117              	.LVL134:
 948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1118              		.loc 1 948 0
 1119 0198 FEFFFFEB 		bl	xTaskResumeAll
 1120              	.LVL135:
 1121 019c B8FFFFEA 		b	.L145
 1122              	.L148:
 1123              		.align	2
 1124              	.L147:
 1125 01a0 28000000 		.word	Unity+40
 1126              		.cfi_endproc
 1127              	.LFE13:
 1129              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1130              		.align	2
 1131              		.syntax unified
 1132              		.arm
 1133              		.fpu neon
 1135              	prvInitialiseMutex:
 1136              	.LFB4:
 474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxNewQueue != NULL )
 1137              		.loc 1 474 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 0
 1140              		@ frame_needed = 0, uses_anonymous_args = 0
 1141              		@ link register save eliminated.
 1142              	.LVL136:
 475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1143              		.loc 1 475 0
 1144 0000 002050E2 		subs	r2, r0, #0
 1145 0004 1EFF2F01 		bxeq	lr
 481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1146              		.loc 1 481 0
 1147 0008 0030A0E3 		mov	r3, #0
 1148 000c 083082E5 		str	r3, [r2, #8]
 490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 1149              		.loc 1 490 0
 1150 0010 0310A0E1 		mov	r1, r3
 482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1151              		.loc 1 482 0
 1152 0014 003082E5 		str	r3, [r2]
 485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1153              		.loc 1 485 0
 1154 0018 0C3082E5 		str	r3, [r2, #12]
 490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 1155              		.loc 1 490 0
 1156 001c 0320A0E1 		mov	r2, r3
 1157 0020 FEFFFFEA 		b	xQueueGenericSend
 1158              	.LVL137:
 1159              		.cfi_endproc
 1160              	.LFE4:
 1162              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1163              		.align	2
 1164              		.global	xQueueCreateMutex
 1165              		.syntax unified
 1166              		.arm
 1167              		.fpu neon
 1169              	xQueueCreateMutex:
 1170              	.LFB5:
 504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xNewQueue;
 1171              		.loc 1 504 0
 1172              		.cfi_startproc
 1173              		@ args = 0, pretend = 0, frame = 0
 1174              		@ frame_needed = 0, uses_anonymous_args = 0
 1175              	.LVL138:
 1176 0000 10402DE9 		push	{r4, lr}
 1177              		.cfi_def_cfa_offset 8
 1178              		.cfi_offset 4, -8
 1179              		.cfi_offset 14, -4
 508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1180              		.loc 1 508 0
 1181 0004 0020A0E1 		mov	r2, r0
 1182 0008 0010A0E3 		mov	r1, #0
 1183 000c 0100A0E3 		mov	r0, #1
 1184              	.LVL139:
 1185 0010 FEFFFFEB 		bl	xQueueGenericCreate
 1186              	.LVL140:
 1187 0014 0040A0E1 		mov	r4, r0
 1188              	.LVL141:
 509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1189              		.loc 1 509 0
 1190 0018 FEFFFFEB 		bl	prvInitialiseMutex
 1191              	.LVL142:
 512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1192              		.loc 1 512 0
 1193 001c 0400A0E1 		mov	r0, r4
 1194 0020 1080BDE8 		pop	{r4, pc}
 1195              		.cfi_endproc
 1196              	.LFE5:
 1198              		.section	.text.xQueueCreateMutexStatic,"ax",%progbits
 1199              		.align	2
 1200              		.global	xQueueCreateMutexStatic
 1201              		.syntax unified
 1202              		.arm
 1203              		.fpu neon
 1205              	xQueueCreateMutexStatic:
 1206              	.LFB6:
 520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xNewQueue;
 1207              		.loc 1 520 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 0
 1210              		@ frame_needed = 0, uses_anonymous_args = 0
 1211              	.LVL143:
 528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1212              		.loc 1 528 0
 1213 0000 0020A0E3 		mov	r2, #0
 520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	QueueHandle_t xNewQueue;
 1214              		.loc 1 520 0
 1215 0004 13402DE9 		push	{r0, r1, r4, lr}
 1216              		.cfi_def_cfa_offset 16
 1217              		.cfi_offset 4, -8
 1218              		.cfi_offset 14, -4
 528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1219              		.loc 1 528 0
 1220 0008 0130A0E1 		mov	r3, r1
 1221 000c 00008DE5 		str	r0, [sp]
 1222 0010 0210A0E1 		mov	r1, r2
 1223              	.LVL144:
 1224 0014 0100A0E3 		mov	r0, #1
 1225              	.LVL145:
 1226 0018 FEFFFFEB 		bl	xQueueGenericCreateStatic
 1227              	.LVL146:
 1228 001c 0040A0E1 		mov	r4, r0
 1229              	.LVL147:
 529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1230              		.loc 1 529 0
 1231 0020 FEFFFFEB 		bl	prvInitialiseMutex
 1232              	.LVL148:
 532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1233              		.loc 1 532 0
 1234 0024 0400A0E1 		mov	r0, r4
 1235 0028 08D08DE2 		add	sp, sp, #8
 1236              		.cfi_def_cfa_offset 8
 1237              		@ sp needed
 1238 002c 1080BDE8 		pop	{r4, pc}
 1239              		.cfi_endproc
 1240              	.LFE6:
 1242              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1243              		.align	2
 1244              		.global	xQueueGiveMutexRecursive
 1245              		.syntax unified
 1246              		.arm
 1247              		.fpu neon
 1249              	xQueueGiveMutexRecursive:
 1250              	.LFB9:
 597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xReturn;
 1251              		.loc 1 597 0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 0
 1254              		@ frame_needed = 0, uses_anonymous_args = 0
 1255              	.LVL149:
 1256 0000 70402DE9 		push	{r4, r5, r6, lr}
 1257              		.cfi_def_cfa_offset 16
 1258              		.cfi_offset 4, -16
 1259              		.cfi_offset 5, -12
 1260              		.cfi_offset 6, -8
 1261              		.cfi_offset 14, -4
 601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1262              		.loc 1 601 0
 1263 0004 004050E2 		subs	r4, r0, #0
 1264 0008 0200001A 		bne	.L156
 601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1265              		.loc 1 601 0 is_stmt 0 discriminator 1
 1266 000c 0110A0E3 		mov	r1, #1
 1267 0010 44009FE5 		ldr	r0, .L161
 1268              	.LVL150:
 1269 0014 FEFFFFEB 		bl	longjmp
 1270              	.LVL151:
 1271              	.L156:
 609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1272              		.loc 1 609 0 is_stmt 1
 1273 0018 085094E5 		ldr	r5, [r4, #8]
 1274 001c FEFFFFEB 		bl	xTaskGetCurrentTaskHandle
 1275              	.LVL152:
 1276 0020 000055E1 		cmp	r5, r0
 1277 0024 0A00001A 		bne	.L158
 618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1278              		.loc 1 618 0
 1279 0028 0C3094E5 		ldr	r3, [r4, #12]
 1280 002c 013043E2 		sub	r3, r3, #1
 621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1281              		.loc 1 621 0
 1282 0030 000053E3 		cmp	r3, #0
 618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1283              		.loc 1 618 0
 1284 0034 0C3084E5 		str	r3, [r4, #12]
 621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1285              		.loc 1 621 0
 1286 0038 0300001A 		bne	.L159
 625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 1287              		.loc 1 625 0
 1288 003c 0320A0E1 		mov	r2, r3
 1289 0040 0310A0E1 		mov	r1, r3
 1290 0044 0400A0E1 		mov	r0, r4
 1291 0048 FEFFFFEB 		bl	xQueueGenericSend
 1292              	.LVL153:
 1293              	.L159:
 632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 1294              		.loc 1 632 0
 1295 004c 0100A0E3 		mov	r0, #1
 1296              	.LVL154:
 644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1297              		.loc 1 644 0
 1298 0050 7080BDE8 		pop	{r4, r5, r6, pc}
 1299              	.LVL155:
 1300              	.L158:
 638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1301              		.loc 1 638 0
 1302 0054 0000A0E3 		mov	r0, #0
 1303 0058 7080BDE8 		pop	{r4, r5, r6, pc}
 1304              	.L162:
 1305              		.align	2
 1306              	.L161:
 1307 005c 28000000 		.word	Unity+40
 1308              		.cfi_endproc
 1309              	.LFE9:
 1311              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1312              		.align	2
 1313              		.global	xQueueGenericSendFromISR
 1314              		.syntax unified
 1315              		.arm
 1316              		.fpu neon
 1318              	xQueueGenericSendFromISR:
 1319              	.LFB14:
 958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
 1320              		.loc 1 958 0
 1321              		.cfi_startproc
 1322              		@ args = 0, pretend = 0, frame = 0
 1323              		@ frame_needed = 0, uses_anonymous_args = 0
 1324              	.LVL156:
 1325 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1326              		.cfi_def_cfa_offset 32
 1327              		.cfi_offset 4, -32
 1328              		.cfi_offset 5, -28
 1329              		.cfi_offset 6, -24
 1330              		.cfi_offset 7, -20
 1331              		.cfi_offset 8, -16
 1332              		.cfi_offset 9, -12
 1333              		.cfi_offset 10, -8
 1334              		.cfi_offset 14, -4
 963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1335              		.loc 1 963 0
 1336 0004 005050E2 		subs	r5, r0, #0
 1337 0008 0200001A 		bne	.L164
 1338              	.LVL157:
 1339              	.L166:
 963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1340              		.loc 1 963 0 is_stmt 0 discriminator 1
 1341 000c 0110A0E3 		mov	r1, #1
 1342              	.LVL158:
 1343 0010 D0009FE5 		ldr	r0, .L185
 1344              	.LVL159:
 1345 0014 FEFFFFEB 		bl	longjmp
 1346              	.LVL160:
 1347              	.L164:
 964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1348              		.loc 1 964 0 is_stmt 1
 1349 0018 000051E3 		cmp	r1, #0
 1350 001c 0190A0E1 		mov	r9, r1
 1351 0020 0270A0E1 		mov	r7, r2
 1352 0024 0380A0E1 		mov	r8, r3
 1353 0028 0200001A 		bne	.L165
 964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1354              		.loc 1 964 0 is_stmt 0 discriminator 2
 1355 002c 403095E5 		ldr	r3, [r5, #64]
 1356              	.LVL161:
 1357 0030 000053E3 		cmp	r3, #0
 1358 0034 F4FFFF1A 		bne	.L166
 1359              	.L165:
 965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1360              		.loc 1 965 0 is_stmt 1
 1361 0038 020058E3 		cmp	r8, #2
 1362 003c 0200001A 		bne	.L167
 965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1363              		.loc 1 965 0 is_stmt 0 discriminator 2
 1364 0040 3C3095E5 		ldr	r3, [r5, #60]
 1365 0044 010053E3 		cmp	r3, #1
 1366 0048 EFFFFF1A 		bne	.L166
 1367              	.L167:
 990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1368              		.loc 1 990 0 is_stmt 1
 1369 004c 024048E2 		sub	r4, r8, #2
 981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1370              		.loc 1 981 0
 1371 0050 FEFFFFEB 		bl	vPortValidateInterruptPriority
 1372              	.LVL162:
 990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1373              		.loc 1 990 0
 1374 0054 144F6FE1 		clz	r4, r4
 988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 1375              		.loc 1 988 0
 1376 0058 FEFFFFEB 		bl	ulPortSetInterruptMask
 1377              	.LVL163:
 990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1378              		.loc 1 990 0
 1379 005c 382095E5 		ldr	r2, [r5, #56]
 1380 0060 A442A0E1 		lsr	r4, r4, #5
 1381 0064 3C3095E5 		ldr	r3, [r5, #60]
 988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 1382              		.loc 1 988 0
 1383 0068 0060A0E1 		mov	r6, r0
 1384              	.LVL164:
 990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1385              		.loc 1 990 0
 1386 006c 030052E1 		cmp	r2, r3
 1387 0070 01408433 		orrcc	r4, r4, #1
 1388 0074 000054E3 		cmp	r4, #0
 1389 0078 0B00000A 		beq	.L170
 1390              	.LBB39:
 992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1391              		.loc 1 992 0
 1392 007c 4540D5E5 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
1001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1393              		.loc 1 1001 0
 1394 0080 0820A0E1 		mov	r2, r8
 1395 0084 0910A0E1 		mov	r1, r9
 1396 0088 0500A0E1 		mov	r0, r5
 1397              	.LVL165:
 1398 008c FEFFFFEB 		bl	prvCopyDataToQueue
 1399              	.LVL166:
 992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1400              		.loc 1 992 0
 1401 0090 7440AFE6 		sxtb	r4, r4
 1402              	.LVL167:
1005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1403              		.loc 1 1005 0
 1404 0094 010074E3 		cmn	r4, #1
 1405 0098 0D00001A 		bne	.L168
1060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 1406              		.loc 1 1060 0
 1407 009c 243095E5 		ldr	r3, [r5, #36]
1068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
 1408              		.loc 1 1068 0
 1409 00a0 0140A0E3 		mov	r4, #1
 1410              	.LVL168:
1060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 1411              		.loc 1 1060 0
 1412 00a4 000053E3 		cmp	r3, #0
 1413 00a8 0300001A 		bne	.L169
 1414              	.L170:
 1415              	.LVL169:
 1416              	.LBE39:
1102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1417              		.loc 1 1102 0
 1418 00ac 0600A0E1 		mov	r0, r6
 1419 00b0 FEFFFFEB 		bl	vPortClearInterruptMask
 1420              	.LVL170:
1105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 1421              		.loc 1 1105 0
 1422 00b4 0400A0E1 		mov	r0, r4
 1423 00b8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1424              	.LVL171:
 1425              	.L169:
 1426              	.LBB40:
1062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 1427              		.loc 1 1062 0
 1428 00bc 240085E2 		add	r0, r5, #36
 1429 00c0 FEFFFFEB 		bl	xTaskRemoveFromEventList
 1430              	.LVL172:
1066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
 1431              		.loc 1 1066 0
 1432 00c4 000050E3 		cmp	r0, #0
 1433 00c8 00005713 		cmpne	r7, #0
1068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
 1434              		.loc 1 1068 0
 1435 00cc 00408715 		strne	r4, [r7]
 1436 00d0 F5FFFFEA 		b	.L170
 1437              	.LVL173:
 1438              	.L168:
1091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 1439              		.loc 1 1091 0
 1440 00d4 014084E2 		add	r4, r4, #1
 1441              	.LVL174:
 1442 00d8 7440AFE6 		sxtb	r4, r4
 1443              	.LVL175:
 1444 00dc 4540C5E5 		strb	r4, [r5, #69]
1094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 1445              		.loc 1 1094 0
 1446 00e0 0140A0E3 		mov	r4, #1
 1447 00e4 F0FFFFEA 		b	.L170
 1448              	.L186:
 1449              		.align	2
 1450              	.L185:
 1451 00e8 28000000 		.word	Unity+40
 1452              	.LBE40:
 1453              		.cfi_endproc
 1454              	.LFE14:
 1456              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1457              		.align	2
 1458              		.global	xQueueGiveFromISR
 1459              		.syntax unified
 1460              		.arm
 1461              		.fpu neon
 1463              	xQueueGiveFromISR:
 1464              	.LFB15:
1109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
 1465              		.loc 1 1109 0
 1466              		.cfi_startproc
 1467              		@ args = 0, pretend = 0, frame = 0
 1468              		@ frame_needed = 0, uses_anonymous_args = 0
 1469              	.LVL176:
 1470 0000 70402DE9 		push	{r4, r5, r6, lr}
 1471              		.cfi_def_cfa_offset 16
 1472              		.cfi_offset 4, -16
 1473              		.cfi_offset 5, -12
 1474              		.cfi_offset 6, -8
 1475              		.cfi_offset 14, -4
1120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1476              		.loc 1 1120 0
 1477 0004 004050E2 		subs	r4, r0, #0
 1478 0008 0200001A 		bne	.L188
 1479              	.L189:
1120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1480              		.loc 1 1120 0 is_stmt 0 discriminator 1
 1481 000c 0110A0E3 		mov	r1, #1
 1482              	.LVL177:
 1483 0010 AC009FE5 		ldr	r0, .L205
 1484              	.LVL178:
 1485 0014 FEFFFFEB 		bl	longjmp
 1486              	.LVL179:
 1487              	.L188:
1124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1488              		.loc 1 1124 0 is_stmt 1
 1489 0018 403094E5 		ldr	r3, [r4, #64]
 1490 001c 000053E3 		cmp	r3, #0
 1491 0020 F9FFFF1A 		bne	.L189
1129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1492              		.loc 1 1129 0
 1493 0024 003094E5 		ldr	r3, [r4]
 1494 0028 0150A0E1 		mov	r5, r1
 1495 002c 000053E3 		cmp	r3, #0
 1496 0030 0200001A 		bne	.L190
1129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1497              		.loc 1 1129 0 is_stmt 0 discriminator 2
 1498 0034 083094E5 		ldr	r3, [r4, #8]
 1499 0038 000053E3 		cmp	r3, #0
 1500 003c F2FFFF1A 		bne	.L189
 1501              	.L190:
1145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1502              		.loc 1 1145 0 is_stmt 1
 1503 0040 FEFFFFEB 		bl	vPortValidateInterruptPriority
 1504              	.LVL180:
1147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 1505              		.loc 1 1147 0
 1506 0044 FEFFFFEB 		bl	ulPortSetInterruptMask
 1507              	.LVL181:
 1508              	.LBB41:
1149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1509              		.loc 1 1149 0
 1510 0048 382094E5 		ldr	r2, [r4, #56]
 1511              	.LBE41:
1147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 1512              		.loc 1 1147 0
 1513 004c 0060A0E1 		mov	r6, r0
 1514              	.LVL182:
 1515              	.LBB43:
1154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1516              		.loc 1 1154 0
 1517 0050 3C3094E5 		ldr	r3, [r4, #60]
 1518 0054 030052E1 		cmp	r2, r3
1264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 1519              		.loc 1 1264 0
 1520 0058 0040A023 		movcs	r4, #0
 1521              	.LVL183:
 1522 005c 1400002A 		bcs	.L193
 1523              	.LVL184:
 1524              	.L195:
 1525              	.LBB42:
1156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1526              		.loc 1 1156 0
 1527 0060 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
1166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1528              		.loc 1 1166 0
 1529 0064 012082E2 		add	r2, r2, #1
 1530              	.LVL185:
 1531 0068 382084E5 		str	r2, [r4, #56]
1156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1532              		.loc 1 1156 0
 1533 006c 7330AFE6 		sxtb	r3, r3
 1534              	.LVL186:
1170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1535              		.loc 1 1170 0
 1536 0070 010073E3 		cmn	r3, #1
1256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 1537              		.loc 1 1256 0
 1538 0074 01308312 		addne	r3, r3, #1
 1539              	.LVL187:
 1540 0078 7330AF16 		sxtbne	r3, r3
 1541 007c 4530C415 		strbne	r3, [r4, #69]
1170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1542              		.loc 1 1170 0
 1543 0080 0200001A 		bne	.L204
1225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 1544              		.loc 1 1225 0
 1545 0084 243094E5 		ldr	r3, [r4, #36]
 1546 0088 000053E3 		cmp	r3, #0
 1547 008c 0100001A 		bne	.L192
 1548              	.LVL188:
 1549              	.L204:
1259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 1550              		.loc 1 1259 0
 1551 0090 0140A0E3 		mov	r4, #1
 1552 0094 060000EA 		b	.L193
 1553              	.LVL189:
 1554              	.L192:
1227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 1555              		.loc 1 1227 0
 1556 0098 240084E2 		add	r0, r4, #36
 1557              	.LVL190:
 1558 009c FEFFFFEB 		bl	xTaskRemoveFromEventList
 1559              	.LVL191:
1231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
 1560              		.loc 1 1231 0
 1561 00a0 000050E3 		cmp	r0, #0
 1562 00a4 00005513 		cmpne	r5, #0
1233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							}
 1563              		.loc 1 1233 0
 1564 00a8 0140A013 		movne	r4, #1
 1565              	.LVL192:
 1566 00ac 00408515 		strne	r4, [r5]
1231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 							{
 1567              		.loc 1 1231 0
 1568 00b0 F6FFFF0A 		beq	.L204
 1569              	.L193:
 1570              	.LVL193:
 1571              	.LBE42:
 1572              	.LBE43:
1267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1573              		.loc 1 1267 0
 1574 00b4 0600A0E1 		mov	r0, r6
 1575 00b8 FEFFFFEB 		bl	vPortClearInterruptMask
 1576              	.LVL194:
1270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 1577              		.loc 1 1270 0
 1578 00bc 0400A0E1 		mov	r0, r4
 1579 00c0 7080BDE8 		pop	{r4, r5, r6, pc}
 1580              	.L206:
 1581              		.align	2
 1582              	.L205:
 1583 00c4 28000000 		.word	Unity+40
 1584              		.cfi_endproc
 1585              	.LFE15:
 1587              		.section	.text.xQueueReceive,"ax",%progbits
 1588              		.align	2
 1589              		.global	xQueueReceive
 1590              		.syntax unified
 1591              		.arm
 1592              		.fpu neon
 1594              	xQueueReceive:
 1595              	.LFB16:
1274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1596              		.loc 1 1274 0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 16
 1599              		@ frame_needed = 0, uses_anonymous_args = 0
 1600              	.LVL195:
 1601 0000 FF412DE9 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1602              		.cfi_def_cfa_offset 40
 1603              		.cfi_offset 4, -24
 1604              		.cfi_offset 5, -20
 1605              		.cfi_offset 6, -16
 1606              		.cfi_offset 7, -12
 1607              		.cfi_offset 8, -8
 1608              		.cfi_offset 14, -4
1280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1609              		.loc 1 1280 0
 1610 0004 004050E2 		subs	r4, r0, #0
1274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1611              		.loc 1 1274 0
 1612 0008 04208DE5 		str	r2, [sp, #4]
1280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1613              		.loc 1 1280 0
 1614 000c 0200001A 		bne	.L208
 1615              	.LVL196:
 1616              	.L210:
1280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1617              		.loc 1 1280 0 is_stmt 0 discriminator 1
 1618 0010 0110A0E3 		mov	r1, #1
 1619 0014 58019FE5 		ldr	r0, .L239
 1620 0018 FEFFFFEB 		bl	longjmp
 1621              	.LVL197:
 1622              	.L208:
1284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1623              		.loc 1 1284 0 is_stmt 1
 1624 001c 000051E3 		cmp	r1, #0
 1625 0020 0180A0E1 		mov	r8, r1
 1626 0024 0200001A 		bne	.L209
1284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1627              		.loc 1 1284 0 is_stmt 0 discriminator 2
 1628 0028 403094E5 		ldr	r3, [r4, #64]
 1629 002c 000053E3 		cmp	r3, #0
 1630 0030 F6FFFF1A 		bne	.L210
 1631              	.L209:
1289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 1632              		.loc 1 1289 0 is_stmt 1
 1633 0034 FEFFFFEB 		bl	xTaskGetSchedulerState
 1634              	.LVL198:
 1635 0038 000050E3 		cmp	r0, #0
 1636 003c 0060A013 		movne	r6, #0
 1637 0040 0200001A 		bne	.L211
 1638              	.L225:
1289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 1639              		.loc 1 1289 0 is_stmt 0 discriminator 2
 1640 0044 04609DE5 		ldr	r6, [sp, #4]
 1641 0048 000056E3 		cmp	r6, #0
 1642 004c EFFFFF1A 		bne	.L210
 1643              	.L211:
1364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1644              		.loc 1 1364 0 is_stmt 1
 1645 0050 0070A0E3 		mov	r7, #0
 1646 0054 260000EA 		b	.L226
 1647              	.LVL199:
 1648              	.L212:
 1649              	.LBB44:
1336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 1650              		.loc 1 1336 0
 1651 0058 04509DE5 		ldr	r5, [sp, #4]
 1652              	.LVL200:
 1653 005c 000055E3 		cmp	r5, #0
 1654 0060 0200001A 		bne	.L217
1340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1655              		.loc 1 1340 0
 1656 0064 FEFFFFEB 		bl	vPortExitCritical
 1657              	.LVL201:
 1658              	.L238:
 1659              	.LBE44:
1403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 1660              		.loc 1 1403 0
 1661 0068 0000A0E3 		mov	r0, #0
 1662 006c 330000EA 		b	.L207
 1663              	.LVL202:
 1664              	.L217:
 1665              	.LBB45:
1344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 1666              		.loc 1 1344 0
 1667 0070 000056E3 		cmp	r6, #0
 1668 0074 0100001A 		bne	.L218
1348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					xEntryTimeSet = pdTRUE;
 1669              		.loc 1 1348 0
 1670 0078 08008DE2 		add	r0, sp, #8
 1671 007c FEFFFFEB 		bl	vTaskInternalSetTimeOutState
 1672              	.LVL203:
 1673              	.L218:
 1674              	.LBE45:
1358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1675              		.loc 1 1358 0
 1676 0080 FEFFFFEB 		bl	vPortExitCritical
 1677              	.LVL204:
1363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvLockQueue( pxQueue );
 1678              		.loc 1 1363 0
 1679 0084 FEFFFFEB 		bl	vTaskSuspendAll
 1680              	.LVL205:
1364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1681              		.loc 1 1364 0
 1682 0088 FEFFFFEB 		bl	vPortEnterCritical
 1683              	.LVL206:
 1684 008c 4430D4E5 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1685 0090 FF0053E3 		cmp	r3, #255
 1686 0094 4470C405 		strbeq	r7, [r4, #68]
 1687 0098 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1688 009c FF0053E3 		cmp	r3, #255
 1689 00a0 4570C405 		strbeq	r7, [r4, #69]
 1690 00a4 FEFFFFEB 		bl	vPortExitCritical
 1691              	.LVL207:
1367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1692              		.loc 1 1367 0
 1693 00a8 04108DE2 		add	r1, sp, #4
 1694 00ac 08008DE2 		add	r0, sp, #8
 1695 00b0 FEFFFFEB 		bl	xTaskCheckForTimeOut
 1696              	.LVL208:
 1697 00b4 000050E3 		cmp	r0, #0
1371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1698              		.loc 1 1371 0
 1699 00b8 0400A0E1 		mov	r0, r4
1367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1700              		.loc 1 1367 0
 1701 00bc 2500001A 		bne	.L221
 1702              	.LVL209:
1371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1703              		.loc 1 1371 0
 1704 00c0 FEFFFFEB 		bl	prvIsQueueEmpty
 1705              	.LVL210:
 1706 00c4 000050E3 		cmp	r0, #0
 1707 00c8 1E00000A 		beq	.L222
1374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvUnlockQueue( pxQueue );
 1708              		.loc 1 1374 0
 1709 00cc 04109DE5 		ldr	r1, [sp, #4]
 1710 00d0 240084E2 		add	r0, r4, #36
 1711 00d4 FEFFFFEB 		bl	vTaskPlaceOnEventList
 1712              	.LVL211:
1375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1713              		.loc 1 1375 0
 1714 00d8 0400A0E1 		mov	r0, r4
 1715 00dc FEFFFFEB 		bl	prvUnlockQueue
 1716              	.LVL212:
1376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 1717              		.loc 1 1376 0
 1718 00e0 FEFFFFEB 		bl	xTaskResumeAll
 1719              	.LVL213:
 1720 00e4 000050E3 		cmp	r0, #0
 1721 00e8 0000001A 		bne	.L224
1378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 1722              		.loc 1 1378 0
 1723              		.syntax divided
 1724              	@ 1378 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/queue.c" 1
 1725 00ec 000000EF 		SWI 0
 1726              	@ 0 "" 2
 1727              		.arm
 1728              		.syntax unified
 1729              	.L224:
 1730 00f0 0160A0E3 		mov	r6, #1
 1731              	.LVL214:
 1732              	.L226:
1299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1733              		.loc 1 1299 0
 1734 00f4 FEFFFFEB 		bl	vPortEnterCritical
 1735              	.LVL215:
 1736              	.LBB46:
1301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1737              		.loc 1 1301 0
 1738 00f8 385094E5 		ldr	r5, [r4, #56]
 1739              	.LVL216:
1305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1740              		.loc 1 1305 0
 1741 00fc 000055E3 		cmp	r5, #0
 1742 0100 D4FFFF0A 		beq	.L212
1308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1743              		.loc 1 1308 0
 1744 0104 0810A0E1 		mov	r1, r8
 1745 0108 0400A0E1 		mov	r0, r4
1310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1746              		.loc 1 1310 0
 1747 010c 015045E2 		sub	r5, r5, #1
 1748              	.LVL217:
1308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1749              		.loc 1 1308 0
 1750 0110 FEFFFFEB 		bl	prvCopyDataFromQueue
 1751              	.LVL218:
1310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1752              		.loc 1 1310 0
 1753 0114 385084E5 		str	r5, [r4, #56]
1315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 1754              		.loc 1 1315 0
 1755 0118 103094E5 		ldr	r3, [r4, #16]
 1756 011c 000053E3 		cmp	r3, #0
 1757 0120 0400000A 		beq	.L214
1317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 1758              		.loc 1 1317 0
 1759 0124 100084E2 		add	r0, r4, #16
 1760 0128 FEFFFFEB 		bl	xTaskRemoveFromEventList
 1761              	.LVL219:
 1762 012c 000050E3 		cmp	r0, #0
 1763 0130 0000000A 		beq	.L214
1319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 1764              		.loc 1 1319 0
 1765              		.syntax divided
 1766              	@ 1319 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/queue.c" 1
 1767 0134 000000EF 		SWI 0
 1768              	@ 0 "" 2
 1769              		.arm
 1770              		.syntax unified
 1771              	.L214:
1331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				return pdPASS;
 1772              		.loc 1 1331 0
 1773 0138 FEFFFFEB 		bl	vPortExitCritical
 1774              	.LVL220:
1332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 1775              		.loc 1 1332 0
 1776 013c 0100A0E3 		mov	r0, #1
 1777              	.LVL221:
 1778              	.L207:
 1779              	.LBE46:
1411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 1780              		.loc 1 1411 0
 1781 0140 10D08DE2 		add	sp, sp, #16
 1782              		.cfi_remember_state
 1783              		.cfi_def_cfa_offset 24
 1784              		@ sp needed
 1785 0144 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1786              	.LVL222:
 1787              	.L222:
 1788              		.cfi_restore_state
1389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				( void ) xTaskResumeAll();
 1789              		.loc 1 1389 0
 1790 0148 0400A0E1 		mov	r0, r4
 1791 014c FEFFFFEB 		bl	prvUnlockQueue
 1792              	.LVL223:
1390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 1793              		.loc 1 1390 0
 1794 0150 FEFFFFEB 		bl	xTaskResumeAll
 1795              	.LVL224:
 1796 0154 E5FFFFEA 		b	.L224
 1797              	.LVL225:
 1798              	.L221:
1397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) xTaskResumeAll();
 1799              		.loc 1 1397 0
 1800 0158 FEFFFFEB 		bl	prvUnlockQueue
 1801              	.LVL226:
1398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1802              		.loc 1 1398 0
 1803 015c FEFFFFEB 		bl	xTaskResumeAll
 1804              	.LVL227:
1400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1805              		.loc 1 1400 0
 1806 0160 0400A0E1 		mov	r0, r4
 1807 0164 FEFFFFEB 		bl	prvIsQueueEmpty
 1808              	.LVL228:
 1809 0168 000050E3 		cmp	r0, #0
 1810 016c DFFFFF0A 		beq	.L224
 1811 0170 BCFFFFEA 		b	.L238
 1812              	.L240:
 1813              		.align	2
 1814              	.L239:
 1815 0174 28000000 		.word	Unity+40
 1816              		.cfi_endproc
 1817              	.LFE16:
 1819              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1820              		.align	2
 1821              		.global	xQueueSemaphoreTake
 1822              		.syntax unified
 1823              		.arm
 1824              		.fpu neon
 1826              	xQueueSemaphoreTake:
 1827              	.LFB17:
1415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1828              		.loc 1 1415 0
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 16
 1831              		@ frame_needed = 0, uses_anonymous_args = 0
 1832              	.LVL229:
 1833 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 1834              		.cfi_def_cfa_offset 20
 1835              		.cfi_offset 4, -20
 1836              		.cfi_offset 5, -16
 1837              		.cfi_offset 6, -12
 1838              		.cfi_offset 7, -8
 1839              		.cfi_offset 14, -4
1425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1840              		.loc 1 1425 0
 1841 0004 004050E2 		subs	r4, r0, #0
1415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1842              		.loc 1 1415 0
 1843 0008 14D04DE2 		sub	sp, sp, #20
 1844              		.cfi_def_cfa_offset 40
1415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1845              		.loc 1 1415 0
 1846 000c 04108DE5 		str	r1, [sp, #4]
1425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1847              		.loc 1 1425 0
 1848 0010 0200001A 		bne	.L242
 1849              	.LVL230:
 1850              	.L243:
1425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1851              		.loc 1 1425 0 is_stmt 0 discriminator 1
 1852 0014 0110A0E3 		mov	r1, #1
 1853 0018 AC019FE5 		ldr	r0, .L273
 1854 001c FEFFFFEB 		bl	longjmp
 1855              	.LVL231:
 1856              	.L242:
1429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1857              		.loc 1 1429 0 is_stmt 1
 1858 0020 405094E5 		ldr	r5, [r4, #64]
 1859 0024 000055E3 		cmp	r5, #0
 1860 0028 F9FFFF1A 		bne	.L243
1434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 1861              		.loc 1 1434 0
 1862 002c FEFFFFEB 		bl	xTaskGetSchedulerState
 1863              	.LVL232:
 1864 0030 000050E3 		cmp	r0, #0
 1865 0034 0200001A 		bne	.L261
1434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 1866              		.loc 1 1434 0 is_stmt 0 discriminator 2
 1867 0038 04509DE5 		ldr	r5, [sp, #4]
 1868 003c 000055E3 		cmp	r5, #0
 1869 0040 F3FFFF1A 		bne	.L243
 1870              	.L261:
 1871 0044 0560A0E1 		mov	r6, r5
1535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1872              		.loc 1 1535 0 is_stmt 1
 1873 0048 0070A0E3 		mov	r7, #0
 1874              	.LVL233:
 1875              	.L245:
1444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1876              		.loc 1 1444 0
 1877 004c FEFFFFEB 		bl	vPortEnterCritical
 1878              	.LVL234:
 1879              	.LBB51:
1448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1880              		.loc 1 1448 0
 1881 0050 383094E5 		ldr	r3, [r4, #56]
 1882              	.LVL235:
1452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1883              		.loc 1 1452 0
 1884 0054 000053E3 		cmp	r3, #0
 1885 0058 1300000A 		beq	.L246
1458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1886              		.loc 1 1458 0
 1887 005c 013043E2 		sub	r3, r3, #1
 1888              	.LVL236:
 1889 0060 383084E5 		str	r3, [r4, #56]
1462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 1890              		.loc 1 1462 0
 1891 0064 003094E5 		ldr	r3, [r4]
 1892              	.LVL237:
 1893 0068 000053E3 		cmp	r3, #0
 1894 006c 0100001A 		bne	.L247
1466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 1895              		.loc 1 1466 0
 1896 0070 FEFFFFEB 		bl	pvTaskIncrementMutexHeldCount
 1897              	.LVL238:
 1898 0074 080084E5 		str	r0, [r4, #8]
 1899              	.L247:
1477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 1900              		.loc 1 1477 0
 1901 0078 103094E5 		ldr	r3, [r4, #16]
 1902 007c 000053E3 		cmp	r3, #0
 1903 0080 0400000A 		beq	.L249
1479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 1904              		.loc 1 1479 0
 1905 0084 100084E2 		add	r0, r4, #16
 1906 0088 FEFFFFEB 		bl	xTaskRemoveFromEventList
 1907              	.LVL239:
 1908 008c 000050E3 		cmp	r0, #0
 1909 0090 0000000A 		beq	.L249
1481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 1910              		.loc 1 1481 0
 1911              		.syntax divided
 1912              	@ 1481 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/queue.c" 1
 1913 0094 000000EF 		SWI 0
 1914              	@ 0 "" 2
 1915              		.arm
 1916              		.syntax unified
 1917              	.L249:
1494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 1918              		.loc 1 1494 0
 1919 0098 0150A0E3 		mov	r5, #1
1493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				return pdPASS;
 1920              		.loc 1 1493 0
 1921 009c FEFFFFEB 		bl	vPortExitCritical
 1922              	.LVL240:
 1923              	.L241:
 1924              	.LBE51:
1629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 1925              		.loc 1 1629 0
 1926 00a0 0500A0E1 		mov	r0, r5
 1927 00a4 14D08DE2 		add	sp, sp, #20
 1928              		.cfi_remember_state
 1929              		.cfi_def_cfa_offset 20
 1930              		@ sp needed
 1931 00a8 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 1932              	.LVL241:
 1933              	.L246:
 1934              		.cfi_restore_state
 1935              	.LBB52:
1498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 1936              		.loc 1 1498 0
 1937 00ac 04309DE5 		ldr	r3, [sp, #4]
 1938              	.LVL242:
 1939 00b0 000053E3 		cmp	r3, #0
 1940 00b4 0300001A 		bne	.L252
1505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 1941              		.loc 1 1505 0
 1942 00b8 000055E3 		cmp	r5, #0
 1943 00bc D4FFFF1A 		bne	.L243
1511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1944              		.loc 1 1511 0
 1945 00c0 FEFFFFEB 		bl	vPortExitCritical
 1946              	.LVL243:
1513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 1947              		.loc 1 1513 0
 1948 00c4 F5FFFFEA 		b	.L241
 1949              	.L252:
1515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 1950              		.loc 1 1515 0
 1951 00c8 000056E3 		cmp	r6, #0
 1952 00cc 0100001A 		bne	.L253
1519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					xEntryTimeSet = pdTRUE;
 1953              		.loc 1 1519 0
 1954 00d0 08008DE2 		add	r0, sp, #8
 1955 00d4 FEFFFFEB 		bl	vTaskInternalSetTimeOutState
 1956              	.LVL244:
 1957              	.L253:
 1958              	.LBE52:
1529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1959              		.loc 1 1529 0
 1960 00d8 FEFFFFEB 		bl	vPortExitCritical
 1961              	.LVL245:
1534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvLockQueue( pxQueue );
 1962              		.loc 1 1534 0
 1963 00dc FEFFFFEB 		bl	vTaskSuspendAll
 1964              	.LVL246:
1535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 1965              		.loc 1 1535 0
 1966 00e0 FEFFFFEB 		bl	vPortEnterCritical
 1967              	.LVL247:
 1968 00e4 4430D4E5 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1969 00e8 FF0053E3 		cmp	r3, #255
 1970 00ec 4470C405 		strbeq	r7, [r4, #68]
 1971 00f0 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1972 00f4 FF0053E3 		cmp	r3, #255
 1973 00f8 4570C405 		strbeq	r7, [r4, #69]
 1974 00fc FEFFFFEB 		bl	vPortExitCritical
 1975              	.LVL248:
1538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1976              		.loc 1 1538 0
 1977 0100 04108DE2 		add	r1, sp, #4
 1978 0104 08008DE2 		add	r0, sp, #8
 1979 0108 FEFFFFEB 		bl	xTaskCheckForTimeOut
 1980              	.LVL249:
 1981 010c 000050E3 		cmp	r0, #0
1544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1982              		.loc 1 1544 0
 1983 0110 0400A0E1 		mov	r0, r4
1538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 1984              		.loc 1 1538 0
 1985 0114 1900001A 		bne	.L256
 1986              	.LVL250:
1544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 1987              		.loc 1 1544 0
 1988 0118 FEFFFFEB 		bl	prvIsQueueEmpty
 1989              	.LVL251:
 1990 011c 000050E3 		cmp	r0, #0
 1991 0120 1200000A 		beq	.L257
1550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 1992              		.loc 1 1550 0
 1993 0124 003094E5 		ldr	r3, [r4]
 1994 0128 000053E3 		cmp	r3, #0
 1995 012c 0400001A 		bne	.L258
1552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 1996              		.loc 1 1552 0
 1997 0130 FEFFFFEB 		bl	vPortEnterCritical
 1998              	.LVL252:
1554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 1999              		.loc 1 1554 0
 2000 0134 080094E5 		ldr	r0, [r4, #8]
 2001 0138 FEFFFFEB 		bl	xTaskPriorityInherit
 2002              	.LVL253:
 2003 013c 0050A0E1 		mov	r5, r0
 2004              	.LVL254:
1556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 2005              		.loc 1 1556 0
 2006 0140 FEFFFFEB 		bl	vPortExitCritical
 2007              	.LVL255:
 2008              	.L258:
1565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvUnlockQueue( pxQueue );
 2009              		.loc 1 1565 0
 2010 0144 04109DE5 		ldr	r1, [sp, #4]
 2011 0148 240084E2 		add	r0, r4, #36
 2012 014c FEFFFFEB 		bl	vTaskPlaceOnEventList
 2013              	.LVL256:
1566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2014              		.loc 1 1566 0
 2015 0150 0400A0E1 		mov	r0, r4
 2016 0154 FEFFFFEB 		bl	prvUnlockQueue
 2017              	.LVL257:
1567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 2018              		.loc 1 1567 0
 2019 0158 FEFFFFEB 		bl	xTaskResumeAll
 2020              	.LVL258:
 2021 015c 000050E3 		cmp	r0, #0
 2022 0160 0000001A 		bne	.L259
1569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 2023              		.loc 1 1569 0
 2024              		.syntax divided
 2025              	@ 1569 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/queue.c" 1
 2026 0164 000000EF 		SWI 0
 2027              	@ 0 "" 2
 2028              		.arm
 2029              		.syntax unified
 2030              	.L259:
 2031 0168 0160A0E3 		mov	r6, #1
 2032 016c B6FFFFEA 		b	.L245
 2033              	.L257:
1580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				( void ) xTaskResumeAll();
 2034              		.loc 1 1580 0
 2035 0170 0400A0E1 		mov	r0, r4
 2036 0174 FEFFFFEB 		bl	prvUnlockQueue
 2037              	.LVL259:
1581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 2038              		.loc 1 1581 0
 2039 0178 FEFFFFEB 		bl	xTaskResumeAll
 2040              	.LVL260:
 2041 017c F9FFFFEA 		b	.L259
 2042              	.LVL261:
 2043              	.L256:
1587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) xTaskResumeAll();
 2044              		.loc 1 1587 0
 2045 0180 FEFFFFEB 		bl	prvUnlockQueue
 2046              	.LVL262:
1588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2047              		.loc 1 1588 0
 2048 0184 FEFFFFEB 		bl	xTaskResumeAll
 2049              	.LVL263:
1594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 2050              		.loc 1 1594 0
 2051 0188 0400A0E1 		mov	r0, r4
 2052 018c FEFFFFEB 		bl	prvIsQueueEmpty
 2053              	.LVL264:
 2054 0190 000050E3 		cmp	r0, #0
 2055 0194 F3FFFF0A 		beq	.L259
1601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 2056              		.loc 1 1601 0
 2057 0198 000055E3 		cmp	r5, #0
 2058 019c BFFFFF0A 		beq	.L241
1603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 2059              		.loc 1 1603 0
 2060 01a0 FEFFFFEB 		bl	vPortEnterCritical
 2061              	.LVL265:
 2062              	.LBB53:
 2063              	.LBB54:
 2064              	.LBB55:
2055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2065              		.loc 1 2055 0
 2066 01a4 241094E5 		ldr	r1, [r4, #36]
 2067              	.LBE55:
 2068              	.LBE54:
 2069              	.LBE53:
1621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 2070              		.loc 1 1621 0
 2071 01a8 0050A0E3 		mov	r5, #0
 2072              	.LBB58:
1613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 2073              		.loc 1 1613 0
 2074 01ac 080094E5 		ldr	r0, [r4, #8]
 2075              	.LBB57:
 2076              	.LBB56:
2055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2077              		.loc 1 2055 0
 2078 01b0 000051E3 		cmp	r1, #0
2057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 2079              		.loc 1 2057 0
 2080 01b4 30309415 		ldrne	r3, [r4, #48]
 2081 01b8 00109315 		ldrne	r1, [r3]
 2082 01bc 14106112 		rsbne	r1, r1, #20
 2083              	.LVL266:
 2084              	.LBE56:
 2085              	.LBE57:
1613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 2086              		.loc 1 1613 0
 2087 01c0 FEFFFFEB 		bl	vTaskPriorityDisinheritAfterTimeout
 2088              	.LVL267:
 2089              	.LBE58:
1615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 2090              		.loc 1 1615 0
 2091 01c4 FEFFFFEB 		bl	vPortExitCritical
 2092              	.LVL268:
 2093 01c8 B4FFFFEA 		b	.L241
 2094              	.L274:
 2095              		.align	2
 2096              	.L273:
 2097 01cc 28000000 		.word	Unity+40
 2098              		.cfi_endproc
 2099              	.LFE17:
 2101              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 2102              		.align	2
 2103              		.global	xQueueTakeMutexRecursive
 2104              		.syntax unified
 2105              		.arm
 2106              		.fpu neon
 2108              	xQueueTakeMutexRecursive:
 2109              	.LFB10:
 652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xReturn;
 2110              		.loc 1 652 0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 0
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 2114              	.LVL269:
 2115 0000 70402DE9 		push	{r4, r5, r6, lr}
 2116              		.cfi_def_cfa_offset 16
 2117              		.cfi_offset 4, -16
 2118              		.cfi_offset 5, -12
 2119              		.cfi_offset 6, -8
 2120              		.cfi_offset 14, -4
 656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2121              		.loc 1 656 0
 2122 0004 004050E2 		subs	r4, r0, #0
 2123 0008 0200001A 		bne	.L276
 656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2124              		.loc 1 656 0 is_stmt 0 discriminator 1
 2125 000c 0110A0E3 		mov	r1, #1
 2126              	.LVL270:
 2127 0010 48009FE5 		ldr	r0, .L283
 2128              	.LVL271:
 2129 0014 FEFFFFEB 		bl	longjmp
 2130              	.LVL272:
 2131              	.L276:
 663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2132              		.loc 1 663 0 is_stmt 1
 2133 0018 086094E5 		ldr	r6, [r4, #8]
 2134 001c 0150A0E1 		mov	r5, r1
 2135 0020 FEFFFFEB 		bl	xTaskGetCurrentTaskHandle
 2136              	.LVL273:
 2137 0024 000056E1 		cmp	r6, r0
 2138 0028 0400001A 		bne	.L277
 665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdPASS;
 2139              		.loc 1 665 0
 2140 002c 0C3094E5 		ldr	r3, [r4, #12]
 666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 2141              		.loc 1 666 0
 2142 0030 0100A0E3 		mov	r0, #1
 665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdPASS;
 2143              		.loc 1 665 0
 2144 0034 013083E2 		add	r3, r3, #1
 2145 0038 0C3084E5 		str	r3, [r4, #12]
 2146              	.LVL274:
 2147 003c 7080BDE8 		pop	{r4, r5, r6, pc}
 2148              	.LVL275:
 2149              	.L277:
 670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2150              		.loc 1 670 0
 2151 0040 0510A0E1 		mov	r1, r5
 2152 0044 0400A0E1 		mov	r0, r4
 2153 0048 FEFFFFEB 		bl	xQueueSemaphoreTake
 2154              	.LVL276:
 675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 2155              		.loc 1 675 0
 2156 004c 000050E3 		cmp	r0, #0
 677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 2157              		.loc 1 677 0
 2158 0050 0C309415 		ldrne	r3, [r4, #12]
 2159 0054 01308312 		addne	r3, r3, #1
 2160 0058 0C308415 		strne	r3, [r4, #12]
 686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2161              		.loc 1 686 0
 2162 005c 7080BDE8 		pop	{r4, r5, r6, pc}
 2163              	.L284:
 2164              		.align	2
 2165              	.L283:
 2166 0060 28000000 		.word	Unity+40
 2167              		.cfi_endproc
 2168              	.LFE10:
 2170              		.section	.text.xQueuePeek,"ax",%progbits
 2171              		.align	2
 2172              		.global	xQueuePeek
 2173              		.syntax unified
 2174              		.arm
 2175              		.fpu neon
 2177              	xQueuePeek:
 2178              	.LFB18:
1633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2179              		.loc 1 1633 0
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 16
 2182              		@ frame_needed = 0, uses_anonymous_args = 0
 2183              	.LVL277:
 2184 0000 FF412DE9 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 2185              		.cfi_def_cfa_offset 40
 2186              		.cfi_offset 4, -24
 2187              		.cfi_offset 5, -20
 2188              		.cfi_offset 6, -16
 2189              		.cfi_offset 7, -12
 2190              		.cfi_offset 8, -8
 2191              		.cfi_offset 14, -4
1640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2192              		.loc 1 1640 0
 2193 0004 004050E2 		subs	r4, r0, #0
1633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2194              		.loc 1 1633 0
 2195 0008 04208DE5 		str	r2, [sp, #4]
1640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2196              		.loc 1 1640 0
 2197 000c 0200001A 		bne	.L286
 2198              	.LVL278:
 2199              	.L288:
1640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2200              		.loc 1 1640 0 is_stmt 0 discriminator 1
 2201 0010 0110A0E3 		mov	r1, #1
 2202 0014 58019FE5 		ldr	r0, .L317
 2203 0018 FEFFFFEB 		bl	longjmp
 2204              	.LVL279:
 2205              	.L286:
1644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2206              		.loc 1 1644 0 is_stmt 1
 2207 001c 000051E3 		cmp	r1, #0
 2208 0020 0180A0E1 		mov	r8, r1
 2209 0024 0200001A 		bne	.L287
1644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2210              		.loc 1 1644 0 is_stmt 0 discriminator 2
 2211 0028 403094E5 		ldr	r3, [r4, #64]
 2212 002c 000053E3 		cmp	r3, #0
 2213 0030 F6FFFF1A 		bne	.L288
 2214              	.L287:
1649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 2215              		.loc 1 1649 0 is_stmt 1
 2216 0034 FEFFFFEB 		bl	xTaskGetSchedulerState
 2217              	.LVL280:
 2218 0038 000050E3 		cmp	r0, #0
 2219 003c 0060A013 		movne	r6, #0
 2220 0040 0200001A 		bne	.L289
 2221              	.L303:
1649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 2222              		.loc 1 1649 0 is_stmt 0 discriminator 2
 2223 0044 04609DE5 		ldr	r6, [sp, #4]
 2224 0048 000056E3 		cmp	r6, #0
 2225 004c EFFFFF1A 		bne	.L288
 2226              	.L289:
1731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2227              		.loc 1 1731 0 is_stmt 1
 2228 0050 0070A0E3 		mov	r7, #0
 2229 0054 260000EA 		b	.L304
 2230              	.LVL281:
 2231              	.L290:
 2232              	.LBB59:
1702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 2233              		.loc 1 1702 0
 2234 0058 04509DE5 		ldr	r5, [sp, #4]
 2235 005c 000055E3 		cmp	r5, #0
 2236 0060 0200001A 		bne	.L295
1706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2237              		.loc 1 1706 0
 2238 0064 FEFFFFEB 		bl	vPortExitCritical
 2239              	.LVL282:
 2240              	.L316:
 2241              	.LBE59:
1770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 2242              		.loc 1 1770 0
 2243 0068 0000A0E3 		mov	r0, #0
 2244 006c 330000EA 		b	.L285
 2245              	.LVL283:
 2246              	.L295:
 2247              	.LBB60:
1710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 2248              		.loc 1 1710 0
 2249 0070 000056E3 		cmp	r6, #0
 2250 0074 0100001A 		bne	.L296
1715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					xEntryTimeSet = pdTRUE;
 2251              		.loc 1 1715 0
 2252 0078 08008DE2 		add	r0, sp, #8
 2253 007c FEFFFFEB 		bl	vTaskInternalSetTimeOutState
 2254              	.LVL284:
 2255              	.L296:
 2256              	.LBE60:
1725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2257              		.loc 1 1725 0
 2258 0080 FEFFFFEB 		bl	vPortExitCritical
 2259              	.LVL285:
1730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvLockQueue( pxQueue );
 2260              		.loc 1 1730 0
 2261 0084 FEFFFFEB 		bl	vTaskSuspendAll
 2262              	.LVL286:
1731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2263              		.loc 1 1731 0
 2264 0088 FEFFFFEB 		bl	vPortEnterCritical
 2265              	.LVL287:
 2266 008c 4430D4E5 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2267 0090 FF0053E3 		cmp	r3, #255
 2268 0094 4470C405 		strbeq	r7, [r4, #68]
 2269 0098 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2270 009c FF0053E3 		cmp	r3, #255
 2271 00a0 4570C405 		strbeq	r7, [r4, #69]
 2272 00a4 FEFFFFEB 		bl	vPortExitCritical
 2273              	.LVL288:
1734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2274              		.loc 1 1734 0
 2275 00a8 04108DE2 		add	r1, sp, #4
 2276 00ac 08008DE2 		add	r0, sp, #8
 2277 00b0 FEFFFFEB 		bl	xTaskCheckForTimeOut
 2278              	.LVL289:
 2279 00b4 000050E3 		cmp	r0, #0
1738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 2280              		.loc 1 1738 0
 2281 00b8 0400A0E1 		mov	r0, r4
1734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2282              		.loc 1 1734 0
 2283 00bc 2500001A 		bne	.L299
 2284              	.LVL290:
1738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 2285              		.loc 1 1738 0
 2286 00c0 FEFFFFEB 		bl	prvIsQueueEmpty
 2287              	.LVL291:
 2288 00c4 000050E3 		cmp	r0, #0
 2289 00c8 1E00000A 		beq	.L300
1741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvUnlockQueue( pxQueue );
 2290              		.loc 1 1741 0
 2291 00cc 04109DE5 		ldr	r1, [sp, #4]
 2292 00d0 240084E2 		add	r0, r4, #36
 2293 00d4 FEFFFFEB 		bl	vTaskPlaceOnEventList
 2294              	.LVL292:
1742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2295              		.loc 1 1742 0
 2296 00d8 0400A0E1 		mov	r0, r4
 2297 00dc FEFFFFEB 		bl	prvUnlockQueue
 2298              	.LVL293:
1743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 2299              		.loc 1 1743 0
 2300 00e0 FEFFFFEB 		bl	xTaskResumeAll
 2301              	.LVL294:
 2302 00e4 000050E3 		cmp	r0, #0
 2303 00e8 0000001A 		bne	.L302
1745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
 2304              		.loc 1 1745 0
 2305              		.syntax divided
 2306              	@ 1745 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/queue.c" 1
 2307 00ec 000000EF 		SWI 0
 2308              	@ 0 "" 2
 2309              		.arm
 2310              		.syntax unified
 2311              	.L302:
 2312 00f0 0160A0E3 		mov	r6, #1
 2313              	.LVL295:
 2314              	.L304:
1659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2315              		.loc 1 1659 0
 2316 00f4 FEFFFFEB 		bl	vPortEnterCritical
 2317              	.LVL296:
 2318              	.LBB61:
1661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2319              		.loc 1 1661 0
 2320 00f8 383094E5 		ldr	r3, [r4, #56]
 2321              	.LVL297:
1665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 2322              		.loc 1 1665 0
 2323 00fc 000053E3 		cmp	r3, #0
 2324 0100 D4FFFF0A 		beq	.L290
1672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2325              		.loc 1 1672 0
 2326 0104 0810A0E1 		mov	r1, r8
 2327 0108 0400A0E1 		mov	r0, r4
1670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2328              		.loc 1 1670 0
 2329 010c 0C5094E5 		ldr	r5, [r4, #12]
 2330              	.LVL298:
1672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2331              		.loc 1 1672 0
 2332 0110 FEFFFFEB 		bl	prvCopyDataFromQueue
 2333              	.LVL299:
1680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 2334              		.loc 1 1680 0
 2335 0114 243094E5 		ldr	r3, [r4, #36]
1676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2336              		.loc 1 1676 0
 2337 0118 0C5084E5 		str	r5, [r4, #12]
1680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 2338              		.loc 1 1680 0
 2339 011c 000053E3 		cmp	r3, #0
 2340 0120 0400000A 		beq	.L292
1682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 2341              		.loc 1 1682 0
 2342 0124 240084E2 		add	r0, r4, #36
 2343 0128 FEFFFFEB 		bl	xTaskRemoveFromEventList
 2344              	.LVL300:
 2345 012c 000050E3 		cmp	r0, #0
 2346 0130 0000000A 		beq	.L292
1685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
 2347              		.loc 1 1685 0
 2348              		.syntax divided
 2349              	@ 1685 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/queue.c" 1
 2350 0134 000000EF 		SWI 0
 2351              	@ 0 "" 2
 2352              		.arm
 2353              		.syntax unified
 2354              	.L292:
1697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				return pdPASS;
 2355              		.loc 1 1697 0
 2356 0138 FEFFFFEB 		bl	vPortExitCritical
 2357              	.LVL301:
1698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 2358              		.loc 1 1698 0
 2359 013c 0100A0E3 		mov	r0, #1
 2360              	.LVL302:
 2361              	.L285:
 2362              	.LBE61:
1778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 2363              		.loc 1 1778 0
 2364 0140 10D08DE2 		add	sp, sp, #16
 2365              		.cfi_remember_state
 2366              		.cfi_def_cfa_offset 24
 2367              		@ sp needed
 2368 0144 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 2369              	.LVL303:
 2370              	.L300:
 2371              		.cfi_restore_state
1756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				( void ) xTaskResumeAll();
 2372              		.loc 1 1756 0
 2373 0148 0400A0E1 		mov	r0, r4
 2374 014c FEFFFFEB 		bl	prvUnlockQueue
 2375              	.LVL304:
1757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 2376              		.loc 1 1757 0
 2377 0150 FEFFFFEB 		bl	xTaskResumeAll
 2378              	.LVL305:
 2379 0154 E5FFFFEA 		b	.L302
 2380              	.LVL306:
 2381              	.L299:
1764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) xTaskResumeAll();
 2382              		.loc 1 1764 0
 2383 0158 FEFFFFEB 		bl	prvUnlockQueue
 2384              	.LVL307:
1765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2385              		.loc 1 1765 0
 2386 015c FEFFFFEB 		bl	xTaskResumeAll
 2387              	.LVL308:
1767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 2388              		.loc 1 1767 0
 2389 0160 0400A0E1 		mov	r0, r4
 2390 0164 FEFFFFEB 		bl	prvIsQueueEmpty
 2391              	.LVL309:
 2392 0168 000050E3 		cmp	r0, #0
 2393 016c DFFFFF0A 		beq	.L302
 2394 0170 BCFFFFEA 		b	.L316
 2395              	.L318:
 2396              		.align	2
 2397              	.L317:
 2398 0174 28000000 		.word	Unity+40
 2399              		.cfi_endproc
 2400              	.LFE18:
 2402              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2403              		.align	2
 2404              		.global	xQueueReceiveFromISR
 2405              		.syntax unified
 2406              		.arm
 2407              		.fpu neon
 2409              	xQueueReceiveFromISR:
 2410              	.LFB19:
1782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
 2411              		.loc 1 1782 0
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 0
 2414              		@ frame_needed = 0, uses_anonymous_args = 0
 2415              	.LVL310:
 2416 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2417              		.cfi_def_cfa_offset 32
 2418              		.cfi_offset 4, -32
 2419              		.cfi_offset 5, -28
 2420              		.cfi_offset 6, -24
 2421              		.cfi_offset 7, -20
 2422              		.cfi_offset 8, -16
 2423              		.cfi_offset 9, -12
 2424              		.cfi_offset 10, -8
 2425              		.cfi_offset 14, -4
1787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2426              		.loc 1 1787 0
 2427 0004 005050E2 		subs	r5, r0, #0
 2428 0008 0200001A 		bne	.L320
 2429              	.L322:
1787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2430              		.loc 1 1787 0 is_stmt 0 discriminator 1
 2431 000c 0110A0E3 		mov	r1, #1
 2432              	.LVL311:
 2433 0010 A4009FE5 		ldr	r0, .L336
 2434              	.LVL312:
 2435 0014 FEFFFFEB 		bl	longjmp
 2436              	.LVL313:
 2437              	.L320:
1788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2438              		.loc 1 1788 0 is_stmt 1
 2439 0018 000051E3 		cmp	r1, #0
 2440 001c 0190A0E1 		mov	r9, r1
 2441 0020 0280A0E1 		mov	r8, r2
 2442 0024 0200001A 		bne	.L321
1788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2443              		.loc 1 1788 0 is_stmt 0 discriminator 2
 2444 0028 403095E5 		ldr	r3, [r5, #64]
 2445 002c 000053E3 		cmp	r3, #0
 2446 0030 F5FFFF1A 		bne	.L322
 2447              	.L321:
1804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2448              		.loc 1 1804 0 is_stmt 1
 2449 0034 FEFFFFEB 		bl	vPortValidateInterruptPriority
 2450              	.LVL314:
1806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 2451              		.loc 1 1806 0
 2452 0038 FEFFFFEB 		bl	ulPortSetInterruptMask
 2453              	.LVL315:
 2454              	.LBB62:
1808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2455              		.loc 1 1808 0
 2456 003c 384095E5 		ldr	r4, [r5, #56]
 2457              	.LBE62:
1806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 2458              		.loc 1 1806 0
 2459 0040 0070A0E1 		mov	r7, r0
 2460              	.LVL316:
 2461              	.LBB65:
1811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2462              		.loc 1 1811 0
 2463 0044 000054E3 		cmp	r4, #0
 2464 0048 0C00000A 		beq	.L325
 2465              	.LBB63:
1813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2466              		.loc 1 1813 0
 2467 004c 4460D5E5 		ldrb	r6, [r5, #68]	@ zero_extendqisi2
1817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2468              		.loc 1 1817 0
 2469 0050 0910A0E1 		mov	r1, r9
 2470 0054 0500A0E1 		mov	r0, r5
 2471              	.LVL317:
1818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2472              		.loc 1 1818 0
 2473 0058 014044E2 		sub	r4, r4, #1
 2474              	.LVL318:
1817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2475              		.loc 1 1817 0
 2476 005c FEFFFFEB 		bl	prvCopyDataFromQueue
 2477              	.LVL319:
1818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2478              		.loc 1 1818 0
 2479 0060 384085E5 		str	r4, [r5, #56]
1813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2480              		.loc 1 1813 0
 2481 0064 7660AFE6 		sxtb	r6, r6
 2482              	.LVL320:
1824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
 2483              		.loc 1 1824 0
 2484 0068 010076E3 		cmn	r6, #1
 2485 006c 0D00001A 		bne	.L323
1826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 2486              		.loc 1 1826 0
 2487 0070 103095E5 		ldr	r3, [r5, #16]
1834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 2488              		.loc 1 1834 0
 2489 0074 0140A0E3 		mov	r4, #1
 2490              	.LVL321:
1826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
 2491              		.loc 1 1826 0
 2492 0078 000053E3 		cmp	r3, #0
 2493 007c 0300001A 		bne	.L324
 2494              	.LVL322:
 2495              	.L325:
 2496              	.LBE63:
 2497              	.LBE65:
1866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2498              		.loc 1 1866 0
 2499 0080 0700A0E1 		mov	r0, r7
 2500 0084 FEFFFFEB 		bl	vPortClearInterruptMask
 2501              	.LVL323:
1869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 2502              		.loc 1 1869 0
 2503 0088 0400A0E1 		mov	r0, r4
 2504 008c F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2505              	.LVL324:
 2506              	.L324:
 2507              	.LBB66:
 2508              	.LBB64:
1828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
 2509              		.loc 1 1828 0
 2510 0090 100085E2 		add	r0, r5, #16
 2511 0094 FEFFFFEB 		bl	xTaskRemoveFromEventList
 2512              	.LVL325:
1832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						{
 2513              		.loc 1 1832 0
 2514 0098 000050E3 		cmp	r0, #0
 2515 009c 00005813 		cmpne	r8, #0
1834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						}
 2516              		.loc 1 1834 0
 2517 00a0 00408815 		strne	r4, [r8]
 2518 00a4 F5FFFFEA 		b	.L325
 2519              	.LVL326:
 2520              	.L323:
1855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 2521              		.loc 1 1855 0
 2522 00a8 016086E2 		add	r6, r6, #1
 2523              	.LVL327:
1858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 2524              		.loc 1 1858 0
 2525 00ac 0140A0E3 		mov	r4, #1
 2526              	.LVL328:
1855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
 2527              		.loc 1 1855 0
 2528 00b0 7660AFE6 		sxtb	r6, r6
 2529              	.LVL329:
 2530 00b4 4460C5E5 		strb	r6, [r5, #68]
 2531              	.LVL330:
 2532 00b8 F0FFFFEA 		b	.L325
 2533              	.L337:
 2534              		.align	2
 2535              	.L336:
 2536 00bc 28000000 		.word	Unity+40
 2537              	.LBE64:
 2538              	.LBE66:
 2539              		.cfi_endproc
 2540              	.LFE19:
 2542              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2543              		.align	2
 2544              		.global	xQueuePeekFromISR
 2545              		.syntax unified
 2546              		.arm
 2547              		.fpu neon
 2549              	xQueuePeekFromISR:
 2550              	.LFB20:
1873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
 2551              		.loc 1 1873 0
 2552              		.cfi_startproc
 2553              		@ args = 0, pretend = 0, frame = 0
 2554              		@ frame_needed = 0, uses_anonymous_args = 0
 2555              	.LVL331:
 2556 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 2557              		.cfi_def_cfa_offset 24
 2558              		.cfi_offset 4, -24
 2559              		.cfi_offset 5, -20
 2560              		.cfi_offset 6, -16
 2561              		.cfi_offset 7, -12
 2562              		.cfi_offset 8, -8
 2563              		.cfi_offset 14, -4
1879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2564              		.loc 1 1879 0
 2565 0004 005050E2 		subs	r5, r0, #0
 2566 0008 0200001A 		bne	.L339
 2567              	.L341:
1879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2568              		.loc 1 1879 0 is_stmt 0 discriminator 1
 2569 000c 0110A0E3 		mov	r1, #1
 2570              	.LVL332:
 2571 0010 58009FE5 		ldr	r0, .L353
 2572              	.LVL333:
 2573 0014 FEFFFFEB 		bl	longjmp
 2574              	.LVL334:
 2575              	.L339:
1880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2576              		.loc 1 1880 0 is_stmt 1
 2577 0018 000051E3 		cmp	r1, #0
 2578 001c 0160A0E1 		mov	r6, r1
 2579 0020 403095E5 		ldr	r3, [r5, #64]
 2580 0024 F8FFFF0A 		beq	.L341
1881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2581              		.loc 1 1881 0
 2582 0028 000053E3 		cmp	r3, #0
 2583 002c F6FFFF0A 		beq	.L341
1897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2584              		.loc 1 1897 0
 2585 0030 FEFFFFEB 		bl	vPortValidateInterruptPriority
 2586              	.LVL335:
1899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 2587              		.loc 1 1899 0
 2588 0034 FEFFFFEB 		bl	ulPortSetInterruptMask
 2589              	.LVL336:
1902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2590              		.loc 1 1902 0
 2591 0038 384095E5 		ldr	r4, [r5, #56]
1899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 2592              		.loc 1 1899 0
 2593 003c 0070A0E1 		mov	r7, r0
 2594              	.LVL337:
1902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2595              		.loc 1 1902 0
 2596 0040 000054E3 		cmp	r4, #0
 2597 0044 0500000A 		beq	.L342
1908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2598              		.loc 1 1908 0
 2599 0048 0C4095E5 		ldr	r4, [r5, #12]
 2600              	.LVL338:
1909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2601              		.loc 1 1909 0
 2602 004c 0610A0E1 		mov	r1, r6
 2603 0050 0500A0E1 		mov	r0, r5
 2604              	.LVL339:
 2605 0054 FEFFFFEB 		bl	prvCopyDataFromQueue
 2606              	.LVL340:
1910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2607              		.loc 1 1910 0
 2608 0058 0C4085E5 		str	r4, [r5, #12]
 2609              	.LVL341:
1912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 2610              		.loc 1 1912 0
 2611 005c 0140A0E3 		mov	r4, #1
 2612              	.LVL342:
 2613              	.L342:
1920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2614              		.loc 1 1920 0
 2615 0060 0700A0E1 		mov	r0, r7
 2616 0064 FEFFFFEB 		bl	vPortClearInterruptMask
 2617              	.LVL343:
1923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 2618              		.loc 1 1923 0
 2619 0068 0400A0E1 		mov	r0, r4
 2620 006c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 2621              	.L354:
 2622              		.align	2
 2623              	.L353:
 2624 0070 28000000 		.word	Unity+40
 2625              		.cfi_endproc
 2626              	.LFE20:
 2628              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2629              		.align	2
 2630              		.global	uxQueueMessagesWaiting
 2631              		.syntax unified
 2632              		.arm
 2633              		.fpu neon
 2635              	uxQueueMessagesWaiting:
 2636              	.LFB21:
1927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxReturn;
 2637              		.loc 1 1927 0
 2638              		.cfi_startproc
 2639              		@ args = 0, pretend = 0, frame = 0
 2640              		@ frame_needed = 0, uses_anonymous_args = 0
 2641              	.LVL344:
 2642 0000 10402DE9 		push	{r4, lr}
 2643              		.cfi_def_cfa_offset 8
 2644              		.cfi_offset 4, -8
 2645              		.cfi_offset 14, -4
1930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2646              		.loc 1 1930 0
 2647 0004 004050E2 		subs	r4, r0, #0
 2648 0008 0200001A 		bne	.L356
1930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2649              		.loc 1 1930 0 is_stmt 0 discriminator 1
 2650 000c 0110A0E3 		mov	r1, #1
 2651 0010 14009FE5 		ldr	r0, .L358
 2652              	.LVL345:
 2653 0014 FEFFFFEB 		bl	longjmp
 2654              	.LVL346:
 2655              	.L356:
1932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 2656              		.loc 1 1932 0 is_stmt 1
 2657 0018 FEFFFFEB 		bl	vPortEnterCritical
 2658              	.LVL347:
1934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 2659              		.loc 1 1934 0
 2660 001c 384094E5 		ldr	r4, [r4, #56]
 2661              	.LVL348:
1936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2662              		.loc 1 1936 0
 2663 0020 FEFFFFEB 		bl	vPortExitCritical
 2664              	.LVL349:
1939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 2665              		.loc 1 1939 0
 2666 0024 0400A0E1 		mov	r0, r4
 2667 0028 1080BDE8 		pop	{r4, pc}
 2668              	.L359:
 2669              		.align	2
 2670              	.L358:
 2671 002c 28000000 		.word	Unity+40
 2672              		.cfi_endproc
 2673              	.LFE21:
 2675              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2676              		.align	2
 2677              		.global	uxQueueSpacesAvailable
 2678              		.syntax unified
 2679              		.arm
 2680              		.fpu neon
 2682              	uxQueueSpacesAvailable:
 2683              	.LFB22:
1943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxReturn;
 2684              		.loc 1 1943 0
 2685              		.cfi_startproc
 2686              		@ args = 0, pretend = 0, frame = 0
 2687              		@ frame_needed = 0, uses_anonymous_args = 0
 2688              	.LVL350:
 2689 0000 70402DE9 		push	{r4, r5, r6, lr}
 2690              		.cfi_def_cfa_offset 16
 2691              		.cfi_offset 4, -16
 2692              		.cfi_offset 5, -12
 2693              		.cfi_offset 6, -8
 2694              		.cfi_offset 14, -4
1947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2695              		.loc 1 1947 0
 2696 0004 005050E2 		subs	r5, r0, #0
 2697 0008 0200001A 		bne	.L361
1947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2698              		.loc 1 1947 0 is_stmt 0 discriminator 1
 2699 000c 0110A0E3 		mov	r1, #1
 2700 0010 1C009FE5 		ldr	r0, .L363
 2701              	.LVL351:
 2702 0014 FEFFFFEB 		bl	longjmp
 2703              	.LVL352:
 2704              	.L361:
1949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 2705              		.loc 1 1949 0 is_stmt 1
 2706 0018 FEFFFFEB 		bl	vPortEnterCritical
 2707              	.LVL353:
1951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 2708              		.loc 1 1951 0
 2709 001c 380095E5 		ldr	r0, [r5, #56]
 2710 0020 3C4095E5 		ldr	r4, [r5, #60]
 2711 0024 004044E0 		sub	r4, r4, r0
 2712              	.LVL354:
1953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2713              		.loc 1 1953 0
 2714 0028 FEFFFFEB 		bl	vPortExitCritical
 2715              	.LVL355:
1956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 2716              		.loc 1 1956 0
 2717 002c 0400A0E1 		mov	r0, r4
 2718 0030 7080BDE8 		pop	{r4, r5, r6, pc}
 2719              	.L364:
 2720              		.align	2
 2721              	.L363:
 2722 0034 28000000 		.word	Unity+40
 2723              		.cfi_endproc
 2724              	.LFE22:
 2726              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2727              		.align	2
 2728              		.global	uxQueueMessagesWaitingFromISR
 2729              		.syntax unified
 2730              		.arm
 2731              		.fpu neon
 2733              	uxQueueMessagesWaitingFromISR:
 2734              	.LFB23:
1960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxReturn;
 2735              		.loc 1 1960 0
 2736              		.cfi_startproc
 2737              		@ args = 0, pretend = 0, frame = 0
 2738              		@ frame_needed = 0, uses_anonymous_args = 0
 2739              	.LVL356:
1964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 2740              		.loc 1 1964 0
 2741 0000 000050E3 		cmp	r0, #0
 2742 0004 0300001A 		bne	.L366
1960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** UBaseType_t uxReturn;
 2743              		.loc 1 1960 0 discriminator 1
 2744 0008 10402DE9 		push	{r4, lr}
 2745              		.cfi_def_cfa_offset 8
 2746              		.cfi_offset 4, -8
 2747              		.cfi_offset 14, -4
1964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 2748              		.loc 1 1964 0 discriminator 1
 2749 000c 0110A0E3 		mov	r1, #1
 2750 0010 08009FE5 		ldr	r0, .L370
 2751              	.LVL357:
 2752 0014 FEFFFFEB 		bl	longjmp
 2753              	.LVL358:
 2754              	.L366:
 2755              		.cfi_def_cfa_offset 0
 2756              		.cfi_restore 4
 2757              		.cfi_restore 14
1965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2758              		.loc 1 1965 0
 2759 0018 380090E5 		ldr	r0, [r0, #56]
 2760              	.LVL359:
1968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 2761              		.loc 1 1968 0
 2762 001c 1EFF2FE1 		bx	lr
 2763              	.L371:
 2764              		.align	2
 2765              	.L370:
 2766 0020 28000000 		.word	Unity+40
 2767              		.cfi_endproc
 2768              	.LFE23:
 2770              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 2771              		.align	2
 2772              		.global	uxQueueGetQueueNumber
 2773              		.syntax unified
 2774              		.arm
 2775              		.fpu neon
 2777              	uxQueueGetQueueNumber:
 2778              	.LFB25:
2016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 2779              		.loc 1 2016 0
 2780              		.cfi_startproc
 2781              		@ args = 0, pretend = 0, frame = 0
 2782              		@ frame_needed = 0, uses_anonymous_args = 0
 2783              		@ link register save eliminated.
 2784              	.LVL360:
2018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2785              		.loc 1 2018 0
 2786 0000 480090E5 		ldr	r0, [r0, #72]
 2787              	.LVL361:
 2788 0004 1EFF2FE1 		bx	lr
 2789              		.cfi_endproc
 2790              	.LFE25:
 2792              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 2793              		.align	2
 2794              		.global	vQueueSetQueueNumber
 2795              		.syntax unified
 2796              		.arm
 2797              		.fpu neon
 2799              	vQueueSetQueueNumber:
 2800              	.LFB26:
2026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 2801              		.loc 1 2026 0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
 2805              		@ link register save eliminated.
 2806              	.LVL362:
2027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 2807              		.loc 1 2027 0
 2808 0000 481080E5 		str	r1, [r0, #72]
 2809 0004 1EFF2FE1 		bx	lr
 2810              		.cfi_endproc
 2811              	.LFE26:
 2813              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 2814              		.align	2
 2815              		.global	ucQueueGetQueueType
 2816              		.syntax unified
 2817              		.arm
 2818              		.fpu neon
 2820              	ucQueueGetQueueType:
 2821              	.LFB27:
2036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 2822              		.loc 1 2036 0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 0
 2825              		@ frame_needed = 0, uses_anonymous_args = 0
 2826              		@ link register save eliminated.
 2827              	.LVL363:
2038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 2828              		.loc 1 2038 0
 2829 0000 4C00D0E5 		ldrb	r0, [r0, #76]	@ zero_extendqisi2
 2830              	.LVL364:
 2831 0004 1EFF2FE1 		bx	lr
 2832              		.cfi_endproc
 2833              	.LFE27:
 2835              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2836              		.align	2
 2837              		.global	xQueueIsQueueEmptyFromISR
 2838              		.syntax unified
 2839              		.arm
 2840              		.fpu neon
 2842              	xQueueIsQueueEmptyFromISR:
 2843              	.LFB33:
2309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
 2844              		.loc 1 2309 0
 2845              		.cfi_startproc
 2846              		@ args = 0, pretend = 0, frame = 0
 2847              		@ frame_needed = 0, uses_anonymous_args = 0
 2848              	.LVL365:
2313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2849              		.loc 1 2313 0
 2850 0000 000050E3 		cmp	r0, #0
 2851 0004 0300001A 		bne	.L376
2309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
 2852              		.loc 1 2309 0 discriminator 1
 2853 0008 10402DE9 		push	{r4, lr}
 2854              		.cfi_def_cfa_offset 8
 2855              		.cfi_offset 4, -8
 2856              		.cfi_offset 14, -4
2313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2857              		.loc 1 2313 0 discriminator 1
 2858 000c 0110A0E3 		mov	r1, #1
 2859 0010 10009FE5 		ldr	r0, .L380
 2860              	.LVL366:
 2861 0014 FEFFFFEB 		bl	longjmp
 2862              	.LVL367:
 2863              	.L376:
 2864              		.cfi_def_cfa_offset 0
 2865              		.cfi_restore 4
 2866              		.cfi_restore 14
2314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 2867              		.loc 1 2314 0
 2868 0018 380090E5 		ldr	r0, [r0, #56]
 2869              	.LVL368:
2324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 2870              		.loc 1 2324 0
 2871 001c 100F6FE1 		clz	r0, r0
 2872              	.LVL369:
 2873 0020 A002A0E1 		lsr	r0, r0, #5
 2874 0024 1EFF2FE1 		bx	lr
 2875              	.L381:
 2876              		.align	2
 2877              	.L380:
 2878 0028 28000000 		.word	Unity+40
 2879              		.cfi_endproc
 2880              	.LFE33:
 2882              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2883              		.align	2
 2884              		.global	xQueueIsQueueFullFromISR
 2885              		.syntax unified
 2886              		.arm
 2887              		.fpu neon
 2889              	xQueueIsQueueFullFromISR:
 2890              	.LFB35:
2343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return xReturn;
2345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** }
2346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** {
 2891              		.loc 1 2349 0
 2892              		.cfi_startproc
 2893              		@ args = 0, pretend = 0, frame = 0
 2894              		@ frame_needed = 0, uses_anonymous_args = 0
 2895              	.LVL370:
2350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
2351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
2352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	configASSERT( pxQueue );
 2896              		.loc 1 2353 0
 2897 0000 000050E3 		cmp	r0, #0
 2898 0004 0300001A 		bne	.L383
2349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** BaseType_t xReturn;
 2899              		.loc 1 2349 0 discriminator 1
 2900 0008 10402DE9 		push	{r4, lr}
 2901              		.cfi_def_cfa_offset 8
 2902              		.cfi_offset 4, -8
 2903              		.cfi_offset 14, -4
 2904              		.loc 1 2353 0 discriminator 1
 2905 000c 0110A0E3 		mov	r1, #1
 2906 0010 18009FE5 		ldr	r0, .L387
 2907              	.LVL371:
 2908 0014 FEFFFFEB 		bl	longjmp
 2909              	.LVL372:
 2910              	.L383:
 2911              		.cfi_def_cfa_offset 0
 2912              		.cfi_restore 4
 2913              		.cfi_restore 14
2354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2914              		.loc 1 2354 0
 2915 0018 382090E5 		ldr	r2, [r0, #56]
 2916              	.LVL373:
 2917 001c 3C0090E5 		ldr	r0, [r0, #60]
 2918              	.LVL374:
2355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		xReturn = pdTRUE;
2357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	else
2359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		xReturn = pdFALSE;
2361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	return xReturn;
2364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2919              		.loc 1 2364 0
 2920 0020 020040E0 		sub	r0, r0, r2
 2921              	.LVL375:
 2922 0024 100F6FE1 		clz	r0, r0
 2923 0028 A002A0E1 		lsr	r0, r0, #5
 2924 002c 1EFF2FE1 		bx	lr
 2925              	.L388:
 2926              		.align	2
 2927              	.L387:
 2928 0030 28000000 		.word	Unity+40
 2929              		.cfi_endproc
 2930              	.LFE35:
 2932              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2933              		.align	2
 2934              		.global	vQueueAddToRegistry
 2935              		.syntax unified
 2936              		.arm
 2937              		.fpu neon
 2939              	vQueueAddToRegistry:
 2940              	.LFB36:
2365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xReturn;
2372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t * const pxQueue = xQueue;
2373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		is required to prevent an interrupt removing something from the queue
2376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		portDISABLE_INTERRUPTS();
2378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* The queue is full - do we want to block or just leave without
2382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				posting? */
2383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					return indicating that we need to block. */
2387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					portENABLE_INTERRUPTS();
2389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					return errQUEUE_BLOCKED;
2390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
2392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					portENABLE_INTERRUPTS();
2394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					return errQUEUE_FULL;
2395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		portENABLE_INTERRUPTS();
2399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		portDISABLE_INTERRUPTS();
2401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				xReturn = pdPASS;
2407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Were any co-routines waiting for data to become available? */
2409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* In this instance the co-routine could be placed directly
2412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					into the ready list as we are within a critical section.
2413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					Instead the same pending ready list mechanism is used as if
2414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					the event were caused from within an interrupt. */
2415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						/* The co-routine waiting has a higher priority so record
2418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						that a yield might be appropriate. */
2419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						xReturn = errQUEUE_YIELD;
2420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
2422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
2424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
2427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
2429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				xReturn = errQUEUE_FULL;
2434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		portENABLE_INTERRUPTS();
2437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return xReturn;
2439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_CO_ROUTINES */
2442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xReturn;
2449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t * const pxQueue = xQueue;
2450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		is required to prevent an interrupt adding something to the queue
2453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		portDISABLE_INTERRUPTS();
2455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* There are no messages in the queue, do we want to block or just
2459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				leave with nothing? */
2460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					indicating that we need to block. */
2464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					portENABLE_INTERRUPTS();
2466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					return errQUEUE_BLOCKED;
2467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
2469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					portENABLE_INTERRUPTS();
2471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					return errQUEUE_FULL;
2472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		portENABLE_INTERRUPTS();
2480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		portDISABLE_INTERRUPTS();
2482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Data is available from the queue. */
2486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
2492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
2494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				--( pxQueue->uxMessagesWaiting );
2496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQ
2497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				xReturn = pdPASS;
2499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Were any co-routines waiting for space to become available? */
2501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					/* In this instance the co-routine could be placed directly
2504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					into the ready list as we are within a critical section.
2505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					Instead the same pending ready list mechanism is used as if
2506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					the event were caused from within an interrupt. */
2507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						xReturn = errQUEUE_YIELD;
2510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
2512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
2514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
2517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
2519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				xReturn = pdFAIL;
2524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		portENABLE_INTERRUPTS();
2527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return xReturn;
2529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_CO_ROUTINES */
2532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t * const pxQueue = xQueue;
2539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		exit without doing anything. */
2542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			co-routine has not already been woken. */
2548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						return pdTRUE;
2555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
2557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
2559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
2562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
2564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
2572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			mtCOVERAGE_TEST_MARKER();
2574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return xCoRoutinePreviouslyWoken;
2577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_CO_ROUTINES */
2580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
2586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	BaseType_t xReturn;
2587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t * const pxQueue = xQueue;
2588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		not then just leave without doing anything. */
2591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* Copy the data from the queue. */
2594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			--( pxQueue->uxMessagesWaiting );
2604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQu
2605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					else
2615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					{
2616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 						mtCOVERAGE_TEST_MARKER();
2617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					}
2618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				else
2620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				{
2621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 					mtCOVERAGE_TEST_MARKER();
2622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				}
2623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdPASS;
2630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
2632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			xReturn = pdFAIL;
2634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return xReturn;
2637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configUSE_CO_ROUTINES */
2640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 2941              		.loc 1 2645 0
 2942              		.cfi_startproc
 2943              		@ args = 0, pretend = 0, frame = 0
 2944              		@ frame_needed = 0, uses_anonymous_args = 0
 2945              	.LVL376:
2646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	UBaseType_t ux;
2647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		a free slot. */
2650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2946              		.loc 1 2652 0
 2947 0000 30209FE5 		ldr	r2, .L395
2650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2948              		.loc 1 2650 0
 2949 0004 0030A0E3 		mov	r3, #0
2645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	UBaseType_t ux;
 2950              		.loc 1 2645 0
 2951 0008 04E02DE5 		str	lr, [sp, #-4]!
 2952              		.cfi_def_cfa_offset 4
 2953              		.cfi_offset 14, -4
 2954              	.LVL377:
 2955              	.L392:
 2956              		.loc 1 2652 0
 2957 000c 83E192E7 		ldr	lr, [r2, r3, lsl #3]
 2958 0010 83C182E0 		add	ip, r2, r3, lsl #3
 2959 0014 00005EE3 		cmp	lr, #0
 2960 0018 0200001A 		bne	.L390
2653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Store the information on this queue. */
2655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2961              		.loc 1 2655 0
 2962 001c 831182E7 		str	r1, [r2, r3, lsl #3]
2656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2963              		.loc 1 2656 0
 2964 0020 04008CE5 		str	r0, [ip, #4]
2657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				break;
 2965              		.loc 1 2659 0
 2966 0024 04F09DE4 		ldr	pc, [sp], #4
 2967              	.L390:
2650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2968              		.loc 1 2650 0 discriminator 2
 2969 0028 013083E2 		add	r3, r3, #1
 2970              	.LVL378:
 2971 002c 080053E3 		cmp	r3, #8
 2972 0030 F5FFFF1A 		bne	.L392
 2973 0034 04F09DE4 		ldr	pc, [sp], #4
 2974              	.L396:
 2975              		.align	2
 2976              	.L395:
 2977 0038 00000000 		.word	xQueueRegistry
 2978              		.cfi_endproc
 2979              	.LFE36:
 2981              		.section	.text.pcQueueGetName,"ax",%progbits
 2982              		.align	2
 2983              		.global	pcQueueGetName
 2984              		.syntax unified
 2985              		.arm
 2986              		.fpu neon
 2988              	pcQueueGetName:
 2989              	.LFB37:
2660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
2667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 2990              		.loc 1 2674 0
 2991              		.cfi_startproc
 2992              		@ args = 0, pretend = 0, frame = 0
 2993              		@ frame_needed = 0, uses_anonymous_args = 0
 2994              		@ link register save eliminated.
 2995              	.LVL379:
2675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	UBaseType_t ux;
2676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Note there is nothing here to protect against another task adding or
2679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		removing entries from the registry while it is being searched. */
2680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2996              		.loc 1 2682 0
 2997 0000 2C209FE5 		ldr	r2, .L402
2680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 2998              		.loc 1 2680 0
 2999 0004 0030A0E3 		mov	r3, #0
 3000              	.LVL380:
 3001              	.L400:
 3002              		.loc 1 2682 0
 3003 0008 831182E0 		add	r1, r2, r3, lsl #3
 3004 000c 041091E5 		ldr	r1, [r1, #4]
 3005 0010 000051E1 		cmp	r1, r0
 3006 0014 0100001A 		bne	.L398
2683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3007              		.loc 1 2684 0
 3008 0018 830192E7 		ldr	r0, [r2, r3, lsl #3]
 3009              	.LVL381:
2685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				break;
 3010              		.loc 1 2685 0
 3011 001c 1EFF2FE1 		bx	lr
 3012              	.LVL382:
 3013              	.L398:
2680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 3014              		.loc 1 2680 0 discriminator 2
 3015 0020 013083E2 		add	r3, r3, #1
 3016              	.LVL383:
 3017 0024 080053E3 		cmp	r3, #8
 3018 0028 F6FFFF1A 		bne	.L400
2676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
 3019              		.loc 1 2676 0
 3020 002c 0000A0E3 		mov	r0, #0
 3021              	.LVL384:
2686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		return pcReturn;
2694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 3022              		.loc 1 2694 0
 3023 0030 1EFF2FE1 		bx	lr
 3024              	.L403:
 3025              		.align	2
 3026              	.L402:
 3027 0034 00000000 		.word	xQueueRegistry
 3028              		.cfi_endproc
 3029              	.LFE37:
 3031              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3032              		.align	2
 3033              		.global	vQueueUnregisterQueue
 3034              		.syntax unified
 3035              		.arm
 3036              		.fpu neon
 3038              	vQueueUnregisterQueue:
 3039              	.LFB38:
2695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 3040              		.loc 1 2702 0
 3041              		.cfi_startproc
 3042              		@ args = 0, pretend = 0, frame = 0
 3043              		@ frame_needed = 0, uses_anonymous_args = 0
 3044              		@ link register save eliminated.
 3045              	.LVL385:
2703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	UBaseType_t ux;
2704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		registry. */
2707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3046              		.loc 1 2709 0
 3047 0000 30209FE5 		ldr	r2, .L409
2707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 3048              		.loc 1 2707 0
 3049 0004 0030A0E3 		mov	r3, #0
 3050              	.LVL386:
 3051              	.L407:
 3052              		.loc 1 2709 0
 3053 0008 831182E0 		add	r1, r2, r3, lsl #3
 3054 000c 04C091E5 		ldr	ip, [r1, #4]
 3055 0010 00005CE1 		cmp	ip, r0
 3056 0014 0300001A 		bne	.L405
2710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3057              		.loc 1 2712 0
 3058 0018 0000A0E3 		mov	r0, #0
 3059              	.LVL387:
 3060 001c 830182E7 		str	r0, [r2, r3, lsl #3]
2713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				appear in the registry twice if it is added, removed, then
2716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				added again. */
2717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3061              		.loc 1 2717 0
 3062 0020 040081E5 		str	r0, [r1, #4]
2718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				break;
 3063              		.loc 1 2718 0
 3064 0024 1EFF2FE1 		bx	lr
 3065              	.LVL388:
 3066              	.L405:
2707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 3067              		.loc 1 2707 0 discriminator 2
 3068 0028 013083E2 		add	r3, r3, #1
 3069              	.LVL389:
 3070 002c 080053E3 		cmp	r3, #8
 3071 0030 F4FFFF1A 		bne	.L407
 3072 0034 1EFF2FE1 		bx	lr
 3073              	.L410:
 3074              		.align	2
 3075              	.L409:
 3076 0038 00000000 		.word	xQueueRegistry
 3077              		.cfi_endproc
 3078              	.LFE38:
 3080              		.section	.text.vQueueDelete,"ax",%progbits
 3081              		.align	2
 3082              		.global	vQueueDelete
 3083              		.syntax unified
 3084              		.arm
 3085              		.fpu neon
 3087              	vQueueDelete:
 3088              	.LFB24:
1972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** Queue_t * const pxQueue = xQueue;
 3089              		.loc 1 1972 0
 3090              		.cfi_startproc
 3091              		@ args = 0, pretend = 0, frame = 0
 3092              		@ frame_needed = 0, uses_anonymous_args = 0
 3093              	.LVL390:
 3094 0000 10402DE9 		push	{r4, lr}
 3095              		.cfi_def_cfa_offset 8
 3096              		.cfi_offset 4, -8
 3097              		.cfi_offset 14, -4
1975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3098              		.loc 1 1975 0
 3099 0004 004050E2 		subs	r4, r0, #0
 3100 0008 0200001A 		bne	.L412
1975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3101              		.loc 1 1975 0 is_stmt 0 discriminator 1
 3102 000c 0110A0E3 		mov	r1, #1
 3103 0010 1C009FE5 		ldr	r0, .L415
 3104              	.LVL391:
 3105 0014 FEFFFFEB 		bl	longjmp
 3106              	.LVL392:
 3107              	.L412:
1980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 3108              		.loc 1 1980 0 is_stmt 1
 3109 0018 FEFFFFEB 		bl	vQueueUnregisterQueue
 3110              	.LVL393:
1994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
 3111              		.loc 1 1994 0
 3112 001c 4630D4E5 		ldrb	r3, [r4, #70]	@ zero_extendqisi2
 3113 0020 000053E3 		cmp	r3, #0
 3114 0024 1080BD18 		popne	{r4, pc}
1996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 3115              		.loc 1 1996 0
 3116 0028 0400A0E1 		mov	r0, r4
2010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
 3117              		.loc 1 2010 0
 3118 002c 1040BDE8 		pop	{r4, lr}
 3119              		.cfi_restore 14
 3120              		.cfi_restore 4
 3121              		.cfi_def_cfa_offset 0
 3122              	.LVL394:
1996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
 3123              		.loc 1 1996 0
 3124 0030 FEFFFFEA 		b	vPortFree
 3125              	.LVL395:
 3126              	.L416:
 3127              		.align	2
 3128              	.L415:
 3129 0034 28000000 		.word	Unity+40
 3130              		.cfi_endproc
 3131              	.LFE24:
 3133              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 3134              		.align	2
 3135              		.global	vQueueWaitForMessageRestricted
 3136              		.syntax unified
 3137              		.arm
 3138              		.fpu neon
 3140              	vQueueWaitForMessageRestricted:
 3141              	.LFB39:
2719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			else
2721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			{
2722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 				mtCOVERAGE_TEST_MARKER();
2723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			}
2724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** /*-----------------------------------------------------------*/
2730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** #if ( configUSE_TIMERS == 1 )
2732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	{
 3142              		.loc 1 2734 0
 3143              		.cfi_startproc
 3144              		@ args = 0, pretend = 0, frame = 0
 3145              		@ frame_needed = 0, uses_anonymous_args = 0
 3146              	.LVL396:
 3147 0000 70402DE9 		push	{r4, r5, r6, lr}
 3148              		.cfi_def_cfa_offset 16
 3149              		.cfi_offset 4, -16
 3150              		.cfi_offset 5, -12
 3151              		.cfi_offset 6, -8
 3152              		.cfi_offset 14, -4
 3153              		.loc 1 2734 0
 3154 0004 0040A0E1 		mov	r4, r0
 3155              	.LVL397:
 3156 0008 0150A0E1 		mov	r5, r1
 3157 000c 0260A0E1 		mov	r6, r2
2735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	Queue_t * const pxQueue = xQueue;
2736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* This function should not be called by application code hence the
2738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		designed for use by kernel code, and has special calling requirements.
2740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		It can result in vListInsert() being called on a list that can only
2741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		so it should be called with the scheduler locked and not from a critical
2743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		section. */
2744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 
2745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		will not actually cause the task to block, just place it on a blocked
2747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvLockQueue( pxQueue );
 3158              		.loc 1 2751 0
 3159 0010 FEFFFFEB 		bl	vPortEnterCritical
 3160              	.LVL398:
 3161 0014 4430D4E5 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3162 0018 FF0053E3 		cmp	r3, #255
 3163 001c 0030A003 		moveq	r3, #0
 3164 0020 4430C405 		strbeq	r3, [r4, #68]
 3165 0024 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3166 0028 FF0053E3 		cmp	r3, #255
 3167 002c 0030A003 		moveq	r3, #0
 3168 0030 4530C405 		strbeq	r3, [r4, #69]
 3169 0034 FEFFFFEB 		bl	vPortExitCritical
 3170              	.LVL399:
2752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3171              		.loc 1 2752 0
 3172 0038 383094E5 		ldr	r3, [r4, #56]
 3173 003c 000053E3 		cmp	r3, #0
 3174 0040 0300001A 		bne	.L420
2753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
 3175              		.loc 1 2755 0
 3176 0044 0620A0E1 		mov	r2, r6
 3177 0048 0510A0E1 		mov	r1, r5
 3178 004c 240084E2 		add	r0, r4, #36
 3179 0050 FEFFFFEB 		bl	vTaskPlaceOnEventListRestricted
 3180              	.LVL400:
 3181              	.L420:
2756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		else
2758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		{
2759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 			mtCOVERAGE_TEST_MARKER();
2760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		}
2761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 		prvUnlockQueue( pxQueue );
 3182              		.loc 1 2761 0
 3183 0054 0400A0E1 		mov	r0, r4
2762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 3184              		.loc 1 2762 0
 3185 0058 7040BDE8 		pop	{r4, r5, r6, lr}
 3186              		.cfi_restore 14
 3187              		.cfi_restore 6
 3188              		.cfi_restore 5
 3189              		.cfi_restore 4
 3190              		.cfi_def_cfa_offset 0
 3191              	.LVL401:
2761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\queue.c **** 	}
 3192              		.loc 1 2761 0
 3193 005c FEFFFFEA 		b	prvUnlockQueue
 3194              	.LVL402:
 3195              		.cfi_endproc
 3196              	.LFE39:
 3198              		.comm	xQueueRegistry,64,4
 3199              		.text
 3200              	.Letext0:
 3201              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 3202              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3203              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3204              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3205              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3206              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3207              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3208              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3209              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 3210              		.file 11 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\unity\\src/unity_internals.h"
 3211              		.file 12 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS\\portable\\GCC\\ARM_CA9_RZA2M/por
 3212              		.file 13 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/FreeRTOS.h"
 3213              		.file 14 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/list.h"
 3214              		.file 15 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/task.h"
 3215              		.file 16 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/queue.h"
 3216              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 3217              		.file 18 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/portable.h"
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:17     .text.prvIsQueueEmpty:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:22     .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:53     .text.prvCopyDataToQueue:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:58     .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:172    .text.prvCopyDataFromQueue:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:177    .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:215    .text.prvUnlockQueue:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:220    .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:344    .text.xQueueGenericReset:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:350    .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:451    .text.xQueueGenericReset:000000a4 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:456    .text.xQueueGenericCreateStatic:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:462    .text.xQueueGenericCreateStatic:00000000 xQueueGenericCreateStatic
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:575    .text.xQueueGenericCreateStatic:000000a8 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:580    .text.xQueueGenericCreate:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:586    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:671    .text.xQueueGenericCreate:0000006c $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:676    .text.xQueueGetMutexHolder:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:682    .text.xQueueGetMutexHolder:00000000 xQueueGetMutexHolder
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:718    .text.xQueueGetMutexHolderFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:724    .text.xQueueGetMutexHolderFromISR:00000000 xQueueGetMutexHolderFromISR
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:763    .text.xQueueGetMutexHolderFromISR:0000002c $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:768    .text.xQueueCreateCountingSemaphoreStatic:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:774    .text.xQueueCreateCountingSemaphoreStatic:00000000 xQueueCreateCountingSemaphoreStatic
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:826    .text.xQueueCreateCountingSemaphoreStatic:0000004c $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:831    .text.xQueueCreateCountingSemaphore:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:837    .text.xQueueCreateCountingSemaphore:00000000 xQueueCreateCountingSemaphore
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:881    .text.xQueueCreateCountingSemaphore:0000003c $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:886    .text.xQueueGenericSend:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:892    .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1125   .text.xQueueGenericSend:000001a0 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1130   .text.prvInitialiseMutex:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1135   .text.prvInitialiseMutex:00000000 prvInitialiseMutex
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1163   .text.xQueueCreateMutex:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1169   .text.xQueueCreateMutex:00000000 xQueueCreateMutex
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1199   .text.xQueueCreateMutexStatic:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1205   .text.xQueueCreateMutexStatic:00000000 xQueueCreateMutexStatic
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1243   .text.xQueueGiveMutexRecursive:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1249   .text.xQueueGiveMutexRecursive:00000000 xQueueGiveMutexRecursive
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1307   .text.xQueueGiveMutexRecursive:0000005c $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1312   .text.xQueueGenericSendFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1318   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1451   .text.xQueueGenericSendFromISR:000000e8 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1457   .text.xQueueGiveFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1463   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1583   .text.xQueueGiveFromISR:000000c4 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1588   .text.xQueueReceive:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1594   .text.xQueueReceive:00000000 xQueueReceive
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1815   .text.xQueueReceive:00000174 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1820   .text.xQueueSemaphoreTake:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:1826   .text.xQueueSemaphoreTake:00000000 xQueueSemaphoreTake
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2097   .text.xQueueSemaphoreTake:000001cc $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2102   .text.xQueueTakeMutexRecursive:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2108   .text.xQueueTakeMutexRecursive:00000000 xQueueTakeMutexRecursive
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2166   .text.xQueueTakeMutexRecursive:00000060 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2171   .text.xQueuePeek:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2177   .text.xQueuePeek:00000000 xQueuePeek
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2398   .text.xQueuePeek:00000174 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2403   .text.xQueueReceiveFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2409   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2536   .text.xQueueReceiveFromISR:000000bc $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2543   .text.xQueuePeekFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2549   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2624   .text.xQueuePeekFromISR:00000070 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2629   .text.uxQueueMessagesWaiting:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2635   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2671   .text.uxQueueMessagesWaiting:0000002c $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2676   .text.uxQueueSpacesAvailable:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2682   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2722   .text.uxQueueSpacesAvailable:00000034 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2727   .text.uxQueueMessagesWaitingFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2733   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2766   .text.uxQueueMessagesWaitingFromISR:00000020 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2771   .text.uxQueueGetQueueNumber:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2777   .text.uxQueueGetQueueNumber:00000000 uxQueueGetQueueNumber
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2793   .text.vQueueSetQueueNumber:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2799   .text.vQueueSetQueueNumber:00000000 vQueueSetQueueNumber
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2814   .text.ucQueueGetQueueType:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2820   .text.ucQueueGetQueueType:00000000 ucQueueGetQueueType
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2836   .text.xQueueIsQueueEmptyFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2842   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2878   .text.xQueueIsQueueEmptyFromISR:00000028 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2883   .text.xQueueIsQueueFullFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2889   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2928   .text.xQueueIsQueueFullFromISR:00000030 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2933   .text.vQueueAddToRegistry:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2939   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2977   .text.vQueueAddToRegistry:00000038 $d
                            *COM*:00000040 xQueueRegistry
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2982   .text.pcQueueGetName:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:2988   .text.pcQueueGetName:00000000 pcQueueGetName
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:3027   .text.pcQueueGetName:00000034 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:3032   .text.vQueueUnregisterQueue:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:3038   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:3076   .text.vQueueUnregisterQueue:00000038 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:3081   .text.vQueueDelete:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:3087   .text.vQueueDelete:00000000 vQueueDelete
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:3129   .text.vQueueDelete:00000034 $d
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:3134   .text.vQueueWaitForMessageRestricted:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccvXk3oh.s:3140   .text.vQueueWaitForMessageRestricted:00000000 vQueueWaitForMessageRestricted
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
longjmp
vListInitialise
Unity
pvPortMalloc
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
xTaskGetCurrentTaskHandle
vPortValidateInterruptPriority
ulPortSetInterruptMask
vPortClearInterruptMask
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
vTaskPlaceOnEventListRestricted
