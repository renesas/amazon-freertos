   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"heap_5.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvInsertBlockIntoFreeList,"ax",%progbits
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  20              		.fpu neon
  22              	prvInsertBlockIntoFreeList:
  23              	.LFB4:
  24              		.file 1 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang/heap_5.c"
   1:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*
   2:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * FreeRTOS Kernel V10.1.1
   3:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
   5:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * the Software without restriction, including without limitation the rights to
   8:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * subject to the following conditions:
  11:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  12:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * The above copyright notice and this permission notice shall be included in all
  13:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * copies or substantial portions of the Software.
  14:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  15:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  22:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * http://www.FreeRTOS.org
  23:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * http://aws.amazon.com/freertos
  24:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  25:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * 1 tab == 4 spaces!
  26:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  */
  27:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
  28:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*
  29:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * A sample implementation of pvPortMalloc() that allows the heap to be defined
  30:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * across multiple non-contigous blocks and combines (coalescences) adjacent
  31:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * memory blocks as they are freed.
  32:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  33:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * See heap_1.c, heap_2.c, heap_3.c and heap_4.c for alternative
  34:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * implementations, and the memory management pages of http://www.FreeRTOS.org
  35:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * for more information.
  36:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  37:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * Usage notes:
  38:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  39:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * vPortDefineHeapRegions() ***must*** be called before pvPortMalloc().
  40:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * pvPortMalloc() will be called if any task objects (tasks, queues, event
  41:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * groups, etc.) are created, therefore vPortDefineHeapRegions() ***must*** be
  42:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * called before any other objects are defined.
  43:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  44:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * vPortDefineHeapRegions() takes a single parameter.  The parameter is an array
  45:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * of HeapRegion_t structures.  HeapRegion_t is defined in portable.h as
  46:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  47:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * typedef struct HeapRegion
  48:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * {
  49:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *	uint8_t *pucStartAddress; << Start address of a block of memory that will be part of the heap.
  50:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *	size_t xSizeInBytes;	  << Size of the block of memory.
  51:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * } HeapRegion_t;
  52:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  53:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * The array is terminated using a NULL zero sized region definition, and the
  54:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * memory regions defined in the array ***must*** appear in address order from
  55:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * low address to high address.  So the following is a valid example of how
  56:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * to use the function.
  57:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  58:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * HeapRegion_t xHeapRegions[] =
  59:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * {
  60:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * 	{ ( uint8_t * ) 0x80000000UL, 0x10000 }, << Defines a block of 0x10000 bytes starting at addres
  61:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * 	{ ( uint8_t * ) 0x90000000UL, 0xa0000 }, << Defines a block of 0xa0000 bytes starting at addres
  62:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * 	{ NULL, 0 }                << Terminates the array.
  63:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * };
  64:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  65:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * vPortDefineHeapRegions( xHeapRegions ); << Pass the array into vPortDefineHeapRegions().
  66:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  67:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * Note 0x80000000 is the lower address so appears in the array first.
  68:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  *
  69:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  */
  70:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** #include <stdlib.h>
  71:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
  72:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  73:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** all the API functions to use the MPU wrappers.  That should only be done when
  74:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** task.h is included from an application file. */
  75:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  76:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
  77:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** #include "FreeRTOS.h"
  78:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** #include "task.h"
  79:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
  80:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  81:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
  82:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  83:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  84:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** #endif
  85:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
  86:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /* Block sizes must not get too small. */
  87:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( xHeapStructSize << 1 ) )
  88:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
  89:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /* Assumes 8bit bytes! */
  90:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** #define heapBITS_PER_BYTE		( ( size_t ) 8 )
  91:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
  92:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /* Define the linked list structure.  This is used to link free blocks in order
  93:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** of their memory address. */
  94:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** typedef struct A_BLOCK_LINK
  95:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** {
  96:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
  97:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	size_t xBlockSize;						/*<< The size of the free block. */
  98:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** } BlockLink_t;
  99:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*
 103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * Inserts a block of memory that is being freed into the correct position in
 104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * the list of free memory blocks.  The block being freed will be merged with
 105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * the block in front it and/or the block behind it if the memory blocks are
 106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  * adjacent to each other.
 107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c ****  */
 108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert );
 109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /* The size of the structure placed at the beginning of each allocated memory
 113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** block must by correctly byte aligned. */
 114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** static const size_t xHeapStructSize	= ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
 115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /* Create a couple of list links to mark the start and end of the list. */
 117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** static BlockLink_t xStart, *pxEnd = NULL;
 118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /* Keeps track of the number of free bytes remaining, but says nothing about
 120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** fragmentation. */
 121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** static size_t xFreeBytesRemaining = 0U;
 122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** static size_t xMinimumEverFreeBytesRemaining = 0U;
 123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
 125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** member of an BlockLink_t structure is set then the block belongs to the
 126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** application.  When the bit is free the block is still part of the free heap
 127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** space. */
 128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** static size_t xBlockAllocatedBit = 0;
 129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** void *pvPortMalloc( size_t xWantedSize )
 133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** {
 134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** void *pvReturn = NULL;
 136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	/* The heap must be initialised before the first call to
 138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	prvPortMalloc(). */
 139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	configASSERT( pxEnd );
 140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	vTaskSuspendAll();
 142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* Check the requested block size is not so large that the top bit is
 144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		set.  The top bit of the block size member of the BlockLink_t structure
 145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		is used to determine who owns the block - the application or the
 146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		kernel, so it must be free. */
 147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			/* The wanted size is increased so it can contain a BlockLink_t
 150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			structure in addition to the requested amount of bytes. */
 151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			if( xWantedSize > 0 )
 152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			{
 153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				xWantedSize += xHeapStructSize;
 154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				/* Ensure that blocks are always aligned to the required number
 156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				of bytes. */
 157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				{
 159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					/* Byte alignment required. */
 160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				}
 162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				else
 163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				{
 164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					mtCOVERAGE_TEST_MARKER();
 165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				}
 166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			}
 167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			else
 168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			{
 169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				mtCOVERAGE_TEST_MARKER();
 170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			}
 171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			{
 174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				/* Traverse the list from the start	(lowest address) block until
 175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				one	of adequate size is found. */
 176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				pxPreviousBlock = &xStart;
 177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				pxBlock = xStart.pxNextFreeBlock;
 178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				{
 180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					pxPreviousBlock = pxBlock;
 181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					pxBlock = pxBlock->pxNextFreeBlock;
 182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				}
 183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				/* If the end marker was reached then a block of adequate size
 185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				was	not found. */
 186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				if( pxBlock != pxEnd )
 187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				{
 188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					/* Return the memory space pointed to - jumping over the
 189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					BlockLink_t structure at its start. */
 190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize )
 191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					/* This block is being returned for use so must be taken out
 193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					of the list of free blocks. */
 194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					/* If the block is larger than required it can be split into
 197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					two. */
 198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					{
 200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						/* This block is to be split into two.  Create a new
 201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						block following the number of bytes requested. The void
 202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						cast is used to prevent byte alignment warnings from the
 203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						compiler. */
 204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						/* Calculate the sizes of two blocks split from the
 207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						single block. */
 208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						pxBlock->xBlockSize = xWantedSize;
 210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						/* Insert the new block into the list of free blocks. */
 212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					}
 214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					else
 215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					{
 216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						mtCOVERAGE_TEST_MARKER();
 217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					}
 218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					xFreeBytesRemaining -= pxBlock->xBlockSize;
 220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					{
 223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					}
 225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					else
 226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					{
 227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						mtCOVERAGE_TEST_MARKER();
 228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					}
 229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					/* The block is being returned - it is allocated and owned
 231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					by the application and has no "next" block. */
 232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					pxBlock->xBlockSize |= xBlockAllocatedBit;
 233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					pxBlock->pxNextFreeBlock = NULL;
 234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				}
 235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				else
 236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				{
 237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					mtCOVERAGE_TEST_MARKER();
 238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				}
 239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			}
 240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			else
 241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			{
 242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				mtCOVERAGE_TEST_MARKER();
 243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			}
 244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		else
 246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			mtCOVERAGE_TEST_MARKER();
 248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		traceMALLOC( pvReturn, xWantedSize );
 251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
 252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	( void ) xTaskResumeAll();
 253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		if( pvReturn == NULL )
 257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			extern void vApplicationMallocFailedHook( void );
 259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			vApplicationMallocFailedHook();
 260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		else
 262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			mtCOVERAGE_TEST_MARKER();
 264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	#endif
 267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	return pvReturn;
 269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** }
 270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** void vPortFree( void *pv )
 273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** {
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** uint8_t *puc = ( uint8_t * ) pv;
 275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** BlockLink_t *pxLink;
 276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	if( pv != NULL )
 278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* The memory being freed will have an BlockLink_t structure immediately
 280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		before it. */
 281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		puc -= xHeapStructSize;
 282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* This casting is to keep the compiler from issuing warnings. */
 284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxLink = ( void * ) puc;
 285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* Check the block is actually allocated. */
 287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			if( pxLink->pxNextFreeBlock == NULL )
 293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			{
 294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				/* The block is being returned to the heap - it is no longer
 295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				allocated. */
 296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				vTaskSuspendAll();
 299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				{
 300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					/* Add this block to the list of free blocks. */
 301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					xFreeBytesRemaining += pxLink->xBlockSize;
 302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					traceFREE( pv, pxLink->xBlockSize );
 303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				}
 305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				( void ) xTaskResumeAll();
 306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			}
 307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			else
 308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			{
 309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				mtCOVERAGE_TEST_MARKER();
 310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			}
 311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		else
 313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			mtCOVERAGE_TEST_MARKER();
 315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
 317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** }
 318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** size_t xPortGetFreeHeapSize( void )
 321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** {
 322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	return xFreeBytesRemaining;
 323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** }
 324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** {
 328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	return xMinimumEverFreeBytesRemaining;
 329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** }
 330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
 333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** {
  25              		.loc 1 333 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** BlockLink_t *pxIterator;
 335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** uint8_t *puc;
 336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	/* Iterate through the list until a block is found that has a higher address
 338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	than the block being inserted. */
 339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator-
  31              		.loc 1 339 0
  32 0000 68309FE5 		ldr	r3, .L9
  33              	.LVL1:
  34              	.L2:
  35              		.loc 1 339 0 is_stmt 0 discriminator 1
  36 0004 002093E5 		ldr	r2, [r3]
  37 0008 000052E1 		cmp	r2, r0
  38 000c 1500003A 		bcc	.L8
  39              	.LVL2:
 340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* Nothing to do here, just iterate to the right position. */
 342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
 343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	/* Do the block being inserted, and the block it is being inserted after
 345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	make a contiguous block of memory? */
 346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	puc = ( uint8_t * ) pxIterator;
 347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  40              		.loc 1 347 0 is_stmt 1
  41 0010 04C093E5 		ldr	ip, [r3, #4]
  42 0014 0C1083E0 		add	r1, r3, ip
  43 0018 010050E1 		cmp	r0, r1
 348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  44              		.loc 1 349 0
  45 001c 04109005 		ldreq	r1, [r0, #4]
  46 0020 0300A001 		moveq	r0, r3
  47              	.LVL3:
  48 0024 0C108100 		addeq	r1, r1, ip
  49 0028 04108305 		streq	r1, [r3, #4]
  50              	.LVL4:
 350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxBlockToInsert = pxIterator;
 351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
 352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	else
 353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		mtCOVERAGE_TEST_MARKER();
 355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
 356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	/* Do the block being inserted, and the block it is being inserted before
 358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	make a contiguous block of memory? */
 359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	puc = ( uint8_t * ) pxBlockToInsert;
 360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  51              		.loc 1 360 0
  52 002c 04C090E5 		ldr	ip, [r0, #4]
  53 0030 0C1080E0 		add	r1, r0, ip
  54 0034 010052E1 		cmp	r2, r1
  55 0038 0600001A 		bne	.L4
 361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		if( pxIterator->pxNextFreeBlock != pxEnd )
  56              		.loc 1 362 0
  57 003c 30109FE5 		ldr	r1, .L9+4
  58 0040 001091E5 		ldr	r1, [r1]
  59 0044 010052E1 		cmp	r2, r1
 363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			/* Form one big block from the two blocks. */
 365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  60              		.loc 1 365 0
  61 0048 04109215 		ldrne	r1, [r2, #4]
 366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  62              		.loc 1 366 0
  63 004c 00209215 		ldrne	r2, [r2]
 365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  64              		.loc 1 365 0
  65 0050 0C108110 		addne	r1, r1, ip
  66 0054 04108015 		strne	r1, [r0, #4]
  67              	.L4:
 367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		else
 369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
 373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	else
 374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
 377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	/* If the block being inserted plugged a gab, so was merged with the block
 379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	before and the block after, then it's pxNextFreeBlock pointer will have
 380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	already been set, and should not be set here as that would make it point
 381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	to itself. */
 382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	if( pxIterator != pxBlockToInsert )
  68              		.loc 1 382 0
  69 0058 030050E1 		cmp	r0, r3
 375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
  70              		.loc 1 375 0
  71 005c 002080E5 		str	r2, [r0]
 383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  72              		.loc 1 384 0
  73 0060 00008315 		strne	r0, [r3]
  74 0064 1EFF2FE1 		bx	lr
  75              	.LVL5:
  76              	.L8:
  77 0068 0230A0E1 		mov	r3, r2
  78              	.LVL6:
  79 006c E4FFFFEA 		b	.L2
  80              	.L10:
  81              		.align	2
  82              	.L9:
  83 0070 00000000 		.word	.LANCHOR0
  84 0074 00000000 		.word	.LANCHOR1
  85              		.cfi_endproc
  86              	.LFE4:
  88              		.section	.text.pvPortMalloc,"ax",%progbits
  89              		.align	2
  90              		.global	pvPortMalloc
  91              		.syntax unified
  92              		.arm
  93              		.fpu neon
  95              	pvPortMalloc:
  96              	.LFB0:
 133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
  97              		.loc 1 133 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              	.LVL7:
 102 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 103              		.cfi_def_cfa_offset 32
 104              		.cfi_offset 4, -32
 105              		.cfi_offset 5, -28
 106              		.cfi_offset 6, -24
 107              		.cfi_offset 7, -20
 108              		.cfi_offset 8, -16
 109              		.cfi_offset 9, -12
 110              		.cfi_offset 10, -8
 111              		.cfi_offset 14, -4
 139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 112              		.loc 1 139 0
 113 0004 08719FE5 		ldr	r7, .L29
 114 0008 003097E5 		ldr	r3, [r7]
 115 000c 000053E3 		cmp	r3, #0
 116 0010 0200001A 		bne	.L12
 139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 117              		.loc 1 139 0 is_stmt 0 discriminator 1
 118 0014 0110A0E3 		mov	r1, #1
 119 0018 F8009FE5 		ldr	r0, .L29+4
 120              	.LVL8:
 121 001c FEFFFFEB 		bl	longjmp
 122              	.LVL9:
 123              	.L12:
 124 0020 0040A0E1 		mov	r4, r0
 141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 125              		.loc 1 141 0 is_stmt 1
 126 0024 FEFFFFEB 		bl	vTaskSuspendAll
 127              	.LVL10:
 147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 128              		.loc 1 147 0
 129 0028 EC309FE5 		ldr	r3, .L29+8
 151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			{
 130              		.loc 1 151 0
 131 002c 005094E2 		adds	r5, r4, #0
 132 0030 0150A013 		movne	r5, #1
 147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 133              		.loc 1 147 0
 134 0034 006093E5 		ldr	r6, [r3]
 135 0038 043006E0 		and	r3, r6, r4
 151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			{
 136              		.loc 1 151 0
 137 003c 000053E3 		cmp	r3, #0
 138 0040 0050A013 		movne	r5, #0
 139 0044 000055E3 		cmp	r5, #0
 140 0048 2E00000A 		beq	.L13
 153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 141              		.loc 1 153 0
 142 004c 083084E2 		add	r3, r4, #8
 143              	.LVL11:
 157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				{
 144              		.loc 1 157 0
 145 0050 070013E3 		tst	r3, #7
 160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				}
 146              		.loc 1 160 0
 147 0054 0730C313 		bicne	r3, r3, #7
 148              	.LVL12:
 149 0058 08308312 		addne	r3, r3, #8
 150              	.LVL13:
 172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			{
 151              		.loc 1 172 0
 152 005c 000053E3 		cmp	r3, #0
 153 0060 0500000A 		beq	.L23
 172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			{
 154              		.loc 1 172 0 is_stmt 0 discriminator 1
 155 0064 B4809FE5 		ldr	r8, .L29+12
 156 0068 009098E5 		ldr	r9, [r8]
 157 006c 090053E1 		cmp	r3, r9
 177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 158              		.loc 1 177 0 is_stmt 1 discriminator 1
 159 0070 AC209F95 		ldrls	r2, .L29+16
 160 0074 00409295 		ldrls	r4, [r2]
 172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			{
 161              		.loc 1 172 0 discriminator 1
 162 0078 0600009A 		bls	.L17
 163              	.L23:
 135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 164              		.loc 1 135 0
 165 007c 0050A0E3 		mov	r5, #0
 166 0080 200000EA 		b	.L13
 167              	.LVL14:
 168              	.L15:
 178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				{
 169              		.loc 1 178 0 discriminator 1
 170 0084 000094E5 		ldr	r0, [r4]
 171 0088 000050E3 		cmp	r0, #0
 172 008c 0400000A 		beq	.L18
 173 0090 0420A0E1 		mov	r2, r4
 174 0094 0040A0E1 		mov	r4, r0
 175              	.LVL15:
 176              	.L17:
 178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				{
 177              		.loc 1 178 0 is_stmt 0
 178 0098 041094E5 		ldr	r1, [r4, #4]
 179 009c 010053E1 		cmp	r3, r1
 180 00a0 F7FFFF8A 		bhi	.L15
 181              	.L18:
 186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				{
 182              		.loc 1 186 0 is_stmt 1
 183 00a4 000097E5 		ldr	r0, [r7]
 184 00a8 000054E1 		cmp	r4, r0
 185 00ac F2FFFF0A 		beq	.L23
 194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 186              		.loc 1 194 0
 187 00b0 000094E5 		ldr	r0, [r4]
 190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 188              		.loc 1 190 0
 189 00b4 005092E5 		ldr	r5, [r2]
 194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 190              		.loc 1 194 0
 191 00b8 000082E5 		str	r0, [r2]
 198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					{
 192              		.loc 1 198 0
 193 00bc 032041E0 		sub	r2, r1, r3
 194 00c0 100052E3 		cmp	r2, #16
 190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 195              		.loc 1 190 0
 196 00c4 085085E2 		add	r5, r5, #8
 197              	.LVL16:
 198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					{
 198              		.loc 1 198 0
 199 00c8 0300009A 		bls	.L19
 204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 200              		.loc 1 204 0
 201 00cc 030084E0 		add	r0, r4, r3
 202              	.LVL17:
 208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 						pxBlock->xBlockSize = xWantedSize;
 203              		.loc 1 208 0
 204 00d0 042080E5 		str	r2, [r0, #4]
 209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 205              		.loc 1 209 0
 206 00d4 043084E5 		str	r3, [r4, #4]
 212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					}
 207              		.loc 1 212 0
 208 00d8 FEFFFFEB 		bl	prvInsertBlockIntoFreeList
 209              	.LVL18:
 210              	.L19:
 221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					{
 211              		.loc 1 221 0
 212 00dc 44109FE5 		ldr	r1, .L29+20
 219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 213              		.loc 1 219 0
 214 00e0 042094E5 		ldr	r2, [r4, #4]
 221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					{
 215              		.loc 1 221 0
 216 00e4 000091E5 		ldr	r0, [r1]
 219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 217              		.loc 1 219 0
 218 00e8 023049E0 		sub	r3, r9, r2
 219 00ec 003088E5 		str	r3, [r8]
 221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					{
 220              		.loc 1 221 0
 221 00f0 000053E1 		cmp	r3, r0
 223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					}
 222              		.loc 1 223 0
 223 00f4 00308135 		strcc	r3, [r1]
 232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					pxBlock->pxNextFreeBlock = NULL;
 224              		.loc 1 232 0
 225 00f8 023086E1 		orr	r3, r6, r2
 226 00fc 043084E5 		str	r3, [r4, #4]
 233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				}
 227              		.loc 1 233 0
 228 0100 0030A0E3 		mov	r3, #0
 229 0104 003084E5 		str	r3, [r4]
 230              	.LVL19:
 231              	.L13:
 252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 232              		.loc 1 252 0
 233 0108 FEFFFFEB 		bl	xTaskResumeAll
 234              	.LVL20:
 269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 235              		.loc 1 269 0
 236 010c 0500A0E1 		mov	r0, r5
 237 0110 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 238              	.L30:
 239              		.align	2
 240              	.L29:
 241 0114 00000000 		.word	.LANCHOR1
 242 0118 28000000 		.word	Unity+40
 243 011c 00000000 		.word	.LANCHOR2
 244 0120 00000000 		.word	.LANCHOR3
 245 0124 00000000 		.word	.LANCHOR0
 246 0128 00000000 		.word	.LANCHOR4
 247              		.cfi_endproc
 248              	.LFE0:
 250              		.section	.text.vPortFree,"ax",%progbits
 251              		.align	2
 252              		.global	vPortFree
 253              		.syntax unified
 254              		.arm
 255              		.fpu neon
 257              	vPortFree:
 258              	.LFB1:
 273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** uint8_t *puc = ( uint8_t * ) pv;
 259              		.loc 1 273 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL21:
 264 0000 70402DE9 		push	{r4, r5, r6, lr}
 265              		.cfi_def_cfa_offset 16
 266              		.cfi_offset 4, -16
 267              		.cfi_offset 5, -12
 268              		.cfi_offset 6, -8
 269              		.cfi_offset 14, -4
 277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 270              		.loc 1 277 0
 271 0004 004050E2 		subs	r4, r0, #0
 272 0008 7080BD08 		popeq	{r4, r5, r6, pc}
 281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 273              		.loc 1 281 0
 274 000c 085044E2 		sub	r5, r4, #8
 275              	.LVL22:
 287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 276              		.loc 1 287 0
 277 0010 54209FE5 		ldr	r2, .L36
 278 0014 043014E5 		ldr	r3, [r4, #-4]
 279 0018 002092E5 		ldr	r2, [r2]
 280 001c 020013E1 		tst	r3, r2
 281 0020 0200001A 		bne	.L33
 282              	.L34:
 287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 283              		.loc 1 287 0 is_stmt 0 discriminator 1
 284 0024 0110A0E3 		mov	r1, #1
 285 0028 40009FE5 		ldr	r0, .L36+4
 286              	.LVL23:
 287 002c FEFFFFEB 		bl	longjmp
 288              	.LVL24:
 289              	.L33:
 288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 290              		.loc 1 288 0 is_stmt 1
 291 0030 081014E5 		ldr	r1, [r4, #-8]
 292 0034 000051E3 		cmp	r1, #0
 293 0038 F9FFFF1A 		bne	.L34
 296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 294              		.loc 1 296 0
 295 003c 0230C3E1 		bic	r3, r3, r2
 296 0040 043004E5 		str	r3, [r4, #-4]
 298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				{
 297              		.loc 1 298 0
 298 0044 FEFFFFEB 		bl	vTaskSuspendAll
 299              	.LVL25:
 301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					traceFREE( pv, pxLink->xBlockSize );
 300              		.loc 1 301 0
 301 0048 24209FE5 		ldr	r2, .L36+8
 303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				}
 302              		.loc 1 303 0
 303 004c 0500A0E1 		mov	r0, r5
 301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 					traceFREE( pv, pxLink->xBlockSize );
 304              		.loc 1 301 0
 305 0050 043014E5 		ldr	r3, [r4, #-4]
 306 0054 001092E5 		ldr	r1, [r2]
 307 0058 013083E0 		add	r3, r3, r1
 308 005c 003082E5 		str	r3, [r2]
 303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 				}
 309              		.loc 1 303 0
 310 0060 FEFFFFEB 		bl	prvInsertBlockIntoFreeList
 311              	.LVL26:
 317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 312              		.loc 1 317 0
 313 0064 7040BDE8 		pop	{r4, r5, r6, lr}
 314              		.cfi_restore 14
 315              		.cfi_restore 6
 316              		.cfi_restore 5
 317              		.cfi_restore 4
 318              		.cfi_def_cfa_offset 0
 319              	.LVL27:
 305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			}
 320              		.loc 1 305 0
 321 0068 FEFFFFEA 		b	xTaskResumeAll
 322              	.LVL28:
 323              	.L37:
 324              		.align	2
 325              	.L36:
 326 006c 00000000 		.word	.LANCHOR2
 327 0070 28000000 		.word	Unity+40
 328 0074 00000000 		.word	.LANCHOR3
 329              		.cfi_endproc
 330              	.LFE1:
 332              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 333              		.align	2
 334              		.global	xPortGetFreeHeapSize
 335              		.syntax unified
 336              		.arm
 337              		.fpu neon
 339              	xPortGetFreeHeapSize:
 340              	.LFB2:
 321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	return xFreeBytesRemaining;
 341              		.loc 1 321 0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345              		@ link register save eliminated.
 323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 346              		.loc 1 323 0
 347 0000 04309FE5 		ldr	r3, .L39
 348 0004 000093E5 		ldr	r0, [r3]
 349 0008 1EFF2FE1 		bx	lr
 350              	.L40:
 351              		.align	2
 352              	.L39:
 353 000c 00000000 		.word	.LANCHOR3
 354              		.cfi_endproc
 355              	.LFE2:
 357              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 358              		.align	2
 359              		.global	xPortGetMinimumEverFreeHeapSize
 360              		.syntax unified
 361              		.arm
 362              		.fpu neon
 364              	xPortGetMinimumEverFreeHeapSize:
 365              	.LFB3:
 327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	return xMinimumEverFreeBytesRemaining;
 366              		.loc 1 327 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              		@ link register save eliminated.
 329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 371              		.loc 1 329 0
 372 0000 04309FE5 		ldr	r3, .L42
 373 0004 000093E5 		ldr	r0, [r3]
 374 0008 1EFF2FE1 		bx	lr
 375              	.L43:
 376              		.align	2
 377              	.L42:
 378 000c 00000000 		.word	.LANCHOR4
 379              		.cfi_endproc
 380              	.LFE3:
 382              		.section	.text.vPortDefineHeapRegions,"ax",%progbits
 383              		.align	2
 384              		.global	vPortDefineHeapRegions
 385              		.syntax unified
 386              		.arm
 387              		.fpu neon
 389              	vPortDefineHeapRegions:
 390              	.LFB5:
 385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
 386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	else
 387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		mtCOVERAGE_TEST_MARKER();
 389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
 390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** }
 391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** /*-----------------------------------------------------------*/
 392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
 394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** {
 391              		.loc 1 394 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              	.LVL29:
 395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** size_t xAlignedHeap;
 397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** size_t xTotalRegionSize, xTotalHeapSize = 0;
 398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** BaseType_t xDefinedRegions = 0;
 399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** size_t xAddress;
 400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** const HeapRegion_t *pxHeapRegion;
 401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	/* Can only call once! */
 403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	configASSERT( pxEnd == NULL );
 396              		.loc 1 403 0
 397 0000 ECC09FE5 		ldr	ip, .L77
 394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 398              		.loc 1 394 0
 399 0004 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 400              		.cfi_def_cfa_offset 24
 401              		.cfi_offset 4, -24
 402              		.cfi_offset 5, -20
 403              		.cfi_offset 6, -16
 404              		.cfi_offset 7, -12
 405              		.cfi_offset 8, -8
 406              		.cfi_offset 14, -4
 407              		.loc 1 403 0
 408 0008 00209CE5 		ldr	r2, [ip]
 409 000c 000052E3 		cmp	r2, #0
 410 0010 3100001A 		bne	.L45
 404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	while( pxHeapRegion->xSizeInBytes > 0 )
 408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* Ensure the heap region starts on a correctly aligned boundary. */
 412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			xAddress += ( portBYTE_ALIGNMENT - 1 );
 416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			/* Adjust the size for the bytes lost to alignment. */
 419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		xAlignedHeap = xAddress;
 423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* Set xStart if it has not already been set. */
 425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		if( xDefinedRegions == 0 )
 426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			/* xStart is used to hold a pointer to the first item in the list of
 428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			free blocks.  The void cast is used to prevent compiler warnings. */
 429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 411              		.loc 1 429 0
 412 0014 DC609FE5 		ldr	r6, .L77+4
 413 0018 080080E2 		add	r0, r0, #8
 414              	.LVL30:
 403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 415              		.loc 1 403 0
 416 001c 0240A0E1 		mov	r4, r2
 417 0020 0250A0E1 		mov	r5, r2
 418 0024 02E0A0E1 		mov	lr, r2
 430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			xStart.xBlockSize = ( size_t ) 0;
 431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		else
 433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			/* Should only get here if one region has already been added to the
 435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			heap. */
 436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			configASSERT( pxEnd != NULL );
 437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			/* Check blocks are passed in with increasing start addresses. */
 439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			configASSERT( xAddress > ( size_t ) pxEnd );
 440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* Remember the location of the end marker in the previous region, if
 443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		any. */
 444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxPreviousFreeBlock = pxEnd;
 445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* pxEnd is used to mark the end of the list of free blocks and is
 447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		inserted at the end of the region space. */
 448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		xAddress = xAlignedHeap + xTotalRegionSize;
 449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		xAddress -= xHeapStructSize;
 450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxEnd = ( BlockLink_t * ) xAddress;
 452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxEnd->xBlockSize = 0;
 419              		.loc 1 452 0
 420 0028 0270A0E1 		mov	r7, r2
 421              	.LVL31:
 422              	.L46:
 407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	{
 423              		.loc 1 407 0
 424 002c 043010E5 		ldr	r3, [r0, #-4]
 425 0030 000053E3 		cmp	r3, #0
 426 0034 0B00001A 		bne	.L54
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxEnd->pxNextFreeBlock = NULL;
 454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* To start with there is a single free block in this region that is
 456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		sized to take up the entire heap region minus the space taken by the
 457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		free block structure. */
 458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* If this is not the first region that makes up the entire heap space
 463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		then link the previous region to this region. */
 464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		if( pxPreviousFreeBlock != NULL )
 465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		/* Move onto the next HeapRegion_t structure. */
 472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		xDefinedRegions++;
 473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	}
 475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 427              		.loc 1 476 0
 428 0038 BC309FE5 		ldr	r3, .L77+8
 429 003c 000054E3 		cmp	r4, #0
 430 0040 00208C15 		strne	r2, [ip]
 477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	xFreeBytesRemaining = xTotalHeapSize;
 478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	/* Check something was actually defined before it is accessed. */
 480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	configASSERT( xTotalHeapSize );
 431              		.loc 1 480 0
 432 0044 00005EE3 		cmp	lr, #0
 476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	xFreeBytesRemaining = xTotalHeapSize;
 433              		.loc 1 476 0
 434 0048 00E083E5 		str	lr, [r3]
 477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	xFreeBytesRemaining = xTotalHeapSize;
 435              		.loc 1 477 0
 436 004c AC309FE5 		ldr	r3, .L77+12
 437 0050 00E083E5 		str	lr, [r3]
 438              		.loc 1 480 0
 439 0054 2000000A 		beq	.L45
 481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	/* Work out the position of the top bit in a size_t variable. */
 483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 440              		.loc 1 483 0
 441 0058 A4309FE5 		ldr	r3, .L77+16
 442 005c 0221A0E3 		mov	r2, #-2147483648
 443 0060 002083E5 		str	r2, [r3]
 444 0064 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 445              	.L54:
 446              	.LVL32:
 412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 447              		.loc 1 412 0
 448 0068 081010E5 		ldr	r1, [r0, #-8]
 449              	.LVL33:
 413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 450              		.loc 1 413 0
 451 006c 070011E3 		tst	r1, #7
 415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 452              		.loc 1 415 0
 453 0070 07808112 		addne	r8, r1, #7
 454              	.LVL34:
 419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 455              		.loc 1 419 0
 456 0074 01308310 		addne	r3, r3, r1
 457              	.LVL35:
 416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 458              		.loc 1 416 0
 459 0078 0780C813 		bicne	r8, r8, #7
 460              	.LVL36:
 419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 461              		.loc 1 419 0
 462 007c 08304310 		subne	r3, r3, r8
 463              	.LVL37:
 416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 464              		.loc 1 416 0
 465 0080 0810A011 		movne	r1, r8
 466              	.LVL38:
 425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 467              		.loc 1 425 0
 468 0084 000055E3 		cmp	r5, #0
 469 0088 0F00001A 		bne	.L48
 430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 470              		.loc 1 430 0
 471 008c 220086E8 		stm	r6, {r1, r5}
 472              	.L49:
 473              	.LVL39:
 448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		xAddress -= xHeapStructSize;
 474              		.loc 1 448 0
 475 0090 013083E0 		add	r3, r3, r1
 476              	.LVL40:
 464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		{
 477              		.loc 1 464 0
 478 0094 000052E3 		cmp	r2, #0
 449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 479              		.loc 1 449 0
 480 0098 083043E2 		sub	r3, r3, #8
 481              	.LVL41:
 472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 482              		.loc 1 472 0
 483 009c 015085E2 		add	r5, r5, #1
 484              	.LVL42:
 450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxEnd = ( BlockLink_t * ) xAddress;
 485              		.loc 1 450 0
 486 00a0 0730C3E3 		bic	r3, r3, #7
 487              	.LVL43:
 488 00a4 080080E2 		add	r0, r0, #8
 489              	.LVL44:
 459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 490              		.loc 1 459 0
 491 00a8 014043E0 		sub	r4, r3, r1
 452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxEnd->pxNextFreeBlock = NULL;
 492              		.loc 1 452 0
 493 00ac 047083E5 		str	r7, [r3, #4]
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 494              		.loc 1 453 0
 495 00b0 007083E5 		str	r7, [r3]
 496              	.LVL45:
 469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 497              		.loc 1 469 0
 498 00b4 04E08EE0 		add	lr, lr, r4
 499              	.LVL46:
 460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 500              		.loc 1 460 0
 501 00b8 180081E8 		stm	r1, {r3, r4}
 502 00bc 0140A0E3 		mov	r4, #1
 466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 503              		.loc 1 466 0
 504 00c0 00108215 		strne	r1, [r2]
 472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 505              		.loc 1 472 0
 506 00c4 0320A0E1 		mov	r2, r3
 507              	.LVL47:
 508 00c8 D7FFFFEA 		b	.L46
 509              	.LVL48:
 510              	.L48:
 436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 511              		.loc 1 436 0
 512 00cc 000052E3 		cmp	r2, #0
 513 00d0 0400001A 		bne	.L50
 514              	.L76:
 515 00d4 000054E3 		cmp	r4, #0
 516 00d8 00208C15 		strne	r2, [ip]
 517              	.LVL49:
 518              	.L45:
 403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 
 519              		.loc 1 403 0 discriminator 1
 520 00dc 0110A0E3 		mov	r1, #1
 521 00e0 20009FE5 		ldr	r0, .L77+20
 522 00e4 FEFFFFEB 		bl	longjmp
 523              	.LVL50:
 524              	.L50:
 439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/MemMang\heap_5.c **** 		}
 525              		.loc 1 439 0
 526 00e8 010052E1 		cmp	r2, r1
 527 00ec E7FFFF3A 		bcc	.L49
 528 00f0 F7FFFFEA 		b	.L76
 529              	.L78:
 530              		.align	2
 531              	.L77:
 532 00f4 00000000 		.word	.LANCHOR1
 533 00f8 00000000 		.word	.LANCHOR0
 534 00fc 00000000 		.word	.LANCHOR4
 535 0100 00000000 		.word	.LANCHOR3
 536 0104 00000000 		.word	.LANCHOR2
 537 0108 28000000 		.word	Unity+40
 538              		.cfi_endproc
 539              	.LFE5:
 541              		.section	.bss.pxEnd,"aw",%nobits
 542              		.align	2
 543              		.set	.LANCHOR1,. + 0
 546              	pxEnd:
 547 0000 00000000 		.space	4
 548              		.section	.bss.xBlockAllocatedBit,"aw",%nobits
 549              		.align	2
 550              		.set	.LANCHOR2,. + 0
 553              	xBlockAllocatedBit:
 554 0000 00000000 		.space	4
 555              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
 556              		.align	2
 557              		.set	.LANCHOR3,. + 0
 560              	xFreeBytesRemaining:
 561 0000 00000000 		.space	4
 562              		.section	.bss.xMinimumEverFreeBytesRemaining,"aw",%nobits
 563              		.align	2
 564              		.set	.LANCHOR4,. + 0
 567              	xMinimumEverFreeBytesRemaining:
 568 0000 00000000 		.space	4
 569              		.section	.bss.xStart,"aw",%nobits
 570              		.align	2
 571              		.set	.LANCHOR0,. + 0
 574              	xStart:
 575 0000 00000000 		.space	8
 575      00000000 
 576              		.text
 577              	.Letext0:
 578              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 579              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 580              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 581              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 582              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 583              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 584              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 585              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 586              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 587              		.file 11 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\unity\\src/unity_internals.h"
 588              		.file 12 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS\\portable\\GCC\\ARM_CA9_RZA2M/por
 589              		.file 13 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/portable.h"
 590              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 591              		.file 15 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 heap_5.c
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:17     .text.prvInsertBlockIntoFreeList:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:22     .text.prvInsertBlockIntoFreeList:00000000 prvInsertBlockIntoFreeList
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:83     .text.prvInsertBlockIntoFreeList:00000070 $d
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:89     .text.pvPortMalloc:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:95     .text.pvPortMalloc:00000000 pvPortMalloc
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:241    .text.pvPortMalloc:00000114 $d
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:251    .text.vPortFree:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:257    .text.vPortFree:00000000 vPortFree
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:326    .text.vPortFree:0000006c $d
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:333    .text.xPortGetFreeHeapSize:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:339    .text.xPortGetFreeHeapSize:00000000 xPortGetFreeHeapSize
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:353    .text.xPortGetFreeHeapSize:0000000c $d
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:358    .text.xPortGetMinimumEverFreeHeapSize:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:364    .text.xPortGetMinimumEverFreeHeapSize:00000000 xPortGetMinimumEverFreeHeapSize
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:378    .text.xPortGetMinimumEverFreeHeapSize:0000000c $d
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:383    .text.vPortDefineHeapRegions:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:389    .text.vPortDefineHeapRegions:00000000 vPortDefineHeapRegions
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:532    .text.vPortDefineHeapRegions:000000f4 $d
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:542    .bss.pxEnd:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:546    .bss.pxEnd:00000000 pxEnd
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:549    .bss.xBlockAllocatedBit:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:553    .bss.xBlockAllocatedBit:00000000 xBlockAllocatedBit
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:556    .bss.xFreeBytesRemaining:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:560    .bss.xFreeBytesRemaining:00000000 xFreeBytesRemaining
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:563    .bss.xMinimumEverFreeBytesRemaining:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:567    .bss.xMinimumEverFreeBytesRemaining:00000000 xMinimumEverFreeBytesRemaining
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:570    .bss.xStart:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccYVD03N.s:574    .bss.xStart:00000000 xStart
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
longjmp
vTaskSuspendAll
xTaskResumeAll
Unity
