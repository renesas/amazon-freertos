   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"FreeRTOS_ARP.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.vARPRefreshCacheEntry,"ax",%progbits
  17              		.align	2
  18              		.global	vARPRefreshCacheEntry
  19              		.syntax unified
  20              		.arm
  21              		.fpu neon
  23              	vARPRefreshCacheEntry:
  24              	.LFB26:
  25              		.file 1 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source/FreeRTOS_ARP.c"
   1:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*
   2:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * FreeRTOS+TCP V2.0.10
   3:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  *
   5:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * the Software without restriction, including without limitation the rights to
   8:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * subject to the following conditions:
  11:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  *
  12:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * The above copyright notice and this permission notice shall be included in all
  13:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * copies or substantial portions of the Software.
  14:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  *
  15:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  *
  22:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * http://aws.amazon.com/freertos
  23:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * http://www.FreeRTOS.org
  24:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  */
  25:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  26:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /* Standard includes. */
  27:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include <stdint.h>
  28:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include <stdio.h>
  29:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  30:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /* FreeRTOS includes. */
  31:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "FreeRTOS.h"
  32:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "task.h"
  33:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "queue.h"
  34:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "semphr.h"
  35:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  36:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /* FreeRTOS+TCP includes. */
  37:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "FreeRTOS_IP.h"
  38:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "FreeRTOS_Sockets.h"
  39:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "FreeRTOS_IP_Private.h"
  40:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "FreeRTOS_ARP.h"
  41:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "FreeRTOS_UDP_IP.h"
  42:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "FreeRTOS_DHCP.h"
  43:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #if( ipconfigUSE_LLMNR == 1 )
  44:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	#include "FreeRTOS_DNS.h"
  45:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #endif /* ipconfigUSE_LLMNR */
  46:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "NetworkInterface.h"
  47:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #include "NetworkBufferManagement.h"
  48:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  49:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  50:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /* When the age of an entry in the ARP table reaches this value (it counts down
  51:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** to zero, so this is an old entry) an ARP request will be sent to see if the
  52:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** entry is still valid and can therefore be refreshed. */
  53:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #define arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST		( 3 )
  54:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  55:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /* The time between gratuitous ARPs. */
  56:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #ifndef arpGRATUITOUS_ARP_PERIOD
  57:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	#define arpGRATUITOUS_ARP_PERIOD					( pdMS_TO_TICKS( 20000 ) )
  58:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #endif
  59:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  60:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
  61:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  62:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*
  63:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * Lookup an MAC address in the ARP cache from the IP address.
  64:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  */
  65:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup, MACAddress_t * const pxMACAdd
  66:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  67:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
  68:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  69:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /* The ARP cache. */
  70:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** static ARPCacheRow_t xARPCache[ ipconfigARP_CACHE_ENTRIES ];
  71:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  72:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /* The time at which the last gratuitous ARP was sent.  Gratuitous ARPs are used
  73:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** to ensure ARP tables are up to date and to detect IP address conflicts. */
  74:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** static TickType_t xLastGratuitousARPTime = ( TickType_t ) 0;
  75:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  76:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*
  77:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * IP-clash detection is currently only used internally. When DHCP doesn't respond, the
  78:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * driver can try out a random LinkLayer IP address (169.254.x.x).  It will send out a
  79:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  * gratuitos ARP message and, after a period of time, check the variables here below:
  80:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c ****  */
  81:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #if( ipconfigARP_USE_CLASH_DETECTION != 0 )
  82:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* Becomes non-zero if another device responded to a gratuitos ARP message. */
  83:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	BaseType_t xARPHadIPClash;
  84:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* MAC-address of the other device containing the same IP-address. */
  85:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	MACAddress_t xARPClashMacAddress;
  86:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #endif /* ipconfigARP_USE_CLASH_DETECTION */
  87:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
  88:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /* Part of the Ethernet and ARP headers are always constant when sending an IPv4
  89:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** ARP packet.  This array defines the constant parts, allowing this part of the
  90:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** packet to be filled in using a simple memcpy() instead of individual writes. */
  91:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** static const uint8_t xDefaultPartARPPacketHeader[] =
  92:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** {
  93:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 	/* Ethernet destination address. */
  94:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* Ethernet source address. */
  95:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	0x08, 0x06, 							/* Ethernet frame type (ipARP_FRAME_TYPE). */
  96:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	0x00, 0x01, 							/* usHardwareType (ipARP_HARDWARE_TYPE_ETHERNET). */
  97:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	0x08, 0x00,								/* usProtocolType. */
  98:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	ipMAC_ADDRESS_LENGTH_BYTES, 			/* ucHardwareAddressLength. */
  99:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	ipIP_ADDRESS_LENGTH_BYTES, 				/* ucProtocolAddressLength. */
 100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	0x00, 0x01, 							/* usOperation (ipARP_REQUEST). */
 101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* xSenderHardwareAddress. */
 102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	0x00, 0x00, 0x00, 0x00, 				/* ulSenderProtocolAddress. */
 103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00 		/* xTargetHardwareAddress. */
 104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** };
 105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
 109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** {
 110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** eFrameProcessingResult_t eReturn = eReleaseBuffer;
 111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** ARPHeader_t *pxARPHeader;
 112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;
 113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	pxARPHeader = &( pxARPFrame->xARPHeader );
 115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* The field ulSenderProtocolAddress is badly aligned, copy byte-by-byte. */
 117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	memcpy( ( void *)&( ulSenderProtocolAddress ), ( void * )pxARPHeader->ucSenderProtocolAddress, siz
 118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
 119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	traceARP_PACKET_RECEIVED();
 122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* Don't do anything if the local IP address is zero because
 124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	that means a DHCP request has not completed. */
 125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		switch( pxARPHeader->usOperation )
 128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			case ipARP_REQUEST	:
 130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* The packet contained an ARP request.  Was it for the IP
 131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				address of the node running this code? */
 132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				{
 134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );
 135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					/* The request is for the address of this node.  Add the
 137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					entry into the ARP cache, or refresh the entry if it
 138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					already exists. */
 139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					/* Generate a reply payload in the same buffer. */
 142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					{
 145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						/* A double IP address is detected! */
 146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						/* Give the sources MAC address the value of the broadcast address, will be swapped later */
 147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, siz
 148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						pxARPHeader->ulTargetProtocolAddress = 0UL;
 150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					}
 151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					else
 152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					{
 153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBy
 154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					}
 156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					memcpy( pxARPHeader->xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( M
 157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					memcpy( ( void* )pxARPHeader->ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POINTER, si
 158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					eReturn = eReturnEthernetFrame;
 160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				}
 161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				break;
 162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			case ipARP_REPLY :
 164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
 165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* Process received ARP frame to see if there is a clash. */
 167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				#if( ipconfigARP_USE_CLASH_DETECTION != 0 )
 168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				{
 169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					if( ulSenderProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					{
 171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						xARPHadIPClash = pdTRUE;
 172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						memcpy( xARPClashMacAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( xAR
 173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					}
 174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				}
 175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				#endif /* ipconfigARP_USE_CLASH_DETECTION */
 176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				break;
 177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			default :
 179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* Invalid. */
 180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				break;
 181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	return eReturn;
 185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** }
 186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #if( ipconfigUSE_ARP_REMOVE_ENTRY != 0 )
 189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	uint32_t ulARPRemoveCacheEntryByMac( const MACAddress_t * pxMACAddress )
 191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	BaseType_t x;
 193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	uint32_t lResult = 0;
 194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* For each entry in the ARP cache table. */
 196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			if( ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->u
 199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				lResult = xARPCache[ x ].ulIPAddress;
 201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				memset( &xARPCache[ x ], '\0', sizeof( xARPCache[ x ] ) );
 202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				break;
 203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		return lResult;
 207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
 210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
 213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** {
  26              		.loc 1 213 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  32              		.cfi_def_cfa_offset 40
  33              		.cfi_offset 3, -40
  34              		.cfi_offset 4, -36
  35              		.cfi_offset 5, -32
  36              		.cfi_offset 6, -28
  37              		.cfi_offset 7, -24
  38              		.cfi_offset 8, -20
  39              		.cfi_offset 9, -16
  40              		.cfi_offset 10, -12
  41              		.cfi_offset 11, -8
  42              		.cfi_offset 14, -4
 214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** BaseType_t x = 0;
 215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** BaseType_t xIpEntry = -1;
 216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** BaseType_t xMacEntry = -1;
 217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** BaseType_t xUseEntry = 0;
 218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** uint8_t ucMinAgeFound = 0U;
 219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
 221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* Only process the IP address if it is on the local network.
 222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
 223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		and netmask are still unknown. */
 224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetw
  43              		.loc 1 224 0
  44 0004 70319FE5 		ldr	r3, .L26
  45 0008 70C19FE5 		ldr	ip, .L26+4
  46 000c 142093E5 		ldr	r2, [r3, #20]
  47 0010 04C09CE5 		ldr	ip, [ip, #4]
  48 0014 013022E0 		eor	r3, r2, r1
  49 0018 0C3003E0 		and	r3, r3, ip
  50 001c 000053E3 		cmp	r3, #0
  51 0020 00005213 		cmpne	r2, #0
  52 0024 F88FBD18 		popne	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
  53 0028 54A19FE5 		ldr	r10, .L26+8
  54 002c 0040A0E3 		mov	r4, #0
  55 0030 0080E0E3 		mvn	r8, #0
  56 0034 0190A0E1 		mov	r9, r1
  57 0038 0070A0E1 		mov	r7, r0
  58 003c FFB0A0E3 		mov	fp, #255
  59 0040 0850A0E1 		mov	r5, r8
  60 0044 0460A0E1 		mov	r6, r4
  61              	.LVL1:
  62              	.L8:
 225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	#else
 227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* If ipconfigARP_STORES_REMOTE_ADDRESSES is non-zero, IP addresses with
 228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		a different netmask will also be stored.  After when replying to a UDP
 229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		message from a different netmask, the IP address can be looped up and a
 230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		reply sent.  This option is useful for systems with multiple gateways,
 231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		the reply will surely arrive.  If ipconfigARP_STORES_REMOTE_ADDRESSES is
 232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		zero the the gateway address is the only option. */
 233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		if( pdTRUE )
 234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	#endif
 235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* Start with the maximum possible number. */
 237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		ucMinAgeFound--;
 238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* For each entry in the ARP cache table. */
 240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			/* Does this line in the cache table hold an entry for the IP
 243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			address	being queried? */
 244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
  63              		.loc 1 244 0
  64 0048 04301AE5 		ldr	r3, [r10, #-4]
  65 004c 030059E1 		cmp	r9, r3
  66 0050 0F00001A 		bne	.L4
 245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				if( pxMACAddress == NULL )
  67              		.loc 1 246 0
  68 0054 000057E3 		cmp	r7, #0
  69 0058 3A00000A 		beq	.L5
 247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				{
 248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					/* In case the parameter pxMACAddress is NULL, an entry will be reserved to
 249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					indicate that there is an outstanding ARP request, This entry will have
 250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					"ucValid == pdFALSE". */
 251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xIpEntry = x;
 252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					break;
 253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				}
 254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* See if the MAC-address also matches. */
 256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->uc
  70              		.loc 1 256 0
  71 005c 0620A0E3 		mov	r2, #6
  72 0060 0710A0E1 		mov	r1, r7
  73 0064 0A00A0E1 		mov	r0, r10
  74 0068 FEFFFFEB 		bl	memcmp
  75              	.LVL2:
  76 006c 000050E3 		cmp	r0, #0
  77 0070 1E00001A 		bne	.L14
 257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				{
 258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					/* This function will be called for each received packet
 259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					As this is by far the most common path the coding standard
 260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					is relaxed in this case and a return is permitted as an
 261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					optimisation. */
 262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
  78              		.loc 1 262 0
  79 0074 0C219FE5 		ldr	r2, .L26+12
  80 0078 0C30A0E3 		mov	r3, #12
  81 007c 932626E0 		mla	r6, r3, r6, r2
  82              	.LVL3:
  83              	.L25:
 263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					return;
 265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				}
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* Found an entry containing ulIPAddress, but the MAC address
 268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
 269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				for an ARP reply.  Still want to see if there is match with the
 270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				given MAC address.ucBytes.  If found, either of the two entries
 271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				must be cleared. */
 272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				xIpEntry = x;
 273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress-
 275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* Found an entry with the given MAC-address, but the IP-address
 277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				is different.  Continue looping to find a possible match with
 278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				ulIPAddress. */
 279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	#if( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
 280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* If ARP stores the MAC address of IP addresses outside the
 281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				network, than the MAC address of the gateway should not be
 282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				overwritten. */
 283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				BaseType_t bIsLocal[ 2 ];
 284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				bIsLocal[ 0 ] = ( ( xARPCache[ x ].ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL
 285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				bIsLocal[ 1 ] = ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POI
 286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
 287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				{
 288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xMacEntry = x;
 289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				}
 290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	#else
 291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				xMacEntry = x;
 292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	#endif
 293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			/* _HT_
 295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
 296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* As the table is traversed, remember the table row that
 299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				contains the oldest entry (the lowest age count, as ages are
 300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				decremented to zero) so the row can be re-used if this function
 301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				needs to add an entry that does not already exist. */
 302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				ucMinAgeFound = xARPCache[ x ].ucAge;
 303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				xUseEntry = x;
 304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		if( xMacEntry >= 0 )
 308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			xUseEntry = xMacEntry;
 310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			if( xIpEntry >= 0 )
 312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* Both the MAC address as well as the IP address were found in
 314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				different locations: clear the entry which matches the
 315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				IP-address */
 316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		else if( xIpEntry >= 0 )
 320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			/* An entry containing the IP-address was found, but it had a different MAC address */
 322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			xUseEntry = xIpEntry;
 323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* If the entry was not found, we use the oldest entry and set the IPaddress */
 326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		if( pxMACAddress != NULL )
 329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress-
 331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
 333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			/* And this entry does not need immediate attention */
 334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
  84              		.loc 1 334 0
  85 0080 6930E0E3 		mvn	r3, #105
  86 0084 0A30C6E5 		strb	r3, [r6, #10]
 335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
  87              		.loc 1 335 0
  88 0088 0130A0E3 		mov	r3, #1
  89 008c 0B30C6E5 		strb	r3, [r6, #11]
  90 0090 F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
  91              	.LVL4:
  92              	.L4:
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
  93              		.loc 1 274 0
  94 0094 000057E3 		cmp	r7, #0
  95 0098 0600000A 		beq	.L7
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
  96              		.loc 1 274 0 is_stmt 0 discriminator 1
  97 009c 0620A0E3 		mov	r2, #6
  98 00a0 0710A0E1 		mov	r1, r7
  99 00a4 0A00A0E1 		mov	r0, r10
 100 00a8 FEFFFFEB 		bl	memcmp
 101              	.LVL5:
 102 00ac 000050E3 		cmp	r0, #0
 103 00b0 0680A001 		moveq	r8, r6
 104 00b4 0300000A 		beq	.L6
 105              	.L7:
 296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 106              		.loc 1 296 0 is_stmt 1
 107 00b8 0630DAE5 		ldrb	r3, [r10, #6]	@ zero_extendqisi2
 108 00bc 0B0053E1 		cmp	r3, fp
 109 00c0 03B0A031 		movcc	fp, r3
 110              	.LVL6:
 111 00c4 0640A031 		movcc	r4, r6
 112              	.LVL7:
 113              	.L6:
 240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 114              		.loc 1 240 0 discriminator 2
 115 00c8 016086E2 		add	r6, r6, #1
 116              	.LVL8:
 117 00cc 0CA08AE2 		add	r10, r10, #12
 118 00d0 060056E3 		cmp	r6, #6
 119 00d4 DBFFFF1A 		bne	.L8
 120              	.LVL9:
 307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 121              		.loc 1 307 0
 122 00d8 010078E3 		cmn	r8, #1
 123 00dc 0500000A 		beq	.L9
 124              	.LVL10:
 311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 125              		.loc 1 311 0
 126 00e0 010075E3 		cmn	r5, #1
 127 00e4 1B00001A 		bne	.L13
 128              	.L16:
 129 00e8 0840A0E1 		mov	r4, r8
 130 00ec 030000EA 		b	.L10
 131              	.LVL11:
 132              	.L14:
 133 00f0 0650A0E1 		mov	r5, r6
 134 00f4 F3FFFFEA 		b	.L6
 135              	.LVL12:
 136              	.L9:
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 137              		.loc 1 319 0
 138 00f8 010075E3 		cmn	r5, #1
 139 00fc 0540A011 		movne	r4, r5
 140              	.LVL13:
 141              	.L10:
 326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 142              		.loc 1 326 0
 143 0100 0C30A0E3 		mov	r3, #12
 144 0104 7C009FE5 		ldr	r0, .L26+12
 145 0108 930404E0 		mul	r4, r3, r4
 146              	.LVL14:
 328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 147              		.loc 1 328 0
 148 010c 000057E3 		cmp	r7, #0
 326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 149              		.loc 1 326 0
 150 0110 046080E0 		add	r6, r0, r4
 151              	.LVL15:
 152 0114 049080E7 		str	r9, [r0, r4]
 328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 153              		.loc 1 328 0
 154 0118 0500000A 		beq	.L11
 330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 155              		.loc 1 330 0
 156 011c 044084E2 		add	r4, r4, #4
 157 0120 0620A0E3 		mov	r2, #6
 158 0124 0710A0E1 		mov	r1, r7
 159 0128 040080E0 		add	r0, r0, r4
 160 012c FEFFFFEB 		bl	memcpy
 161              	.LVL16:
 162 0130 D2FFFFEA 		b	.L25
 163              	.L11:
 336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		else if( xIpEntry < 0 )
 164              		.loc 1 337 0
 165 0134 010075E3 		cmn	r5, #1
 338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 166              		.loc 1 339 0
 167 0138 0530A003 		moveq	r3, #5
 340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 168              		.loc 1 340 0
 169 013c 0B70C605 		strbeq	r7, [r6, #11]
 339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 170              		.loc 1 339 0
 171 0140 0A30C605 		strbeq	r3, [r6, #10]
 172 0144 F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 173              	.LVL17:
 174              	.L5:
 307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 175              		.loc 1 307 0
 176 0148 010078E3 		cmn	r8, #1
 177 014c 0650A0E1 		mov	r5, r6
 178 0150 0640A001 		moveq	r4, r6
 179              	.LVL18:
 180 0154 E9FFFF0A 		beq	.L10
 181              	.LVL19:
 182              	.L13:
 316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 183              		.loc 1 316 0
 184 0158 0C30A0E3 		mov	r3, #12
 185 015c 24009FE5 		ldr	r0, .L26+12
 186 0160 930503E0 		mul	r3, r3, r5
 187 0164 0020A0E3 		mov	r2, #0
 188 0168 031080E0 		add	r1, r0, r3
 189 016c 032080E7 		str	r2, [r0, r3]
 190 0170 042081E5 		str	r2, [r1, #4]
 191 0174 082081E5 		str	r2, [r1, #8]
 192 0178 DAFFFFEA 		b	.L16
 193              	.L27:
 194              		.align	2
 195              	.L26:
 196 017c 00000000 		.word	xDefaultPartUDPPacketHeader
 197 0180 00000000 		.word	xNetworkAddressing
 198 0184 04000000 		.word	.LANCHOR0+4
 199 0188 00000000 		.word	.LANCHOR0
 200              		.cfi_endproc
 201              	.LFE26:
 203              		.section	.text.eARPProcessPacket,"ax",%progbits
 204              		.align	2
 205              		.global	eARPProcessPacket
 206              		.syntax unified
 207              		.arm
 208              		.fpu neon
 210              	eARPProcessPacket:
 211              	.LFB25:
 109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** eFrameProcessingResult_t eReturn = eReleaseBuffer;
 212              		.loc 1 109 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 8
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              	.LVL20:
 217 0000 F7432DE9 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 218              		.cfi_def_cfa_offset 40
 219              		.cfi_offset 4, -28
 220              		.cfi_offset 5, -24
 221              		.cfi_offset 6, -20
 222              		.cfi_offset 7, -16
 223              		.cfi_offset 8, -12
 224              		.cfi_offset 9, -8
 225              		.cfi_offset 14, -4
 117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
 226              		.loc 1 117 0
 227 0004 1C7080E2 		add	r7, r0, #28
 228 0008 0420A0E3 		mov	r2, #4
 109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** eFrameProcessingResult_t eReturn = eReleaseBuffer;
 229              		.loc 1 109 0
 230 000c 0040A0E1 		mov	r4, r0
 117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
 231              		.loc 1 117 0
 232 0010 0710A0E1 		mov	r1, r7
 233 0014 02008DE0 		add	r0, sp, r2
 234              	.LVL21:
 235 0018 FEFFFFEB 		bl	memcpy
 236              	.LVL22:
 125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 237              		.loc 1 125 0
 238 001c 18319FE5 		ldr	r3, .L39
 239 0020 140093E5 		ldr	r0, [r3, #20]
 240 0024 000050E3 		cmp	r0, #0
 241 0028 3200000A 		beq	.L29
 127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 242              		.loc 1 127 0
 243 002c 1430D4E5 		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 244 0030 1520D4E5 		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 245 0034 023483E1 		orr	r3, r3, r2, lsl #8
 246 0038 010C53E3 		cmp	r3, #256
 247 003c 0300000A 		beq	.L30
 248 0040 020C53E3 		cmp	r3, #512
 249 0044 3800000A 		beq	.L31
 250              	.LVL23:
 251              	.L36:
 110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** ARPHeader_t *pxARPHeader;
 252              		.loc 1 110 0
 253 0048 0000A0E3 		mov	r0, #0
 254 004c 290000EA 		b	.L29
 255              	.LVL24:
 256              	.L30:
 119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 257              		.loc 1 119 0
 258 0050 2730D4E5 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
 259 0054 2660D4E5 		ldrb	r6, [r4, #38]	@ zero_extendqisi2
 260 0058 036486E1 		orr	r6, r6, r3, lsl #8
 261 005c 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 262 0060 036886E1 		orr	r6, r6, r3, lsl #16
 263 0064 2930D4E5 		ldrb	r3, [r4, #41]	@ zero_extendqisi2
 264 0068 036C86E1 		orr	r6, r6, r3, lsl #24
 132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				{
 265              		.loc 1 132 0
 266 006c 000056E1 		cmp	r6, r0
 267 0070 F4FFFF1A 		bne	.L36
 139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 268              		.loc 1 139 0
 269 0074 04509DE5 		ldr	r5, [sp, #4]
 270 0078 169084E2 		add	r9, r4, #22
 271 007c 0900A0E1 		mov	r0, r9
 142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 272              		.loc 1 142 0
 273 0080 0080A0E3 		mov	r8, #0
 139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 274              		.loc 1 139 0
 275 0084 0510A0E1 		mov	r1, r5
 276 0088 FEFFFFEB 		bl	vARPRefreshCacheEntry
 277              	.LVL25:
 143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					{
 278              		.loc 1 143 0
 279 008c 050056E1 		cmp	r6, r5
 142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 280              		.loc 1 142 0
 281 0090 0230A0E3 		mov	r3, #2
 282 0094 1480C4E5 		strb	r8, [r4, #20]
 147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 283              		.loc 1 147 0
 284 0098 0620A0E3 		mov	r2, #6
 142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 285              		.loc 1 142 0
 286 009c 1530C4E5 		strb	r3, [r4, #21]
 287 00a0 206084E2 		add	r6, r4, #32
 143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					{
 288              		.loc 1 143 0
 289 00a4 1500001A 		bne	.L32
 147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 290              		.loc 1 147 0
 291 00a8 90109FE5 		ldr	r1, .L39+4
 292 00ac 020084E0 		add	r0, r4, r2
 293 00b0 FEFFFFEB 		bl	memcpy
 294              	.LVL26:
 148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						pxARPHeader->ulTargetProtocolAddress = 0UL;
 295              		.loc 1 148 0
 296 00b4 0620A0E3 		mov	r2, #6
 297 00b8 0810A0E1 		mov	r1, r8
 298 00bc 0600A0E1 		mov	r0, r6
 299 00c0 FEFFFFEB 		bl	memset
 300              	.LVL27:
 149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					}
 301              		.loc 1 149 0
 302 00c4 2680C4E5 		strb	r8, [r4, #38]
 303 00c8 2780C4E5 		strb	r8, [r4, #39]
 304 00cc 2880C4E5 		strb	r8, [r4, #40]
 305 00d0 2980C4E5 		strb	r8, [r4, #41]
 306              	.L33:
 156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					memcpy( ( void* )pxARPHeader->ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POINTER, si
 307              		.loc 1 156 0
 308 00d4 0620A0E3 		mov	r2, #6
 309 00d8 5C109FE5 		ldr	r1, .L39
 310 00dc 0900A0E1 		mov	r0, r9
 311 00e0 FEFFFFEB 		bl	memcpy
 312              	.LVL28:
 157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 313              		.loc 1 157 0
 314 00e4 0420A0E3 		mov	r2, #4
 315 00e8 54109FE5 		ldr	r1, .L39+8
 316 00ec 0700A0E1 		mov	r0, r7
 317 00f0 FEFFFFEB 		bl	memcpy
 318              	.LVL29:
 159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				}
 319              		.loc 1 159 0
 320 00f4 0200A0E3 		mov	r0, #2
 321              	.LVL30:
 322              	.L29:
 185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 323              		.loc 1 185 0
 324 00f8 0CD08DE2 		add	sp, sp, #12
 325              		.cfi_remember_state
 326              		.cfi_def_cfa_offset 28
 327              		@ sp needed
 328 00fc F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}
 329              	.LVL31:
 330              	.L32:
 331              		.cfi_restore_state
 153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 						pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 332              		.loc 1 153 0
 333 0100 0910A0E1 		mov	r1, r9
 334 0104 0600A0E1 		mov	r0, r6
 335 0108 FEFFFFEB 		bl	memcpy
 336              	.LVL32:
 154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					}
 337              		.loc 1 154 0
 338 010c 5534E7E7 		ubfx	r3, r5, #8, #8
 339 0110 2650C4E5 		strb	r5, [r4, #38]
 340 0114 2730C4E5 		strb	r3, [r4, #39]
 341 0118 5538E7E7 		ubfx	r3, r5, #16, #8
 342 011c 255CA0E1 		lsr	r5, r5, #24
 343 0120 2830C4E5 		strb	r3, [r4, #40]
 344 0124 2950C4E5 		strb	r5, [r4, #41]
 345 0128 E9FFFFEA 		b	.L33
 346              	.LVL33:
 347              	.L31:
 165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* Process received ARP frame to see if there is a clash. */
 348              		.loc 1 165 0
 349 012c 04109DE5 		ldr	r1, [sp, #4]
 350 0130 160084E2 		add	r0, r4, #22
 351 0134 FEFFFFEB 		bl	vARPRefreshCacheEntry
 352              	.LVL34:
 353 0138 C2FFFFEA 		b	.L36
 354              	.L40:
 355              		.align	2
 356              	.L39:
 357 013c 00000000 		.word	xDefaultPartUDPPacketHeader
 358 0140 00000000 		.word	xBroadcastMACAddress
 359 0144 14000000 		.word	xDefaultPartUDPPacketHeader+20
 360              		.cfi_endproc
 361              	.LFE25:
 363              		.section	.text.eARPGetCacheEntry,"ax",%progbits
 364              		.align	2
 365              		.global	eARPGetCacheEntry
 366              		.syntax unified
 367              		.arm
 368              		.fpu neon
 370              	eARPGetCacheEntry:
 371              	.LFB27:
 341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** }
 344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #if( ipconfigUSE_ARP_REVERSED_LOOKUP == 1 )
 347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	eARPLookupResult_t eARPGetCacheEntryByMac( MACAddress_t * const pxMACAddress, uint32_t *pulIPAddre
 348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	BaseType_t x;
 350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	eARPLookupResult_t eReturn = eARPCacheMiss;
 351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* Loop through each entry in the ARP cache. */
 353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			/* Does this row in the ARP cache table hold an entry for the MAC
 356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			address being searched? */
 357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			if( memcmp( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) ) 
 358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				*pulIPAddress = xARPCache[ x ].ulIPAddress;
 360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				eReturn = eARPCacheHit;
 361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				break;
 362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		return eReturn;
 366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #endif /* ipconfigUSE_ARP_REVERSED_LOOKUP */
 368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** eARPLookupResult_t eARPGetCacheEntry( uint32_t *pulIPAddress, MACAddress_t * const pxMACAddress )
 372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** {
 372              		.loc 1 372 0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376              	.LVL35:
 377 0000 70402DE9 		push	{r4, r5, r6, lr}
 378              		.cfi_def_cfa_offset 16
 379              		.cfi_offset 4, -16
 380              		.cfi_offset 5, -12
 381              		.cfi_offset 6, -8
 382              		.cfi_offset 14, -4
 383              		.loc 1 372 0
 384 0004 00E0A0E1 		mov	lr, r0
 373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** eARPLookupResult_t eReturn;
 374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** uint32_t ulAddressToLookup;
 375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #if( ipconfigUSE_LLMNR == 1 )
 377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order. */
 378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* The LLMNR IP-address has a fixed virtual MAC address. */
 380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		eReturn = eARPCacheHit;
 382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	else
 384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #endif
 385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.
 385              		.loc 1 385 0
 386 0008 00309EE5 		ldr	r3, [lr]
 372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** eARPLookupResult_t eReturn;
 387              		.loc 1 372 0
 388 000c 0100A0E1 		mov	r0, r1
 389              	.LVL36:
 390              		.loc 1 385 0
 391 0010 010073E3 		cmn	r3, #1
 392 0014 0300000A 		beq	.L42
 386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 1
 393              		.loc 1 386 0 discriminator 1
 394 0018 B0109FE5 		ldr	r1, .L64
 395              	.LVL37:
 385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 1
 396              		.loc 1 385 0 discriminator 1
 397 001c 102091E5 		ldr	r2, [r1, #16]
 398 0020 020053E1 		cmp	r3, r2
 399 0024 0400001A 		bne	.L43
 400              	.L42:
 387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* This is a broadcast so uses the broadcast MAC address. */
 389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 401              		.loc 1 389 0
 402 0028 A4109FE5 		ldr	r1, .L64+4
 403 002c 0620A0E3 		mov	r2, #6
 404              	.L63:
 405              	.LBB4:
 406              	.LBB5:
 390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		eReturn = eARPCacheHit;
 391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* The IP address has not yet been assigned, so there is nothing that
 395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		can be done. */
 396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		eReturn = eCantSendPacket;
 397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	else
 399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		eReturn = eARPCacheMiss;
 401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetw
 403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #if( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
 405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			eReturn = prvCacheLookup( *pulIPAddress, pxMACAddress );
 406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			if( eReturn == eARPCacheHit )
 408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* The stack is configured to store 'remote IP addresses', i.e. addresses
 410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				belonging to a different the netmask.  prvCacheLookup() returned a hit, so
 411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				the MAC address is known */
 412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			else
 414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #endif
 415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* The IP address is off the local network, so look up the
 417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				hardware address of the router, if any. */
 418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				if( xNetworkAddressing.ulGatewayAddress != ( uint32_t )0u )
 419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				{
 420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				}
 422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				else
 423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				{
 424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					ulAddressToLookup = *pulIPAddress;
 425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				}
 426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		else
 429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			/* The IP address is on the local network, so lookup the requested
 431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			IP address directly. */
 432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			ulAddressToLookup = *pulIPAddress;
 433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		if( eReturn == eARPCacheMiss )
 436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			if( ulAddressToLookup == 0UL )
 438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* The address is not on the local network, and there is not a
 440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				router. */
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				eReturn = eCantSendPacket;
 442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			else
 444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				if( eReturn == eARPCacheMiss )
 448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				{
 449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					/* It might be that the ARP has to go to the gateway. */
 450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					*pulIPAddress = ulAddressToLookup;
 451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				}
 452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	return eReturn;
 457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** }
 458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup, MACAddress_t * const pxMACAdd
 462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** {
 463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** BaseType_t x;
 464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** eARPLookupResult_t eReturn = eARPCacheMiss;
 465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* Loop through each entry in the ARP cache. */
 467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* Does this row in the ARP cache table hold an entry for the IP address
 470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		being queried? */
 471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			/* A matching valid entry was found. */
 474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* This entry is waiting an ARP reply, so is not valid. */
 477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				eReturn = eCantSendPacket;
 478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			else
 480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* A valid entry was found. */
 482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 407              		.loc 1 482 0
 408 0030 FEFFFFEB 		bl	memcpy
 409              	.LVL38:
 483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				eReturn = eARPCacheHit;
 410              		.loc 1 483 0
 411 0034 0100A0E3 		mov	r0, #1
 412 0038 7080BDE8 		pop	{r4, r5, r6, pc}
 413              	.LVL39:
 414              	.L43:
 415              	.LBE5:
 416              	.LBE4:
 392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 417              		.loc 1 392 0
 418 003c 94209FE5 		ldr	r2, .L64+8
 419 0040 142092E5 		ldr	r2, [r2, #20]
 420 0044 000052E3 		cmp	r2, #0
 421 0048 1E00000A 		beq	.L52
 422              	.LVL40:
 402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 423              		.loc 1 402 0
 424 004c 04C091E5 		ldr	ip, [r1, #4]
 425 0050 032022E0 		eor	r2, r2, r3
 426 0054 0C0012E1 		tst	r2, ip
 427 0058 0200000A 		beq	.L45
 418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				{
 428              		.loc 1 418 0
 429 005c 082091E5 		ldr	r2, [r1, #8]
 430 0060 000052E3 		cmp	r2, #0
 431 0064 0200001A 		bne	.L46
 432              	.L45:
 433              	.LVL41:
 437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 434              		.loc 1 437 0
 435 0068 000053E3 		cmp	r3, #0
 436 006c 1500000A 		beq	.L52
 437 0070 0320A0E1 		mov	r2, r3
 438              	.LVL42:
 439              	.L46:
 440              	.LBB8:
 441              	.LBB6:
 471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 442              		.loc 1 471 0
 443 0074 60109FE5 		ldr	r1, .L64+12
 444              	.LBE6:
 445              	.LBE8:
 446 0078 00C0A0E3 		mov	ip, #0
 447 007c 0C40A0E3 		mov	r4, #12
 448              	.LVL43:
 449              	.L48:
 450 0080 940C03E0 		mul	r3, r4, ip
 451              	.LBB9:
 452              	.LBB7:
 453 0084 015093E7 		ldr	r5, [r3, r1]
 454 0088 020055E1 		cmp	r5, r2
 455 008c 0700001A 		bne	.L47
 474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 456              		.loc 1 474 0
 457 0090 032081E0 		add	r2, r1, r3
 458              	.LVL44:
 459 0094 0B20D2E5 		ldrb	r2, [r2, #11]	@ zero_extendqisi2
 460 0098 000052E3 		cmp	r2, #0
 461 009c 0900000A 		beq	.L52
 482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				eReturn = eARPCacheHit;
 462              		.loc 1 482 0
 463 00a0 043083E2 		add	r3, r3, #4
 464 00a4 0620A0E3 		mov	r2, #6
 465 00a8 031081E0 		add	r1, r1, r3
 466 00ac DFFFFFEA 		b	.L63
 467              	.LVL45:
 468              	.L47:
 467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 469              		.loc 1 467 0
 470 00b0 01C08CE2 		add	ip, ip, #1
 471              	.LVL46:
 472 00b4 06005CE3 		cmp	ip, #6
 473 00b8 F0FFFF1A 		bne	.L48
 474              	.LVL47:
 475              	.LBE7:
 476              	.LBE9:
 450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				}
 477              		.loc 1 450 0
 478 00bc 00208EE5 		str	r2, [lr]
 479 00c0 0000A0E3 		mov	r0, #0
 480              	.LVL48:
 457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 481              		.loc 1 457 0
 482 00c4 7080BDE8 		pop	{r4, r5, r6, pc}
 483              	.LVL49:
 484              	.L52:
 396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 485              		.loc 1 396 0
 486 00c8 0200A0E3 		mov	r0, #2
 487              	.LVL50:
 488 00cc 7080BDE8 		pop	{r4, r5, r6, pc}
 489              	.L65:
 490              		.align	2
 491              	.L64:
 492 00d0 00000000 		.word	xNetworkAddressing
 493 00d4 00000000 		.word	xBroadcastMACAddress
 494 00d8 00000000 		.word	xDefaultPartUDPPacketHeader
 495 00dc 00000000 		.word	.LANCHOR0
 496              		.cfi_endproc
 497              	.LFE27:
 499              		.section	.text.vARPSendGratuitous,"ax",%progbits
 500              		.align	2
 501              		.global	vARPSendGratuitous
 502              		.syntax unified
 503              		.arm
 504              		.fpu neon
 506              	vARPSendGratuitous:
 507              	.LFB30:
 484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			break;
 486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	return eReturn;
 490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** }
 491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** void vARPAgeCache( void )
 494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** {
 495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** BaseType_t x;
 496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** TickType_t xTimeNow;
 497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* Loop through each entry in the ARP cache. */
 499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* If the entry is valid (its age is greater than zero). */
 502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		if( xARPCache[ x ].ucAge > 0U )
 503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			/* Decrement the age value of the entry in this ARP cache table row.
 505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			When the age reaches zero it is no longer considered valid. */
 506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			( xARPCache[ x ].ucAge )--;
 507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			/* If the entry is not yet valid, then it is waiting an ARP
 509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			reply, and the ARP request should be retransmitted. */
 510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* This entry will get removed soon.  See if the MAC address is
 517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				still valid to prevent this happening. */
 518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
 519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			else
 522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* The age has just ticked down, with nothing to do. */
 524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			if( xARPCache[ x ].ucAge == 0u )
 527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* The entry is no longer valid.  Wipe it out. */
 529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
 530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				xARPCache[ x ].ulIPAddress = 0UL;
 531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	xTimeNow = xTaskGetTickCount ();
 536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( 
 538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xLastGratuitousARPTime = xTimeNow;
 541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** }
 543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** void vARPSendGratuitous( void )
 546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** {
 508              		.loc 1 546 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 0
 511              		@ frame_needed = 0, uses_anonymous_args = 0
 512              		@ link register save eliminated.
 547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
 548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	time vARPAgeCache() is called. */
 549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	xLastGratuitousARPTime = ( TickType_t ) 0;
 513              		.loc 1 549 0
 514 0000 0C309FE5 		ldr	r3, .L67
 515 0004 0020A0E3 		mov	r2, #0
 550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* Let the IP-task call vARPAgeCache(). */
 552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	xSendEventToIPTask( eARPTimerEvent );
 516              		.loc 1 552 0
 517 0008 0200A0E3 		mov	r0, #2
 549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 518              		.loc 1 549 0
 519 000c 002083E5 		str	r2, [r3]
 520              		.loc 1 552 0
 521 0010 FEFFFFEA 		b	xSendEventToIPTask
 522              	.LVL51:
 523              	.L68:
 524              		.align	2
 525              	.L67:
 526 0014 00000000 		.word	.LANCHOR1
 527              		.cfi_endproc
 528              	.LFE30:
 530              		.section	.text.vARPGenerateRequestPacket,"ax",%progbits
 531              		.align	2
 532              		.global	vARPGenerateRequestPacket
 533              		.syntax unified
 534              		.arm
 535              		.fpu neon
 537              	vARPGenerateRequestPacket:
 538              	.LFB32:
 553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** }
 554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
 557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** {
 558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* This is called from the context of the IP event task, so a block time
 561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	must not be used. */
 562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	if( pxNetworkBuffer != NULL )
 565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		vARPGenerateRequestPacket( pxNetworkBuffer );
 568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		#if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			BaseType_t xIndex;
 574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHE
 576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				{
 577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0u;
 578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				}
 579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		#endif
 583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** }
 587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
 589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** {
 539              		.loc 1 589 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543              	.LVL52:
 544 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 545              		.cfi_def_cfa_offset 24
 546              		.cfi_offset 4, -24
 547              		.cfi_offset 5, -20
 548              		.cfi_offset 6, -16
 549              		.cfi_offset 7, -12
 550              		.cfi_offset 8, -8
 551              		.cfi_offset 14, -4
 590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** ARPPacket_t *pxARPPacket;
 591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	pxARPPacket = ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	/* memcpy the const part of the header information into the correct
 595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	location in the packet.  This copies:
 596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xEthernetHeader.ulDestinationAddress
 597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xEthernetHeader.usFrameType;
 598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xARPHeader.usHardwareType;
 599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xARPHeader.usProtocolType;
 600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xARPHeader.ucHardwareAddressLength;
 601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xARPHeader.ucProtocolAddressLength;
 602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xARPHeader.usOperation;
 603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xARPHeader.xTargetHardwareAddress;
 604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	*/
 605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	memcpy( ( void * ) pxARPPacket, ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPac
 552              		.loc 1 605 0
 553 0004 2620A0E3 		mov	r2, #38
 592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 554              		.loc 1 592 0
 555 0008 184090E5 		ldr	r4, [r0, #24]
 556              	.LVL53:
 589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** ARPPacket_t *pxARPPacket;
 557              		.loc 1 589 0
 558 000c 0050A0E1 		mov	r5, r0
 606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_AD
 559              		.loc 1 606 0
 560 0010 0670A0E3 		mov	r7, #6
 561 0014 64609FE5 		ldr	r6, .L71
 605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_AD
 562              		.loc 1 605 0
 563 0018 64109FE5 		ldr	r1, .L71+4
 564 001c 0400A0E1 		mov	r0, r4
 565              	.LVL54:
 566 0020 FEFFFFEB 		bl	memcpy
 567              	.LVL55:
 568              		.loc 1 606 0
 569 0024 0720A0E1 		mov	r2, r7
 570 0028 0610A0E1 		mov	r1, r6
 571 002c 070084E0 		add	r0, r4, r7
 572 0030 FEFFFFEB 		bl	memcpy
 573              	.LVL56:
 607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_
 574              		.loc 1 607 0
 575 0034 0720A0E1 		mov	r2, r7
 576 0038 0610A0E1 		mov	r1, r6
 577 003c 160084E2 		add	r0, r4, #22
 578 0040 FEFFFFEB 		bl	memcpy
 579              	.LVL57:
 608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	memcpy( ( void* )pxARPPacket->xARPHeader.ucSenderProtocolAddress, ( void* )ipLOCAL_IP_ADDRESS_POIN
 580              		.loc 1 609 0
 581 0044 0420A0E3 		mov	r2, #4
 582 0048 141086E2 		add	r1, r6, #20
 583 004c 1C0084E2 		add	r0, r4, #28
 584 0050 FEFFFFEB 		bl	memcpy
 585              	.LVL58:
 610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 586              		.loc 1 610 0
 587 0054 1430D5E5 		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 588 0058 2630C4E5 		strb	r3, [r4, #38]
 589 005c 1530D5E5 		ldrb	r3, [r5, #21]	@ zero_extendqisi2
 590 0060 2730C4E5 		strb	r3, [r4, #39]
 591 0064 1630D5E5 		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 592 0068 2830C4E5 		strb	r3, [r4, #40]
 593 006c 1730D5E5 		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 594 0070 2930C4E5 		strb	r3, [r4, #41]
 611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 595              		.loc 1 612 0
 596 0074 2A30A0E3 		mov	r3, #42
 597 0078 1C3085E5 		str	r3, [r5, #28]
 598 007c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 599              	.L72:
 600              		.align	2
 601              	.L71:
 602 0080 00000000 		.word	xDefaultPartUDPPacketHeader
 603 0084 00000000 		.word	.LANCHOR2
 604              		.cfi_endproc
 605              	.LFE32:
 607              		.section	.text.FreeRTOS_OutputARPRequest,"ax",%progbits
 608              		.align	2
 609              		.global	FreeRTOS_OutputARPRequest
 610              		.syntax unified
 611              		.arm
 612              		.fpu neon
 614              	FreeRTOS_OutputARPRequest:
 615              	.LFB31:
 557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 616              		.loc 1 557 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              	.LVL59:
 621 0000 70402DE9 		push	{r4, r5, r6, lr}
 622              		.cfi_def_cfa_offset 16
 623              		.cfi_offset 4, -16
 624              		.cfi_offset 5, -12
 625              		.cfi_offset 6, -8
 626              		.cfi_offset 14, -4
 562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 627              		.loc 1 562 0
 628 0004 0010A0E3 		mov	r1, #0
 557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 629              		.loc 1 557 0
 630 0008 0050A0E1 		mov	r5, r0
 562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 631              		.loc 1 562 0
 632 000c 2A00A0E3 		mov	r0, #42
 633              	.LVL60:
 634 0010 FEFFFFEB 		bl	pxGetNetworkBufferWithDescriptor
 635              	.LVL61:
 564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 636              		.loc 1 564 0
 637 0014 004050E2 		subs	r4, r0, #0
 638 0018 7080BD08 		popeq	{r4, r5, r6, pc}
 566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		vARPGenerateRequestPacket( pxNetworkBuffer );
 639              		.loc 1 566 0
 640 001c 145084E5 		str	r5, [r4, #20]
 567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 641              		.loc 1 567 0
 642 0020 FEFFFFEB 		bl	vARPGenerateRequestPacket
 643              	.LVL62:
 584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 644              		.loc 1 584 0
 645 0024 0400A0E1 		mov	r0, r4
 646 0028 0110A0E3 		mov	r1, #1
 586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 647              		.loc 1 586 0
 648 002c 7040BDE8 		pop	{r4, r5, r6, lr}
 649              		.cfi_restore 14
 650              		.cfi_restore 6
 651              		.cfi_restore 5
 652              		.cfi_restore 4
 653              		.cfi_def_cfa_offset 0
 654              	.LVL63:
 584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 655              		.loc 1 584 0
 656 0030 FEFFFFEA 		b	xNetworkInterfaceOutput
 657              	.LVL64:
 658              		.cfi_endproc
 659              	.LFE31:
 661              		.section	.text.vARPAgeCache,"ax",%progbits
 662              		.align	2
 663              		.global	vARPAgeCache
 664              		.syntax unified
 665              		.arm
 666              		.fpu neon
 668              	vARPAgeCache:
 669              	.LFB29:
 494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** BaseType_t x;
 670              		.loc 1 494 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 0
 673              		@ frame_needed = 0, uses_anonymous_args = 0
 674              	.LVL65:
 675 0000 70402DE9 		push	{r4, r5, r6, lr}
 676              		.cfi_def_cfa_offset 16
 677              		.cfi_offset 4, -16
 678              		.cfi_offset 5, -12
 679              		.cfi_offset 6, -8
 680              		.cfi_offset 14, -4
 681 0004 90409FE5 		ldr	r4, .L91
 682 0008 485084E2 		add	r5, r4, #72
 683              	.LVL66:
 684              	.L82:
 502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 685              		.loc 1 502 0
 686 000c 0A30D4E5 		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 687 0010 000053E3 		cmp	r3, #0
 688 0014 0D00000A 		beq	.L78
 510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 689              		.loc 1 510 0
 690 0018 0B20D4E5 		ldrb	r2, [r4, #11]	@ zero_extendqisi2
 506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 691              		.loc 1 506 0
 692 001c 013043E2 		sub	r3, r3, #1
 693 0020 7330EFE6 		uxtb	r3, r3
 510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 694              		.loc 1 510 0
 695 0024 000052E3 		cmp	r2, #0
 506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 696              		.loc 1 506 0
 697 0028 0A30C4E5 		strb	r3, [r4, #10]
 510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 698              		.loc 1 510 0
 699 002c 0200001A 		bne	.L79
 700              	.L90:
 519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 701              		.loc 1 519 0
 702 0030 000094E5 		ldr	r0, [r4]
 703 0034 FEFFFFEB 		bl	FreeRTOS_OutputARPRequest
 704              	.LVL67:
 705 0038 010000EA 		b	.L80
 706              	.L79:
 514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 707              		.loc 1 514 0
 708 003c 030053E3 		cmp	r3, #3
 709 0040 FAFFFF9A 		bls	.L90
 710              	.L80:
 526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 711              		.loc 1 526 0
 712 0044 0A30D4E5 		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 713 0048 000053E3 		cmp	r3, #0
 530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 714              		.loc 1 530 0
 715 004c 00308405 		streq	r3, [r4]
 716              	.L78:
 717 0050 0C4084E2 		add	r4, r4, #12
 499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 718              		.loc 1 499 0 discriminator 2
 719 0054 050054E1 		cmp	r4, r5
 720 0058 EBFFFF1A 		bne	.L82
 535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 721              		.loc 1 535 0
 722 005c FEFFFFEB 		bl	xTaskGetTickCount
 723              	.LVL68:
 537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 724              		.loc 1 537 0
 725 0060 38309FE5 		ldr	r3, .L91+4
 535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 726              		.loc 1 535 0
 727 0064 0050A0E1 		mov	r5, r0
 728              	.LVL69:
 537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 729              		.loc 1 537 0
 730 0068 002093E5 		ldr	r2, [r3]
 731 006c 0340A0E1 		mov	r4, r3
 732 0070 000052E3 		cmp	r2, #0
 733 0074 0300000A 		beq	.L83
 537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 734              		.loc 1 537 0 is_stmt 0 discriminator 1
 735 0078 022040E0 		sub	r2, r0, r2
 736 007c 203E04E3 		movw	r3, #20000
 737 0080 030052E1 		cmp	r2, r3
 738 0084 7080BD98 		popls	{r4, r5, r6, pc}
 739              	.L83:
 539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		xLastGratuitousARPTime = xTimeNow;
 740              		.loc 1 539 0 is_stmt 1
 741 0088 14309FE5 		ldr	r3, .L91+8
 742 008c 140093E5 		ldr	r0, [r3, #20]
 743              	.LVL70:
 744 0090 FEFFFFEB 		bl	FreeRTOS_OutputARPRequest
 745              	.LVL71:
 540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 746              		.loc 1 540 0
 747 0094 005084E5 		str	r5, [r4]
 748 0098 7080BDE8 		pop	{r4, r5, r6, pc}
 749              	.L92:
 750              		.align	2
 751              	.L91:
 752 009c 00000000 		.word	.LANCHOR0
 753 00a0 00000000 		.word	.LANCHOR1
 754 00a4 00000000 		.word	xDefaultPartUDPPacketHeader
 755              		.cfi_endproc
 756              	.LFE29:
 758              		.section	.text.FreeRTOS_ClearARP,"ax",%progbits
 759              		.align	2
 760              		.global	FreeRTOS_ClearARP
 761              		.syntax unified
 762              		.arm
 763              		.fpu neon
 765              	FreeRTOS_ClearARP:
 766              	.LFB33:
 613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
 615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** }
 616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** void FreeRTOS_ClearARP( void )
 619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** {
 767              		.loc 1 619 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	memset( xARPCache, '\0', sizeof( xARPCache ) );
 772              		.loc 1 620 0
 773 0000 4820A0E3 		mov	r2, #72
 774 0004 0010A0E3 		mov	r1, #0
 775 0008 00009FE5 		ldr	r0, .L94
 776 000c FEFFFFEA 		b	memset
 777              	.LVL72:
 778              	.L95:
 779              		.align	2
 780              	.L94:
 781 0010 00000000 		.word	.LANCHOR0
 782              		.cfi_endproc
 783              	.LFE33:
 785              		.section	.text.FreeRTOS_PrintARPCache,"ax",%progbits
 786              		.align	2
 787              		.global	FreeRTOS_PrintARPCache
 788              		.syntax unified
 789              		.arm
 790              		.fpu neon
 792              	FreeRTOS_PrintARPCache:
 793              	.LFB34:
 621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** }
 622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** /*-----------------------------------------------------------*/
 623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** #if( ipconfigHAS_PRINTF != 0 ) || ( ipconfigHAS_DEBUG_PRINTF != 0 )
 625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	void FreeRTOS_PrintARPCache( void )
 627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	{
 794              		.loc 1 627 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 0
 797              		@ frame_needed = 0, uses_anonymous_args = 0
 798              	.LVL73:
 799 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 800              		.cfi_def_cfa_offset 20
 801              		.cfi_offset 4, -20
 802              		.cfi_offset 5, -16
 803              		.cfi_offset 6, -12
 804              		.cfi_offset 7, -8
 805              		.cfi_offset 14, -4
 628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	BaseType_t x, xCount = 0;
 806              		.loc 1 628 0
 807 0004 0050A0E3 		mov	r5, #0
 808 0008 84409FE5 		ldr	r4, .L107
 627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	BaseType_t x, xCount = 0;
 809              		.loc 1 627 0
 810 000c 1CD04DE2 		sub	sp, sp, #28
 811              		.cfi_def_cfa_offset 48
 629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		/* Loop through each entry in the ARP cache. */
 631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 812              		.loc 1 631 0
 813 0010 0560A0E1 		mov	r6, r5
 632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			if( ( xARPCache[ x ].ulIPAddress != 0ul ) && ( xARPCache[ x ].ucAge > 0U ) )
 634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				/* See if the MAC-address also matches, and we're all happy */
 636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				FreeRTOS_printf( ( "Arp %2ld: %3u - %16lxip : %02x:%02x:%02x : %02x:%02x:%02x\n",
 814              		.loc 1 636 0
 815 0014 7C709FE5 		ldr	r7, .L107+4
 816              	.LVL74:
 817              	.L98:
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 818              		.loc 1 633 0
 819 0018 003094E5 		ldr	r3, [r4]
 820 001c 000053E3 		cmp	r3, #0
 821 0020 1200000A 		beq	.L97
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			{
 822              		.loc 1 633 0 is_stmt 0 discriminator 1
 823 0024 0A20D4E5 		ldrb	r2, [r4, #10]	@ zero_extendqisi2
 824 0028 000052E3 		cmp	r2, #0
 825 002c 0F00000A 		beq	.L97
 826              		.loc 1 636 0 is_stmt 1
 827 0030 0910D4E5 		ldrb	r1, [r4, #9]	@ zero_extendqisi2
 637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					x,
 638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xARPCache[ x ].ucAge,
 639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xARPCache[ x ].ulIPAddress,
 640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xARPCache[ x ].xMACAddress.ucBytes[0],
 641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xARPCache[ x ].xMACAddress.ucBytes[1],
 642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xARPCache[ x ].xMACAddress.ucBytes[2],
 643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xARPCache[ x ].xMACAddress.ucBytes[3],
 644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xARPCache[ x ].xMACAddress.ucBytes[4],
 645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					xARPCache[ x ].xMACAddress.ucBytes[5] ) );
 646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 				xCount++;
 828              		.loc 1 646 0
 829 0034 015085E2 		add	r5, r5, #1
 830              	.LVL75:
 636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 					x,
 831              		.loc 1 636 0
 832 0038 0700A0E1 		mov	r0, r7
 833 003c 14108DE5 		str	r1, [sp, #20]
 834 0040 0810D4E5 		ldrb	r1, [r4, #8]	@ zero_extendqisi2
 835 0044 10108DE5 		str	r1, [sp, #16]
 836 0048 0710D4E5 		ldrb	r1, [r4, #7]	@ zero_extendqisi2
 837 004c 0C108DE5 		str	r1, [sp, #12]
 838 0050 0610D4E5 		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 839 0054 08108DE5 		str	r1, [sp, #8]
 840 0058 0510D4E5 		ldrb	r1, [r4, #5]	@ zero_extendqisi2
 841 005c 04108DE5 		str	r1, [sp, #4]
 842 0060 0410D4E5 		ldrb	r1, [r4, #4]	@ zero_extendqisi2
 843 0064 00108DE5 		str	r1, [sp]
 844 0068 0610A0E1 		mov	r1, r6
 845 006c FEFFFFEB 		bl	vLoggingPrintf
 846              	.LVL76:
 847              	.L97:
 631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		{
 848              		.loc 1 631 0 discriminator 2
 849 0070 016086E2 		add	r6, r6, #1
 850              	.LVL77:
 851 0074 0C4084E2 		add	r4, r4, #12
 852 0078 060056E3 		cmp	r6, #6
 853 007c E5FFFF1A 		bne	.L98
 647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 			}
 648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		}
 649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 
 650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 		FreeRTOS_printf( ( "Arp has %ld entries\n", xCount ) );
 854              		.loc 1 650 0
 855 0080 0510A0E1 		mov	r1, r5
 856 0084 10009FE5 		ldr	r0, .L107+8
 651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 857              		.loc 1 651 0
 858 0088 1CD08DE2 		add	sp, sp, #28
 859              		.cfi_def_cfa_offset 20
 860              		@ sp needed
 861 008c F040BDE8 		pop	{r4, r5, r6, r7, lr}
 862              		.cfi_restore 14
 863              		.cfi_restore 7
 864              		.cfi_restore 6
 865              		.cfi_restore 5
 866              		.cfi_restore 4
 867              		.cfi_def_cfa_offset 0
 868              	.LVL78:
 650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_ARP.c **** 	}
 869              		.loc 1 650 0
 870 0090 FEFFFFEA 		b	vLoggingPrintf
 871              	.LVL79:
 872              	.L108:
 873              		.align	2
 874              	.L107:
 875 0094 00000000 		.word	.LANCHOR0
 876 0098 00000000 		.word	.LC0
 877 009c 3B000000 		.word	.LC1
 878              		.cfi_endproc
 879              	.LFE34:
 881              		.section	.bss.xARPCache,"aw",%nobits
 882              		.align	2
 883              		.set	.LANCHOR0,. + 0
 886              	xARPCache:
 887 0000 00000000 		.space	72
 887      00000000 
 887      00000000 
 887      00000000 
 887      00000000 
 888              		.section	.bss.xLastGratuitousARPTime,"aw",%nobits
 889              		.align	2
 890              		.set	.LANCHOR1,. + 0
 893              	xLastGratuitousARPTime:
 894 0000 00000000 		.space	4
 895              		.section	.rodata.FreeRTOS_PrintARPCache.str1.1,"aMS",%progbits,1
 896              	.LC0:
 897 0000 41727020 		.ascii	"Arp %2ld: %3u - %16lxip : %02x:%02x:%02x : %02x:%02"
 897      25326C64 
 897      3A202533 
 897      75202D20 
 897      2531366C 
 898 0033 783A2530 		.ascii	"x:%02x\012\000"
 898      32780A00 
 899              	.LC1:
 900 003b 41727020 		.ascii	"Arp has %ld entries\012\000"
 900      68617320 
 900      256C6420 
 900      656E7472 
 900      6965730A 
 901              		.section	.rodata.xDefaultPartARPPacketHeader,"a",%progbits
 902              		.set	.LANCHOR2,. + 0
 905              	xDefaultPartARPPacketHeader:
 906 0000 FF       		.byte	-1
 907 0001 FF       		.byte	-1
 908 0002 FF       		.byte	-1
 909 0003 FF       		.byte	-1
 910 0004 FF       		.byte	-1
 911 0005 FF       		.byte	-1
 912 0006 00       		.byte	0
 913 0007 00       		.byte	0
 914 0008 00       		.byte	0
 915 0009 00       		.byte	0
 916 000a 00       		.byte	0
 917 000b 00       		.byte	0
 918 000c 08       		.byte	8
 919 000d 06       		.byte	6
 920 000e 00       		.byte	0
 921 000f 01       		.byte	1
 922 0010 08       		.byte	8
 923 0011 00       		.byte	0
 924 0012 06       		.byte	6
 925 0013 04       		.byte	4
 926 0014 00       		.byte	0
 927 0015 01       		.byte	1
 928 0016 00       		.byte	0
 929 0017 00       		.byte	0
 930 0018 00       		.byte	0
 931 0019 00       		.byte	0
 932 001a 00       		.byte	0
 933 001b 00       		.byte	0
 934 001c 00       		.byte	0
 935 001d 00       		.byte	0
 936 001e 00       		.byte	0
 937 001f 00       		.byte	0
 938 0020 00       		.byte	0
 939 0021 00       		.byte	0
 940 0022 00       		.byte	0
 941 0023 00       		.byte	0
 942 0024 00       		.byte	0
 943 0025 00       		.byte	0
 944              		.text
 945              	.Letext0:
 946              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 947              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 948              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 949              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 950              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 951              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 952              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 953              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 954              		.file 10 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\unity\\src/unity_internals.h"
 955              		.file 11 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 956              		.file 12 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS\\portable\\GCC\\ARM_CA9_RZA2M/por
 957              		.file 13 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/list.h"
 958              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 959              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 960              		.file 16 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 961              		.file 17 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 962              		.file 18 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 963              		.file 19 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 964              		.file 20 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 965              		.file 21 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_IP.h"
 966              		.file 22 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_TCP_WI
 967              		.file 23 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_IP_Pri
 968              		.file 24 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_ARP.h"
 969              		.file 25 "D:\\Work\\DeviceTester\\amazon-freertos\\tests\\renesas\\rza2m-gr-mango\\common\\config_
 970              		.file 26 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/NetworkBufferMa
 971              		.file 27 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/NetworkInterfac
 972              		.file 28 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/task.h"
 973              		.file 29 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
DEFINED SYMBOLS
                            *ABS*:00000000 FreeRTOS_ARP.c
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:17     .text.vARPRefreshCacheEntry:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:23     .text.vARPRefreshCacheEntry:00000000 vARPRefreshCacheEntry
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:196    .text.vARPRefreshCacheEntry:0000017c $d
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:204    .text.eARPProcessPacket:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:210    .text.eARPProcessPacket:00000000 eARPProcessPacket
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:357    .text.eARPProcessPacket:0000013c $d
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:364    .text.eARPGetCacheEntry:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:370    .text.eARPGetCacheEntry:00000000 eARPGetCacheEntry
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:492    .text.eARPGetCacheEntry:000000d0 $d
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:500    .text.vARPSendGratuitous:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:506    .text.vARPSendGratuitous:00000000 vARPSendGratuitous
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:526    .text.vARPSendGratuitous:00000014 $d
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:531    .text.vARPGenerateRequestPacket:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:537    .text.vARPGenerateRequestPacket:00000000 vARPGenerateRequestPacket
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:602    .text.vARPGenerateRequestPacket:00000080 $d
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:608    .text.FreeRTOS_OutputARPRequest:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:614    .text.FreeRTOS_OutputARPRequest:00000000 FreeRTOS_OutputARPRequest
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:662    .text.vARPAgeCache:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:668    .text.vARPAgeCache:00000000 vARPAgeCache
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:752    .text.vARPAgeCache:0000009c $d
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:759    .text.FreeRTOS_ClearARP:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:765    .text.FreeRTOS_ClearARP:00000000 FreeRTOS_ClearARP
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:781    .text.FreeRTOS_ClearARP:00000010 $d
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:786    .text.FreeRTOS_PrintARPCache:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:792    .text.FreeRTOS_PrintARPCache:00000000 FreeRTOS_PrintARPCache
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:875    .text.FreeRTOS_PrintARPCache:00000094 $d
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:882    .bss.xARPCache:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:886    .bss.xARPCache:00000000 xARPCache
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:889    .bss.xLastGratuitousARPTime:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:893    .bss.xLastGratuitousARPTime:00000000 xLastGratuitousARPTime
C:\Users\a5089698\AppData\Local\Temp\cc2WrOao.s:905    .rodata.xDefaultPartARPPacketHeader:00000000 xDefaultPartARPPacketHeader
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcmp
memcpy
xDefaultPartUDPPacketHeader
xNetworkAddressing
memset
xBroadcastMACAddress
xSendEventToIPTask
pxGetNetworkBufferWithDescriptor
xNetworkInterfaceOutput
xTaskGetTickCount
vLoggingPrintf
