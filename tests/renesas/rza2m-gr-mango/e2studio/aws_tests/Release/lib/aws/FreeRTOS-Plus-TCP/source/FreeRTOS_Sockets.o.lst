   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"FreeRTOS_Sockets.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.uxStreamBufferGetSize,"ax",%progbits
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  20              		.fpu neon
  22              	uxStreamBufferGetSize:
  23              	.LFB16:
  24              		.file 1 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_Stream_
   1:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*
   2:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * FreeRTOS+TCP V2.0.10
   3:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *
   5:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * the Software without restriction, including without limitation the rights to
   8:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * subject to the following conditions:
  11:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *
  12:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * The above copyright notice and this permission notice shall be included in all
  13:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * copies or substantial portions of the Software.
  14:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *
  15:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *
  22:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * http://aws.amazon.com/freertos
  23:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * http://www.FreeRTOS.org
  24:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  */
  25:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  26:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*
  27:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *	FreeRTOS_Stream_Buffer.h
  28:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *
  29:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *	A cicular character buffer
  30:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *	An implementation of a circular buffer without a length field
  31:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *	If LENGTH defines the size of the buffer, a maximum of (LENGT-1) bytes can be stored
  32:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *	In order to add or read data from the buffer, memcpy() will be called at most 2 times
  33:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  */
  34:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  35:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** #ifndef FREERTOS_STREAM_BUFFER_H
  36:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** #define	FREERTOS_STREAM_BUFFER_H
  37:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  38:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** #ifdef __cplusplus
  39:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** extern "C" {
  40:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** #endif
  41:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  42:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** typedef struct xSTREAM_BUFFER {
  43:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxTail;		/* next item to read */
  44:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxMid;		/* iterator within the valid items */
  45:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxHead;		/* next position store a new item */
  46:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxFront;	/* iterator within the free space */
  47:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	size_t LENGTH;				/* const value: number of reserved elements */
  48:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	uint8_t ucArray[ sizeof( size_t ) ];
  49:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** } StreamBuffer_t;
  50:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  51:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferClear( StreamBuffer_t *pxBuffer );
  52:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferClear( StreamBuffer_t *pxBuffer )
  53:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
  54:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	/* Make the circular buffer empty */
  55:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxHead = 0u;
  56:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxTail = 0u;
  57:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxFront = 0u;
  58:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxMid = 0u;
  59:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
  60:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
  61:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  62:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower,
  63:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower,
  64:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
  65:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
  66:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxCount;
  67:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
  69:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( uxCount >= pxBuffer->LENGTH )
  70:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
  71:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		uxCount -= pxBuffer->LENGTH;
  72:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
  73:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  74:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxCount;
  75:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
  76:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
  77:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  78:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLow
  79:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLow
  80:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
  81:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Returns the distance between uxLower and uxUpper */
  82:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxCount;
  83:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
  85:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
  86:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
  87:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		uxCount -= pxBuffer->LENGTH;
  88:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
  89:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  90:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxCount;
  91:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
  92:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
  93:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  94:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer );
  95:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer )
  96:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
  97:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Returns the number of items which can still be added to uxHead
  98:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** before hitting on uxTail */
  99:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxHead = pxBuffer->uxHead;
 100:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 101:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 102:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 103:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 104:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 105:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 106:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer );
 107:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer )
 108:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
 109:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Distance between uxFront and uxTail
 110:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** or the number of items which can still be added to uxFront,
 111:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** before hitting on uxTail */
 112:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 113:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxFront = pxBuffer->uxFront;
 114:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 115:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 116:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 117:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 118:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 119:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 120:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
 121:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
 122:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
  25              		.loc 1 122 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
  31              	.LBB25:
  32              	.LBB26:
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
  33              		.loc 1 84 0
  34 0000 102090E5 		ldr	r2, [r0, #16]
  35              	.LBE26:
  36              	.LBE25:
 123:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Returns the number of items which can be read from uxTail
 124:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** before reaching uxHead */
 125:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxHead = pxBuffer->uxHead;
  37              		.loc 1 125 0
  38 0004 083090E5 		ldr	r3, [r0, #8]
  39              	.LVL1:
 126:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
  40              		.loc 1 126 0
  41 0008 001090E5 		ldr	r1, [r0]
  42              	.LVL2:
  43              	.LBB28:
  44              	.LBB27:
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
  45              		.loc 1 84 0
  46 000c 020083E0 		add	r0, r3, r2
  47              	.LVL3:
  48 0010 010040E0 		sub	r0, r0, r1
  49              	.LVL4:
  85:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
  50              		.loc 1 85 0
  51 0014 000052E1 		cmp	r2, r0
  87:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
  52              		.loc 1 87 0
  53 0018 02004090 		subls	r0, r0, r2
  54              	.LVL5:
  55              	.LBE27:
  56              	.LBE28:
 127:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 128:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 129:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
  57              		.loc 1 129 0
  58 001c 1EFF2FE1 		bx	lr
  59              		.cfi_endproc
  60              	.LFE16:
  62              		.section	.text.pxListFindListItemWithValue,"ax",%progbits
  63              		.align	2
  64              		.syntax unified
  65              		.arm
  66              		.fpu neon
  68              	pxListFindListItemWithValue:
  69              	.LFB38:
  70              		.file 2 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source/FreeRTOS_Sockets.c"
   1:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*
   2:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * FreeRTOS+TCP V2.0.10
   3:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  *
   5:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * the Software without restriction, including without limitation the rights to
   8:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * subject to the following conditions:
  11:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  *
  12:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * The above copyright notice and this permission notice shall be included in all
  13:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * copies or substantial portions of the Software.
  14:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  *
  15:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  *
  22:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * http://aws.amazon.com/freertos
  23:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * http://www.FreeRTOS.org
  24:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  */
  25:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  26:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* Standard includes. */
  27:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include <stdint.h>
  28:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include <stdio.h>
  29:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  30:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* FreeRTOS includes. */
  31:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include "FreeRTOS.h"
  32:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include "task.h"
  33:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include "queue.h"
  34:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include "semphr.h"
  35:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  36:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* FreeRTOS+TCP includes. */
  37:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include "FreeRTOS_UDP_IP.h"
  38:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include "FreeRTOS_IP.h"
  39:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include "FreeRTOS_Sockets.h"
  40:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include "FreeRTOS_IP_Private.h"
  41:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include "FreeRTOS_DNS.h"
  42:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #include "NetworkBufferManagement.h"
  43:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  44:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* The ItemValue of the sockets xBoundSocketListItem member holds the socket's
  45:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** port number. */
  46:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #define socketSET_SOCKET_PORT( pxSocket, usPort ) listSET_LIST_ITEM_VALUE( ( &( ( pxSocket )->xBoun
  47:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #define socketGET_SOCKET_PORT( pxSocket ) listGET_LIST_ITEM_VALUE( ( &( ( pxSocket )->xBoundSocketL
  48:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  49:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* Test if a socket it bound which means it is either included in
  50:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** xBoundUDPSocketsList or xBoundTCPSocketsList */
  51:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #define socketSOCKET_IS_BOUND( pxSocket )	  ( listLIST_ITEM_CONTAINER( & ( pxSocket )->xBoundSocket
  52:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  53:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* If FreeRTOS_sendto() is called on a socket that is not bound to a port
  54:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** number then, depending on the FreeRTOSIPConfig.h settings, it might be that a
  55:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** port number is automatically generated for the socket.  Automatically generated
  56:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** port numbers will be between socketAUTO_PORT_ALLOCATION_START_NUMBER and
  57:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 0xffff.
  58:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  59:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** Per https://tools.ietf.org/html/rfc6056, "the dynamic ports consist of the range
  60:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 49152-65535. However, ephemeral port selection algorithms should use the whole
  61:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** range 1024-65535" excluding those already in use (inbound or outbound). */
  62:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if !defined( socketAUTO_PORT_ALLOCATION_START_NUMBER )
  63:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#define socketAUTO_PORT_ALLOCATION_START_NUMBER ( ( uint16_t ) 0x0400 )
  64:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif
  65:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  66:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #define socketAUTO_PORT_ALLOCATION_MAX_NUMBER   ( ( uint16_t ) 0xffff )
  67:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  68:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* The number of octets that make up an IP address. */
  69:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #define socketMAX_IP_ADDRESS_OCTETS		4u
  70:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  71:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* A block time of 0 simply means "don't block". */
  72:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #define socketDONT_BLOCK				( ( TickType_t ) 0 )
  73:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  74:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ( ipconfigUSE_TCP == 1 ) && !defined( ipTCP_TIMER_PERIOD_MS ) )
  75:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#define ipTCP_TIMER_PERIOD_MS	( 1000 )
  76:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif
  77:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  78:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* The next private port number to use when binding a client socket is stored in
  79:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** the usNextPortToUse[] array - which has either 1 or two indexes depending on
  80:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** whether TCP is being supported. */
  81:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
  82:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#define socketPROTOCOL_COUNT		2
  83:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #else
  84:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#define socketPROTOCOL_COUNT		1
  85:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif
  86:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  87:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* Indexes into the usNextPortToUse[] array for UDP and TCP sockets
  88:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** respectively. */
  89:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #define socketNEXT_UDP_PORT_NUMBER_INDEX	0
  90:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #define socketNEXT_TCP_PORT_NUMBER_INDEX	1
  91:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  92:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  93:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
  94:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
  95:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*
  96:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * Allocate the next port number from the private allocation range.
  97:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * TCP and UDP each have their own series of port numbers
  98:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * ulProtocol is either ipPROTOCOL_UDP or ipPROTOCOL_TCP
  99:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  */
 100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol );
 101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*
 103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * Return the list item from within pxList that has an item value of
 104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * xWantedItemValue.  If there is no such list item return NULL.
 105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  */
 106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItem
 107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*
 109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * Return pdTRUE only if pxSocket is valid and bound, as far as can be
 110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * determined.
 111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  */
 112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** static BaseType_t prvValidSocket( FreeRTOS_Socket_t *pxSocket, BaseType_t xProtocol, BaseType_t xIs
 113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*
 115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * Before creating a socket, check the validity of the parameters used
 116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * and find the size of the socket space, which is different for UDP and TCP
 117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  */
 118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** static BaseType_t prvDetermineSocketSize( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtoco
 119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
 121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
 122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * Create a txStream or a rxStream, depending on the parameter 'xIsInputStream'
 123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
 124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static StreamBuffer_t *prvTCPCreateStream (FreeRTOS_Socket_t *pxSocket, BaseType_t xIsInputStream 
 125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP == 1 */
 126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
 128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
 129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * Called from FreeRTOS_send(): some checks which will be done before
 130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * sending a TCP packed.
 131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
 132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static int32_t prvTCPSendCheck( FreeRTOS_Socket_t *pxSocket, size_t xDataLength );
 133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
 134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
 136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
 137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * When a child socket gets closed, make sure to update the child-count of the parent
 138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
 139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static void prvTCPSetSocketCount( FreeRTOS_Socket_t *pxSocketToDelete );
 140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif  /* ipconfigUSE_TCP == 1 */
 141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
 143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
 144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * Called from FreeRTOS_connect(): make some checks and if allowed, send a
 145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * message to the IP-task to start connecting to a remote socket
 146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
 147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr *pxAdd
 148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
 149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Executed by the IP-task, it will check all sockets belonging to a set */
 153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static FreeRTOS_Socket_t *prvFindSelectedSocket( SocketSelect_t *pxSocketSet );
 154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
 156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* The list that contains mappings between sockets and port numbers.  Accesses
 159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** to this list must be protected by critical sections of one kind or another. */
 160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** List_t xBoundUDPSocketsList;
 161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if ipconfigUSE_TCP == 1
 163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	List_t xBoundTCPSocketsList;
 164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP == 1 */
 165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** static BaseType_t prvValidSocket( FreeRTOS_Socket_t *pxSocket, BaseType_t xProtocol, BaseType_t xIs
 169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
 170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xReturn = pdTRUE;
 171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xReturn = pdFALSE;
 175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else if( ( xIsBound != pdFALSE ) && ( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE ) )
 177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* The caller expects the socket to be bound, but it isn't. */
 179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xReturn = pdFALSE;
 180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Socket has a wrong type (UDP != TCP). */
 184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xReturn = pdFALSE;
 185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return xReturn;
 188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
 189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t vNetworkSocketsInit( void )
 192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
 193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	vListInitialise( &xBoundUDPSocketsList );
 194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#if( ipconfigUSE_TCP == 1 )
 196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		vListInitialise( &xBoundTCPSocketsList );
 198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#endif  /* ipconfigUSE_TCP == 1 */
 200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return pdTRUE;
 202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
 203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** static BaseType_t prvDetermineSocketSize( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtoco
 206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
 207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xReturn = pdPASS;
 208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket;
 209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Asserts must not appear before it has been determined that the network
 211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	task is ready - otherwise the asserts will fail. */
 212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( xIPIsNetworkTaskReady() == pdFALSE )
 213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xReturn = pdFAIL;
 215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else
 217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Only Ethernet is currently supported. */
 219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		configASSERT( xDomain == FREERTOS_AF_INET );
 220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Check if the UDP socket-list has been initialised. */
 222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ipconfigUSE_TCP == 1 )
 224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Check if the TCP socket-list has been initialised. */
 226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#endif  /* ipconfigUSE_TCP == 1 */
 229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xProtocol == FREERTOS_IPPROTO_UDP )
 231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xType != FREERTOS_SOCK_DGRAM )
 233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = pdFAIL;
 235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				configASSERT( xReturn );
 236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* In case a UDP socket is created, do not allocate space for TCP data. */
 238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
 241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( xProtocol == FREERTOS_IPPROTO_TCP )
 242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xType != FREERTOS_SOCK_STREAM )
 244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = pdFAIL;
 246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				configASSERT( xReturn );
 247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif  /* ipconfigUSE_TCP == 1 */
 252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
 253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = pdFAIL;
 255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			configASSERT( xReturn );
 256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* In case configASSERT() is not used */
 259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	( void )xDomain;
 260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return xReturn;
 261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
 262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* FreeRTOS_socket() allocates and initiates a socket */
 265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** Socket_t FreeRTOS_socket( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol )
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
 267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket;
 268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** size_t uxSocketSize;
 269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** EventGroupHandle_t xEventGroup;
 270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** Socket_t xReturn;
 271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xReturn = FREERTOS_INVALID_SOCKET;
 275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else
 277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Allocate the structure that will hold the socket information.  The
 279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		size depends on the type of socket: UDP sockets need less space.  A
 280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		define 'pvPortMallocSocket' will used to allocate the necessary space.
 281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		By default it points to the FreeRTOS function 'pvPortMalloc()'. */
 282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket == NULL )
 285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			iptraceFAILED_TO_CREATE_SOCKET();
 288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( ( xEventGroup = xEventGroupCreate() ) == NULL )
 290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			vPortFreeSocket( pxSocket );
 292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			iptraceFAILED_TO_CREATE_EVENT_GROUP();
 294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
 296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Clear the entire space to avoid nulling individual entries */
 298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			memset( pxSocket, '\0', uxSocketSize );
 299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->xEventGroup = xEventGroup;
 301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Initialise the socket's members.  The semaphore will be created
 303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if the socket is bound to an address, for now the pointer to the
 304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			semaphore is just set to NULL to show it has not been created. */
 305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xProtocol == FREERTOS_IPPROTO_UDP )
 306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#if( ipconfigUDP_MAX_RX_PACKETS > 0 )
 310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
 312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
 314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->xSendBlockTime	= ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->ucProtocol		= ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#if( ipconfigUSE_TCP == 1 )
 325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xProtocol == FREERTOS_IPPROTO_TCP )
 327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* StreamSize is expressed in number of bytes */
 329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Round up buffer sizes to nearest multiple of MSS */
 330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.usInitMSS	= pxSocket->u.xTCP.usCurMSS = ipconfigTCP_MSS;
 331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, 
 333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Use half of the buffer size of the TCP windows */
 334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#if ( ipconfigUSE_TCP_WIN == 1 )
 335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxR
 337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxT
 338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#else
 340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxRxWinSize  = 1u;
 342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxTxWinSize  = 1u;
 343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#endif
 345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* The above values are just defaults, and can be overridden by
 346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					calling FreeRTOS_setsockopt().  No buffers will be allocated until a
 347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					socket is connected and data is exchanged. */
 348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#endif  /* ipconfigUSE_TCP == 1 */
 351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xReturn = ( Socket_t ) pxSocket;
 354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Remove compiler warnings in the case the configASSERT() is not defined. */
 357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	( void ) xDomain;
 358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return xReturn;
 360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
 361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	SocketSet_t FreeRTOS_CreateSocketSet( void )
 366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	SocketSelect_t *pxSocketSet;
 368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxSocketSet = ( SocketSelect_t * ) pvPortMalloc( sizeof( *pxSocketSet ) );
 370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocketSet != NULL )
 372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			memset( pxSocketSet, '\0', sizeof( *pxSocketSet ) );
 374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocketSet->xSelectGroup = xEventGroupCreate();
 375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocketSet->xSelectGroup == NULL )
 377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				vPortFree( ( void* ) pxSocketSet );
 379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocketSet = NULL;
 380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return ( SocketSet_t * ) pxSocketSet;
 384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
 387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	void FreeRTOS_DeleteSocketSet( SocketSet_t xSocketSet )
 392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		SocketSelect_t *pxSocketSet = ( SocketSelect_t*) xSocketSet;
 394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		vEventGroupDelete( pxSocketSet->xSelectGroup );
 396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		vPortFree( ( void* ) pxSocketSet );
 397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
 400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Add a socket to a set */
 405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	void FreeRTOS_FD_SET( Socket_t xSocket, SocketSet_t xSocketSet, EventBits_t xSelectBits )
 406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	SocketSelect_t *pxSocketSet = ( SocketSelect_t * ) xSocketSet;
 409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		configASSERT( pxSocket != NULL );
 411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		configASSERT( xSocketSet != NULL );
 412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Make sure we're not adding bits which are reserved for internal use,
 414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		such as eSELECT_CALL_IP */
 415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxSocket->xSelectBits |= ( xSelectBits & eSELECT_ALL );
 416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( ( pxSocket->xSelectBits & eSELECT_ALL ) != 0 )
 418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Adding a socket to a socket set. */
 420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->pxSocketSet = ( SocketSelect_t * ) xSocketSet;
 421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Now have the IP-task call vSocketSelect() to see if the set contains
 423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			any sockets which are 'ready' and set the proper bits.
 424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			By setting 'bApiCalled = false', vSocketSelect() knows that it was
 425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			not called from a user API */
 426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocketSet->bApiCalled = pdFALSE;
 427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			prvFindSelectedSocket( pxSocketSet );
 428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
 432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Clear select bits for a socket
 436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	If the mask becomes 0, remove the socket from the set */
 437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	void FreeRTOS_FD_CLR( Socket_t xSocket, SocketSet_t xSocketSet, EventBits_t xSelectBits )
 438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		configASSERT( pxSocket != NULL );
 442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		configASSERT( xSocketSet != NULL );
 443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxSocket->xSelectBits &= ~( xSelectBits & eSELECT_ALL );
 445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( ( pxSocket->xSelectBits & eSELECT_ALL ) != 0 )
 446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->pxSocketSet = ( SocketSelect_t *)xSocketSet;
 448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
 450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* disconnect it from the socket set */
 452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->pxSocketSet = ( SocketSelect_t *)NULL;
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
 457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Test if a socket belongs to a socket-set */
 463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	EventBits_t FreeRTOS_FD_ISSET( Socket_t xSocket, SocketSet_t xSocketSet )
 464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	EventBits_t xReturn;
 466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		configASSERT( pxSocket != NULL );
 469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		configASSERT( xSocketSet != NULL );
 470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xSocketSet == ( SocketSet_t ) pxSocket->pxSocketSet )
 472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Make sure we're not adding bits which are reserved for internal
 474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			use. */
 475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = pxSocket->xSocketBits & eSELECT_ALL;
 476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
 478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = 0;
 480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xReturn;
 483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
 486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* The select() statement: wait for an event to occur on any of the sockets
 491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	included in a socket set */
 492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_select( SocketSet_t xSocketSet, TickType_t xBlockTimeTicks )
 493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TimeOut_t xTimeOut;
 495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TickType_t xRemainingTime;
 496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	SocketSelect_t *pxSocketSet = ( SocketSelect_t*) xSocketSet;
 497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xResult;
 498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		configASSERT( xSocketSet != NULL );
 500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Only in the first round, check for non-blocking */
 502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xRemainingTime = xBlockTimeTicks;
 503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Fetch the current time */
 505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		vTaskSetTimeOutState( &xTimeOut );
 506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		for( ;; )
 508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Find a socket which might have triggered the bit
 510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			This function might return immediately or block for a limited time */
 511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = ( BaseType_t ) xEventGroupWaitBits( pxSocketSet->xSelectGroup, eSELECT_ALL, pdFALSE, p
 512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#if( ipconfigSUPPORT_SIGNALS != 0 )
 514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( ( xResult & eSELECT_INTR ) != 0u )
 516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xEventGroupClearBits( pxSocketSet->xSelectGroup, eSELECT_INTR );
 518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					FreeRTOS_debug_printf( ( "FreeRTOS_select: interrupted\n" ) );
 519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
 520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#endif /* ipconfigSUPPORT_SIGNALS */
 523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Have the IP-task find the socket which had an event */
 525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocketSet->bApiCalled = pdTRUE;
 526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			prvFindSelectedSocket( pxSocketSet );
 527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = ( BaseType_t ) xEventGroupGetBits( pxSocketSet->xSelectGroup );
 529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xResult != 0 )
 531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
 533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Has the timeout been reached? */
 536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
 539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xResult;
 543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigSUPPORT_SELECT_FUNCTION */
 546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Send a message to the IP-task to have it check all sockets belonging to
 551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	'pxSocketSet' */
 552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static FreeRTOS_Socket_t *prvFindSelectedSocket( SocketSelect_t *pxSocketSet )
 553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	IPStackEvent_t xSelectEvent;
 555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *xReturn;
 556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xSelectEvent.eEventType = eSocketSelectEvent;
 558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xSelectEvent.pvData = ( void * ) pxSocketSet;
 559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* while the IP-task works on the request, the API will block on
 561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		'eSELECT_CALL_IP'.  So clear it first. */
 562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xEventGroupClearBits( pxSocketSet->xSelectGroup, eSELECT_CALL_IP );
 563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Now send the socket select event */
 565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xSendEventStructToIPTask( &xSelectEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Oops, we failed to wake-up the IP task. No use to wait for it. */
 568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			FreeRTOS_debug_printf( ( "prvFindSelectedSocket: failed\n" ) );
 569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = NULL;
 570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
 572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* As soon as the IP-task is ready, it will set 'eSELECT_CALL_IP' to
 574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			wakeup the calling API */
 575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xEventGroupWaitBits( pxSocketSet->xSelectGroup, eSELECT_CALL_IP, pdTRUE, pdFALSE, portMAX_DELAY 
 576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Return 'pxSocket' which is set by the IP-task */
 578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = pxSocketSet->pxSocket;
 579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xReturn;
 582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
 585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*
 588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * FreeRTOS_recvfrom: receive data from a bound socket
 589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * In this library, the function can only be used with connectionsless sockets
 590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * (UDP)
 591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  */
 592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** int32_t FreeRTOS_recvfrom( Socket_t xSocket, void *pvBuffer, size_t xBufferLength, BaseType_t xFlag
 593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
 594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t lPacketCount = 0;
 595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a w
 598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xTimed = pdFALSE;
 599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** TimeOut_t xTimeOut;
 600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** int32_t lReturn;
 601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** EventBits_t xEventBits = ( EventBits_t ) 0;
 602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return -pdFREERTOS_ERRNO_EINVAL;
 606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) )
 609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* The function prototype is designed to maintain the expected Berkeley
 611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	sockets standard, but this implementation does not use all the parameters. */
 612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	( void ) pxSourceAddressLength;
 613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	while( lPacketCount == 0 )
 615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xTimed == pdFALSE )
 617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Check to see if the socket is non blocking on the first
 619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			iteration.  */
 620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xRemainingTime = pxSocket->xReceiveBlockTime;
 621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xRemainingTime == ( TickType_t ) 0 )
 623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#if( ipconfigSUPPORT_SIGNALS != 0 )
 625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Just check for the interrupt flag. */
 627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_INTR,
 628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, socketDONT_BLOCK );
 629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#endif /* ipconfigSUPPORT_SIGNALS */
 631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
 632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
 637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* To ensure this part only executes once. */
 640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xTimed = pdTRUE;
 641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Fetch the current time. */
 643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			vTaskSetTimeOutState( &xTimeOut );
 644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Wait for arrival of data.  While waiting, the IP-task may set the
 647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
 648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		socket, thus unblocking this API call. */
 649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_RECEIVE | eSOCKET_INTR,
 650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
 651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ipconfigSUPPORT_SIGNALS != 0 )
 653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( xEventBits & eSOCKET_INTR ) != 0 )
 655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( ( xEventBits & eSOCKET_RECEIVE ) != 0 )
 657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Shouldn't have cleared the eSOCKET_RECEIVE flag. */
 659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
 662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#else
 665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( void ) xEventBits;
 667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#endif /* ipconfigSUPPORT_SIGNALS */
 669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) 
 671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( lPacketCount != 0 )
 673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			break;
 675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Has the timeout been reached ? */
 678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) )
 679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			break;
 681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	} /* while( lPacketCount == 0 ) */
 683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( lPacketCount != 0 )
 685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		taskENTER_CRITICAL();
 687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* The owner of the list item is the network buffer. */
 689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xU
 690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Remove the network buffer from the list of buffers waiting to
 694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				be processed by the socket. */
 695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		taskEXIT_CRITICAL();
 699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* The returned value is the data length, which may have been capped to
 701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		the receive buffer size. */
 702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		lReturn = ( int32_t ) pxNetworkBuffer->xDataLength;
 703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSourceAddress != NULL )
 705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* The zero copy flag is not set.  Truncate the length if it won't
 713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			fit in the provided buffer. */
 714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( lReturn > ( int32_t ) xBufferLength )
 715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				iptraceRECVFROM_DISCARDING_BYTES( ( xBufferLength - lReturn ) );
 717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				lReturn = ( int32_t )xBufferLength;
 718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Copy the received data into the provided buffer, then release the
 721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			network buffer. */
 722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			memcpy( pvBuffer, ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] 
 723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
 730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* The zero copy flag was set.  pvBuffer is not a buffer into which
 732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			the received data can be copied, but a pointer that must be set to
 733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			point to the buffer in which the received data has already been
 734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			placed. */
 735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			*( ( void** ) pvBuffer ) = ( void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFF
 736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigSUPPORT_SIGNALS != 0 )
 740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else if( ( xEventBits & eSOCKET_INTR ) != 0 )
 741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		lReturn = -pdFREERTOS_ERRNO_EINTR;
 743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		iptraceRECVFROM_INTERRUPTED();
 744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigSUPPORT_SIGNALS */
 746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else
 747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		iptraceRECVFROM_TIMEOUT();
 750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return lReturn;
 753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
 754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** int32_t FreeRTOS_sendto( Socket_t xSocket, const void *pvBuffer, size_t xTotalDataLength, BaseType_
 757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
 758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** TimeOut_t xTimeOut;
 761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** TickType_t xTicksToWait;
 762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** int32_t lReturn = 0;
 763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket;
 764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* The function prototype is designed to maintain the expected Berkeley
 768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	sockets standard, but this implementation does not use all the
 769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	parameters. */
 770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	( void ) xDestinationAddressLength;
 771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	configASSERT( pvBuffer );
 772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( xTotalDataLength <= ( size_t ) ipMAX_UDP_PAYLOAD_LENGTH )
 774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* If the socket is not already bound to an address, bind it now.
 776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		Passing NULL as the address parameter tells FreeRTOS_bind() to select
 777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		the address to bind to. */
 778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( FreeRTOS_bind( xSocket, NULL, 0u ) == 0 ) )
 780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xTicksToWait = pxSocket->xSendBlockTime;
 782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#if( ipconfigUSE_CALLBACKS != 0 )
 784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xIsCallingFromIPTask() != pdFALSE )
 786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* If this send function is called from within a call-back
 788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					handler it may not block, otherwise chances would be big to
 789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					get a deadlock: the IP-task waiting for itself. */
 790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xTicksToWait = ( TickType_t )0;
 791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#endif /* ipconfigUSE_CALLBACKS */
 794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xTicksToWait = ( TickType_t ) 0;
 798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Zero copy is not set, so obtain a network buffer into
 803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				which the payload will be copied. */
 804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				vTaskSetTimeOutState( &xTimeOut );
 805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Block until a buffer becomes available, or until a
 807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				timeout has been reached */
 808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( xTotalDataLength + sizeof( UDPPacket_t ), x
 809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxNetworkBuffer != NULL )
 811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					memcpy( ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( voi
 813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* The entire block time has been used up. */
 817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xTicksToWait = ( TickType_t ) 0;
 818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
 822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* When zero copy is used, pvBuffer is a pointer to the
 824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				payload of a buffer that has already been obtained from the
 825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				stack.  Obtain the network buffer pointer from the buffer. */
 826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( (void*)pvBuffer );
 827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxNetworkBuffer != NULL )
 830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxNetworkBuffer->xDataLength = xTotalDataLength;
 832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* The socket options are passed to the IP layer in the
 837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				space that will eventually get used by the Ethernet header. */
 838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Tell the networking task that the packet needs sending. */
 841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xStackTxEvent.pvData = pxNetworkBuffer;
 842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Ask the IP-task to send this packet */
 844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* The packet was successfully sent to the IP task. */
 847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					lReturn = ( int32_t ) xTotalDataLength;
 848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#if( ipconfigUSE_CALLBACKS == 1 )
 849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
 852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxSocket->u.xUDP.pxHandleSent( (Socket_t *)pxSocket, xTotalDataLength );
 853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
 854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#endif /* ipconfigUSE_CALLBACKS */
 856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				else
 858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* If the buffer was allocated in this function, release
 860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					it. */
 861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
 866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
 869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* If errno was available, errno would be set to
 871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				FREERTOS_ENOPKTS.  As it is, the function must return the
 872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				number of transmitted bytes, so the calling function knows
 873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				how	much data was actually sent. */
 874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				iptraceNO_BUFFER_FOR_SENDTO();
 875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
 878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			iptraceSENDTO_SOCKET_NOT_BOUND();
 880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else
 883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* The data is longer than the available buffer space. */
 885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		iptraceSENDTO_DATA_TOO_LONG();
 886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return lReturn;
 889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** } /* Tested */
 890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*
 893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * FreeRTOS_bind() : binds a sockt to a local port number.  If port 0 is
 894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * provided, a system provided port number will be assigned.  This function can
 895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * be used for both UDP and TCP sockets.  The actual binding will be performed
 896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * by the IP-task to avoid mutual access to the bound-socket-lists
 897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * (xBoundUDPSocketsList or xBoundTCPSocketsList).
 898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  */
 899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t FreeRTOS_bind( Socket_t xSocket, struct freertos_sockaddr * pxAddress, socklen_t xAddres
 900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
 901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** IPStackEvent_t xBindEvent;
 902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xReturn = 0;
 904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	( void ) xAddressLength;
 906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Once a socket is bound to a port, it can not be bound to a different
 912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	port number */
 913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else if( socketSOCKET_IS_BOUND( pxSocket) != pdFALSE )
 914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* The socket is already bound. */
 916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else
 920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Prepare a messages to the IP-task in order to perform the binding.
 922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		The desired port number will be passed in usLocalPort. */
 923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xBindEvent.eEventType = eSocketBindEvent;
 924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xBindEvent.pvData = ( void * ) xSocket;
 925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxAddress != NULL )
 926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
 930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Caller wants to bind to a random port number. */
 932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->usLocalPort = 0u;
 933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* portMAX_DELAY is used as a the time-out parameter, as binding *must*
 936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		succeed before the socket can be used.  _RB_ The use of an infinite
 937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		block time needs be changed as it could result in the task hanging. */
 938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Failed to wake-up the IP-task, no use to wait for it */
 941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
 945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
 947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			job. */
 948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xW
 949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE )
 950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = -pdFREERTOS_ERRNO_EINVAL;
 952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return xReturn;
 957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
 958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*
 960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * vSocketBind(): internal version of bind() that should not be called directly.
 961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * 'xInternal' is used for TCP sockets only: it allows to have several
 962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * (connected) child sockets bound to the same server port.
 963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  */
 964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t vSocketBind( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr * pxAddress, size_t u
 965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
 966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** List_t *pxSocketList;
 968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
 969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	struct freertos_sockaddr xAddress;
 970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */
 971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
 973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxSocketList = &xBoundTCPSocketsList;
 976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else
 978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif  /* ipconfigUSE_TCP == 1 */
 979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxSocketList = &xBoundUDPSocketsList;
 981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* The function prototype is designed to maintain the expected Berkeley
 984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	sockets standard, but this implementation does not use all the parameters. */
 985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	( void ) uxAddressLength;
 986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	configASSERT( pxSocket );
 988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#if( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
 991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* pxAddress will be NULL if sendto() was called on a socket without the
 993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		socket being bound to an address. In this case, automatically allocate
 994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		an address and port to the socket. */
 995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxAddress == NULL )
 996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxAddress = &xAddress;
 998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Put the port to zero to be assigned later. */
 999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxAddress->sin_port = 0u;
1000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */
1003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Sockets must be bound before calling FreeRTOS_sendto() if
1005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
1006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	configASSERT( pxAddress );
1007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( pxAddress != NULL )
1009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxAddress->sin_port == 0u )
1011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t )pxSocket->ucProtocol );
1013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( 0 == pxAddress->sin_port )
1014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				return -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
1016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* If vSocketBind() is called from the API FreeRTOS_bind() it has been
1020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		confirmed that the socket was not yet bound to a port.  If it is called
1021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		from the IP-task, no such check is necessary. */
1022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Check to ensure the port is not already in use.  If the bind is
1024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		called internally, a port MAY be used by more than one socket. */
1025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) 
1026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
1027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
1029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ? "TC" : "UD",
1030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				FreeRTOS_ntohs( pxAddress->sin_port ) ) );
1031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
1032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
1034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Allocate the port number to the socket.
1036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			This macro will set 'xBoundSocketListItem->xItemValue' */
1037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
1038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* And also store it in a socket field 'usLocalPort' in host-byte-order,
1040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			mostly used for logging and debugging purposes */
1041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
1042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Add the socket to the list of bound ports. */
1044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* If the network driver can iterate through 'xBoundUDPSocketsList',
1046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				by calling xPortHasUDPSocket() then the IP-task must temporarily
1047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				suspend the scheduler to keep the list in a consistent state. */
1048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
1049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					vTaskSuspendAll();
1051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
1053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
1055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
1056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
1058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xTaskResumeAll();
1060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
1062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else
1066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
1068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		FreeRTOS_debug_printf( ( "vSocketBind: Socket no addr\n" ) );
1069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( xReturn != 0 )
1072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
1074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return xReturn;
1077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** } /* Tested */
1078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*
1081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * Close a socket and free the allocated space
1082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * In case of a TCP socket: the connection will not be closed automatically
1083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * Subsequent messages for the closed socket will be responded to with a RST
1084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * The IP-task will actually close the socket, after receiving a 'eSocketCloseEvent' message
1085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  */
1086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
1087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
1088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xResult;
1089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
1090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * )xSocket;
1091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif
1092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** IPStackEvent_t xCloseEvent;
1093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** xCloseEvent.eEventType = eSocketCloseEvent;
1094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** xCloseEvent.pvData = ( void * ) xSocket;
1095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
1097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xResult = 0;
1099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else
1101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 ) )
1103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
1105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Make sure that IP-task won't call the user callback's anymore */
1107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.pxHandleConnected = NULL;
1108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.pxHandleReceive = NULL;
1109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.pxHandleSent = NULL;
1110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#endif  /* ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 ) ) */
1113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Let the IP task close the socket to keep it synchronised	with the
1115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		packet handling. */
1116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Note when changing the time-out value below, it must be checked who is calling
1118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		this function. If it is called by the IP-task, a deadlock could occur.
1119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		The IP-task would only call it in case of a user call-back */
1120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
1121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
1123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -1;
1124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
1126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = 1;
1128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return xResult;
1132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
1133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* This is the internal version of FreeRTOS_closesocket()
1135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * It will be called by the IPtask only to avoid problems with synchronicity
1136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  */
1137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** void *vSocketClose( FreeRTOS_Socket_t *pxSocket )
1138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
1139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
1140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#if( ipconfigUSE_TCP == 1 )
1142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* For TCP: clean up a little more. */
1144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
1145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#if( ipconfigUSE_TCP_WIN == 1 )
1147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxSocket->u.xTCP.pxAckMessage != NULL )
1149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
1151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Free the resources which were claimed by the tcpWin member */
1153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
1154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#endif /* ipconfigUSE_TCP_WIN */
1156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Free the input and output streams */
1158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->u.xTCP.rxStream != NULL )
1159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
1161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->u.xTCP.txStream != NULL )
1164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				vPortFreeLarge( pxSocket->u.xTCP.txStream );
1166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* In case this is a child socket, make sure the child-count of the
1169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			parent socket is decreased. */
1170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			prvTCPSetSocketCount( pxSocket );
1171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#endif  /* ipconfigUSE_TCP == 1 */
1174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Socket must be unbound first, to ensure no more packets are queued on
1176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	it. */
1177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE )
1178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* If the network driver can iterate through 'xBoundUDPSocketsList',
1180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		by calling xPortHasUDPSocket(), then the IP-task must temporarily
1181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		suspend the scheduler to keep the list in a consistent state. */
1182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
1183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			vTaskSuspendAll();
1185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
1187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		uxListRemove( &( pxSocket->xBoundSocketListItem ) );
1189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
1191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xTaskResumeAll();
1193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
1195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Now the socket is not bound the list of waiting packets can be
1198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	drained. */
1199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
1200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
1202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xU
1204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
1205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
1206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( pxSocket->xEventGroup )
1210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		vEventGroupDelete( pxSocket->xEventGroup );
1212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#if( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
1215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
1217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%u to %lxip:%u]: buffers %lu socks %lu\n",
1219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->usLocalPort,
1220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.ulRemoteIP,
1221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.usRemotePort,
1222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				uxGetNumberOfFreeNetworkBuffers(),
1223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				listCURRENT_LIST_LENGTH( &xBoundTCPSocketsList ) ) );
1224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */
1227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Anf finally, after all resources have been freed, free the socket space */
1229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	vPortFreeSocket( pxSocket );
1230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return 0;
1232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** } /* Tested */
1233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if ipconfigUSE_TCP == 1
1237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
1239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * When a child socket gets closed, make sure to update the child-count of the
1240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * parent.  When a listening parent socket is closed, make sure no child-sockets
1241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * keep a pointer to it.
1242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
1243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static void prvTCPSetSocketCount( FreeRTOS_Socket_t *pxSocketToDelete )
1244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	const ListItem_t *pxIterator;
1246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList )
1247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxOtherSocket;
1248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
1249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
1251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator != ( const ListItem_t * ) pxEnd;
1252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
1253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxOtherSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
1255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
1256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				( pxOtherSocket->usLocalPort == usLocalPort ) &&
1257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				( pxOtherSocket->u.xTCP.usChildCount ) )
1258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxOtherSocket->u.xTCP.usChildCount--;
1260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
1261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxOtherSocket->usLocalPort,
1262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxOtherSocket->u.xTCP.usChildCount,
1263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxOtherSocket->u.xTCP.usBacklog,
1264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxOtherSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );
1265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP == 1 */
1271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t FreeRTOS_setsockopt( Socket_t xSocket, int32_t lLevel, int32_t lOptionName, const void *
1275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
1276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* The standard Berkeley function returns 0 for success. */
1277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
1278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t lOptionValue;
1279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket;
1280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
1282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* The function prototype is designed to maintain the expected Berkeley
1284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	sockets standard, but this implementation does not use all the parameters. */
1285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	( void ) lLevel;
1286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	( void ) xOptionLength;
1287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	configASSERT( xSocket );
1289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	switch( lOptionName )
1291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		case FREERTOS_SO_RCVTIMEO	:
1293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Receive time out. */
1294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->xReceiveBlockTime = *( ( TickType_t * ) pvOptionValue );
1295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = 0;
1296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			break;
1297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		case FREERTOS_SO_SNDTIMEO	:
1299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->xSendBlockTime = *( ( TickType_t * ) pvOptionValue );
1300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
1301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* The send time out is capped for the reason stated in the
1303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
1304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				in FreeRTOSIPConfig.h (assuming an official configuration file
1305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				is being used. */
1306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
1307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
1309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
1312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* For TCP socket, it isn't necessary to limit the blocking time
1314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				because	the FreeRTOS_send() function does not wait for a network
1315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				buffer to become available. */
1316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = 0;
1318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			break;
1319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ipconfigUDP_MAX_RX_PACKETS > 0 )
1320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			case FREERTOS_SO_UDP_MAX_RX_PACKETS:
1321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_UDP )
1322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
1324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xUDP.uxMaxPackets = *( ( UBaseType_t * ) pvOptionValue );
1326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = 0;
1327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#endif /* ipconfigUDP_MAX_RX_PACKETS */
1329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		case FREERTOS_SO_UDPCKSUM_OUT :
1331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Turn calculating of the UDP checksum on/off for this socket. */
1332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			lOptionValue = ( BaseType_t ) pvOptionValue;
1333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( lOptionValue == 0 )
1335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->ucSocketOptions &= ( uint8_t ) ~FREERTOS_SO_UDPCKSUM_OUT;
1337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
1339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
1341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = 0;
1343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			break;
1344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ipconfigUSE_CALLBACKS == 1 )
1346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#if( ipconfigUSE_TCP == 1 )
1347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				case FREERTOS_SO_TCP_CONN_HANDLER:	/* Set a callback for (dis)connection events */
1348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				case FREERTOS_SO_TCP_RECV_HANDLER:	/* Install a callback for receiving TCP data. Supply pointer
1349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				case FREERTOS_SO_TCP_SENT_HANDLER:	/* Install a callback for sending TCP data. Supply pointer t
1350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#endif /* ipconfigUSE_TCP */
1351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				case FREERTOS_SO_UDP_RECV_HANDLER:	/* Install a callback for receiving UDP data. Supply pointer
1352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				case FREERTOS_SO_UDP_SENT_HANDLER:	/* Install a callback for sending UDP data. Supply pointer t
1353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						#if( ipconfigUSE_TCP == 1 )
1355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
1356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							UBaseType_t uxProtocol;
1357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
1358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 								( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
1359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							{
1360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 								uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
1361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							}
1362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							else
1363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							{
1364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 								uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
1365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							}
1366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
1368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							{
1369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 								break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
1370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							}
1371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
1372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						#else
1373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
1374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							/* No need to check if the socket has the right
1375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							protocol, because only UDP socket can be created. */
1376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
1377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						#endif /* ipconfigUSE_TCP */
1378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						switch( lOptionName )
1380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
1381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						#if ipconfigUSE_TCP == 1
1382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							case FREERTOS_SO_TCP_CONN_HANDLER:
1383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 								pxSocket->u.xTCP.pxHandleConnected = ((F_TCP_UDP_Handler_t *)pvOptionValue)->pxOnTCPConnect
1384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 								break;
1385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							case FREERTOS_SO_TCP_RECV_HANDLER:
1386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 								pxSocket->u.xTCP.pxHandleReceive = ((F_TCP_UDP_Handler_t *)pvOptionValue)->pxOnTCPReceive;
1387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 								break;
1388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							case FREERTOS_SO_TCP_SENT_HANDLER:
1389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 								pxSocket->u.xTCP.pxHandleSent = ((F_TCP_UDP_Handler_t *)pvOptionValue)->pxOnTCPSent;
1390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 								break;
1391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						#endif /* ipconfigUSE_TCP */
1392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						case FREERTOS_SO_UDP_RECV_HANDLER:
1393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxSocket->u.xUDP.pxHandleReceive = ((F_TCP_UDP_Handler_t *)pvOptionValue)->pxOnUDPReceive;
1394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							break;
1395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						case FREERTOS_SO_UDP_SENT_HANDLER:
1396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxSocket->u.xUDP.pxHandleSent = ((F_TCP_UDP_Handler_t *)pvOptionValue)->pxOnUDPSent;
1397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							break;
1398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						default:
1399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							break;
1400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
1401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xReturn = 0;
1404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
1405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#endif /* ipconfigUSE_CALLBACKS */
1406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ipconfigUSE_TCP != 0 )
1408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#if( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )
1409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Each socket has a semaphore on which the using task normally
1410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				sleeps. */
1411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				case FREERTOS_SO_SET_SEMAPHORE:
1412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
1414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xReturn = 0;
1415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
1417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
1418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#if( ipconfigSOCKET_HAS_USER_WAKE_CALLBACK != 0 )
1420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				case FREERTOS_SO_WAKEUP_CALLBACK:
1421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Each socket can have a callback function that is executed
1423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					when there is an event the socket's owner might want to
1424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					process. */
1425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->pxUserWakeCallback = ( SocketWakeupCallback_t ) pvOptionValue;
1426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xReturn = 0;
1427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */
1430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			case FREERTOS_SO_SNDBUF:	/* Set the size of the send buffer, in units of MSS (TCP only) */
1432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			case FREERTOS_SO_RCVBUF:	/* Set the size of the receive buffer, in units of MSS (TCP only) */
1433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					uint32_t ulNewValue;
1435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
1437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
1439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
1440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
1441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
1444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
1445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
1447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
1448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
1449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					ulNewValue = *( ( uint32_t * ) pvOptionValue );
1452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( lOptionName == FREERTOS_SO_SNDBUF )
1454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* Round up to nearest MSS size */
1456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
1457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
1458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					else
1460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
1462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = 0;
1465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			case FREERTOS_SO_WIN_PROPERTIES:	/* Set all buffer and window properties in one call, parameter 
1468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					WinProperties_t* pxProps;
1470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
1472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
1474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
1475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
1478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
1480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
1481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxProps = ( ( WinProperties_t * ) pvOptionValue );
1484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ), sizeof( pxProps
1485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ), sizeof( pxProps
1486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#if( ipconfigUSE_TCP_WIN == 1 )
1487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the T
1489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the T
1490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#else
1492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxRxWinSize = 1u;
1494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxTxWinSize = 1u;
1495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#endif
1497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* In case the socket has already initialised its tcpWin,
1499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					adapt the window size parameters */
1500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
1501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket-
1503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.xTCPWindow.xSize.ulTxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket-
1504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = 0;
1508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			case FREERTOS_SO_REUSE_LISTEN_SOCKET:	/* If true, the server-socket will turn into a connected s
1511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
1513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
1515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
1517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
1519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					else
1521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
1523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = 0;
1526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			case FREERTOS_SO_CLOSE_AFTER_SEND:		/* As soon as the last byte has been transmitted, finalise t
1529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
1531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
1533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
1536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
1538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					else
1540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
1542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = 0;
1545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			case FREERTOS_SO_SET_FULL_SIZE:		/* Refuse to send packets smaller than MSS  */
1548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
1550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
1552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
1555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
1557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					else
1559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
1561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
1564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
1565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						( FreeRTOS_outstanding( pxSocket ) != 0 ) )
1566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bSendFullSize */
1568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xSendEventToIPTask( eTCPTimerEvent );
1569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = 0;
1572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			case FREERTOS_SO_STOP_RX:		/* Refuse to receive more packts */
1575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
1577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
1579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
1582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
1584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					else
1586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
1588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
1591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bRxStopped */
1592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xSendEventToIPTask( eTCPTimerEvent );
1593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = 0;
1595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#endif  /* ipconfigUSE_TCP == 1 */
1598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		default :
1600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* No other options are handled. */
1601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
1602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			break;
1603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return xReturn;
1606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** } /* Tested */
1607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* Find an available port number per https://tools.ietf.org/html/rfc6056. */
1611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
1612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
1613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** const uint16_t usEphemeralPortCount =
1614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	socketAUTO_PORT_ALLOCATION_MAX_NUMBER - socketAUTO_PORT_ALLOCATION_START_NUMBER + 1;
1615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** uint16_t usIterations = usEphemeralPortCount;
1616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** uint32_t ulRandomSeed = 0;
1617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** uint16_t usResult = 0;
1618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xGotZeroOnce = pdFALSE;
1619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** const List_t *pxList;
1620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if ipconfigUSE_TCP == 1
1622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
1623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxList = &xBoundTCPSocketsList;
1625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	else
1627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif
1628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxList = &xBoundUDPSocketsList;
1630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Avoid compiler warnings if ipconfigUSE_TCP is not defined. */
1633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	( void ) xProtocol;
1634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Find the next available port using the random seed as a starting
1636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	point. */
1637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	do
1638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Generate a random seed. */
1640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		ulRandomSeed = ipconfigRAND32( );
1641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Only proceed if the random number generator succeeded. */
1643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( 0 == ulRandomSeed )
1644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pdFALSE == xGotZeroOnce )
1646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xGotZeroOnce = pdTRUE;
1648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				continue;
1649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
1651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Map the random to a candidate port. */
1657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		usResult =
1658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			socketAUTO_PORT_ALLOCATION_START_NUMBER +
1659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( ( ( uint16_t )ulRandomSeed ) % usEphemeralPortCount );
1660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Check if there's already an open socket with the same protocol
1662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		and port. */
1663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( NULL == pxListFindListItemWithValue(
1664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxList,
1665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( TickType_t )FreeRTOS_htons( usResult ) ) )
1666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			usResult = FreeRTOS_htons( usResult );
1668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			break;
1669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
1671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			usResult = 0;
1673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		usIterations--;
1676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	while( usIterations > 0 );
1678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return usResult;
1680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
1681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* pxListFindListItemWithValue: find a list item in a bound socket list
1684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 'xWantedItemValue' refers to a port number */
1685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItem
1686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
  71              		.loc 2 1686 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              	.LVL6:
  76 0000 70402DE9 		push	{r4, r5, r6, lr}
  77              		.cfi_def_cfa_offset 16
  78              		.cfi_offset 4, -16
  79              		.cfi_offset 5, -12
  80              		.cfi_offset 6, -8
  81              		.cfi_offset 14, -4
  82              		.loc 2 1686 0
  83 0004 0040A0E1 		mov	r4, r0
  84 0008 0150A0E1 		mov	r5, r1
1687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** const ListItem_t * pxResult = NULL;
1688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
  85              		.loc 2 1689 0
  86 000c FEFFFFEB 		bl	xIPIsNetworkTaskReady
  87              	.LVL7:
  88 0010 000050E3 		cmp	r0, #0
  89 0014 00005413 		cmpne	r4, #0
  90 0018 0100A013 		movne	r0, #1
  91 001c 0000A003 		moveq	r0, #0
  92              	.LBB29:
1690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		const ListItem_t *pxIterator;
1692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
  93              		.loc 2 1692 0
  94 0020 08308412 		addne	r3, r4, #8
  95              	.LVL8:
1693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
  96              		.loc 2 1693 0
  97 0024 0C009415 		ldrne	r0, [r4, #12]
  98              	.LBE29:
1689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
  99              		.loc 2 1689 0
 100 0028 0400001A 		bne	.L5
 101 002c 7080BDE8 		pop	{r4, r5, r6, pc}
 102              	.LVL9:
 103              	.L6:
 104              	.LBB30:
1694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator != ( const ListItem_t * ) pxEnd;
1695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
1696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 105              		.loc 2 1697 0
 106 0030 002090E5 		ldr	r2, [r0]
 107 0034 050052E1 		cmp	r2, r5
 108 0038 7080BD08 		popeq	{r4, r5, r6, pc}
1695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 109              		.loc 2 1695 0
 110 003c 040090E5 		ldr	r0, [r0, #4]
 111              	.LVL10:
 112              	.L5:
1693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator != ( const ListItem_t * ) pxEnd;
 113              		.loc 2 1693 0 discriminator 1
 114 0040 030050E1 		cmp	r0, r3
 115 0044 F9FFFF1A 		bne	.L6
 116              	.LBE30:
1687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 117              		.loc 2 1687 0
 118 0048 0000A0E3 		mov	r0, #0
 119              	.LVL11:
1698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxResult = pxIterator;
1700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return pxResult;
1706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** } /* Tested */
 120              		.loc 2 1706 0
 121 004c 7080BDE8 		pop	{r4, r5, r6, pc}
 122              		.cfi_endproc
 123              	.LFE38:
 125              		.section	.text.prvValidSocket,"ax",%progbits
 126              		.align	2
 127              		.syntax unified
 128              		.arm
 129              		.fpu neon
 131              	prvValidSocket:
 132              	.LFB25:
 169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xReturn = pdTRUE;
 133              		.loc 2 169 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138              	.LVL12:
 172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 139              		.loc 2 172 0
 140 0000 013040E2 		sub	r3, r0, #1
 141 0004 030073E3 		cmn	r3, #3
 142 0008 0A00008A 		bhi	.L12
 143              	.LVL13:
 144              	.LBB33:
 145              	.LBB34:
 176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 146              		.loc 2 176 0
 147 000c 000052E3 		cmp	r2, #0
 148 0010 0200000A 		beq	.L11
 149 0014 183090E5 		ldr	r3, [r0, #24]
 150 0018 000053E3 		cmp	r3, #0
 151 001c 0500000A 		beq	.L12
 152              	.L11:
 181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 153              		.loc 2 181 0
 154 0020 2700D0E5 		ldrb	r0, [r0, #39]	@ zero_extendqisi2
 155              	.LVL14:
 156 0024 7110EFE6 		uxtb	r1, r1
 157              	.LVL15:
 158 0028 010040E0 		sub	r0, r0, r1
 159 002c 100F6FE1 		clz	r0, r0
 160 0030 A002A0E1 		lsr	r0, r0, #5
 161 0034 1EFF2FE1 		bx	lr
 162              	.LVL16:
 163              	.L12:
 164              	.LBE34:
 165              	.LBE33:
 174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 166              		.loc 2 174 0
 167 0038 0000A0E3 		mov	r0, #0
 168              	.LVL17:
 169 003c 1EFF2FE1 		bx	lr
 170              		.cfi_endproc
 171              	.LFE25:
 173              		.section	.text.uxStreamBufferGetSpace,"ax",%progbits
 174              		.align	2
 175              		.syntax unified
 176              		.arm
 177              		.fpu neon
 179              	uxStreamBufferGetSpace:
 180              	.LFB14:
  96:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Returns the number of items which can still be added to uxHead
 181              		.loc 1 96 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		@ link register save eliminated.
 186              	.LVL18:
  99:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 187              		.loc 1 99 0
 188 0000 081090E5 		ldr	r1, [r0, #8]
 189              	.LVL19:
 190              	.LBB37:
 191              	.LBB38:
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( uxCount >= pxBuffer->LENGTH )
 192              		.loc 1 68 0
 193 0004 102090E5 		ldr	r2, [r0, #16]
 194              	.LBE38:
 195              	.LBE37:
 100:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 196              		.loc 1 100 0
 197 0008 003090E5 		ldr	r3, [r0]
 198              	.LVL20:
 199              	.LBB40:
 200              	.LBB39:
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( uxCount >= pxBuffer->LENGTH )
 201              		.loc 1 68 0
 202 000c 020083E0 		add	r0, r3, r2
 203              	.LVL21:
 204 0010 010040E2 		sub	r0, r0, #1
 205 0014 010040E0 		sub	r0, r0, r1
 206              	.LVL22:
  69:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 207              		.loc 1 69 0
 208 0018 000052E1 		cmp	r2, r0
  71:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 209              		.loc 1 71 0
 210 001c 02004090 		subls	r0, r0, r2
 211              	.LVL23:
 212              	.LBE39:
 213              	.LBE40:
 103:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 214              		.loc 1 103 0
 215 0020 1EFF2FE1 		bx	lr
 216              		.cfi_endproc
 217              	.LFE14:
 219              		.section	.text.vNetworkSocketsInit,"ax",%progbits
 220              		.align	2
 221              		.global	vNetworkSocketsInit
 222              		.syntax unified
 223              		.arm
 224              		.fpu neon
 226              	vNetworkSocketsInit:
 227              	.LFB26:
 192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	vListInitialise( &xBoundUDPSocketsList );
 228              		.loc 2 192 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232 0000 10402DE9 		push	{r4, lr}
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 4, -8
 235              		.cfi_offset 14, -4
 193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 236              		.loc 2 193 0
 237 0004 10009FE5 		ldr	r0, .L21
 238 0008 FEFFFFEB 		bl	vListInitialise
 239              	.LVL24:
 197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 240              		.loc 2 197 0
 241 000c 0C009FE5 		ldr	r0, .L21+4
 242 0010 FEFFFFEB 		bl	vListInitialise
 243              	.LVL25:
 202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 244              		.loc 2 202 0
 245 0014 0100A0E3 		mov	r0, #1
 246 0018 1080BDE8 		pop	{r4, pc}
 247              	.L22:
 248              		.align	2
 249              	.L21:
 250 001c 00000000 		.word	xBoundUDPSocketsList
 251 0020 00000000 		.word	xBoundTCPSocketsList
 252              		.cfi_endproc
 253              	.LFE26:
 255              		.section	.text.FreeRTOS_socket,"ax",%progbits
 256              		.align	2
 257              		.global	FreeRTOS_socket
 258              		.syntax unified
 259              		.arm
 260              		.fpu neon
 262              	FreeRTOS_socket:
 263              	.LFB28:
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket;
 264              		.loc 2 266 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268              	.LVL26:
 269 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 270              		.cfi_def_cfa_offset 24
 271              		.cfi_offset 4, -24
 272              		.cfi_offset 5, -20
 273              		.cfi_offset 6, -16
 274              		.cfi_offset 7, -12
 275              		.cfi_offset 8, -8
 276              		.cfi_offset 14, -4
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket;
 277              		.loc 2 266 0
 278 0004 0060A0E1 		mov	r6, r0
 279              	.LVL27:
 280 0008 0140A0E1 		mov	r4, r1
 281              	.LVL28:
 282 000c 0250A0E1 		mov	r5, r2
 283              	.LVL29:
 284              	.LBB43:
 285              	.LBB44:
 212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 286              		.loc 2 212 0
 287 0010 FEFFFFEB 		bl	xIPIsNetworkTaskReady
 288              	.LVL30:
 289 0014 000050E3 		cmp	r0, #0
 290 0018 0100001A 		bne	.L24
 291              	.LVL31:
 292              	.L40:
 293              	.LBE44:
 294              	.LBE43:
 292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			iptraceFAILED_TO_CREATE_EVENT_GROUP();
 295              		.loc 2 292 0
 296 001c 0000E0E3 		mvn	r0, #0
 297 0020 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 298              	.LVL32:
 299              	.L24:
 300              	.LBB47:
 301              	.LBB45:
 219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 302              		.loc 2 219 0
 303 0024 020056E3 		cmp	r6, #2
 304 0028 0200000A 		beq	.L26
 305              	.LVL33:
 306              	.L27:
 307 002c 0110A0E3 		mov	r1, #1
 308 0030 F0009FE5 		ldr	r0, .L41
 309 0034 FEFFFFEB 		bl	longjmp
 310              	.LVL34:
 311              	.L26:
 222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ipconfigUSE_TCP == 1 )
 312              		.loc 2 222 0
 313 0038 EC309FE5 		ldr	r3, .L41+4
 314 003c 083093E5 		ldr	r3, [r3, #8]
 315 0040 010073E3 		cmn	r3, #1
 316 0044 F8FFFF1A 		bne	.L27
 226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 317              		.loc 2 226 0
 318 0048 E0309FE5 		ldr	r3, .L41+8
 319 004c 083093E5 		ldr	r3, [r3, #8]
 320 0050 010073E3 		cmn	r3, #1
 321 0054 F4FFFF1A 		bne	.L27
 230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 322              		.loc 2 230 0
 323 0058 110055E3 		cmp	r5, #17
 324 005c 0C00001A 		bne	.L28
 232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 325              		.loc 2 232 0
 326 0060 020054E3 		cmp	r4, #2
 238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 327              		.loc 2 238 0
 328 0064 4460A003 		moveq	r6, #68
 329              	.LVL35:
 232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 330              		.loc 2 232 0
 331 0068 EFFFFF1A 		bne	.L27
 332              	.L29:
 333              	.LVL36:
 334              	.LBE45:
 335              	.LBE47:
 282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 336              		.loc 2 282 0
 337 006c 0600A0E1 		mov	r0, r6
 338 0070 FEFFFFEB 		bl	pvPortMalloc
 339              	.LVL37:
 284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 340              		.loc 2 284 0
 341 0074 004050E2 		subs	r4, r0, #0
 342              	.LVL38:
 343 0078 E7FFFF0A 		beq	.L40
 289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 344              		.loc 2 289 0
 345 007c FEFFFFEB 		bl	xEventGroupCreate
 346              	.LVL39:
 347 0080 007050E2 		subs	r7, r0, #0
 348 0084 0800001A 		bne	.L30
 291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 349              		.loc 2 291 0
 350 0088 0400A0E1 		mov	r0, r4
 351              	.LVL40:
 352 008c FEFFFFEB 		bl	vPortFree
 353              	.LVL41:
 354 0090 E1FFFFEA 		b	.L40
 355              	.LVL42:
 356              	.L28:
 357              	.LBB48:
 358              	.LBB46:
 241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 359              		.loc 2 241 0
 360 0094 060055E3 		cmp	r5, #6
 361 0098 E3FFFF1A 		bne	.L27
 243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 362              		.loc 2 243 0
 363 009c 010054E3 		cmp	r4, #1
 249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 364              		.loc 2 249 0
 365 00a0 666FA003 		moveq	r6, #408
 366              	.LVL43:
 243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 367              		.loc 2 243 0
 368 00a4 F0FFFF0A 		beq	.L29
 369 00a8 DFFFFFEA 		b	.L27
 370              	.LVL44:
 371              	.L30:
 372              	.LBE46:
 373              	.LBE48:
 298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 374              		.loc 2 298 0
 375 00ac 0620A0E1 		mov	r2, r6
 376 00b0 0010A0E3 		mov	r1, #0
 377 00b4 0400A0E1 		mov	r0, r4
 378              	.LVL45:
 379 00b8 FEFFFFEB 		bl	memset
 380              	.LVL46:
 305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 381              		.loc 2 305 0
 382 00bc 110055E3 		cmp	r5, #17
 300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 383              		.loc 2 300 0
 384 00c0 047084E5 		str	r7, [r4, #4]
 305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 385              		.loc 2 305 0
 386 00c4 0100001A 		bne	.L31
 307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 387              		.loc 2 307 0
 388 00c8 300084E2 		add	r0, r4, #48
 389 00cc FEFFFFEB 		bl	vListInitialise
 390              	.LVL47:
 391              	.L31:
 316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 392              		.loc 2 316 0
 393 00d0 080084E2 		add	r0, r4, #8
 394 00d4 FEFFFFEB 		bl	vListInitialiseItem
 395              	.LVL48:
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->xSendBlockTime	= ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 396              		.loc 2 319 0
 397 00d8 103702E3 		movw	r3, #10000
 326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 398              		.loc 2 326 0
 399 00dc 060055E3 		cmp	r5, #6
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->xSendBlockTime	= ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 400              		.loc 2 319 0
 401 00e0 1C3084E5 		str	r3, [r4, #28]
 320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 402              		.loc 2 320 0
 403 00e4 203084E5 		str	r3, [r4, #32]
 321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->ucProtocol		= ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 404              		.loc 2 321 0
 405 00e8 0230A0E3 		mov	r3, #2
 317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 406              		.loc 2 317 0
 407 00ec 144084E5 		str	r4, [r4, #20]
 321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->ucProtocol		= ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 408              		.loc 2 321 0
 409 00f0 2630C4E5 		strb	r3, [r4, #38]
 322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 410              		.loc 2 322 0
 411 00f4 2750C4E5 		strb	r5, [r4, #39]
 326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 412              		.loc 2 326 0
 413 00f8 0800001A 		bne	.L34
 330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 414              		.loc 2 330 0
 415 00fc B43500E3 		movw	r3, #1460
 416 0100 B234C4E1 		strh	r3, [r4, #66]	@ movhi
 417 0104 B434C4E1 		strh	r3, [r4, #68]	@ movhi
 331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, 
 418              		.loc 2 331 0
 419 0108 A03D02E3 		movw	r3, #11680
 420 010c 643084E5 		str	r3, [r4, #100]
 332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Use half of the buffer size of the TCP windows */
 421              		.loc 2 332 0
 422 0110 683084E5 		str	r3, [r4, #104]
 336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxT
 423              		.loc 2 336 0
 424 0114 0430A0E3 		mov	r3, #4
 425 0118 CC3084E5 		str	r3, [r4, #204]
 337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 426              		.loc 2 337 0
 427 011c D03084E5 		str	r3, [r4, #208]
 428              	.L34:
 429 0120 0400A0E1 		mov	r0, r4
 430              	.LVL49:
 359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
 431              		.loc 2 359 0
 432 0124 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 433              	.L42:
 434              		.align	2
 435              	.L41:
 436 0128 28000000 		.word	Unity+40
 437 012c 00000000 		.word	xBoundUDPSocketsList
 438 0130 00000000 		.word	xBoundTCPSocketsList
 439              		.cfi_endproc
 440              	.LFE28:
 442              		.section	.text.FreeRTOS_recvfrom,"ax",%progbits
 443              		.align	2
 444              		.global	FreeRTOS_recvfrom
 445              		.syntax unified
 446              		.arm
 447              		.fpu neon
 449              	FreeRTOS_recvfrom:
 450              	.LFB29:
 593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t lPacketCount = 0;
 451              		.loc 2 593 0
 452              		.cfi_startproc
 453              		@ args = 8, pretend = 0, frame = 16
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455              	.LVL50:
 456 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 457              		.cfi_def_cfa_offset 32
 458              		.cfi_offset 4, -32
 459              		.cfi_offset 5, -28
 460              		.cfi_offset 6, -24
 461              		.cfi_offset 7, -20
 462              		.cfi_offset 8, -16
 463              		.cfi_offset 9, -12
 464              		.cfi_offset 10, -8
 465              		.cfi_offset 14, -4
 466 0004 0180A0E1 		mov	r8, r1
 467 0008 18D04DE2 		sub	sp, sp, #24
 468              		.cfi_def_cfa_offset 56
 593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t lPacketCount = 0;
 469              		.loc 2 593 0
 470 000c 0290A0E1 		mov	r9, r2
 471 0010 0360A0E1 		mov	r6, r3
 603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 472              		.loc 2 603 0
 473 0014 0120A0E3 		mov	r2, #1
 474              	.LVL51:
 597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xTimed = pdFALSE;
 475              		.loc 2 597 0
 476 0018 0030A0E3 		mov	r3, #0
 477              	.LVL52:
 603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 478              		.loc 2 603 0
 479 001c 1110A0E3 		mov	r1, #17
 480              	.LVL53:
 593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t lPacketCount = 0;
 481              		.loc 2 593 0
 482 0020 0040A0E1 		mov	r4, r0
 483              	.LVL54:
 597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xTimed = pdFALSE;
 484              		.loc 2 597 0
 485 0024 0C308DE5 		str	r3, [sp, #12]
 486              	.LVL55:
 603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 487              		.loc 2 603 0
 488 0028 FEFFFFEB 		bl	prvValidSocket
 489              	.LVL56:
 490 002c 000050E3 		cmp	r0, #0
 593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t lPacketCount = 0;
 491              		.loc 2 593 0
 492 0030 38709DE5 		ldr	r7, [sp, #56]
 605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 493              		.loc 2 605 0
 494 0034 1540E003 		mvneq	r4, #21
 495              	.LVL57:
 603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 496              		.loc 2 603 0
 497 0038 0800000A 		beq	.L43
 608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 498              		.loc 2 608 0
 499 003c 303094E5 		ldr	r3, [r4, #48]
 500              	.LVL58:
 614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 501              		.loc 2 614 0
 502 0040 000053E3 		cmp	r3, #0
 503 0044 1C00001A 		bne	.L49
 620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 504              		.loc 2 620 0
 505 0048 1C3094E5 		ldr	r3, [r4, #28]
 506              	.LVL59:
 634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 507              		.loc 2 634 0
 508 004c 102006E2 		and	r2, r6, #16
 622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 509              		.loc 2 622 0
 510 0050 000053E3 		cmp	r3, #0
 620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 511              		.loc 2 620 0
 512 0054 0C308DE5 		str	r3, [sp, #12]
 622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 513              		.loc 2 622 0
 514 0058 0300001A 		bne	.L47
 515              	.LVL60:
 516              	.L48:
 748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		iptraceRECVFROM_TIMEOUT();
 517              		.loc 2 748 0
 518 005c 0A40E0E3 		mvn	r4, #10
 519              	.L43:
 753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 520              		.loc 2 753 0
 521 0060 0400A0E1 		mov	r0, r4
 522 0064 18D08DE2 		add	sp, sp, #24
 523              		.cfi_remember_state
 524              		.cfi_def_cfa_offset 32
 525              		@ sp needed
 526 0068 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 527              	.LVL61:
 528              	.L47:
 529              		.cfi_restore_state
 634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 530              		.loc 2 634 0
 531 006c 000052E3 		cmp	r2, #0
 532 0070 F9FFFF1A 		bne	.L48
 533              	.LVL62:
 643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 534              		.loc 2 643 0
 535 0074 10008DE2 		add	r0, sp, #16
 536 0078 FEFFFFEB 		bl	vTaskSetTimeOutState
 537              	.LVL63:
 538              	.L46:
 649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
 539              		.loc 2 649 0
 540 007c 0C309DE5 		ldr	r3, [sp, #12]
 541 0080 0120A0E3 		mov	r2, #1
 542 0084 4110A0E3 		mov	r1, #65
 543 0088 00308DE5 		str	r3, [sp]
 544 008c 0030A0E3 		mov	r3, #0
 545 0090 040094E5 		ldr	r0, [r4, #4]
 546 0094 FEFFFFEB 		bl	xEventGroupWaitBits
 547              	.LVL64:
 670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 548              		.loc 2 670 0
 549 0098 303094E5 		ldr	r3, [r4, #48]
 550              	.LVL65:
 672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 551              		.loc 2 672 0
 552 009c 000053E3 		cmp	r3, #0
 553 00a0 0500001A 		bne	.L49
 678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 554              		.loc 2 678 0
 555 00a4 0C108DE2 		add	r1, sp, #12
 556 00a8 10008DE2 		add	r0, sp, #16
 557 00ac FEFFFFEB 		bl	xTaskCheckForTimeOut
 558              	.LVL66:
 559 00b0 000050E3 		cmp	r0, #0
 560 00b4 F0FFFF0A 		beq	.L46
 561 00b8 E7FFFFEA 		b	.L48
 562              	.LVL67:
 563              	.L49:
 686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 564              		.loc 2 686 0
 565 00bc FEFFFFEB 		bl	vPortEnterCritical
 566              	.LVL68:
 689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 567              		.loc 2 689 0
 568 00c0 3C3094E5 		ldr	r3, [r4, #60]
 691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 569              		.loc 2 691 0
 570 00c4 04A016E2 		ands	r10, r6, #4
 689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 571              		.loc 2 689 0
 572 00c8 0C5093E5 		ldr	r5, [r3, #12]
 573              	.LVL69:
 691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 574              		.loc 2 691 0
 575 00cc 0100001A 		bne	.L54
 695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 576              		.loc 2 695 0
 577 00d0 0500A0E1 		mov	r0, r5
 578 00d4 FEFFFFEB 		bl	uxListRemove
 579              	.LVL70:
 580              	.L54:
 698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 581              		.loc 2 698 0
 582 00d8 FEFFFFEB 		bl	vPortExitCritical
 583              	.LVL71:
 704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 584              		.loc 2 704 0
 585 00dc 000057E3 		cmp	r7, #0
 702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 586              		.loc 2 702 0
 587 00e0 1C4095E5 		ldr	r4, [r5, #28]
 588              	.LVL72:
 706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 589              		.loc 2 706 0
 590 00e4 B032D511 		ldrhne	r3, [r5, #32]
 591 00e8 181095E5 		ldr	r1, [r5, #24]
 592 00ec B230C711 		strhne	r3, [r7, #2]	@ movhi
 707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 593              		.loc 2 707 0
 594 00f0 14309515 		ldrne	r3, [r5, #20]
 595 00f4 04308715 		strne	r3, [r7, #4]
 710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 596              		.loc 2 710 0
 597 00f8 010016E3 		tst	r6, #1
 735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 598              		.loc 2 735 0
 599 00fc 2A108112 		addne	r1, r1, #42
 600 0100 00108815 		strne	r1, [r8]
 710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 601              		.loc 2 710 0
 602 0104 D5FFFF1A 		bne	.L43
 603 0108 090054E1 		cmp	r4, r9
 722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 604              		.loc 2 722 0
 605 010c 2A1081E2 		add	r1, r1, #42
 606 0110 0940A0A1 		movge	r4, r9
 607              	.LVL73:
 608 0114 0800A0E1 		mov	r0, r8
 609 0118 0420A0E1 		mov	r2, r4
 610 011c FEFFFFEB 		bl	memcpy
 611              	.LVL74:
 724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 612              		.loc 2 724 0
 613 0120 00005AE3 		cmp	r10, #0
 614 0124 CDFFFF1A 		bne	.L43
 726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 615              		.loc 2 726 0
 616 0128 0500A0E1 		mov	r0, r5
 617 012c FEFFFFEB 		bl	vReleaseNetworkBufferAndDescriptor
 618              	.LVL75:
 619 0130 CAFFFFEA 		b	.L43
 620              		.cfi_endproc
 621              	.LFE29:
 623              		.section	.text.FreeRTOS_bind,"ax",%progbits
 624              		.align	2
 625              		.global	FreeRTOS_bind
 626              		.syntax unified
 627              		.arm
 628              		.fpu neon
 630              	FreeRTOS_bind:
 631              	.LFB31:
 900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** IPStackEvent_t xBindEvent;
 632              		.loc 2 900 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 8
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              	.LVL76:
 637 0000 1F402DE9 		push	{r0, r1, r2, r3, r4, lr}
 638              		.cfi_def_cfa_offset 24
 639              		.cfi_offset 4, -8
 640              		.cfi_offset 14, -4
 907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 641              		.loc 2 907 0
 642 0004 013040E2 		sub	r3, r0, #1
 643 0008 030073E3 		cmn	r3, #3
 644 000c 1D00008A 		bhi	.L62
 913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 645              		.loc 2 913 0
 646 0010 183090E5 		ldr	r3, [r0, #24]
 647 0014 000053E3 		cmp	r3, #0
 648 0018 1A00001A 		bne	.L62
 925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 649              		.loc 2 925 0
 650 001c 000051E3 		cmp	r1, #0
 923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xBindEvent.pvData = ( void * ) xSocket;
 651              		.loc 2 923 0
 652 0020 0830A0E3 		mov	r3, #8
 653 0024 0830CDE5 		strb	r3, [sp, #8]
 924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxAddress != NULL )
 654              		.loc 2 924 0
 655 0028 0C008DE5 		str	r0, [sp, #12]
 925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 656              		.loc 2 925 0
 932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 657              		.loc 2 932 0
 658 002c B412C001 		strheq	r1, [r0, #36]	@ movhi
 659              	.L66:
 927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 660              		.loc 2 927 0
 661 0030 B220D111 		ldrhne	r2, [r1, #2]
 662              	.LVL77:
 663 0034 2234A011 		lsrne	r3, r2, #8
 664 0038 02348311 		orrne	r3, r3, r2, lsl #8
 665 003c B432C011 		strhne	r3, [r0, #36]	@ movhi
 666              	.L64:
 667 0040 0040A0E1 		mov	r4, r0
 938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 668              		.loc 2 938 0
 669 0044 0010E0E3 		mvn	r1, #0
 670              	.LVL78:
 671 0048 08008DE2 		add	r0, sp, #8
 672              	.LVL79:
 673 004c FEFFFFEB 		bl	xSendEventStructToIPTask
 674              	.LVL80:
 675 0050 000050E3 		cmp	r0, #0
 942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 676              		.loc 2 942 0
 677 0054 8B00E003 		mvneq	r0, #139
 938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 678              		.loc 2 938 0
 679 0058 0B00000A 		beq	.L61
 948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE )
 680              		.loc 2 948 0
 681 005c 0030E0E3 		mvn	r3, #0
 682 0060 0120A0E3 		mov	r2, #1
 683 0064 00308DE5 		str	r3, [sp]
 684 0068 1010A0E3 		mov	r1, #16
 685 006c 0030A0E3 		mov	r3, #0
 686 0070 040094E5 		ldr	r0, [r4, #4]
 687 0074 FEFFFFEB 		bl	xEventGroupWaitBits
 688              	.LVL81:
 949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 689              		.loc 2 949 0
 690 0078 183094E5 		ldr	r3, [r4, #24]
 691 007c 000053E3 		cmp	r3, #0
 903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 692              		.loc 2 903 0
 693 0080 0000A013 		movne	r0, #0
 949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 694              		.loc 2 949 0
 695 0084 0000001A 		bne	.L61
 696              	.LVL82:
 697              	.L62:
 951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 698              		.loc 2 951 0
 699 0088 1500E0E3 		mvn	r0, #21
 700              	.LVL83:
 701              	.L61:
 957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 702              		.loc 2 957 0
 703 008c 10D08DE2 		add	sp, sp, #16
 704              		.cfi_def_cfa_offset 8
 705              		@ sp needed
 706 0090 1080BDE8 		pop	{r4, pc}
 707              		.cfi_endproc
 708              	.LFE31:
 710              		.section	.text.FreeRTOS_sendto,"ax",%progbits
 711              		.align	2
 712              		.global	FreeRTOS_sendto
 713              		.syntax unified
 714              		.arm
 715              		.fpu neon
 717              	FreeRTOS_sendto:
 718              	.LFB30:
 757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 719              		.loc 2 757 0
 720              		.cfi_startproc
 721              		@ args = 8, pretend = 0, frame = 24
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723              	.LVL84:
 724 0000 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}
 725              		.cfi_def_cfa_offset 28
 726              		.cfi_offset 4, -28
 727              		.cfi_offset 5, -24
 728              		.cfi_offset 6, -20
 729              		.cfi_offset 7, -16
 730              		.cfi_offset 8, -12
 731              		.cfi_offset 9, -8
 732              		.cfi_offset 14, -4
 733 0004 0340A0E1 		mov	r4, r3
 734 0008 1CD04DE2 		sub	sp, sp, #28
 735              		.cfi_def_cfa_offset 56
 759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** TimeOut_t xTimeOut;
 736              		.loc 2 759 0
 737 000c 0330A0E3 		mov	r3, #3
 738              	.LVL85:
 771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 739              		.loc 2 771 0
 740 0010 009051E2 		subs	r9, r1, #0
 759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** TimeOut_t xTimeOut;
 741              		.loc 2 759 0
 742 0014 0830CDE5 		strb	r3, [sp, #8]
 743 0018 0030A0E3 		mov	r3, #0
 757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 744              		.loc 2 757 0
 745 001c 38809DE5 		ldr	r8, [sp, #56]
 759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** TimeOut_t xTimeOut;
 746              		.loc 2 759 0
 747 0020 0C308DE5 		str	r3, [sp, #12]
 748              	.LVL86:
 771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 749              		.loc 2 771 0
 750 0024 0200001A 		bne	.L74
 771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 751              		.loc 2 771 0 is_stmt 0 discriminator 1
 752 0028 0110A0E3 		mov	r1, #1
 753              	.LVL87:
 754 002c 08019FE5 		ldr	r0, .L98
 755              	.LVL88:
 756 0030 FEFFFFEB 		bl	longjmp
 757              	.LVL89:
 758              	.L74:
 773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 759              		.loc 2 773 0 is_stmt 1
 760 0034 170D52E3 		cmp	r2, #1472
 761 0038 0260A0E1 		mov	r6, r2
 762 003c 0200009A 		bls	.L75
 763              	.LVL90:
 764              	.L81:
 762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket;
 765              		.loc 2 762 0
 766 0040 0000A0E3 		mov	r0, #0
 767              	.LVL91:
 768              	.L73:
 889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 769              		.loc 2 889 0
 770 0044 1CD08DE2 		add	sp, sp, #28
 771              		.cfi_remember_state
 772              		.cfi_def_cfa_offset 28
 773              		@ sp needed
 774 0048 F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}
 775              	.LVL92:
 776              	.L75:
 777              		.cfi_restore_state
 778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( FreeRTOS_bind( xSocket, NULL, 0u ) == 0 ) )
 778              		.loc 2 778 0
 779 004c 182090E5 		ldr	r2, [r0, #24]
 780              	.LVL93:
 781 0050 0070A0E1 		mov	r7, r0
 782 0054 000052E3 		cmp	r2, #0
 783 0058 2D00000A 		beq	.L77
 784              	.LVL94:
 785              	.L80:
 795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 786              		.loc 2 795 0
 787 005c 100014E3 		tst	r4, #16
 797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 788              		.loc 2 797 0
 789 0060 0030A013 		movne	r3, #0
 795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 790              		.loc 2 795 0
 781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 791              		.loc 2 781 0
 792 0064 20309705 		ldreq	r3, [r7, #32]
 793              	.L97:
 800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 794              		.loc 2 800 0
 795 0068 014014E2 		ands	r4, r4, #1
 796              	.LVL95:
 797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 797              		.loc 2 797 0
 798 006c 04308DE5 		str	r3, [sp, #4]
 800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 799              		.loc 2 800 0
 800 0070 2C00001A 		bne	.L83
 804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 801              		.loc 2 804 0
 802 0074 10008DE2 		add	r0, sp, #16
 803 0078 FEFFFFEB 		bl	vTaskSetTimeOutState
 804              	.LVL96:
 808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 805              		.loc 2 808 0
 806 007c 04109DE5 		ldr	r1, [sp, #4]
 807 0080 2A0086E2 		add	r0, r6, #42
 808 0084 FEFFFFEB 		bl	pxGetNetworkBufferWithDescriptor
 809              	.LVL97:
 810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 810              		.loc 2 810 0
 811 0088 005050E2 		subs	r5, r0, #0
 812 008c EBFFFF0A 		beq	.L81
 812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 813              		.loc 2 812 0
 814 0090 180095E5 		ldr	r0, [r5, #24]
 815              	.LVL98:
 816 0094 0620A0E1 		mov	r2, r6
 817 0098 0910A0E1 		mov	r1, r9
 818 009c 2A0080E2 		add	r0, r0, #42
 819 00a0 FEFFFFEB 		bl	memcpy
 820              	.LVL99:
 814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 821              		.loc 2 814 0
 822 00a4 04108DE2 		add	r1, sp, #4
 823 00a8 10008DE2 		add	r0, sp, #16
 824 00ac FEFFFFEB 		bl	xTaskCheckForTimeOut
 825              	.LVL100:
 826 00b0 010050E3 		cmp	r0, #1
 817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 827              		.loc 2 817 0
 828 00b4 04408D05 		streq	r4, [sp, #4]
 829              	.L84:
 832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 830              		.loc 2 832 0
 831 00b8 B230D8E1 		ldrh	r3, [r8, #2]
 844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 832              		.loc 2 844 0
 833 00bc 08008DE2 		add	r0, sp, #8
 831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 834              		.loc 2 831 0
 835 00c0 1C6085E5 		str	r6, [r5, #28]
 844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 836              		.loc 2 844 0
 837 00c4 04109DE5 		ldr	r1, [sp, #4]
 832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 838              		.loc 2 832 0
 839 00c8 B032C5E1 		strh	r3, [r5, #32]	@ movhi
 833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 840              		.loc 2 833 0
 841 00cc 083097E5 		ldr	r3, [r7, #8]
 842 00d0 B232C5E1 		strh	r3, [r5, #34]	@ movhi
 834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 843              		.loc 2 834 0
 844 00d4 043098E5 		ldr	r3, [r8, #4]
 845 00d8 143085E5 		str	r3, [r5, #20]
 838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 846              		.loc 2 838 0
 847 00dc 183095E5 		ldr	r3, [r5, #24]
 848 00e0 2620D7E5 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 849 00e4 0620C3E5 		strb	r2, [r3, #6]
 841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 850              		.loc 2 841 0
 851 00e8 0C508DE5 		str	r5, [sp, #12]
 844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 852              		.loc 2 844 0
 853 00ec FEFFFFEB 		bl	xSendEventStructToIPTask
 854              	.LVL101:
 855 00f0 010050E3 		cmp	r0, #1
 847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#if( ipconfigUSE_CALLBACKS == 1 )
 856              		.loc 2 847 0
 857 00f4 0600A001 		moveq	r0, r6
 844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 858              		.loc 2 844 0
 859 00f8 D1FFFF0A 		beq	.L73
 861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 860              		.loc 2 861 0
 861 00fc 000054E3 		cmp	r4, #0
 862 0100 CEFFFF1A 		bne	.L81
 863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 863              		.loc 2 863 0
 864 0104 0500A0E1 		mov	r0, r5
 865 0108 FEFFFFEB 		bl	vReleaseNetworkBufferAndDescriptor
 866              	.LVL102:
 762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket;
 867              		.loc 2 762 0
 868 010c 0400A0E1 		mov	r0, r4
 869              	.LVL103:
 888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** } /* Tested */
 870              		.loc 2 888 0
 871 0110 CBFFFFEA 		b	.L73
 872              	.LVL104:
 873              	.L77:
 779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 874              		.loc 2 779 0 discriminator 3
 875 0114 0210A0E1 		mov	r1, r2
 876              	.LVL105:
 877 0118 FEFFFFEB 		bl	FreeRTOS_bind
 878              	.LVL106:
 778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( FreeRTOS_bind( xSocket, NULL, 0u ) == 0 ) )
 879              		.loc 2 778 0 discriminator 3
 880 011c 000050E3 		cmp	r0, #0
 881 0120 CDFFFF0A 		beq	.L80
 882 0124 C5FFFFEA 		b	.L81
 883              	.LVL107:
 884              	.L83:
 826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 885              		.loc 2 826 0
 886 0128 0900A0E1 		mov	r0, r9
 887 012c FEFFFFEB 		bl	pxUDPPayloadBuffer_to_NetworkBuffer
 888              	.LVL108:
 829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 889              		.loc 2 829 0
 890 0130 005050E2 		subs	r5, r0, #0
 891 0134 DFFFFF1A 		bne	.L84
 892 0138 C0FFFFEA 		b	.L81
 893              	.L99:
 894              		.align	2
 895              	.L98:
 896 013c 28000000 		.word	Unity+40
 897              		.cfi_endproc
 898              	.LFE30:
 900              		.global	__aeabi_uidivmod
 901              		.section	.text.vSocketBind,"ax",%progbits
 902              		.align	2
 903              		.global	vSocketBind
 904              		.syntax unified
 905              		.arm
 906              		.fpu neon
 908              	vSocketBind:
 909              	.LFB32:
 965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 910              		.loc 2 965 0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 8
 913              		@ frame_needed = 0, uses_anonymous_args = 0
 914              	.LVL109:
 915 0000 F3472DE9 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 916              		.cfi_def_cfa_offset 40
 917              		.cfi_offset 4, -32
 918              		.cfi_offset 5, -28
 919              		.cfi_offset 6, -24
 920              		.cfi_offset 7, -20
 921              		.cfi_offset 8, -16
 922              		.cfi_offset 9, -12
 923              		.cfi_offset 10, -8
 924              		.cfi_offset 14, -4
 965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 925              		.loc 2 965 0
 926 0004 0390A0E1 		mov	r9, r3
 973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 927              		.loc 2 973 0
 928 0008 2720D0E5 		ldrb	r2, [r0, #39]	@ zero_extendqisi2
 929              	.LVL110:
 980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 930              		.loc 2 980 0
 931 000c 0C319FE5 		ldr	r3, .L128
 932              	.LVL111:
 933 0010 060052E3 		cmp	r2, #6
 934 0014 08719FE5 		ldr	r7, .L128+4
 935 0018 0370A011 		movne	r7, r3
 936              	.LVL112:
 988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 937              		.loc 2 988 0
 938 001c 010070E3 		cmn	r0, #1
 939 0020 0200001A 		bne	.L102
 988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 940              		.loc 2 988 0 is_stmt 0 discriminator 1
 941 0024 0110A0E3 		mov	r1, #1
 942              	.LVL113:
 943 0028 F8009FE5 		ldr	r0, .L128+8
 944              	.LVL114:
 945 002c FEFFFFEB 		bl	longjmp
 946              	.LVL115:
 947              	.L102:
 995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 948              		.loc 2 995 0 is_stmt 1
 949 0030 000051E3 		cmp	r1, #0
 950              	.LVL116:
 951 0034 0150A0E1 		mov	r5, r1
 997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Put the port to zero to be assigned later. */
 952              		.loc 2 997 0
 953 0038 0D50A001 		moveq	r5, sp
 954              	.LVL117:
 999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 955              		.loc 2 999 0
 956 003c B210CD01 		strheq	r1, [sp, #2]	@ movhi
1010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 957              		.loc 2 1010 0
 958 0040 B280D5E1 		ldrh	r8, [r5, #2]
 959 0044 0060A0E1 		mov	r6, r0
 960 0048 000058E3 		cmp	r8, #0
 961 004c 3FABA003 		moveq	r10, #64512
 962 0050 0900000A 		beq	.L105
 963              	.LVL118:
 964              	.L104:
1025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 965              		.loc 2 1025 0
 966 0054 000059E3 		cmp	r9, #0
 967 0058 2200001A 		bne	.L126
 968              	.L106:
1026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 969              		.loc 2 1026 0 discriminator 3
 970 005c B210D5E1 		ldrh	r1, [r5, #2]
 971 0060 0700A0E1 		mov	r0, r7
 972 0064 FEFFFFEB 		bl	pxListFindListItemWithValue
 973              	.LVL119:
1025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 974              		.loc 2 1025 0 discriminator 3
 975 0068 000050E3 		cmp	r0, #0
1031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 976              		.loc 2 1031 0 discriminator 3
 977 006c 6F00E013 		mvnne	r0, #111
1025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 978              		.loc 2 1025 0 discriminator 3
 979 0070 1F00000A 		beq	.L113
 980 0074 270000EA 		b	.L100
 981              	.LVL120:
 982              	.L115:
 983              	.LBB51:
 984              	.LBB52:
1647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				continue;
 985              		.loc 2 1647 0
 986 0078 0180A0E3 		mov	r8, #1
 987              	.LVL121:
 988              	.L105:
1640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 989              		.loc 2 1640 0
 990 007c FEFFFFEB 		bl	ulRand
 991              	.LVL122:
1643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 992              		.loc 2 1643 0
 993 0080 000050E3 		cmp	r0, #0
 994 0084 0700001A 		bne	.L108
1645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 995              		.loc 2 1645 0
 996 0088 000058E3 		cmp	r8, #0
 997 008c F9FFFF0A 		beq	.L115
 998              	.LVL123:
 999              	.L111:
1647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				continue;
 1000              		.loc 2 1647 0
 1001 0090 0040A0E3 		mov	r4, #0
 1002              	.LVL124:
 1003              	.L110:
 1004              	.LBE52:
 1005              	.LBE51:
1013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 1006              		.loc 2 1013 0
 1007 0094 000054E3 		cmp	r4, #0
1012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( 0 == pxAddress->sin_port )
 1008              		.loc 2 1012 0
 1009 0098 B240C5E1 		strh	r4, [r5, #2]	@ movhi
1013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 1010              		.loc 2 1013 0
 1011 009c ECFFFF1A 		bne	.L104
1015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 1012              		.loc 2 1015 0
 1013 00a0 7C00E0E3 		mvn	r0, #124
 1014 00a4 1B0000EA 		b	.L100
 1015              	.LVL125:
 1016              	.L108:
 1017              	.LBB54:
 1018              	.LBB53:
1658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( ( ( uint16_t )ulRandomSeed ) % usEphemeralPortCount );
 1019              		.loc 2 1658 0
 1020 00a8 3F1BA0E3 		mov	r1, #64512
 1021 00ac 7000FFE6 		uxth	r0, r0
 1022              	.LVL126:
 1023 00b0 FEFFFFEB 		bl	__aeabi_uidivmod
 1024              	.LVL127:
1657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			socketAUTO_PORT_ALLOCATION_START_NUMBER +
 1025              		.loc 2 1657 0
 1026 00b4 014B81E2 		add	r4, r1, #1024
1663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxList,
 1027              		.loc 2 1663 0
 1028 00b8 0700A0E1 		mov	r0, r7
 1029 00bc B44FBFE6 		rev16	r4, r4
 1030 00c0 7440FFE6 		uxth	r4, r4
 1031 00c4 0410A0E1 		mov	r1, r4
 1032 00c8 FEFFFFEB 		bl	pxListFindListItemWithValue
 1033              	.LVL128:
 1034 00cc 000050E3 		cmp	r0, #0
 1035 00d0 EFFFFF0A 		beq	.L110
 1036              	.LVL129:
1675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 1037              		.loc 2 1675 0
 1038 00d4 01A04AE2 		sub	r10, r10, #1
 1039              	.LVL130:
 1040 00d8 7AA0FFE6 		uxth	r10, r10
 1041              	.LVL131:
1677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1042              		.loc 2 1677 0
 1043 00dc 00005AE3 		cmp	r10, #0
 1044 00e0 E5FFFF1A 		bne	.L105
 1045 00e4 E9FFFFEA 		b	.L111
 1046              	.LVL132:
 1047              	.L126:
 1048              	.LBE53:
 1049              	.LBE54:
1025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 1050              		.loc 2 1025 0 discriminator 2
 1051 00e8 2730D6E5 		ldrb	r3, [r6, #39]	@ zero_extendqisi2
 1052 00ec 060053E3 		cmp	r3, #6
 1053 00f0 D9FFFF1A 		bne	.L106
 1054              	.L113:
1037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1055              		.loc 2 1037 0
 1056 00f4 B220D5E1 		ldrh	r2, [r5, #2]
1055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1057              		.loc 2 1055 0
 1058 00f8 0700A0E1 		mov	r0, r7
 1059 00fc 081086E2 		add	r1, r6, #8
1037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1060              		.loc 2 1037 0
 1061 0100 082086E5 		str	r2, [r6, #8]
1041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1062              		.loc 2 1041 0
 1063 0104 2234A0E1 		lsr	r3, r2, #8
 1064 0108 023483E1 		orr	r3, r3, r2, lsl #8
 1065 010c B432C6E1 		strh	r3, [r6, #36]	@ movhi
1055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1066              		.loc 2 1055 0
 1067 0110 FEFFFFEB 		bl	vListInsertEnd
 1068              	.LVL133:
 966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** List_t *pxSocketList;
 1069              		.loc 2 966 0
 1070 0114 0000A0E3 		mov	r0, #0
 1071              	.L100:
1077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
 1072              		.loc 2 1077 0
 1073 0118 08D08DE2 		add	sp, sp, #8
 1074              		.cfi_def_cfa_offset 32
 1075              		@ sp needed
 1076 011c F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1077              	.LVL134:
 1078              	.L129:
 1079              		.align	2
 1080              	.L128:
 1081 0120 00000000 		.word	xBoundUDPSocketsList
 1082 0124 00000000 		.word	xBoundTCPSocketsList
 1083 0128 28000000 		.word	Unity+40
 1084              		.cfi_endproc
 1085              	.LFE32:
 1087              		.section	.text.FreeRTOS_closesocket,"ax",%progbits
 1088              		.align	2
 1089              		.global	FreeRTOS_closesocket
 1090              		.syntax unified
 1091              		.arm
 1092              		.fpu neon
 1094              	FreeRTOS_closesocket:
 1095              	.LFB33:
1087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t xResult;
 1096              		.loc 2 1087 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 8
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              	.LVL135:
 1101 0000 07402DE9 		push	{r0, r1, r2, lr}
 1102              		.cfi_def_cfa_offset 16
 1103              		.cfi_offset 14, -4
1093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** xCloseEvent.pvData = ( void * ) xSocket;
 1104              		.loc 2 1093 0
 1105 0004 0930A0E3 		mov	r3, #9
1094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1106              		.loc 2 1094 0
 1107 0008 04008DE5 		str	r0, [sp, #4]
1096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 1108              		.loc 2 1096 0
 1109 000c 010040E2 		sub	r0, r0, #1
 1110              	.LVL136:
 1111 0010 030070E3 		cmn	r0, #3
1093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** xCloseEvent.pvData = ( void * ) xSocket;
 1112              		.loc 2 1093 0
 1113 0014 0030CDE5 		strb	r3, [sp]
1098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 1114              		.loc 2 1098 0
 1115 0018 0000A083 		movhi	r0, #0
1096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 1116              		.loc 2 1096 0
 1117 001c 0500008A 		bhi	.L130
1120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 1118              		.loc 2 1120 0
 1119 0020 0010A0E3 		mov	r1, #0
 1120 0024 0D00A0E1 		mov	r0, sp
 1121 0028 FEFFFFEB 		bl	xSendEventStructToIPTask
 1122              	.LVL137:
 1123 002c 000050E3 		cmp	r0, #0
1127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 1124              		.loc 2 1127 0
 1125 0030 0000E003 		mvneq	r0, #0
 1126 0034 0100A013 		movne	r0, #1
 1127              	.L130:
1132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1128              		.loc 2 1132 0
 1129 0038 0CD08DE2 		add	sp, sp, #12
 1130              		.cfi_def_cfa_offset 4
 1131              		@ sp needed
 1132 003c 04F09DE4 		ldr	pc, [sp], #4
 1133              		.cfi_endproc
 1134              	.LFE33:
 1136              		.section	.text.vSocketClose,"ax",%progbits
 1137              		.align	2
 1138              		.global	vSocketClose
 1139              		.syntax unified
 1140              		.arm
 1141              		.fpu neon
 1143              	vSocketClose:
 1144              	.LFB34:
1138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 1145              		.loc 2 1138 0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 1149              	.LVL138:
 1150 0000 70402DE9 		push	{r4, r5, r6, lr}
 1151              		.cfi_def_cfa_offset 16
 1152              		.cfi_offset 4, -16
 1153              		.cfi_offset 5, -12
 1154              		.cfi_offset 6, -8
 1155              		.cfi_offset 14, -4
1138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 1156              		.loc 2 1138 0
 1157 0004 0040A0E1 		mov	r4, r0
1144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 1158              		.loc 2 1144 0
 1159 0008 2730D0E5 		ldrb	r3, [r0, #39]	@ zero_extendqisi2
 1160 000c 060053E3 		cmp	r3, #6
 1161 0010 1F00001A 		bne	.L137
1148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 1162              		.loc 2 1148 0
 1163 0014 740090E5 		ldr	r0, [r0, #116]
 1164              	.LVL139:
 1165 0018 000050E3 		cmp	r0, #0
 1166 001c 0000000A 		beq	.L138
1150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 1167              		.loc 2 1150 0
 1168 0020 FEFFFFEB 		bl	vReleaseNetworkBufferAndDescriptor
 1169              	.LVL140:
 1170              	.L138:
1153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 1171              		.loc 2 1153 0
 1172 0024 D40084E2 		add	r0, r4, #212
 1173 0028 FEFFFFEB 		bl	vTCPWindowDestroy
 1174              	.LVL141:
1158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 1175              		.loc 2 1158 0
 1176 002c 6C0094E5 		ldr	r0, [r4, #108]
 1177 0030 000050E3 		cmp	r0, #0
 1178 0034 0000000A 		beq	.L139
1160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 1179              		.loc 2 1160 0
 1180 0038 FEFFFFEB 		bl	vPortFree
 1181              	.LVL142:
 1182              	.L139:
1163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 1183              		.loc 2 1163 0
 1184 003c 700094E5 		ldr	r0, [r4, #112]
 1185 0040 000050E3 		cmp	r0, #0
 1186 0044 0000000A 		beq	.L140
1165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 1187              		.loc 2 1165 0
 1188 0048 FEFFFFEB 		bl	vPortFree
 1189              	.LVL143:
 1190              	.L140:
 1191              	.LBB57:
 1192              	.LBB58:
1250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator != ( const ListItem_t * ) pxEnd;
 1193              		.loc 2 1250 0
 1194 004c B8309FE5 		ldr	r3, .L168
1248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1195              		.loc 2 1248 0
 1196 0050 B4C2D4E1 		ldrh	ip, [r4, #36]
 1197              	.LVL144:
1250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator != ( const ListItem_t * ) pxEnd;
 1198              		.loc 2 1250 0
 1199 0054 0C2093E5 		ldr	r2, [r3, #12]
 1200              	.LVL145:
 1201 0058 083083E2 		add	r3, r3, #8
 1202              	.L141:
 1203 005c 030052E1 		cmp	r2, r3
 1204 0060 0B00000A 		beq	.L137
1254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 1205              		.loc 2 1254 0
 1206 0064 0C1092E5 		ldr	r1, [r2, #12]
 1207              	.LVL146:
1255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 1208              		.loc 2 1255 0
 1209 0068 4B00D1E5 		ldrb	r0, [r1, #75]	@ zero_extendqisi2
 1210 006c 010050E3 		cmp	r0, #1
 1211 0070 1400001A 		bne	.L142
 1212 0074 B402D1E1 		ldrh	r0, [r1, #36]
 1213 0078 0C0050E1 		cmp	r0, ip
 1214 007c 1100001A 		bne	.L142
1257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 1215              		.loc 2 1257 0
 1216 0080 B604D1E1 		ldrh	r0, [r1, #70]
1256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				( pxOtherSocket->u.xTCP.usChildCount ) )
 1217              		.loc 2 1256 0
 1218 0084 000050E3 		cmp	r0, #0
 1219 0088 0E00000A 		beq	.L142
1259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 1220              		.loc 2 1259 0
 1221 008c 010040E2 		sub	r0, r0, #1
 1222 0090 B604C1E1 		strh	r0, [r1, #70]	@ movhi
 1223              	.LVL147:
 1224              	.L137:
 1225              	.LBE58:
 1226              	.LBE57:
1177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 1227              		.loc 2 1177 0
 1228 0094 183094E5 		ldr	r3, [r4, #24]
 1229 0098 000053E3 		cmp	r3, #0
 1230 009c 1700001A 		bne	.L145
 1231              	.L151:
1199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 1232              		.loc 2 1199 0
 1233 00a0 2730D4E5 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
 1234 00a4 110053E3 		cmp	r3, #17
 1235 00a8 0E00000A 		beq	.L146
 1236              	.L150:
1209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 1237              		.loc 2 1209 0
 1238 00ac 040094E5 		ldr	r0, [r4, #4]
 1239 00b0 000050E3 		cmp	r0, #0
 1240 00b4 0F00001A 		bne	.L147
 1241              	.L148:
1229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1242              		.loc 2 1229 0
 1243 00b8 0400A0E1 		mov	r0, r4
 1244 00bc FEFFFFEB 		bl	vPortFree
 1245              	.LVL148:
1232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1246              		.loc 2 1232 0
 1247 00c0 0000A0E3 		mov	r0, #0
 1248 00c4 7080BDE8 		pop	{r4, r5, r6, pc}
 1249              	.LVL149:
 1250              	.L142:
 1251              	.LBB60:
 1252              	.LBB59:
1252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 1253              		.loc 2 1252 0
 1254 00c8 042092E5 		ldr	r2, [r2, #4]
 1255              	.LVL150:
 1256 00cc E2FFFFEA 		b	.L141
 1257              	.LVL151:
 1258              	.L149:
 1259              	.LBE59:
 1260              	.LBE60:
1203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 1261              		.loc 2 1203 0
 1262 00d0 3C3094E5 		ldr	r3, [r4, #60]
 1263 00d4 0C5093E5 		ldr	r5, [r3, #12]
 1264              	.LVL152:
1204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 1265              		.loc 2 1204 0
 1266 00d8 0500A0E1 		mov	r0, r5
 1267 00dc FEFFFFEB 		bl	uxListRemove
 1268              	.LVL153:
1205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 1269              		.loc 2 1205 0
 1270 00e0 0500A0E1 		mov	r0, r5
 1271 00e4 FEFFFFEB 		bl	vReleaseNetworkBufferAndDescriptor
 1272              	.LVL154:
 1273              	.L146:
1201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 1274              		.loc 2 1201 0
 1275 00e8 303094E5 		ldr	r3, [r4, #48]
 1276 00ec 000053E3 		cmp	r3, #0
 1277 00f0 F6FFFF1A 		bne	.L149
 1278 00f4 ECFFFFEA 		b	.L150
 1279              	.L147:
1211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 1280              		.loc 2 1211 0
 1281 00f8 FEFFFFEB 		bl	vEventGroupDelete
 1282              	.LVL155:
 1283 00fc EDFFFFEA 		b	.L148
 1284              	.L145:
1188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1285              		.loc 2 1188 0
 1286 0100 080084E2 		add	r0, r4, #8
 1287 0104 FEFFFFEB 		bl	uxListRemove
 1288              	.LVL156:
 1289 0108 E4FFFFEA 		b	.L151
 1290              	.L169:
 1291              		.align	2
 1292              	.L168:
 1293 010c 00000000 		.word	xBoundTCPSocketsList
 1294              		.cfi_endproc
 1295              	.LFE34:
 1297              		.section	.text.pxUDPSocketLookup,"ax",%progbits
 1298              		.align	2
 1299              		.global	pxUDPSocketLookup
 1300              		.syntax unified
 1301              		.arm
 1302              		.fpu neon
 1304              	pxUDPSocketLookup:
 1305              	.LFB39:
1707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort )
1711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
 1306              		.loc 2 1711 0
 1307              		.cfi_startproc
 1308              		@ args = 0, pretend = 0, frame = 0
 1309              		@ frame_needed = 0, uses_anonymous_args = 0
 1310              	.LVL157:
 1311 0000 10402DE9 		push	{r4, lr}
 1312              		.cfi_def_cfa_offset 8
 1313              		.cfi_offset 4, -8
 1314              		.cfi_offset 14, -4
1712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** const ListItem_t *pxListItem;
1713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket = NULL;
1714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Looking up a socket is quite simple, find a match with the local port.
1716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	See if there is a list item associated with the port number on the
1718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	list of bound sockets. */
1719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 1315              		.loc 2 1719 0
 1316 0004 0010A0E1 		mov	r1, r0
 1317 0008 20009FE5 		ldr	r0, .L174
 1318              	.LVL158:
 1319 000c FEFFFFEB 		bl	pxListFindListItemWithValue
 1320              	.LVL159:
1720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( pxListItem != NULL )
 1321              		.loc 2 1721 0
 1322 0010 000050E3 		cmp	r0, #0
 1323 0014 1080BD08 		popeq	{r4, pc}
1722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* The owner of the list item is the socket itself. */
1724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem );
 1324              		.loc 2 1724 0
 1325 0018 0C0090E5 		ldr	r0, [r0, #12]
 1326              	.LVL160:
1725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		configASSERT( pxSocket != NULL );
 1327              		.loc 2 1725 0
 1328 001c 000050E3 		cmp	r0, #0
 1329 0020 1080BD18 		popne	{r4, pc}
 1330              		.loc 2 1725 0 is_stmt 0 discriminator 1
 1331 0024 0110A0E3 		mov	r1, #1
 1332 0028 04009FE5 		ldr	r0, .L174+4
 1333              	.LVL161:
 1334 002c FEFFFFEB 		bl	longjmp
 1335              	.LVL162:
 1336              	.L175:
 1337              		.align	2
 1338              	.L174:
 1339 0030 00000000 		.word	xBoundUDPSocketsList
 1340 0034 28000000 		.word	Unity+40
 1341              		.cfi_endproc
 1342              	.LFE39:
 1344              		.section	.text.FreeRTOS_GetLocalAddress,"ax",%progbits
 1345              		.align	2
 1346              		.global	FreeRTOS_GetLocalAddress
 1347              		.syntax unified
 1348              		.arm
 1349              		.fpu neon
 1351              	FreeRTOS_GetLocalAddress:
 1352              	.LFB40:
1726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return pxSocket;
1728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
1729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if ipconfigINCLUDE_FULL_INET_ADDR == 1
1733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	uint32_t FreeRTOS_inet_addr( const char * pcIPAddress )
1735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	const uint32_t ulDecimalBase = 10u;
1737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	uint8_t ucOctet[ socketMAX_IP_ADDRESS_OCTETS ];
1738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	const char *pcPointerOnEntering;
1739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	uint32_t ulReturn = 0UL, ulValue;
1740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	UBaseType_t uxOctetNumber;
1741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xResult = pdPASS;
1742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		for( uxOctetNumber = 0u; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
1744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			ulValue = 0ul;
1746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pcPointerOnEntering = pcIPAddress;
1747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
1749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Move previous read characters into the next decimal
1751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				position. */
1752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				ulValue *= ulDecimalBase;
1753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Add the binary value of the ascii character. */
1755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				ulValue += ( ( uint32_t ) ( *pcIPAddress ) - ( uint32_t ) '0' );
1756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Move to next character in the string. */
1758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pcIPAddress++;
1759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Check characters were read. */
1762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pcIPAddress == pcPointerOnEntering )
1763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xResult = pdFAIL;
1765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Check the value fits in an 8-bit number. */
1768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ulValue > 0xffUL )
1769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xResult = pdFAIL;
1771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
1773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				ucOctet[ uxOctetNumber ] = ( uint8_t ) ulValue;
1775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Check the next character is as expected. */
1777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( uxOctetNumber < ( socketMAX_IP_ADDRESS_OCTETS - 1u ) )
1778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( *pcIPAddress != '.' )
1780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xResult = pdFAIL;
1782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					else
1784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
1785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* Move past the dot. */
1786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pcIPAddress++;
1787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
1788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xResult == pdFAIL )
1792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* No point going on. */
1794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
1795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( *pcIPAddress != ( char ) 0 )
1799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Expected the end of the string. */
1801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = pdFAIL;
1802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( uxOctetNumber != socketMAX_IP_ADDRESS_OCTETS )
1805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Didn't read enough octets. */
1807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = pdFAIL;
1808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xResult == pdPASS )
1811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			ulReturn = FreeRTOS_inet_addr_quick( ucOctet[ 0 ], ucOctet[ 1 ], ucOctet[ 2 ], ucOctet[ 3 ] );
1813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return ulReturn;
1816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigINCLUDE_FULL_INET_ADDR */
1819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* Function to get the local address and IP port */
1823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** size_t FreeRTOS_GetLocalAddress( Socket_t xSocket, struct freertos_sockaddr *pxAddress )
1824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
 1353              		.loc 2 1824 0 is_stmt 1
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 1357              		@ link register save eliminated.
 1358              	.LVL163:
1825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
1826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* IP address of local machine. */
1828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	pxAddress->sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 1359              		.loc 2 1828 0
 1360 0000 1C309FE5 		ldr	r3, .L177
1829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Local port on this machine. */
1831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 1361              		.loc 2 1831 0
 1362 0004 B422D0E1 		ldrh	r2, [r0, #36]
1832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	return sizeof( *pxAddress );
1834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
 1363              		.loc 2 1834 0
 1364 0008 0800A0E3 		mov	r0, #8
 1365              	.LVL164:
1828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1366              		.loc 2 1828 0
 1367 000c 143093E5 		ldr	r3, [r3, #20]
 1368 0010 043081E5 		str	r3, [r1, #4]
1831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1369              		.loc 2 1831 0
 1370 0014 2234A0E1 		lsr	r3, r2, #8
 1371 0018 023483E1 		orr	r3, r3, r2, lsl #8
 1372 001c B230C1E1 		strh	r3, [r1, #2]	@ movhi
 1373              		.loc 2 1834 0
 1374 0020 1EFF2FE1 		bx	lr
 1375              	.L178:
 1376              		.align	2
 1377              	.L177:
 1378 0024 00000000 		.word	xDefaultPartUDPPacketHeader
 1379              		.cfi_endproc
 1380              	.LFE40:
 1382              		.section	.text.vSocketWakeUpUser,"ax",%progbits
 1383              		.align	2
 1384              		.global	vSocketWakeUpUser
 1385              		.syntax unified
 1386              		.arm
 1387              		.fpu neon
 1389              	vSocketWakeUpUser:
 1390              	.LFB41:
1835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket )
1839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** {
 1391              		.loc 2 1839 0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 0
 1394              		@ frame_needed = 0, uses_anonymous_args = 0
 1395              	.LVL165:
1840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
1841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c ****  * event or transition */
1842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#if( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
1843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->pxUserSemaphore != NULL )
1845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xSemaphoreGive( pxSocket->pxUserSemaphore );
1847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
1850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#if( ipconfigSOCKET_HAS_USER_WAKE_CALLBACK == 1 )
1852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->pxUserWakeCallback != NULL )
 1396              		.loc 2 1853 0
 1397 0000 283090E5 		ldr	r3, [r0, #40]
1839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 1398              		.loc 2 1839 0
 1399 0004 10402DE9 		push	{r4, lr}
 1400              		.cfi_def_cfa_offset 8
 1401              		.cfi_offset 4, -8
 1402              		.cfi_offset 14, -4
1839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 1403              		.loc 2 1839 0
 1404 0008 0040A0E1 		mov	r4, r0
 1405              		.loc 2 1853 0
 1406 000c 000053E3 		cmp	r3, #0
 1407 0010 0000000A 		beq	.L180
1854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->pxUserWakeCallback( pxSocket );
 1408              		.loc 2 1855 0
 1409 0014 33FF2FE1 		blx	r3
 1410              	.LVL166:
 1411              	.L180:
1856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
1859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
1861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->pxSocketSet != NULL )
1863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & eSELECT_ALL;
1865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xSelectBits != 0ul )
1866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->xSocketBits |= xSelectBits;
1868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
1869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxSocket->xEventBits &= eSOCKET_ALL;
1873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
1875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 1412              		.loc 2 1876 0
 1413 0018 040094E5 		ldr	r0, [r4, #4]
 1414 001c 000050E3 		cmp	r0, #0
 1415 0020 0300000A 		beq	.L181
 1416              		.loc 2 1876 0 is_stmt 0 discriminator 1
 1417 0024 001094E5 		ldr	r1, [r4]
 1418 0028 000051E3 		cmp	r1, #0
 1419 002c 0000000A 		beq	.L181
1877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 1420              		.loc 2 1878 0 is_stmt 1
 1421 0030 FEFFFFEB 		bl	xEventGroupSetBits
 1422              	.LVL167:
 1423              	.L181:
1879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	pxSocket->xEventBits = 0ul;
 1424              		.loc 2 1881 0
 1425 0034 0030A0E3 		mov	r3, #0
 1426 0038 003084E5 		str	r3, [r4]
 1427 003c 1080BDE8 		pop	{r4, pc}
 1428              		.cfi_endproc
 1429              	.LFE41:
 1431              		.section	.text.FreeRTOS_accept,"ax",%progbits
 1432              		.align	2
 1433              		.global	FreeRTOS_accept
 1434              		.syntax unified
 1435              		.arm
 1436              		.fpu neon
 1438              	FreeRTOS_accept:
 1439              	.LFB45:
1882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** }
1883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
1887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* This define makes it possible for network-card drivers to inspect
1889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * UDP message and see if there is any UDP socket bound to a given port
1890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * number.
1891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * This is probably only usefull in systems with a minimum of RAM and
1892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * when lots of anonymous broadcast messages come in
1893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
1894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xPortHasUDPSocket( uint16_t usPortNr )
1895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xFound = pdFALSE;
1897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		vTaskSuspendAll();
1899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) usPortNr ) != NULL ) )
1901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xFound = pdTRUE;
1903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xTaskResumeAll();
1906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xFound;
1908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
1911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
1915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static BaseType_t bMayConnect( FreeRTOS_Socket_t *pxSocket );
1917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static BaseType_t bMayConnect( FreeRTOS_Socket_t *pxSocket )
1918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		switch( pxSocket->u.xTCP.ucTCPState )
1920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			case eCLOSED:
1922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			case eCLOSE_WAIT:	return 0;
1923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			case eCONNECT_SYN:	return -pdFREERTOS_ERRNO_EINPROGRESS;
1924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			default:			return -pdFREERTOS_ERRNO_EAGAIN;
1925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
1929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
1932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr *pxAdd
1934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
1935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xResult = 0;
1936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
1938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Not a valid socket or wrong type */
1940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -pdFREERTOS_ERRNO_EBADF;
1941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
1943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* The socket is already connected. */
1945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -pdFREERTOS_ERRNO_EISCONN;
1946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE )
1948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Bind the socket to the port that the client task will send from.
1950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			Non-standard, so the error returned is that returned by bind(). */
1951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = FreeRTOS_bind( ( Socket_t ) pxSocket, NULL, 0u );
1952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xResult == 0 )
1955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
1956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Check if it makes any sense to wait for a connect event, this condition
1957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			might change while sleeping, so it must be checked within each loop */
1958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
1959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Start the connect procedure, kernel will start working on it */
1961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xResult == 0 )
1962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
1963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE_UNSIGNED;
1964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.ucRepCount = 0u;
1965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				FreeRTOS_debug_printf( ( "FreeRTOS_connect: %u to %lxip:%u\n",
1967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->usLocalPort, FreeRTOS_ntohl( pxAddress->sin_addr ), FreeRTOS_ntohs( pxAddress->sin_p
1968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Port on remote machine. */
1970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
1971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* IP address of remote machine. */
1973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.ulRemoteIP = FreeRTOS_ntohl( pxAddress->sin_addr );
1974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* (client) internal state: socket wants to send a connect. */
1976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				vTCPStateChange( pxSocket, eCONNECT_SYN );
1977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* To start an active connect. */
1979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.usTimeout = 1u;
1980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
1982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
1983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xResult = -pdFREERTOS_ERRNO_ECANCELED;
1984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
1985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
1986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
1987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xResult;
1989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
1990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
1992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
1993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
1995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
1996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
1997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * FreeRTOS_connect: socket wants to connect to a remote port
1998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
1999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_connect( Socket_t xClientSocket, struct freertos_sockaddr *pxAddress, socklen_
2000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
2001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t* ) xClientSocket;
2002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TickType_t xRemainingTime;
2003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xTimed = pdFALSE;
2004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xResult;
2005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TimeOut_t xTimeOut;
2006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		( void ) xAddressLength;
2008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xResult = prvTCPConnectStart( pxSocket, pxAddress );
2010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xResult == 0 )
2012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* And wait for the result */
2014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			for( ;; )
2015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xTimed == pdFALSE )
2017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Only in the first round, check for non-blocking */
2019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xRemainingTime = pxSocket->xReceiveBlockTime;
2020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xRemainingTime == ( TickType_t )0 )
2021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* Not yet connected, correct state, non-blocking. */
2023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
2024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;
2025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Don't get here a second time. */
2028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xTimed = pdTRUE;
2029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Fetch the current time */
2031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					vTaskSetTimeOutState( &xTimeOut );
2032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Did it get connected while sleeping ? */
2035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xResult = FreeRTOS_issocketconnected( pxSocket );
2036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Returns positive when connected, negative means an error */
2038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xResult < 0 )
2039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Return the error */
2041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
2042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xResult > 0 )
2045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Socket now connected, return a zero */
2047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xResult = 0;
2048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
2049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Is it allowed to sleep more? */
2052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) )
2053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
2055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
2056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Go sleeping until we get any down-stream event */
2059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_CONNECT, pdTRUE /*xClearOnExit*/, pdFALSE /
2060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xResult;
2064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
2065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
2071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * FreeRTOS_accept: can return a new connected socket
2072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * if the server socket is in listen mode and receives a connection request
2073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * The new socket will be bound already to the same port number as the listing
2074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * socket.
2075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
2076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	Socket_t FreeRTOS_accept( Socket_t xServerSocket, struct freertos_sockaddr *pxAddress, socklen_t *
2077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 1440              		.loc 2 2077 0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 24
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
 1444              	.LVL168:
 1445 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1446              		.cfi_def_cfa_offset 36
 1447              		.cfi_offset 4, -36
 1448              		.cfi_offset 5, -32
 1449              		.cfi_offset 6, -28
 1450              		.cfi_offset 7, -24
 1451              		.cfi_offset 8, -20
 1452              		.cfi_offset 9, -16
 1453              		.cfi_offset 10, -12
 1454              		.cfi_offset 11, -8
 1455              		.cfi_offset 14, -4
 1456 0004 0180A0E1 		mov	r8, r1
 1457 0008 24D04DE2 		sub	sp, sp, #36
 1458              		.cfi_def_cfa_offset 72
 1459              		.loc 2 2077 0
 1460 000c 0290A0E1 		mov	r9, r2
2078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xServerSocket;
2079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxClientSocket = NULL;
2080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TickType_t xRemainingTime;
2081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xTimed = pdFALSE, xAsk = pdFALSE;
2082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TimeOut_t xTimeOut;
2083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	IPStackEvent_t xAskEvent;
2084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 1461              		.loc 2 2085 0
 1462 0010 0610A0E3 		mov	r1, #6
 1463              	.LVL169:
 1464 0014 0120A0E3 		mov	r2, #1
 1465              	.LVL170:
2077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xServerSocket;
 1466              		.loc 2 2077 0
 1467 0018 0060A0E1 		mov	r6, r0
 1468              	.LVL171:
 1469              		.loc 2 2085 0
 1470 001c FEFFFFEB 		bl	prvValidSocket
 1471              	.LVL172:
 1472 0020 000050E3 		cmp	r0, #0
 1473 0024 4D00000A 		beq	.L210
2086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Not a valid socket or wrong type */
2088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxClientSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
2089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 1474              		.loc 2 2090 0
 1475 0028 3850D6E5 		ldrb	r5, [r6, #56]	@ zero_extendqisi2
 1476 002c 085015E2 		ands	r5, r5, #8
 1477 0030 3100001A 		bne	.L209
 1478              		.loc 2 2090 0 is_stmt 0 discriminator 1
 1479 0034 4B30D6E5 		ldrb	r3, [r6, #75]	@ zero_extendqisi2
 1480 0038 010053E3 		cmp	r3, #1
 1481 003c 4700001A 		bne	.L210
 1482              	.L223:
 1483 0040 0570A0E1 		mov	r7, r5
2091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				 ( pxSocket->u.xTCP.ucTCPState != eTCP_LISTEN ) )
2092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Parent socket is not in listening mode */
2094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxClientSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
2095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
2097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Loop will stop with breaks. */
2099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			for( ; ; )
2100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Is there a new client? */
2102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				vTaskSuspendAll();
2103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
2105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxClientSocket = pxSocket->u.xTCP.pxPeerSocket;
2107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					else
2109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxClientSocket = pxSocket;
2111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxClientSocket != NULL )
2113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.pxPeerSocket = NULL;
 1484              		.loc 2 2114 0 is_stmt 1
 1485 0044 00A0A0E3 		mov	r10, #0
2115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* Is it still not taken ? */
2117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						if( pxClientSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED )
2118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
2119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxClientSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
2120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
2121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						else
2122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
2123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxClientSocket = NULL;
2124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
2125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xTaskResumeAll();
2128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxClientSocket != NULL )
2130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxAddress != NULL )
2132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* IP address of remote machine. */
2134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxAddress->sin_addr = FreeRTOS_ntohl( pxClientSocket->u.xTCP.ulRemoteIP );
2135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* Port on remote machine. */
2137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
2138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxAddressLength != NULL )
2140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						*pxAddressLength = sizeof( *pxAddress );
2142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
2145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xAsk = pdTRUE;
2147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xAsk != pdFALSE )
2151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Ask to set an event in 'xEventGroup' as soon as a new
2153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					client gets connected for this listening socket. */
2154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xAskEvent.eEventType = eTCPAcceptEvent;
 1486              		.loc 2 2154 0
 1487 0048 06B0A0E3 		mov	fp, #6
 1488              	.LVL173:
 1489              	.L205:
2102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 1490              		.loc 2 2102 0
 1491 004c FEFFFFEB 		bl	vTaskSuspendAll
 1492              	.LVL174:
2104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 1493              		.loc 2 2104 0
 1494 0050 3830D6E5 		ldrb	r3, [r6, #56]	@ zero_extendqisi2
 1495 0054 080013E3 		tst	r3, #8
 1496 0058 2900001A 		bne	.L211
2106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 1497              		.loc 2 2106 0
 1498 005c 4C4096E5 		ldr	r4, [r6, #76]
 1499              	.LVL175:
2112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 1500              		.loc 2 2112 0
 1501 0060 000054E3 		cmp	r4, #0
 1502 0064 2700001A 		bne	.L195
 1503              	.L197:
 1504 0068 0040A0E3 		mov	r4, #0
 1505              	.LVL176:
 1506              	.L196:
2127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1507              		.loc 2 2127 0
 1508 006c FEFFFFEB 		bl	xTaskResumeAll
 1509              	.LVL177:
2129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 1510              		.loc 2 2129 0
 1511 0070 000054E3 		cmp	r4, #0
 1512 0074 3E00000A 		beq	.L198
2131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 1513              		.loc 2 2131 0
 1514 0078 000058E3 		cmp	r8, #0
 1515 007c 0600000A 		beq	.L199
 1516 0080 303094E5 		ldr	r3, [r4, #48]
 1517 0084 333FBFE6 		rev	r3, r3
2134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1518              		.loc 2 2134 0
 1519 0088 043088E5 		str	r3, [r8, #4]
2137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 1520              		.loc 2 2137 0
 1521 008c B423D4E1 		ldrh	r2, [r4, #52]
 1522 0090 2234A0E1 		lsr	r3, r2, #8
 1523 0094 023483E1 		orr	r3, r3, r2, lsl #8
 1524 0098 B230C8E1 		strh	r3, [r8, #2]	@ movhi
 1525              	.L199:
2139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 1526              		.loc 2 2139 0
 1527 009c 000059E3 		cmp	r9, #0
2141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 1528              		.loc 2 2141 0
 1529 00a0 0830A013 		movne	r3, #8
 1530 00a4 00308915 		strne	r3, [r9]
2144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 1531              		.loc 2 2144 0
 1532 00a8 3830D6E5 		ldrb	r3, [r6, #56]	@ zero_extendqisi2
 1533 00ac 080013E3 		tst	r3, #8
 1534 00b0 2C00001A 		bne	.L201
 1535              	.LVL178:
 1536              	.L206:
2155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xAskEvent.pvData = ( void * ) pxSocket;
2156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xSendEventStructToIPTask( &xAskEvent, portMAX_DELAY );
 1537              		.loc 2 2156 0
 1538 00b4 0010E0E3 		mvn	r1, #0
 1539 00b8 18008DE2 		add	r0, sp, #24
2154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xAskEvent.pvData = ( void * ) pxSocket;
 1540              		.loc 2 2154 0
 1541 00bc 18B0CDE5 		strb	fp, [sp, #24]
2155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xAskEvent.pvData = ( void * ) pxSocket;
 1542              		.loc 2 2155 0
 1543 00c0 1C608DE5 		str	r6, [sp, #28]
 1544              		.loc 2 2156 0
 1545 00c4 FEFFFFEB 		bl	xSendEventStructToIPTask
 1546              	.LVL179:
2157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxClientSocket != NULL )
 1547              		.loc 2 2159 0
 1548 00c8 000054E3 		cmp	r4, #0
 1549 00cc 0700001A 		bne	.L215
 1550 00d0 0150A0E3 		mov	r5, #1
 1551              	.LVL180:
 1552              	.L207:
2160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
2162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xTimed == pdFALSE )
 1553              		.loc 2 2164 0
 1554 00d4 000057E3 		cmp	r7, #0
 1555 00d8 1300001A 		bne	.L202
2165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Only in the first round, check for non-blocking */
2167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xRemainingTime = pxSocket->xReceiveBlockTime;
 1556              		.loc 2 2167 0
 1557 00dc 1C3096E5 		ldr	r3, [r6, #28]
2168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xRemainingTime == ( TickType_t ) 0 )
 1558              		.loc 2 2168 0
 1559 00e0 000053E3 		cmp	r3, #0
2167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xRemainingTime == ( TickType_t ) 0 )
 1560              		.loc 2 2167 0
 1561 00e4 0C308DE5 		str	r3, [sp, #12]
 1562              		.loc 2 2168 0
 1563 00e8 0D00001A 		bne	.L203
 1564              	.LVL181:
 1565              	.L204:
2088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 1566              		.loc 2 2088 0
 1567 00ec 0040A0E3 		mov	r4, #0
 1568              	.L215:
2169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;
2171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Don't get here a second time */
2174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xTimed = pdTRUE;
2175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Fetch the current time */
2177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					vTaskSetTimeOutState( &xTimeOut );
2178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Has the timeout been reached? */
2181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
2182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
2184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Go sleeping until we get any down-stream event */
2187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_ACCEPT, pdTRUE /*xClearOnExit*/, pdFALSE /*
2188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return ( Socket_t ) pxClientSocket;
2192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 1569              		.loc 2 2192 0
 1570 00f0 0400A0E1 		mov	r0, r4
 1571 00f4 24D08DE2 		add	sp, sp, #36
 1572              		.cfi_remember_state
 1573              		.cfi_def_cfa_offset 36
 1574              		@ sp needed
 1575 00f8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1576              	.LVL182:
 1577              	.L209:
 1578              		.cfi_restore_state
 1579 00fc 0050A0E3 		mov	r5, #0
 1580 0100 CEFFFFEA 		b	.L223
 1581              	.LVL183:
 1582              	.L211:
 1583 0104 0640A0E1 		mov	r4, r6
 1584              	.L195:
 1585              	.LVL184:
2114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1586              		.loc 2 2114 0
 1587 0108 4CA086E5 		str	r10, [r6, #76]
2117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
 1588              		.loc 2 2117 0
 1589 010c 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 1590 0110 020013E3 		tst	r3, #2
 1591 0114 D3FFFF0A 		beq	.L197
2119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
 1592              		.loc 2 2119 0
 1593 0118 9A30C1E7 		bfi	r3, r10, #1, #1
 1594 011c 3830C4E5 		strb	r3, [r4, #56]
 1595 0120 D1FFFFEA 		b	.L196
 1596              	.LVL185:
 1597              	.L203:
2177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 1598              		.loc 2 2177 0
 1599 0124 10008DE2 		add	r0, sp, #16
 1600 0128 FEFFFFEB 		bl	vTaskSetTimeOutState
 1601              	.LVL186:
 1602              	.L202:
2181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 1603              		.loc 2 2181 0
 1604 012c 0C108DE2 		add	r1, sp, #12
 1605 0130 10008DE2 		add	r0, sp, #16
 1606 0134 FEFFFFEB 		bl	xTaskCheckForTimeOut
 1607              	.LVL187:
 1608 0138 003050E2 		subs	r3, r0, #0
 1609 013c EAFFFF1A 		bne	.L204
2187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 1610              		.loc 2 2187 0
 1611 0140 0C209DE5 		ldr	r2, [sp, #12]
 1612 0144 0410A0E3 		mov	r1, #4
 1613 0148 040096E5 		ldr	r0, [r6, #4]
 1614 014c 0170A0E3 		mov	r7, #1
 1615 0150 00208DE5 		str	r2, [sp]
 1616 0154 0120A0E3 		mov	r2, #1
 1617 0158 FEFFFFEB 		bl	xEventGroupWaitBits
 1618              	.LVL188:
2102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 1619              		.loc 2 2102 0
 1620 015c BAFFFFEA 		b	.L205
 1621              	.LVL189:
 1622              	.L210:
2088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 1623              		.loc 2 2088 0
 1624 0160 0040E0E3 		mvn	r4, #0
 1625 0164 E1FFFFEA 		b	.L215
 1626              	.LVL190:
 1627              	.L201:
2150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 1628              		.loc 2 2150 0
 1629 0168 000055E3 		cmp	r5, #0
 1630 016c D0FFFF1A 		bne	.L206
 1631 0170 DEFFFFEA 		b	.L215
 1632              	.L198:
 1633              	.LVL191:
 1634 0174 000055E3 		cmp	r5, #0
 1635 0178 D5FFFF0A 		beq	.L207
 1636 017c CCFFFFEA 		b	.L206
 1637              		.cfi_endproc
 1638              	.LFE45:
 1640              		.section	.text.FreeRTOS_recv,"ax",%progbits
 1641              		.align	2
 1642              		.global	FreeRTOS_recv
 1643              		.syntax unified
 1644              		.arm
 1645              		.fpu neon
 1647              	FreeRTOS_recv:
 1648              	.LFB46:
2193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
2199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * Read incoming data from a TCP socket
2200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * Only after the last byte has been read, a close error might be returned
2201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
2202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_recv( Socket_t xSocket, void *pvBuffer, size_t xBufferLength, BaseType_t xFlag
2203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 1649              		.loc 2 2203 0
 1650              		.cfi_startproc
 1651              		@ args = 0, pretend = 0, frame = 16
 1652              		@ frame_needed = 0, uses_anonymous_args = 0
 1653              	.LVL192:
 1654 0000 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}
 1655              		.cfi_def_cfa_offset 28
 1656              		.cfi_offset 4, -28
 1657              		.cfi_offset 5, -24
 1658              		.cfi_offset 6, -20
 1659              		.cfi_offset 7, -16
 1660              		.cfi_offset 8, -12
 1661              		.cfi_offset 9, -8
 1662              		.cfi_offset 14, -4
 1663 0004 0180A0E1 		mov	r8, r1
 1664 0008 1CD04DE2 		sub	sp, sp, #28
 1665              		.cfi_def_cfa_offset 56
 1666              		.loc 2 2203 0
 1667 000c 0290A0E1 		mov	r9, r2
2204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xByteCount;
2205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
2206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TickType_t xRemainingTime;
2207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xTimed = pdFALSE;
2208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TimeOut_t xTimeOut;
2209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	EventBits_t xEventBits = ( EventBits_t ) 0;
2210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Check if the socket is valid, has type TCP and if it is bound to a
2212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		port. */
2213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 1668              		.loc 2 2213 0
 1669 0010 0610A0E3 		mov	r1, #6
 1670              	.LVL193:
 1671 0014 0120A0E3 		mov	r2, #1
 1672              	.LVL194:
2203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xByteCount;
 1673              		.loc 2 2203 0
 1674 0018 0060A0E1 		mov	r6, r0
 1675              	.LVL195:
 1676 001c 0350A0E1 		mov	r5, r3
 1677              		.loc 2 2213 0
 1678 0020 FEFFFFEB 		bl	prvValidSocket
 1679              	.LVL196:
 1680 0024 000050E3 		cmp	r0, #0
2214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 1681              		.loc 2 2215 0
 1682 0028 1540E003 		mvneq	r4, #21
2213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 1683              		.loc 2 2213 0
 1684 002c 2A00000A 		beq	.L224
2216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
2218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->u.xTCP.rxStream != NULL )
 1685              		.loc 2 2219 0
 1686 0030 6C0096E5 		ldr	r0, [r6, #108]
 1687 0034 000050E3 		cmp	r0, #0
 1688 0038 0000000A 		beq	.L237
2220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xByteCount = ( BaseType_t )uxStreamBufferGetSize ( pxSocket->u.xTCP.rxStream );
 1689              		.loc 2 2221 0
 1690 003c FEFFFFEB 		bl	uxStreamBufferGetSize
 1691              	.LVL197:
 1692              	.L237:
2222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
2224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xByteCount = 0;
 1693              		.loc 2 2225 0
 1694 0040 0040A0E1 		mov	r4, r0
 1695 0044 0030A0E3 		mov	r3, #0
 1696              	.LVL198:
 1697              	.L227:
2226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			while( xByteCount == 0 )
 1698              		.loc 2 2228 0
 1699 0048 000054E3 		cmp	r4, #0
 1700 004c 2500000A 		beq	.L233
2229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				switch( pxSocket->u.xTCP.ucTCPState )
2231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				case eCLOSED:
2233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				case eCLOSE_WAIT:	/* (server + client) waiting for a connection termination request from the lo
2234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				case eCLOSING:		/* (server + client) waiting for a connection termination request acknowledgeme
2235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
2236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* The no-memory error has priority above the non-connected error.
2238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						Both are fatal and will elad to closing the socket. */
2239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
2240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					else
2242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
2244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Call continue to break out of the switch and also the while
2246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					loop. */
2247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					continue;
2248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				default:
2249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
2250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xTimed == pdFALSE )
2253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Only in the first round, check for non-blocking. */
2255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xRemainingTime = pxSocket->xReceiveBlockTime;
2256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xRemainingTime == ( TickType_t ) 0 )
2258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						#if( ipconfigSUPPORT_SIGNALS != 0 )
2260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
2261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							/* Just check for the interrupt flag. */
2262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_INTR,
2263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 								pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, socketDONT_BLOCK );
2264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
2265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						#endif /* ipconfigSUPPORT_SIGNALS */
2266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;
2267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
2270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;
2272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Don't get here a second time. */
2275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xTimed = pdTRUE;
2276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Fetch the current time. */
2278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					vTaskSetTimeOutState( &xTimeOut );
2279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Has the timeout been reached? */
2282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
2283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
2285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Block until there is a down-stream event. */
2288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
2289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					eSOCKET_RECEIVE | eSOCKET_CLOSED | eSOCKET_INTR,
2290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
2291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#if( ipconfigSUPPORT_SIGNALS != 0 )
2292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( ( xEventBits & eSOCKET_INTR ) != 0u )
2294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;
2296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#else
2299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					( void ) xEventBits;
2301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#endif /* ipconfigSUPPORT_SIGNALS */
2303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxSocket->u.xTCP.rxStream != NULL )
2305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xByteCount = ( BaseType_t ) uxStreamBufferGetSize ( pxSocket->u.xTCP.rxStream );
2307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				else
2309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xByteCount = 0;
2311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ipconfigSUPPORT_SIGNALS != 0 )
2315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( xEventBits & eSOCKET_INTR ) != 0 )
2316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( ( xEventBits & ( eSOCKET_RECEIVE | eSOCKET_CLOSED ) ) != 0 )
2318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Shouldn't have cleared other flags. */
2320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xEventBits &= ~eSOCKET_INTR;
2321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xEventGroupSetBits( pxSocket->xEventGroup, xEventBits );
2322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xByteCount = -pdFREERTOS_ERRNO_EINTR;
2324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
2326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#endif /* ipconfigSUPPORT_SIGNALS */
2327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xByteCount > 0 )
 1701              		.loc 2 2327 0
 1702 0050 210000DA 		ble	.L224
2328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 1703              		.loc 2 2329 0
 1704 0054 011015E2 		ands	r1, r5, #1
 1705 0058 4C00001A 		bne	.L234
2330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xByteCount = ( BaseType_t ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0ul, ( uint8_t * ) p
 1706              		.loc 2 2331 0
 1707 005c 5551E0E7 		ubfx	r5, r5, #2, #1
 1708              	.LVL199:
 1709 0060 0930A0E1 		mov	r3, r9
 1710              	.LVL200:
 1711 0064 00508DE5 		str	r5, [sp]
 1712 0068 0820A0E1 		mov	r2, r8
 1713 006c 6C0096E5 		ldr	r0, [r6, #108]
 1714 0070 FEFFFFEB 		bl	uxStreamBufferGet
 1715              	.LVL201:
2332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 1716              		.loc 2 2332 0
 1717 0074 D833D6E1 		ldrsb	r3, [r6, #56]
2331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 1718              		.loc 2 2331 0
 1719 0078 0040A0E1 		mov	r4, r0
 1720              	.LVL202:
 1721              		.loc 2 2332 0
 1722 007c 000053E3 		cmp	r3, #0
 1723 0080 150000AA 		bge	.L224
 1724              	.LBB70:
2333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* We had reached the low-water mark, now see if the flag
2335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						can be cleared */
2336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 1725              		.loc 2 2336 0
 1726 0084 6C2096E5 		ldr	r2, [r6, #108]
 1727              	.LVL203:
 1728              	.LBB71:
 1729              	.LBB72:
 113:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 1730              		.loc 1 113 0
 1731 0088 0C1092E5 		ldr	r1, [r2, #12]
 1732              	.LVL204:
 114:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 1733              		.loc 1 114 0
 1734 008c 003092E5 		ldr	r3, [r2]
 1735              	.LVL205:
 1736              	.LBB73:
 1737              	.LBB74:
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( uxCount >= pxBuffer->LENGTH )
 1738              		.loc 1 68 0
 1739 0090 102092E5 		ldr	r2, [r2, #16]
 1740              	.LVL206:
 1741 0094 023083E0 		add	r3, r3, r2
 1742              	.LVL207:
 1743 0098 013043E2 		sub	r3, r3, #1
 1744 009c 013043E0 		sub	r3, r3, r1
 1745              	.LVL208:
  69:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 1746              		.loc 1 69 0
 1747 00a0 030052E1 		cmp	r2, r3
  71:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 1748              		.loc 1 71 0
 1749 00a4 02304390 		subls	r3, r3, r2
 1750              	.LVL209:
 1751              	.LBE74:
 1752              	.LBE73:
 1753              	.LBE72:
 1754              	.LBE71:
2337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 1755              		.loc 2 2338 0
 1756 00a8 602096E5 		ldr	r2, [r6, #96]
 1757 00ac 030052E1 		cmp	r2, r3
 1758 00b0 0900008A 		bhi	.L224
2339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
2340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 1759              		.loc 2 2340 0
 1760 00b4 3830D6E5 		ldrb	r3, [r6, #56]	@ zero_extendqisi2
2341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
2342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxSocket->u.xTCP.usTimeout = 1u; /* because bLowWater is cleared. */
2343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							xSendEventToIPTask( eTCPTimerEvent );
 1761              		.loc 2 2343 0
 1762 00b8 0500A0E3 		mov	r0, #5
 1763              	.LVL210:
2340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 1764              		.loc 2 2340 0
 1765 00bc 9F33C7E7 		bfc	r3, #7, #1
 1766 00c0 3830C6E5 		strb	r3, [r6, #56]
2341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 1767              		.loc 2 2341 0
 1768 00c4 3930D6E5 		ldrb	r3, [r6, #57]	@ zero_extendqisi2
 1769 00c8 013083E3 		orr	r3, r3, #1
 1770 00cc 3930C6E5 		strb	r3, [r6, #57]
2342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							xSendEventToIPTask( eTCPTimerEvent );
 1771              		.loc 2 2342 0
 1772 00d0 0130A0E3 		mov	r3, #1
 1773 00d4 B034C6E1 		strh	r3, [r6, #64]	@ movhi
 1774              		.loc 2 2343 0
 1775 00d8 FEFFFFEB 		bl	xSendEventToIPTask
 1776              	.LVL211:
 1777              	.L224:
 1778              	.LBE70:
2344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
2345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				else
2348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
2350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, (uint8_t **)pvBuf
2351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		} /* prvValidSocket() */
2354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xByteCount;
2356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 1779              		.loc 2 2356 0
 1780 00dc 0400A0E1 		mov	r0, r4
 1781 00e0 1CD08DE2 		add	sp, sp, #28
 1782              		.cfi_remember_state
 1783              		.cfi_def_cfa_offset 28
 1784              		@ sp needed
 1785 00e4 F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1786              	.LVL212:
 1787              	.L233:
 1788              		.cfi_restore_state
2230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 1789              		.loc 2 2230 0
 1790 00e8 4B20D6E5 		ldrb	r2, [r6, #75]	@ zero_extendqisi2
 1791 00ec 090052E3 		cmp	r2, #9
 1792 00f0 0900008A 		bhi	.L228
 1793 00f4 011300E3 		movw	r1, #769
 1794 00f8 0100A0E3 		mov	r0, #1
 1795 00fc 102211E0 		ands	r2, r1, r0, lsl r2
 1796 0100 0500000A 		beq	.L228
2235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 1797              		.loc 2 2235 0
 1798 0104 3A20D6E5 		ldrb	r2, [r6, #58]	@ zero_extendqisi2
2243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 1799              		.loc 2 2243 0
 1800 0108 040012E3 		tst	r2, #4
 1801 010c 0B70E013 		mvnne	r7, #11
 1802 0110 7F70E003 		mvneq	r7, #127
 1803              	.LVL213:
 1804              	.L229:
 1805 0114 0740A0E1 		mov	r4, r7
 1806 0118 CAFFFFEA 		b	.L227
 1807              	.LVL214:
 1808              	.L228:
2252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 1809              		.loc 2 2252 0
 1810 011c 000053E3 		cmp	r3, #0
 1811 0120 0700001A 		bne	.L230
2255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1812              		.loc 2 2255 0
 1813 0124 1C3096E5 		ldr	r3, [r6, #28]
 1814              	.LVL215:
2257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 1815              		.loc 2 2257 0
 1816 0128 000053E3 		cmp	r3, #0
2255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 1817              		.loc 2 2255 0
 1818 012c 0C308DE5 		str	r3, [sp, #12]
2257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 1819              		.loc 2 2257 0
 1820 0130 E9FFFF0A 		beq	.L224
2269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 1821              		.loc 2 2269 0
 1822 0134 100015E3 		tst	r5, #16
 1823 0138 E7FFFF1A 		bne	.L224
 1824              	.LVL216:
2278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 1825              		.loc 2 2278 0
 1826 013c 10008DE2 		add	r0, sp, #16
 1827 0140 FEFFFFEB 		bl	vTaskSetTimeOutState
 1828              	.LVL217:
 1829              	.L230:
2282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 1830              		.loc 2 2282 0
 1831 0144 0C108DE2 		add	r1, sp, #12
 1832 0148 10008DE2 		add	r0, sp, #16
 1833 014c FEFFFFEB 		bl	xTaskCheckForTimeOut
 1834              	.LVL218:
 1835 0150 007050E2 		subs	r7, r0, #0
 1836 0154 E0FFFF1A 		bne	.L224
2288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					eSOCKET_RECEIVE | eSOCKET_CLOSED | eSOCKET_INTR,
 1837              		.loc 2 2288 0
 1838 0158 0C309DE5 		ldr	r3, [sp, #12]
 1839 015c 0120A0E3 		mov	r2, #1
 1840 0160 6110A0E3 		mov	r1, #97
 1841 0164 00308DE5 		str	r3, [sp]
 1842 0168 0730A0E1 		mov	r3, r7
 1843 016c 040096E5 		ldr	r0, [r6, #4]
 1844 0170 FEFFFFEB 		bl	xEventGroupWaitBits
 1845              	.LVL219:
2304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 1846              		.loc 2 2304 0
 1847 0174 6C0096E5 		ldr	r0, [r6, #108]
 1848 0178 000050E3 		cmp	r0, #0
 1849 017c 0100000A 		beq	.L239
2306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 1850              		.loc 2 2306 0
 1851 0180 FEFFFFEB 		bl	uxStreamBufferGetSize
 1852              	.LVL220:
 1853 0184 0070A0E1 		mov	r7, r0
 1854              	.LVL221:
 1855              	.L239:
 1856 0188 0130A0E3 		mov	r3, #1
 1857 018c E0FFFFEA 		b	.L229
 1858              	.LVL222:
 1859              	.L234:
2350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 1860              		.loc 2 2350 0
 1861 0190 6C5096E5 		ldr	r5, [r6, #108]
 1862              	.LVL223:
 1863              	.LBB75:
 1864              	.LBB76:
 130:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 131:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 132:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferMidSpace( const StreamBuffer_t *pxBuffer );
 133:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferMidSpace( const StreamBuffer_t *pxBuffer )
 134:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
 135:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Returns the distance between uxHead and uxMid */
 136:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxHead = pxBuffer->uxHead;
 137:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxMid = pxBuffer->uxMid;
 138:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 139:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 140:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 141:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 142:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 143:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferMoveMid( StreamBuffer_t *pxBuffer, size_t uxCount );
 144:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferMoveMid( StreamBuffer_t *pxBuffer, size_t uxCount )
 145:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
 146:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Increment uxMid, but no further than uxHead */
 147:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 148:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 149:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( uxCount > uxSize )
 150:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 151:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		uxCount = uxSize;
 152:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 153:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxMid += uxCount;
 154:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 155:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 156:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		pxBuffer->uxMid -= pxBuffer->LENGTH;
 157:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 158:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 159:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 160:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE BaseType_t xStreamBufferIsEmpty( const StreamBuffer_t *pxBuffer );
 161:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE BaseType_t xStreamBufferIsEmpty( const StreamBuffer_t *pxBuffer )
 162:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
 163:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** BaseType_t xReturn;
 164:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 165:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	/* True if no item is available */
 166:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( pxBuffer->uxHead == pxBuffer->uxTail )
 167:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 168:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		xReturn = pdTRUE;
 169:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 170:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	else
 171:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 172:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		xReturn = pdFALSE;
 173:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 174:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return xReturn;
 175:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 176:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 177:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 178:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE BaseType_t xStreamBufferIsFull( const StreamBuffer_t *pxBuffer );
 179:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE BaseType_t xStreamBufferIsFull( const StreamBuffer_t *pxBuffer )
 180:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
 181:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	/* True if the available space equals zero. */
 182:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return ( BaseType_t ) ( uxStreamBufferGetSpace( pxBuffer ) == 0u );
 183:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 184:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 185:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 186:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size
 187:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size
 188:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
 189:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** BaseType_t xReturn;
 190:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 191:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 192:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	/* Returns true if ( uxLeft < uxRight ) */
 193:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( ( uxLeft < uxTail ) ^ ( uxRight < uxTail ) )
 194:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 195:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		if( uxRight < uxTail )
 196:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		{
 197:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 			xReturn = pdTRUE;
 198:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		}
 199:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		else
 200:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		{
 201:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 			xReturn = pdFALSE;
 202:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		}
 203:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 204:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	else
 205:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 206:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		if( uxLeft <= uxRight )
 207:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		{
 208:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 			xReturn = pdTRUE;
 209:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		}
 210:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		else
 211:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		{
 212:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 			xReturn = pdFALSE;
 213:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		}
 214:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 215:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return xReturn;
 216:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 217:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 218:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 219:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetPtr( StreamBuffer_t *pxBuffer, uint8_t **ppucData );
 220:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetPtr( StreamBuffer_t *pxBuffer, uint8_t **ppucData )
 221:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
 222:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxNextTail = pxBuffer->uxTail;
 223:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 1865              		.loc 1 223 0
 1866 0194 0500A0E1 		mov	r0, r5
 222:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 1867              		.loc 1 222 0
 1868 0198 006095E5 		ldr	r6, [r5]
 1869              	.LVL224:
 1870              		.loc 1 223 0
 1871 019c FEFFFFEB 		bl	uxStreamBufferGetSize
 1872              	.LVL225:
 224:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 225:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	*ppucData = pxBuffer->ucArray + uxNextTail;
 226:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 227:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return FreeRTOS_min_uint32( uxSize, pxBuffer->LENGTH - uxNextTail );
 1873              		.loc 1 227 0
 1874 01a0 104095E5 		ldr	r4, [r5, #16]
 1875              	.LVL226:
 225:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 1876              		.loc 1 225 0
 1877 01a4 143085E2 		add	r3, r5, #20
 1878 01a8 063083E0 		add	r3, r3, r6
 1879 01ac 003088E5 		str	r3, [r8]
 1880              	.LVL227:
 1881              		.loc 1 227 0
 1882 01b0 064044E0 		sub	r4, r4, r6
 1883              	.LBB77:
 1884              	.LBB78:
 1885              		.file 3 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_IP.h"
   1:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /*
   2:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * FreeRTOS+TCP V2.0.10
   3:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  *
   5:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * the Software without restriction, including without limitation the rights to
   8:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * subject to the following conditions:
  11:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  *
  12:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * The above copyright notice and this permission notice shall be included in all
  13:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * copies or substantial portions of the Software.
  14:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  *
  15:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  *
  22:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * http://aws.amazon.com/freertos
  23:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * http://www.FreeRTOS.org
  24:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  */
  25:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  26:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #ifndef FREERTOS_IP_H
  27:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define FREERTOS_IP_H
  28:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  29:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #ifdef __cplusplus
  30:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** extern "C" {
  31:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #endif
  32:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  33:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* Application level configuration options. */
  34:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #include "FreeRTOSIPConfig.h"
  35:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #include "FreeRTOSIPConfigDefaults.h"
  36:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #include "IPTraceMacroDefaults.h"
  37:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  38:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* Some constants defining the sizes of several parts of a packet */
  39:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_HEADER			14u
  40:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_IPv4_HEADER			20u
  41:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_IGMP_HEADER			8u
  42:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_ICMP_HEADER			8u
  43:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_UDP_HEADER			8u
  44:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_TCP_HEADER			20u
  45:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  46:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  47:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* The number of octets in the MAC and IP addresses respectively. */
  48:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipMAC_ADDRESS_LENGTH_BYTES ( 6 )
  49:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipIP_ADDRESS_LENGTH_BYTES ( 4 )
  50:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  51:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* IP protocol definitions. */
  52:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipPROTOCOL_ICMP			( 1 )
  53:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipPROTOCOL_IGMP         ( 2 )
  54:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipPROTOCOL_TCP			( 6 )
  55:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipPROTOCOL_UDP			( 17 )
  56:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  57:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* Dimensions the buffers that are filled by received Ethernet frames. */
  58:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_CRC_BYTES					( 4UL )
  59:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_OPTIONAL_802_1Q_TAG_BYTES	( 4UL )
  60:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipTOTAL_ETHERNET_FRAME_SIZE				( ( ( uint32_t ) ipconfigNETWORK_MTU ) + ( ( uint32_t ) ipSI
  61:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  62:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /*_RB_ Comment may need updating. */
  63:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* Space left at the beginning of a network buffer storage area to store a
  64:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** pointer back to the network buffer.  Should be a multiple of 8 to ensure 8 byte
  65:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** alignment is maintained on architectures that require it.
  66:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  67:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** In order to get a 32-bit alignment of network packets, an offset of 2 bytes
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** would be desirable, as defined by ipconfigPACKET_FILLER_SIZE.  So the malloc'd
  69:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** buffer will have the following contents:
  70:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint32_t pointer;	// word-aligned
  71:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uchar_8 filler[6];
  72:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	<< ETH-header >>	// half-word-aligned
  73:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uchar_8 dest[6];    // start of pucEthernetBuffer
  74:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uchar_8 dest[6];
  75:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uchar16_t type;
  76:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	<< IP-header >>		// word-aligned
  77:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint8_t ucVersionHeaderLength;
  78:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	etc
  79:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  */
  80:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #if( ipconfigBUFFER_PADDING != 0 )
  81:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****     #define ipBUFFER_PADDING    ipconfigBUFFER_PADDING
  82:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #else
  83:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****     #define ipBUFFER_PADDING    ( 8u + ipconfigPACKET_FILLER_SIZE )
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #endif
  85:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  86:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* The structure used to store buffers and pass them around the network stack.
  87:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** Buffers can be in use by the stack, in use by the network interface hardware
  88:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** driver, or free (not in use). */
  89:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** typedef struct xNETWORK_BUFFER
  90:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** {
  91:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	ListItem_t xBufferListItem; 	/* Used to reference the buffer form the free buffer list or a socket
  92:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint32_t ulIPAddress;			/* Source or destination IP address, depending on usage scenario. */
  93:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint8_t *pucEthernetBuffer; 	/* Pointer to the start of the Ethernet frame. */
  94:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	size_t xDataLength; 			/* Starts by holding the total Ethernet frame length, then the UDP/TCP payl
  95:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint16_t usPort;				/* Source or destination port, depending on usage scenario. */
  96:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint16_t usBoundPort;			/* The port to which a transmitting socket is bound. */
  97:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
  98:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 		struct xNETWORK_BUFFER *pxNextBuffer; /* Possible optimisation for expert users - requires networ
  99:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#endif
 100:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** } NetworkBufferDescriptor_t;
 101:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 102:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #include "pack_struct_start.h"
 103:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** struct xMAC_ADDRESS
 104:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** {
 105:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint8_t ucBytes[ ipMAC_ADDRESS_LENGTH_BYTES ];
 106:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** }
 107:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #include "pack_struct_end.h"
 108:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 109:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** typedef struct xMAC_ADDRESS MACAddress_t;
 110:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 111:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** typedef enum eNETWORK_EVENTS
 112:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** {
 113:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eNetworkUp,		/* The network is configured. */
 114:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eNetworkDown	/* The network connection has been lost. */
 115:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** } eIPCallbackEvent_t;
 116:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 117:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** typedef enum ePING_REPLY_STATUS
 118:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** {
 119:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eSuccess = 0,		/* A correct reply has been received for an outgoing ping. */
 120:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eInvalidChecksum,	/* A reply was received for an outgoing ping but the checksum of the reply was i
 121:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eInvalidData		/* A reply was received to an outgoing ping but the payload of the reply was not cor
 122:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** } ePingReplyStatus_t;
 123:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 124:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** typedef enum eNETWORK_ADDRESS_TYPE 
 125:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** {
 126:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eNetWorkAddressTypeIPV4,
 127:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eNetWorkAddressTypeIPV6,
 128:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eNetWorkAddressTypeHostName
 129:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** } eNetWorkAddressType_t;
 130:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 131:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* Endian related definitions. */
 132:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
 133:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 134:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	/* FreeRTOS_htons / FreeRTOS_htonl: some platforms might have built-in versions
 135:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	using a single instruction so allow these versions to be overridden. */
 136:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#ifndef FreeRTOS_htons
 137:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 		#define FreeRTOS_htons( usIn ) ( (uint16_t) ( ( ( usIn ) << 8U ) | ( ( usIn ) >> 8U ) ) )
 138:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#endif
 139:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 140:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#ifndef	FreeRTOS_htonl
 141:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 		#define FreeRTOS_htonl( ulIn ) 											\
 142:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 			(																	\
 143:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 				( uint32_t ) 													\
 144:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 				( 																\
 145:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) )                ) << 24  ) | 	\
 146:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) ) & 0x0000ff00UL ) <<  8  ) | 	\
 147:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) ) & 0x00ff0000UL ) >>  8  ) | 	\
 148:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) )                ) >> 24  )  	\
 149:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 				) 																\
 150:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 			)
 151:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#endif
 152:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 153:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #else /* ipconfigBYTE_ORDER */
 154:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 155:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#define FreeRTOS_htons( x ) ( ( uint16_t ) ( x ) )
 156:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#define FreeRTOS_htonl( x ) ( ( uint32_t ) ( x ) )
 157:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 158:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #endif /* ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN */
 159:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 160:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define FreeRTOS_ntohs( x ) FreeRTOS_htons( x )
 161:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define FreeRTOS_ntohl( x ) FreeRTOS_htonl( x )
 162:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 163:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #if( ipconfigHAS_INLINE_FUNCTIONS == 1 )
 164:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 165:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b);
 166:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b);
 167:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b);
 168:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b);
 169:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d);
 170:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_round_down (uint32_t a, uint32_t d);
 171:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE BaseType_t  FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
 172:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE BaseType_t  FreeRTOS_max_BaseType  (BaseType_t  a, BaseType_t  b);
 173:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE UBaseType_t FreeRTOS_max_UBaseType (UBaseType_t a, UBaseType_t b);
 174:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE UBaseType_t  	FreeRTOS_min_UBaseType (UBaseType_t  a, UBaseType_t  b);
 175:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 176:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 177:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
 178:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 179:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 180:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 1886              		.loc 3 180 0
 1887 01b4 000054E1 		cmp	r4, r0
 1888 01b8 0040A021 		movcs	r4, r0
 1889              	.LVL228:
 1890 01bc C6FFFFEA 		b	.L224
 1891              	.LBE78:
 1892              	.LBE77:
 1893              	.LBE76:
 1894              	.LBE75:
 1895              		.cfi_endproc
 1896              	.LFE46:
 1898              		.section	.text.FreeRTOS_get_tx_head,"ax",%progbits
 1899              		.align	2
 1900              		.global	FreeRTOS_get_tx_head
 1901              		.syntax unified
 1902              		.arm
 1903              		.fpu neon
 1905              	FreeRTOS_get_tx_head:
 1906              	.LFB48:
2357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static int32_t prvTCPSendCheck( FreeRTOS_Socket_t *pxSocket, size_t xDataLength )
2364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
2365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	int32_t xResult = 1;
2366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Is this a socket of type TCP and is it already bound to a port number ? */
2368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
2369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -pdFREERTOS_ERRNO_EINVAL;
2371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
2373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -pdFREERTOS_ERRNO_ENOMEM;
2375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( pxSocket->u.xTCP.ucTCPState == eCLOSED )
2377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -pdFREERTOS_ERRNO_ENOTCONN;
2379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
2381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* This TCP connection is closing already, the FIN flag has been sent.
2383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			Maybe it is still delivering or receiving data.
2384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			Return OK in order not to get closed/deleted too quickly */
2385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = 0;
2386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( xDataLength == 0ul )
2388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* send() is being called to send zero bytes */
2390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = 0;
2391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( pxSocket->u.xTCP.txStream == NULL )
2393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Create the outgoing stream only when it is needed */
2395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			prvTCPCreateStream( pxSocket, pdFALSE );
2396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->u.xTCP.txStream == NULL )
2398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xResult = -pdFREERTOS_ERRNO_ENOMEM;
2400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xResult;
2404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
2405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Get a direct pointer to the circular transmit buffer.
2412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	'*pxLength' will contain the number of bytes that may be written. */
2413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	uint8_t *FreeRTOS_get_tx_head( Socket_t xSocket, BaseType_t *pxLength )
2414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 1907              		.loc 2 2414 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 0
 1910              		@ frame_needed = 0, uses_anonymous_args = 0
 1911              	.LVL229:
 1912 0000 70402DE9 		push	{r4, r5, r6, lr}
 1913              		.cfi_def_cfa_offset 16
 1914              		.cfi_offset 4, -16
 1915              		.cfi_offset 5, -12
 1916              		.cfi_offset 6, -8
 1917              		.cfi_offset 14, -4
2415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	uint8_t *pucReturn;
2416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
2417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	StreamBuffer_t *pxBuffer = pxSocket->u.xTCP.txStream;
 1918              		.loc 2 2417 0
 1919 0004 704090E5 		ldr	r4, [r0, #112]
 1920              	.LVL230:
2418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxBuffer != NULL )
 1921              		.loc 2 2419 0
 1922 0008 000054E3 		cmp	r4, #0
 1923 000c 0C00000A 		beq	.L245
 1924              	.LBB79:
2420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		BaseType_t xSpace = ( BaseType_t ) uxStreamBufferGetSpace( pxBuffer );
 1925              		.loc 2 2421 0
 1926 0010 0400A0E1 		mov	r0, r4
 1927              	.LVL231:
 1928 0014 0150A0E1 		mov	r5, r1
 1929 0018 FEFFFFEB 		bl	uxStreamBufferGetSpace
 1930              	.LVL232:
2422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		BaseType_t xRemain = ( BaseType_t ) ( pxBuffer->LENGTH - pxBuffer->uxHead );
 1931              		.loc 2 2422 0
 1932 001c 082094E5 		ldr	r2, [r4, #8]
 1933              	.LVL233:
2423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			*pxLength = FreeRTOS_min_BaseType( xSpace, xRemain );
2425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pucReturn = pxBuffer->ucArray + pxBuffer->uxHead;
 1934              		.loc 2 2425 0
 1935 0020 144084E2 		add	r4, r4, #20
2422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		BaseType_t xRemain = ( BaseType_t ) ( pxBuffer->LENGTH - pxBuffer->uxHead );
 1936              		.loc 2 2422 0
 1937 0024 043014E5 		ldr	r3, [r4, #-4]
 1938 0028 023043E0 		sub	r3, r3, r2
2424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pucReturn = pxBuffer->ucArray + pxBuffer->uxHead;
 1939              		.loc 2 2424 0
 1940 002c 000053E1 		cmp	r3, r0
 1941 0030 003085D5 		strle	r3, [r5]
 1942 0034 000085C5 		strgt	r0, [r5]
 1943              		.loc 2 2425 0
 1944 0038 0C0014E5 		ldr	r0, [r4, #-12]
 1945              	.LVL234:
 1946 003c 000084E0 		add	r0, r4, r0
 1947              	.LVL235:
 1948              	.LBE79:
 1949 0040 7080BDE8 		pop	{r4, r5, r6, pc}
 1950              	.LVL236:
 1951              	.L245:
2426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
2428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			*pxLength = 0;
 1952              		.loc 2 2429 0
 1953 0044 004081E5 		str	r4, [r1]
 1954              	.LVL237:
2430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pucReturn = NULL;
 1955              		.loc 2 2430 0
 1956 0048 0400A0E1 		mov	r0, r4
 1957              	.LVL238:
2431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return pucReturn;
2434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 1958              		.loc 2 2434 0
 1959 004c 7080BDE8 		pop	{r4, r5, r6, pc}
 1960              		.cfi_endproc
 1961              	.LFE48:
 1963              		.section	.text.FreeRTOS_send,"ax",%progbits
 1964              		.align	2
 1965              		.global	FreeRTOS_send
 1966              		.syntax unified
 1967              		.arm
 1968              		.fpu neon
 1970              	FreeRTOS_send:
 1971              	.LFB49:
2435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
2440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * Send data using a TCP socket.  It is not necessary to have the socket
2441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * connected already.  Outgoing data will be stored and delivered as soon as
2442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * the socket gets connected.
2443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
2444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_send( Socket_t xSocket, const void *pvBuffer, size_t uxDataLength, BaseType_t 
2445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 1972              		.loc 2 2445 0
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 16
 1975              		@ frame_needed = 0, uses_anonymous_args = 0
 1976              	.LVL239:
 1977 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1978              		.cfi_def_cfa_offset 36
 1979              		.cfi_offset 4, -36
 1980              		.cfi_offset 5, -32
 1981              		.cfi_offset 6, -28
 1982              		.cfi_offset 7, -24
 1983              		.cfi_offset 8, -20
 1984              		.cfi_offset 9, -16
 1985              		.cfi_offset 10, -12
 1986              		.cfi_offset 11, -8
 1987              		.cfi_offset 14, -4
 1988 0004 0180A0E1 		mov	r8, r1
 1989 0008 1CD04DE2 		sub	sp, sp, #28
 1990              		.cfi_def_cfa_offset 64
 1991              		.loc 2 2445 0
 1992 000c 0270A0E1 		mov	r7, r2
 1993              	.LBB86:
 1994              	.LBB87:
2368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 1995              		.loc 2 2368 0
 1996 0010 0610A0E3 		mov	r1, #6
 1997              	.LVL240:
 1998 0014 0120A0E3 		mov	r2, #1
 1999              	.LVL241:
 2000              	.LBE87:
 2001              	.LBE86:
 2002              		.loc 2 2445 0
 2003 0018 0050A0E1 		mov	r5, r0
 2004              	.LVL242:
 2005 001c 03B0A0E1 		mov	fp, r3
 2006              	.LBB97:
 2007              	.LBB94:
2368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2008              		.loc 2 2368 0
 2009 0020 FEFFFFEB 		bl	prvValidSocket
 2010              	.LVL243:
 2011 0024 000050E3 		cmp	r0, #0
2370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 2012              		.loc 2 2370 0
 2013 0028 1500E003 		mvneq	r0, #21
2368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2014              		.loc 2 2368 0
 2015 002c 0300000A 		beq	.L248
2372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2016              		.loc 2 2372 0
 2017 0030 3A00D5E5 		ldrb	r0, [r5, #58]	@ zero_extendqisi2
 2018 0034 040010E2 		ands	r0, r0, #4
 2019 0038 0200000A 		beq	.L250
 2020              	.L255:
2374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 2021              		.loc 2 2374 0
 2022 003c 0B00E0E3 		mvn	r0, #11
 2023              	.LVL244:
 2024              	.L248:
 2025              	.LBE94:
 2026              	.LBE97:
2446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xByteCount;
2447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xBytesLeft;
2448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
2449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TickType_t xRemainingTime;
2450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xTimed = pdFALSE;
2451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TimeOut_t xTimeOut;
2452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xCloseAfterSend;
2453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Prevent compiler warnings about unused parameters.  The parameter
2455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		may be used in future versions. */
2456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		( void ) xFlags;
2457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
2459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xByteCount > 0 )
2461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* xBytesLeft is number of bytes to send, will count to zero. */
2463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xBytesLeft = ( BaseType_t ) uxDataLength;
2464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* xByteCount is number of bytes that can be sent now. */
2466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
2467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* While there are still bytes to be sent. */
2469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			while( xBytesLeft > 0 )
2470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* If txStream has space. */
2472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xByteCount > 0 )
2473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Don't send more than necessary. */
2475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xByteCount > xBytesLeft )
2476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xByteCount = xBytesLeft;
2478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Is the close-after-send flag set and is this really the
2481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					last transmission? */
2482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) && ( xByteCount == xBytesLef
2483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xCloseAfterSend = pdTRUE;
2485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					else
2487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xCloseAfterSend = pdFALSE;
2489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* The flag 'bCloseAfterSend' can be set before sending data
2492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					using setsockopt()
2493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					When the last data packet is being sent out, a FIN flag will
2495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					be included to let the peer know that no more data is to be
2496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					expected.  The use of 'bCloseAfterSend' is not mandatory, it
2497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					is just a faster way of transferring files (e.g. when using
2498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					FTP). */
2499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xCloseAfterSend != pdFALSE )
2500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* Now suspend the scheduler: sending the last data	and
2502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						setting bCloseRequested must be done together */
2503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						vTaskSuspendAll();
2504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
2505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0ul, ( const uint8_t
2508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xCloseAfterSend != pdFALSE )
2510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* Now when the IP-task transmits the data, it will also
2512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						see	that bCloseRequested is true and include the FIN
2513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						flag to start closure of the connection. */
2514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xTaskResumeAll();
2515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Send a message to the IP-task so it can work on this
2518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					socket.  Data is sent, let the IP-task work on it. */
2519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.usTimeout = 1u;
2520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xIsCallingFromIPTask() == pdFALSE )
2522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* Only send a TCP timer event when not called from the
2524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						IP-task. */
2525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xSendEventToIPTask( eTCPTimerEvent );
2526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xBytesLeft -= xByteCount;
2529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xBytesLeft == 0 )
2531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;
2533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* As there are still bytes left to be sent, increase the
2536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					data pointer. */
2537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pvBuffer = ( void * ) ( ( ( const uint8_t * ) pvBuffer) + xByteCount );
2538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Not all bytes have been sent. In case the socket is marked as
2541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				blocking sleep for a while. */
2542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xTimed == pdFALSE )
2543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Only in the first round, check for non-blocking. */
2545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xRemainingTime = pxSocket->xSendBlockTime;
2546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#if( ipconfigUSE_CALLBACKS != 0 )
2548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						if( xIsCallingFromIPTask() != pdFALSE )
2550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
2551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							/* If this send function is called from within a
2552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							call-back handler it may not block, otherwise
2553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							chances would be big to get a deadlock: the IP-task
2554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							waiting for	itself. */
2555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							xRemainingTime = ( TickType_t ) 0;
2556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
2557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#endif /* ipconfigUSE_CALLBACKS */
2559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xRemainingTime == ( TickType_t ) 0 )
2561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;
2563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
2566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;
2568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Don't get here a second time. */
2571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xTimed = pdTRUE;
2572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Fetch the current time. */
2574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					vTaskSetTimeOutState( &xTimeOut );
2575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				else
2577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Has the timeout been reached? */
2579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
2580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;
2582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Go sleeping until down-stream events are received. */
2586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_SEND | eSOCKET_CLOSED,
2587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
2588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
2590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* How much was actually sent? */
2593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xByteCount = ( ( BaseType_t ) uxDataLength ) - xBytesLeft;
2594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xByteCount == 0 )
2596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxSocket->u.xTCP.ucTCPState > eESTABLISHED )
2598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
2600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				else
2602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE )
2604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
2605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %lxip:%d: no space\n",
2606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxSocket->usLocalPort,
2607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxSocket->u.xTCP.ulRemoteIP,
2608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pxSocket->u.xTCP.usRemotePort ) );
2609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
2610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
2612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xByteCount;
2617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 2027              		.loc 2 2617 0
 2028 0040 1CD08DE2 		add	sp, sp, #28
 2029              		.cfi_remember_state
 2030              		.cfi_def_cfa_offset 36
 2031              		@ sp needed
 2032 0044 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2033              	.LVL245:
 2034              	.L250:
 2035              		.cfi_restore_state
 2036              	.LBB98:
 2037              	.LBB95:
2376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2038              		.loc 2 2376 0
 2039 0048 4B30D5E5 		ldrb	r3, [r5, #75]	@ zero_extendqisi2
 2040 004c 000053E3 		cmp	r3, #0
 2041 0050 0100001A 		bne	.L251
 2042              	.LVL246:
 2043              	.L264:
2378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 2044              		.loc 2 2378 0
 2045 0054 7F00E0E3 		mvn	r0, #127
 2046 0058 F8FFFFEA 		b	.L248
 2047              	.LVL247:
 2048              	.L251:
2380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2049              		.loc 2 2380 0
 2050 005c 3930D5E5 		ldrb	r3, [r5, #57]	@ zero_extendqisi2
 2051 0060 D332E0E7 		ubfx	r3, r3, #5, #1
2387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2052              		.loc 2 2387 0
 2053 0064 000057E3 		cmp	r7, #0
 2054 0068 01308303 		orreq	r3, r3, #1
 2055 006c 000053E3 		cmp	r3, #0
 2056 0070 F2FFFF1A 		bne	.L248
2392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2057              		.loc 2 2392 0
 2058 0074 709095E5 		ldr	r9, [r5, #112]
 2059 0078 000059E3 		cmp	r9, #0
 2060 007c 0F00001A 		bne	.L252
 2061              	.LVL248:
 2062              	.LBB88:
 2063              	.LBB89:
2618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
2625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * Request to put a socket in listen mode
2626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
2627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_listen( Socket_t xSocket, BaseType_t xBacklog )
2628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
2629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket;
2630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xResult = 0;
2631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
2633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* listen() is allowed for a valid TCP socket in Closed state and already
2635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		bound. */
2636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
2637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
2639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( ( pxSocket->u.xTCP.ucTCPState != eCLOSED ) && ( pxSocket->u.xTCP.ucTCPState != eCLOSE_WA
2641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Socket is in a wrong state. */
2643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
2644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
2646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Backlog is interpreted here as "the maximum number of child
2648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			sockets. */
2649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->u.xTCP.usBacklog = ( uint16_t )FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBa
2650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* This cleaning is necessary only if a listening socket is being
2652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			reused as it might have had a previous connection. */
2653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->u.xTCP.bits.bReuseSocket )
2654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxSocket->u.xTCP.rxStream != NULL )
2656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					vStreamBufferClear( pxSocket->u.xTCP.rxStream );
2658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxSocket->u.xTCP.txStream != NULL )
2661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					vStreamBufferClear( pxSocket->u.xTCP.txStream );
2663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLas
2666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				memset( &pxSocket->u.xTCP.xTCPWindow, '\0', sizeof( pxSocket->u.xTCP.xTCPWindow ) );
2667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				memset( &pxSocket->u.xTCP.bits, '\0', sizeof( pxSocket->u.xTCP.bits ) );
2668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Now set the bReuseSocket flag again, because the bits have
2670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				just been cleared. */
2671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
2672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			vTCPStateChange( pxSocket, eTCP_LISTEN );
2675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xResult;
2678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
2679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* shutdown - shut down part of a full-duplex connection */
2686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_shutdown( Socket_t xSocket, BaseType_t xHow )
2687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
2688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
2689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xResult;
2690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
2692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/*_RB_ Is this comment correct?  The socket is not of a type that
2694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			supports the listen() operation. */
2695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
2696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if ( pxSocket->u.xTCP.ucTCPState != eESTABLISHED )
2698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/*_RB_ Is this comment correct?  The socket is not of a type that
2700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			supports the listen() operation. */
2701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
2702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
2704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
2706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Let the IP-task perform the shutdown of the connection. */
2708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->u.xTCP.usTimeout = 1u;
2709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xSendEventToIPTask( eTCPTimerEvent );
2710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = 0;
2711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		(void) xHow;
2713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xResult;
2715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
2716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
2723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * A TCP timer has expired, now check all TCP sockets for:
2724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * - Active connect
2725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * - Send a delayed ACK
2726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * - Send new data
2727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * - Send a keep-alive packet
2728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * - Check for timeout (in non-connected states only)
2729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
2730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
2731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
2732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket;
2733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
2734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TickType_t xNow = xTaskGetTickCount();
2735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static TickType_t xLastTime = 0u;
2736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TickType_t xDelta = xNow - xLastTime;
2737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	ListItem_t* pxEnd = ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
2738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
2739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xLastTime = xNow;
2741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xDelta == 0u )
2743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xDelta = 1u;
2745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		while( pxIterator != pxEnd )
2748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket = ( FreeRTOS_Socket_t * )listGET_LIST_ITEM_OWNER( pxIterator );
2750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
2751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Sockets with 'tmout == 0' do not need any regular attention. */
2753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->u.xTCP.usTimeout == 0u )
2754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				continue;
2756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
2759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDe
2761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
2763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			int rc ;
2765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.usTimeout = 0u;
2766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				rc = xTCPSocketCheck( pxSocket );
2767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Within this function, the socket might want to send a delayed
2769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				ack or send out data or whatever it needs to do. */
2770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( rc < 0 )
2771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Continue because the socket was deleted. */
2773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					continue;
2774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* In xEventBits the driver may indicate that the socket has
2778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			important events for the user.  These are only done just before the
2779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			IP-task goes to sleep. */
2780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->xEventBits != 0u )
2781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( xWillSleep != pdFALSE )
2783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* The IP-task is about to go to sleep, so messages can be
2785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					sent to the socket owners. */
2786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					vSocketWakeUpUser( pxSocket );
2787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				else
2789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Or else make sure this will be called again to wake-up
2791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					the sockets' owner. */
2792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xShortest = ( TickType_t ) 0;
2793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( pxSocket->u.xTCP.usTimeout != 0u ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTime
2797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
2799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xShortest;
2803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
2804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
2811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * TCP: as multiple sockets may be bound to the same local port number
2812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * looking up a socket is a little more complex:
2813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * Both a local port, and a remote port and IP address are being used
2814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * For a socket in listening mode, the remote port and IP address are both 0
2815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
2816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemo
2817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
2818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	ListItem_t *pxIterator;
2819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
2820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	MiniListItem_t *pxEnd = ( MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
2821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Parameter not yet supported. */
2823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		( void ) ulLocalIP;
2824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
2826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator != ( ListItem_t * ) pxEnd;
2827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
2828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
2830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
2832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
2834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* If this is a socket listening to uxLocalPort, remember it
2836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					in case there is no perfect match. */
2837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxListenSocket = pxSocket;
2838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.u
2840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
2841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* For sockets not in listening mode, find a match with
2842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xLocalPort, ulRemoteIP AND xRemotePort. */
2843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxResult = pxSocket;
2844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
2845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
2846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxResult == NULL )
2849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* An exact match was not found, maybe a listening socket was
2851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			found. */
2852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxResult = pxListenSocket;
2853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return pxResult;
2856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
2857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	const struct xSTREAM_BUFFER *FreeRTOS_get_rx_buf( Socket_t xSocket )
2864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
2865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = (FreeRTOS_Socket_t *)xSocket;
2866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return pxSocket->u.xTCP.rxStream;
2868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
2869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static StreamBuffer_t *prvTCPCreateStream ( FreeRTOS_Socket_t *pxSocket, BaseType_t xIsInputStream
2876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
2877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	StreamBuffer_t *pxBuffer;
2878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	size_t uxLength;
2879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	size_t uxSize;
2880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Now that a stream is created, the maximum size is fixed before
2882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		creation, it could still be changed with setsockopt(). */
2883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( xIsInputStream != pdFALSE )
2884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
2886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
2888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.uxLittleSpace  = ( 1ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why di
2890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->u.xTCP.uxEnoughSpace == 0ul )
2893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why mul
2895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
2898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 2064              		.loc 2 2899 0
 2065 0080 684095E5 		ldr	r4, [r5, #104]
 2066              	.LVL249:
2900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Add an extra 4 (or 8) bytes. */
2903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		uxLength += sizeof( size_t );
 2067              		.loc 2 2903 0
 2068 0084 044084E2 		add	r4, r4, #4
 2069              	.LVL250:
2904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* And make the length a multiple of sizeof( size_t ). */
2906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		uxLength &= ~( sizeof( size_t ) - 1u );
 2070              		.loc 2 2906 0
 2071 0088 0340C4E3 		bic	r4, r4, #3
 2072              	.LVL251:
2907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		uxSize = sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) + uxLength;
2909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
 2073              		.loc 2 2910 0
 2074 008c 140084E2 		add	r0, r4, #20
 2075              	.LVL252:
 2076 0090 FEFFFFEB 		bl	pvPortMalloc
 2077              	.LVL253:
2911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxBuffer == NULL )
 2078              		.loc 2 2912 0
 2079 0094 006050E2 		subs	r6, r0, #0
 2080 0098 0D00001A 		bne	.L253
 2081              	.LVL254:
 2082              	.LBB90:
 2083              	.LBB91:
2913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
2915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 2084              		.loc 2 2915 0
 2085 009c 3A30D5E5 		ldrb	r3, [r5, #58]	@ zero_extendqisi2
2916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 2086              		.loc 2 2916 0
 2087 00a0 0810A0E3 		mov	r1, #8
 2088 00a4 0500A0E1 		mov	r0, r5
 2089              	.LVL255:
2915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 2090              		.loc 2 2915 0
 2091 00a8 043083E3 		orr	r3, r3, #4
 2092 00ac 3A30C5E5 		strb	r3, [r5, #58]
 2093              		.loc 2 2916 0
 2094 00b0 FEFFFFEB 		bl	vTCPStateChange
 2095              	.LVL256:
 2096              	.L254:
 2097              	.LBE91:
 2098              	.LBE90:
 2099              	.LBE89:
 2100              	.LBE88:
2397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2101              		.loc 2 2397 0
 2102 00b4 703095E5 		ldr	r3, [r5, #112]
 2103 00b8 000053E3 		cmp	r3, #0
 2104 00bc DEFFFF0A 		beq	.L255
 2105              	.L252:
 2106              	.LVL257:
 2107              	.LBE95:
 2108              	.LBE98:
2466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2109              		.loc 2 2466 0
 2110 00c0 700095E5 		ldr	r0, [r5, #112]
2463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2111              		.loc 2 2463 0
 2112 00c4 0740A0E1 		mov	r4, r7
2466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2113              		.loc 2 2466 0
 2114 00c8 FEFFFFEB 		bl	uxStreamBufferGetSpace
 2115              	.LVL258:
2450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	TimeOut_t xTimeOut;
 2116              		.loc 2 2450 0
 2117 00cc 00A0A0E3 		mov	r10, #0
2469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2118              		.loc 2 2469 0
 2119 00d0 370000EA 		b	.L265
 2120              	.LVL259:
 2121              	.L253:
 2122              	.LBB99:
 2123              	.LBB96:
 2124              	.LBB93:
 2125              	.LBB92:
2917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
2919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Clear the markers of the stream */
2921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 2126              		.loc 2 2921 0
 2127 00d4 1420A0E3 		mov	r2, #20
 2128 00d8 0910A0E1 		mov	r1, r9
 2129 00dc FEFFFFEB 		bl	memset
 2130              	.LVL260:
2922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxBuffer->LENGTH = ( size_t ) uxLength ;
 2131              		.loc 2 2922 0
 2132 00e0 104086E5 		str	r4, [r6, #16]
2923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xTCPWindowLoggingLevel != 0 )
2925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %lu bytes (total %lu)\n", xIsIn
2927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xIsInputStream != 0 )
2930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.rxStream = pxBuffer;
2932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
2934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.txStream = pxBuffer;
 2133              		.loc 2 2935 0
 2134 00e4 706085E5 		str	r6, [r5, #112]
 2135 00e8 F1FFFFEA 		b	.L254
 2136              	.LVL261:
 2137              	.L263:
 2138              	.LBE92:
 2139              	.LBE93:
 2140              	.LBE96:
 2141              	.LBE99:
2472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2142              		.loc 2 2472 0
 2143 00ec 000050E3 		cmp	r0, #0
 2144 00f0 1B0000DA 		ble	.L256
 2145 00f4 040050E1 		cmp	r0, r4
2482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 2146              		.loc 2 2482 0
 2147 00f8 3830D5E5 		ldrb	r3, [r5, #56]	@ zero_extendqisi2
 2148 00fc 0090A0B1 		movlt	r9, r0
 2149 0100 0490A0A1 		movge	r9, r4
 2150              	.LVL262:
 2151 0104 096044E0 		sub	r6, r4, r9
 2152 0108 166F6FE1 		clz	r6, r6
 2153 010c A662A0E1 		lsr	r6, r6, #5
 2154 0110 236216E0 		ands	r6, r6, r3, lsr #4
 2155 0114 3500001A 		bne	.L257
 2156              	.L266:
2507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2157              		.loc 2 2507 0
 2158 0118 0930A0E1 		mov	r3, r9
 2159 011c 0820A0E1 		mov	r2, r8
 2160 0120 0010A0E3 		mov	r1, #0
 2161 0124 700095E5 		ldr	r0, [r5, #112]
 2162 0128 FEFFFFEB 		bl	uxStreamBufferAdd
 2163              	.LVL263:
2509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 2164              		.loc 2 2509 0
 2165 012c 000056E3 		cmp	r6, #0
2507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2166              		.loc 2 2507 0
 2167 0130 0090A0E1 		mov	r9, r0
 2168              	.LVL264:
2509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 2169              		.loc 2 2509 0
 2170 0134 0000000A 		beq	.L258
2514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 2171              		.loc 2 2514 0
 2172 0138 FEFFFFEB 		bl	xTaskResumeAll
 2173              	.LVL265:
 2174              	.L258:
2519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2175              		.loc 2 2519 0
 2176 013c 0130A0E3 		mov	r3, #1	@ movhi
 2177 0140 B034C5E1 		strh	r3, [r5, #64]	@ movhi
2521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 2178              		.loc 2 2521 0
 2179 0144 FEFFFFEB 		bl	xIsCallingFromIPTask
 2180              	.LVL266:
 2181 0148 000050E3 		cmp	r0, #0
 2182 014c 0100001A 		bne	.L259
2525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 2183              		.loc 2 2525 0
 2184 0150 0500A0E3 		mov	r0, #5
 2185 0154 FEFFFFEB 		bl	xSendEventToIPTask
 2186              	.LVL267:
 2187              	.L259:
2530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 2188              		.loc 2 2530 0
 2189 0158 094054E0 		subs	r4, r4, r9
 2190              	.LVL268:
 2191 015c 1C00000A 		beq	.L260
2537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 2192              		.loc 2 2537 0
 2193 0160 098088E0 		add	r8, r8, r9
 2194              	.LVL269:
 2195              	.L256:
2542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2196              		.loc 2 2542 0
 2197 0164 00005AE3 		cmp	r10, #0
 2198 0168 1400001A 		bne	.L261
2545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2199              		.loc 2 2545 0
 2200 016c 203095E5 		ldr	r3, [r5, #32]
2560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 2201              		.loc 2 2560 0
 2202 0170 000053E3 		cmp	r3, #0
2545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2203              		.loc 2 2545 0
 2204 0174 0C308DE5 		str	r3, [sp, #12]
2560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 2205              		.loc 2 2560 0
 2206 0178 1500000A 		beq	.L260
2565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 2207              		.loc 2 2565 0
 2208 017c 10001BE3 		tst	fp, #16
 2209 0180 1300001A 		bne	.L260
 2210              	.LVL270:
2574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 2211              		.loc 2 2574 0
 2212 0184 10008DE2 		add	r0, sp, #16
 2213 0188 FEFFFFEB 		bl	vTaskSetTimeOutState
 2214              	.LVL271:
 2215              	.L262:
2586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );
 2216              		.loc 2 2586 0
 2217 018c 0C309DE5 		ldr	r3, [sp, #12]
 2218 0190 0120A0E3 		mov	r2, #1
 2219 0194 2210A0E3 		mov	r1, #34
 2220 0198 040095E5 		ldr	r0, [r5, #4]
 2221 019c 01A0A0E3 		mov	r10, #1
 2222 01a0 00308DE5 		str	r3, [sp]
 2223 01a4 0030A0E3 		mov	r3, #0
 2224 01a8 FEFFFFEB 		bl	xEventGroupWaitBits
 2225              	.LVL272:
2589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 2226              		.loc 2 2589 0
 2227 01ac 700095E5 		ldr	r0, [r5, #112]
 2228 01b0 FEFFFFEB 		bl	uxStreamBufferGetSpace
 2229              	.LVL273:
 2230              	.L265:
2469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2231              		.loc 2 2469 0
 2232 01b4 000054E3 		cmp	r4, #0
 2233 01b8 CBFFFFCA 		bgt	.L263
 2234 01bc 040000EA 		b	.L260
 2235              	.LVL274:
 2236              	.L261:
2579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 2237              		.loc 2 2579 0
 2238 01c0 0C108DE2 		add	r1, sp, #12
 2239 01c4 10008DE2 		add	r0, sp, #16
 2240 01c8 FEFFFFEB 		bl	xTaskCheckForTimeOut
 2241              	.LVL275:
 2242 01cc 000050E3 		cmp	r0, #0
 2243 01d0 EDFFFF0A 		beq	.L262
 2244              	.L260:
 2245              	.LVL276:
2595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2246              		.loc 2 2595 0
 2247 01d4 040057E0 		subs	r0, r7, r4
 2248              	.LVL277:
 2249 01d8 98FFFF1A 		bne	.L248
 2250              	.LVL278:
2597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2251              		.loc 2 2597 0
 2252 01dc 4B30D5E5 		ldrb	r3, [r5, #75]	@ zero_extendqisi2
 2253 01e0 050053E3 		cmp	r3, #5
2611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 2254              		.loc 2 2611 0
 2255 01e4 1B00E093 		mvnls	r0, #27
2597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2256              		.loc 2 2597 0
 2257 01e8 94FFFF9A 		bls	.L248
 2258 01ec 98FFFFEA 		b	.L264
 2259              	.LVL279:
 2260              	.L257:
2503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 2261              		.loc 2 2503 0
 2262 01f0 FEFFFFEB 		bl	vTaskSuspendAll
 2263              	.LVL280:
2504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 2264              		.loc 2 2504 0
 2265 01f4 3830D5E5 		ldrb	r3, [r5, #56]	@ zero_extendqisi2
2484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 2266              		.loc 2 2484 0
 2267 01f8 0160A0E3 		mov	r6, #1
2504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 2268              		.loc 2 2504 0
 2269 01fc 403083E3 		orr	r3, r3, #64
 2270 0200 3830C5E5 		strb	r3, [r5, #56]
 2271 0204 C3FFFFEA 		b	.L266
 2272              		.cfi_endproc
 2273              	.LFE49:
 2275              		.section	.text.FreeRTOS_listen,"ax",%progbits
 2276              		.align	2
 2277              		.global	FreeRTOS_listen
 2278              		.syntax unified
 2279              		.arm
 2280              		.fpu neon
 2282              	FreeRTOS_listen:
 2283              	.LFB50:
2628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket;
 2284              		.loc 2 2628 0
 2285              		.cfi_startproc
 2286              		@ args = 0, pretend = 0, frame = 0
 2287              		@ frame_needed = 0, uses_anonymous_args = 0
 2288              	.LVL281:
 2289 0000 70402DE9 		push	{r4, r5, r6, lr}
 2290              		.cfi_def_cfa_offset 16
 2291              		.cfi_offset 4, -16
 2292              		.cfi_offset 5, -12
 2293              		.cfi_offset 6, -8
 2294              		.cfi_offset 14, -4
2636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2295              		.loc 2 2636 0
 2296 0004 0120A0E3 		mov	r2, #1
2628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket;
 2297              		.loc 2 2628 0
 2298 0008 0150A0E1 		mov	r5, r1
2636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2299              		.loc 2 2636 0
 2300 000c 0610A0E3 		mov	r1, #6
 2301              	.LVL282:
2628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket;
 2302              		.loc 2 2628 0
 2303 0010 0040A0E1 		mov	r4, r0
 2304              	.LVL283:
2636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2305              		.loc 2 2636 0
 2306 0014 FEFFFFEB 		bl	prvValidSocket
 2307              	.LVL284:
 2308 0018 000050E3 		cmp	r0, #0
 2309 001c 2900000A 		beq	.L288
2640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2310              		.loc 2 2640 0
 2311 0020 4B30D4E5 		ldrb	r3, [r4, #75]	@ zero_extendqisi2
 2312 0024 F73013E2 		ands	r3, r3, #247
 2313 0028 2600001A 		bne	.L288
 2314              	.LBB100:
 2315              	.LBB101:
 179:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 2316              		.loc 3 179 0
 2317 002c FF2F0FE3 		movw	r2, #65535
 2318 0030 020055E1 		cmp	r5, r2
 2319 0034 0250A0A1 		movge	r5, r2
 2320              	.LVL285:
 2321              	.LBE101:
 2322              	.LBE100:
2653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2323              		.loc 2 2653 0
 2324 0038 3820D4E5 		ldrb	r2, [r4, #56]	@ zero_extendqisi2
2649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2325              		.loc 2 2649 0
 2326 003c B854C4E1 		strh	r5, [r4, #72]	@ movhi
2653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2327              		.loc 2 2653 0
 2328 0040 080012E3 		tst	r2, #8
 2329 0044 1A00000A 		beq	.L284
2655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2330              		.loc 2 2655 0
 2331 0048 6C2094E5 		ldr	r2, [r4, #108]
2665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				memset( &pxSocket->u.xTCP.xTCPWindow, '\0', sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 2332              		.loc 2 2665 0
 2333 004c 0010A0E3 		mov	r1, #0
 2334 0050 7A0084E2 		add	r0, r4, #122
2655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2335              		.loc 2 2655 0
 2336 0054 000052E3 		cmp	r2, #0
 2337              	.LVL286:
 2338              	.LBB102:
 2339              	.LBB103:
  55:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxTail = 0u;
 2340              		.loc 1 55 0
 2341 0058 08308215 		strne	r3, [r2, #8]
  56:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxFront = 0u;
 2342              		.loc 1 56 0
 2343 005c 00308215 		strne	r3, [r2]
  57:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxMid = 0u;
 2344              		.loc 1 57 0
 2345 0060 0C308215 		strne	r3, [r2, #12]
  58:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 2346              		.loc 1 58 0
 2347 0064 04308215 		strne	r3, [r2, #4]
 2348              	.LBE103:
 2349              	.LBE102:
2660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2350              		.loc 2 2660 0
 2351 0068 703094E5 		ldr	r3, [r4, #112]
 2352 006c 000053E3 		cmp	r3, #0
 2353              	.LVL287:
 2354              	.LBB104:
 2355              	.LBB105:
  55:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxTail = 0u;
 2356              		.loc 1 55 0
 2357 0070 0020A013 		movne	r2, #0
 2358              	.LVL288:
 2359 0074 08208315 		strne	r2, [r3, #8]
  56:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxFront = 0u;
 2360              		.loc 1 56 0
 2361 0078 00208315 		strne	r2, [r3]
  57:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxMid = 0u;
 2362              		.loc 1 57 0
 2363 007c 0C208315 		strne	r2, [r3, #12]
  58:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 2364              		.loc 1 58 0
 2365 0080 04208315 		strne	r2, [r3, #4]
 2366              	.LBE105:
 2367              	.LBE104:
2665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				memset( &pxSocket->u.xTCP.xTCPWindow, '\0', sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 2368              		.loc 2 2665 0
 2369 0084 4620A0E3 		mov	r2, #70
 2370 0088 FEFFFFEB 		bl	memset
 2371              	.LVL289:
2666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				memset( &pxSocket->u.xTCP.bits, '\0', sizeof( pxSocket->u.xTCP.bits ) );
 2372              		.loc 2 2666 0
 2373 008c C020A0E3 		mov	r2, #192
 2374 0090 0010A0E3 		mov	r1, #0
 2375 0094 D40084E2 		add	r0, r4, #212
 2376 0098 FEFFFFEB 		bl	memset
 2377              	.LVL290:
2667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2378              		.loc 2 2667 0
 2379 009c 0420A0E3 		mov	r2, #4
 2380 00a0 0010A0E3 		mov	r1, #0
 2381 00a4 380084E2 		add	r0, r4, #56
 2382 00a8 FEFFFFEB 		bl	memset
 2383              	.LVL291:
2671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 2384              		.loc 2 2671 0
 2385 00ac 0830A0E3 		mov	r3, #8
 2386 00b0 3830C4E5 		strb	r3, [r4, #56]
 2387              	.L284:
2674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 2388              		.loc 2 2674 0
 2389 00b4 0400A0E1 		mov	r0, r4
 2390 00b8 0110A0E3 		mov	r1, #1
 2391 00bc FEFFFFEB 		bl	vTCPStateChange
 2392              	.LVL292:
2630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2393              		.loc 2 2630 0
 2394 00c0 0000A0E3 		mov	r0, #0
 2395 00c4 7080BDE8 		pop	{r4, r5, r6, pc}
 2396              	.LVL293:
 2397              	.L288:
2638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 2398              		.loc 2 2638 0
 2399 00c8 5E00E0E3 		mvn	r0, #94
 2400              	.LVL294:
2678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2401              		.loc 2 2678 0
 2402 00cc 7080BDE8 		pop	{r4, r5, r6, pc}
 2403              		.cfi_endproc
 2404              	.LFE50:
 2406              		.section	.text.FreeRTOS_shutdown,"ax",%progbits
 2407              		.align	2
 2408              		.global	FreeRTOS_shutdown
 2409              		.syntax unified
 2410              		.arm
 2411              		.fpu neon
 2413              	FreeRTOS_shutdown:
 2414              	.LFB51:
2687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 2415              		.loc 2 2687 0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 0
 2418              		@ frame_needed = 0, uses_anonymous_args = 0
 2419              	.LVL295:
 2420 0000 10402DE9 		push	{r4, lr}
 2421              		.cfi_def_cfa_offset 8
 2422              		.cfi_offset 4, -8
 2423              		.cfi_offset 14, -4
2691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2424              		.loc 2 2691 0
 2425 0004 0120A0E3 		mov	r2, #1
 2426 0008 0610A0E3 		mov	r1, #6
 2427              	.LVL296:
2687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 2428              		.loc 2 2687 0
 2429 000c 0040A0E1 		mov	r4, r0
 2430              	.LVL297:
2691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2431              		.loc 2 2691 0
 2432 0010 FEFFFFEB 		bl	prvValidSocket
 2433              	.LVL298:
 2434 0014 000050E3 		cmp	r0, #0
 2435 0018 0A00000A 		beq	.L302
2697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2436              		.loc 2 2697 0
 2437 001c 4B00D4E5 		ldrb	r0, [r4, #75]	@ zero_extendqisi2
 2438 0020 050050E3 		cmp	r0, #5
 2439 0024 0700001A 		bne	.L302
2705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2440              		.loc 2 2705 0
 2441 0028 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 2442 002c 203083E3 		orr	r3, r3, #32
 2443 0030 3830C4E5 		strb	r3, [r4, #56]
2708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xSendEventToIPTask( eTCPTimerEvent );
 2444              		.loc 2 2708 0
 2445 0034 0130A0E3 		mov	r3, #1
 2446 0038 B034C4E1 		strh	r3, [r4, #64]	@ movhi
2709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = 0;
 2447              		.loc 2 2709 0
 2448 003c FEFFFFEB 		bl	xSendEventToIPTask
 2449              	.LVL299:
2710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 2450              		.loc 2 2710 0
 2451 0040 0000A0E3 		mov	r0, #0
 2452 0044 1080BDE8 		pop	{r4, pc}
 2453              	.LVL300:
 2454              	.L302:
2695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 2455              		.loc 2 2695 0
 2456 0048 5E00E0E3 		mvn	r0, #94
 2457              	.LVL301:
2715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2458              		.loc 2 2715 0
 2459 004c 1080BDE8 		pop	{r4, pc}
 2460              		.cfi_endproc
 2461              	.LFE51:
 2463              		.section	.text.xTCPTimerCheck,"ax",%progbits
 2464              		.align	2
 2465              		.global	xTCPTimerCheck
 2466              		.syntax unified
 2467              		.arm
 2468              		.fpu neon
 2470              	xTCPTimerCheck:
 2471              	.LFB52:
2731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket;
 2472              		.loc 2 2731 0
 2473              		.cfi_startproc
 2474              		@ args = 0, pretend = 0, frame = 0
 2475              		@ frame_needed = 0, uses_anonymous_args = 0
 2476              	.LVL302:
 2477 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2478              		.cfi_def_cfa_offset 32
 2479              		.cfi_offset 4, -32
 2480              		.cfi_offset 5, -28
 2481              		.cfi_offset 6, -24
 2482              		.cfi_offset 7, -20
 2483              		.cfi_offset 8, -16
 2484              		.cfi_offset 9, -12
 2485              		.cfi_offset 10, -8
 2486              		.cfi_offset 14, -4
2731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket;
 2487              		.loc 2 2731 0
 2488 0004 0080A0E1 		mov	r8, r0
2734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	static TickType_t xLastTime = 0u;
 2489              		.loc 2 2734 0
 2490 0008 FEFFFFEB 		bl	xTaskGetTickCount
 2491              	.LVL303:
2792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 2492              		.loc 2 2792 0
 2493 000c FA6FA0E3 		mov	r6, #1000
 2494              	.LBB106:
2765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				rc = xTCPSocketCheck( pxSocket );
 2495              		.loc 2 2765 0
 2496 0010 0090A0E3 		mov	r9, #0
 2497              	.LBE106:
2736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	ListItem_t* pxEnd = ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 2498              		.loc 2 2736 0
 2499 0014 9C309FE5 		ldr	r3, .L323
2738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2500              		.loc 2 2738 0
 2501 0018 9C709FE5 		ldr	r7, .L323+4
2736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	ListItem_t* pxEnd = ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 2502              		.loc 2 2736 0
 2503 001c 005093E5 		ldr	r5, [r3]
 2504              	.LVL304:
2738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2505              		.loc 2 2738 0
 2506 0020 0CA097E5 		ldr	r10, [r7, #12]
 2507              	.LVL305:
2747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2508              		.loc 2 2747 0
 2509 0024 087087E2 		add	r7, r7, #8
2740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2510              		.loc 2 2740 0
 2511 0028 000083E5 		str	r0, [r3]
2744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 2512              		.loc 2 2744 0
 2513 002c 050050E1 		cmp	r0, r5
 2514 0030 05504010 		subne	r5, r0, r5
 2515              	.LVL306:
 2516 0034 0150A003 		moveq	r5, #1
 2517              	.LVL307:
 2518              	.L306:
2747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2519              		.loc 2 2747 0
 2520 0038 07005AE1 		cmp	r10, r7
 2521 003c 0100001A 		bne	.L311
2803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2522              		.loc 2 2803 0
 2523 0040 0600A0E1 		mov	r0, r6
 2524 0044 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2525              	.L311:
2749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 2526              		.loc 2 2749 0
 2527 0048 0C409AE5 		ldr	r4, [r10, #12]
 2528              	.LVL308:
2750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2529              		.loc 2 2750 0
 2530 004c 04A09AE5 		ldr	r10, [r10, #4]
 2531              	.LVL309:
2753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2532              		.loc 2 2753 0
 2533 0050 B034D4E1 		ldrh	r3, [r4, #64]
 2534 0054 000053E3 		cmp	r3, #0
 2535 0058 F6FFFF0A 		beq	.L306
2758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2536              		.loc 2 2758 0
 2537 005c 050053E1 		cmp	r3, r5
2760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 2538              		.loc 2 2760 0
 2539 0060 05304380 		subhi	r3, r3, r5
 2540 0064 B034C481 		strhhi	r3, [r4, #64]	@ movhi
2758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2541              		.loc 2 2758 0
 2542 0068 0400008A 		bhi	.L309
 2543              	.LBB107:
2765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				rc = xTCPSocketCheck( pxSocket );
 2544              		.loc 2 2765 0
 2545 006c B094C4E1 		strh	r9, [r4, #64]	@ movhi
2766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2546              		.loc 2 2766 0
 2547 0070 0400A0E1 		mov	r0, r4
 2548 0074 FEFFFFEB 		bl	xTCPSocketCheck
 2549              	.LVL310:
2770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2550              		.loc 2 2770 0
 2551 0078 000050E3 		cmp	r0, #0
 2552 007c EDFFFFBA 		blt	.L306
 2553              	.LVL311:
 2554              	.L309:
 2555              	.LBE107:
2780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2556              		.loc 2 2780 0
 2557 0080 003094E5 		ldr	r3, [r4]
 2558 0084 000053E3 		cmp	r3, #0
 2559 0088 0400000A 		beq	.L310
2782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2560              		.loc 2 2782 0
 2561 008c 000058E3 		cmp	r8, #0
2792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 2562              		.loc 2 2792 0
 2563 0090 0860A001 		moveq	r6, r8
 2564              	.LVL312:
2782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2565              		.loc 2 2782 0
 2566 0094 0100000A 		beq	.L310
2786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 2567              		.loc 2 2786 0
 2568 0098 0400A0E1 		mov	r0, r4
 2569 009c FEFFFFEB 		bl	vSocketWakeUpUser
 2570              	.LVL313:
 2571              	.L310:
2796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2572              		.loc 2 2796 0
 2573 00a0 B034D4E1 		ldrh	r3, [r4, #64]
 2574 00a4 000053E3 		cmp	r3, #0
 2575 00a8 E2FFFF0A 		beq	.L306
 2576 00ac 030056E1 		cmp	r6, r3
 2577 00b0 0360A021 		movcs	r6, r3
 2578              	.LVL314:
 2579 00b4 DFFFFFEA 		b	.L306
 2580              	.L324:
 2581              		.align	2
 2582              	.L323:
 2583 00b8 00000000 		.word	.LANCHOR0
 2584 00bc 00000000 		.word	xBoundTCPSocketsList
 2585              		.cfi_endproc
 2586              	.LFE52:
 2588              		.section	.text.pxTCPSocketLookup,"ax",%progbits
 2589              		.align	2
 2590              		.global	pxTCPSocketLookup
 2591              		.syntax unified
 2592              		.arm
 2593              		.fpu neon
 2595              	pxTCPSocketLookup:
 2596              	.LFB53:
2817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	ListItem_t *pxIterator;
 2597              		.loc 2 2817 0
 2598              		.cfi_startproc
 2599              		@ args = 0, pretend = 0, frame = 0
 2600              		@ frame_needed = 0, uses_anonymous_args = 0
 2601              	.LVL315:
2825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator != ( ListItem_t * ) pxEnd;
 2602              		.loc 2 2825 0
 2603 0000 68009FE5 		ldr	r0, .L332
 2604              	.LVL316:
 2605              	.LBB108:
2831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2606              		.loc 2 2831 0
 2607 0004 7110FFE6 		uxth	r1, r1
 2608              	.LVL317:
 2609              	.LBE108:
2817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	ListItem_t *pxIterator;
 2610              		.loc 2 2817 0
 2611 0008 30402DE9 		push	{r4, r5, lr}
 2612              		.cfi_def_cfa_offset 12
 2613              		.cfi_offset 4, -12
 2614              		.cfi_offset 5, -8
 2615              		.cfi_offset 14, -4
 2616              	.LBB109:
2839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2617              		.loc 2 2839 0
 2618 000c 7330FFE6 		uxth	r3, r3
 2619              	.LVL318:
 2620              	.LBE109:
2819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	MiniListItem_t *pxEnd = ( MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 2621              		.loc 2 2819 0
 2622 0010 0040A0E3 		mov	r4, #0
2825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator != ( ListItem_t * ) pxEnd;
 2623              		.loc 2 2825 0
 2624 0014 08C080E2 		add	ip, r0, #8
 2625 0018 0CE090E5 		ldr	lr, [r0, #12]
 2626              	.LVL319:
 2627              	.L326:
2825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			 pxIterator != ( ListItem_t * ) pxEnd;
 2628              		.loc 2 2825 0 is_stmt 0 discriminator 1
 2629 001c 0C005EE1 		cmp	lr, ip
 2630 0020 0100001A 		bne	.L329
 2631 0024 0400A0E1 		mov	r0, r4
 2632              	.LVL320:
2856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2633              		.loc 2 2856 0 is_stmt 1
 2634 0028 3080BDE8 		pop	{r4, r5, pc}
 2635              	.LVL321:
 2636              	.L329:
 2637              	.LBB110:
2829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2638              		.loc 2 2829 0
 2639 002c 0C009EE5 		ldr	r0, [lr, #12]
 2640              	.LVL322:
2831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2641              		.loc 2 2831 0
 2642 0030 B452D0E1 		ldrh	r5, [r0, #36]
 2643 0034 010055E1 		cmp	r5, r1
 2644 0038 0A00001A 		bne	.L327
2833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2645              		.loc 2 2833 0
 2646 003c 4B50D0E5 		ldrb	r5, [r0, #75]	@ zero_extendqisi2
 2647 0040 010055E3 		cmp	r5, #1
 2648 0044 0600000A 		beq	.L330
2839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2649              		.loc 2 2839 0
 2650 0048 B453D0E1 		ldrh	r5, [r0, #52]
 2651 004c 030055E1 		cmp	r5, r3
 2652 0050 0400001A 		bne	.L327
2839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2653              		.loc 2 2839 0 is_stmt 0 discriminator 1
 2654 0054 305090E5 		ldr	r5, [r0, #48]
 2655 0058 020055E1 		cmp	r5, r2
 2656 005c 0100001A 		bne	.L327
 2657 0060 3080BDE8 		pop	{r4, r5, pc}
 2658              	.L330:
 2659              	.LVL323:
 2660 0064 0040A0E1 		mov	r4, r0
 2661              	.LVL324:
 2662              	.L327:
 2663              	.LBE110:
2827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2664              		.loc 2 2827 0 is_stmt 1
 2665 0068 04E09EE5 		ldr	lr, [lr, #4]
 2666              	.LVL325:
 2667 006c EAFFFFEA 		b	.L326
 2668              	.L333:
 2669              		.align	2
 2670              	.L332:
 2671 0070 00000000 		.word	xBoundTCPSocketsList
 2672              		.cfi_endproc
 2673              	.LFE53:
 2675              		.section	.text.FreeRTOS_get_rx_buf,"ax",%progbits
 2676              		.align	2
 2677              		.global	FreeRTOS_get_rx_buf
 2678              		.syntax unified
 2679              		.arm
 2680              		.fpu neon
 2682              	FreeRTOS_get_rx_buf:
 2683              	.LFB54:
2864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = (FreeRTOS_Socket_t *)xSocket;
 2684              		.loc 2 2864 0
 2685              		.cfi_startproc
 2686              		@ args = 0, pretend = 0, frame = 0
 2687              		@ frame_needed = 0, uses_anonymous_args = 0
 2688              		@ link register save eliminated.
 2689              	.LVL326:
2868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2690              		.loc 2 2868 0
 2691 0000 6C0090E5 		ldr	r0, [r0, #108]
 2692              	.LVL327:
 2693 0004 1EFF2FE1 		bx	lr
 2694              		.cfi_endproc
 2695              	.LFE54:
 2697              		.section	.text.lTCPAddRxdata,"ax",%progbits
 2698              		.align	2
 2699              		.global	lTCPAddRxdata
 2700              		.syntax unified
 2701              		.arm
 2702              		.fpu neon
 2704              	lTCPAddRxdata:
 2705              	.LFB56:
2936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return pxBuffer;
2940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
2941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
2943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
2944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
2946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
2948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
2949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * and will be put in front of the head so it can not be popped by the user.
2950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
2951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32
2952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 2706              		.loc 2 2952 0
 2707              		.cfi_startproc
 2708              		@ args = 0, pretend = 0, frame = 0
 2709              		@ frame_needed = 0, uses_anonymous_args = 0
 2710              	.LVL328:
 2711 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2712              		.cfi_def_cfa_offset 32
 2713              		.cfi_offset 4, -32
 2714              		.cfi_offset 5, -28
 2715              		.cfi_offset 6, -24
 2716              		.cfi_offset 7, -20
 2717              		.cfi_offset 8, -16
 2718              		.cfi_offset 9, -12
 2719              		.cfi_offset 10, -8
 2720              		.cfi_offset 14, -4
 2721              		.loc 2 2952 0
 2722 0004 0040A0E1 		mov	r4, r0
2953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 2723              		.loc 2 2953 0
 2724 0008 6C6090E5 		ldr	r6, [r0, #108]
 2725              	.LVL329:
2952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 2726              		.loc 2 2952 0
 2727 000c 0170A0E1 		mov	r7, r1
 2728 0010 0280A0E1 		mov	r8, r2
 2729 0014 0390A0E1 		mov	r9, r3
2954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	int32_t xResult;
2955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#if( ipconfigUSE_CALLBACKS == 1 )
2956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive );
2957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		const uint8_t *pucBuffer = NULL;
2958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	#endif /* ipconfigUSE_CALLBACKS */
2959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
2961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pucData != NULL ) copy data the the buffer
2962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pucData == NULL ) no copying, just advance rxHead
2963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( uxOffset != 0 ) Just store data which has come out-of-order
2964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( uxOffset == 0 ) Also advance rxHead */
2965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxStream == NULL )
 2730              		.loc 2 2965 0
 2731 0018 000056E3 		cmp	r6, #0
 2732 001c 2100001A 		bne	.L336
 2733              	.LVL330:
 2734              	.LBB120:
 2735              	.LBB121:
2887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2736              		.loc 2 2887 0
 2737 0020 5C2090E5 		ldr	r2, [r0, #92]
 2738              	.LVL331:
2885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2739              		.loc 2 2885 0
 2740 0024 643090E5 		ldr	r3, [r0, #100]
 2741              	.LVL332:
2887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2742              		.loc 2 2887 0
 2743 0028 000052E3 		cmp	r2, #0
2889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 2744              		.loc 2 2889 0
 2745 002c 08019F05 		ldreq	r0, .L344
 2746              	.LVL333:
 2747 0030 93008100 		umulleq	r0, r1, r3, r0
 2748 0034 2121A001 		lsreq	r2, r1, #2
 2749 0038 5C208405 		streq	r2, [r4, #92]
2892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 2750              		.loc 2 2892 0
 2751 003c 602094E5 		ldr	r2, [r4, #96]
 2752 0040 000052E3 		cmp	r2, #0
2894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 2753              		.loc 2 2894 0
 2754 0044 F0209F05 		ldreq	r2, .L344
 2755 0048 0301A001 		lsleq	r0, r3, #2
2903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2756              		.loc 2 2903 0
 2757 004c 043083E2 		add	r3, r3, #4
 2758              	.LVL334:
2906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2759              		.loc 2 2906 0
 2760 0050 0350C3E3 		bic	r5, r3, #3
2894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 2761              		.loc 2 2894 0
 2762 0054 90028100 		umulleq	r0, r1, r0, r2
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2763              		.loc 2 2910 0
 2764 0058 140085E2 		add	r0, r5, #20
2894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 2765              		.loc 2 2894 0
 2766 005c 2121A001 		lsreq	r2, r1, #2
 2767 0060 60208405 		streq	r2, [r4, #96]
 2768              	.LVL335:
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2769              		.loc 2 2910 0
 2770 0064 FEFFFFEB 		bl	pvPortMalloc
 2771              	.LVL336:
2912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2772              		.loc 2 2912 0
 2773 0068 006050E2 		subs	r6, r0, #0
 2774              	.LVL337:
 2775 006c 0800001A 		bne	.L339
 2776              	.LVL338:
 2777              	.LBB122:
 2778              	.LBB123:
2915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 2779              		.loc 2 2915 0
 2780 0070 3A30D4E5 		ldrb	r3, [r4, #58]	@ zero_extendqisi2
 2781              	.LBE123:
 2782              	.LBE122:
 2783              	.LBE121:
 2784              	.LBE120:
2966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
2968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxStream == NULL )
2969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				return -1;
 2785              		.loc 2 2970 0
 2786 0074 0050E0E3 		mvn	r5, #0
 2787              	.LVL339:
 2788              	.LBB128:
 2789              	.LBB126:
 2790              	.LBB125:
 2791              	.LBB124:
2916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 2792              		.loc 2 2916 0
 2793 0078 0810A0E3 		mov	r1, #8
 2794 007c 0400A0E1 		mov	r0, r4
 2795              	.LVL340:
2915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 2796              		.loc 2 2915 0
 2797 0080 043083E3 		orr	r3, r3, #4
 2798 0084 3A30C4E5 		strb	r3, [r4, #58]
2916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 2799              		.loc 2 2916 0
 2800 0088 FEFFFFEB 		bl	vTCPStateChange
 2801              	.LVL341:
 2802              	.L335:
 2803              	.LBE124:
 2804              	.LBE125:
 2805              	.LBE126:
 2806              	.LBE128:
2971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ipconfigUSE_CALLBACKS == 1 )
2975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0u ) && ( uxOffset == 0
2977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Data can be passed directly to the user */
2979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pucBuffer = pcData;
2980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Zero-copy for call-back: no need to add the bytes to the
2982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				stream, only the pointer will be advanced by uxStreamBufferAdd(). */
2983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pcData = NULL;
2984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
2985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
2986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#endif /* ipconfigUSE_CALLBACKS */
2987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
2989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
2990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#if( ipconfigHAS_DEBUG_PRINTF != 0 )
2991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
2992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( xResult != ( int32_t ) ulByteCount )
2993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
2994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %ld: %ld/%lu bytes (tail %lu head %lu space %lu fro
2995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					uxOffset, xResult, ulByteCount,
2996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxStream->uxTail,
2997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxStream->uxHead,
2998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					uxStreamBufferFrontSpace( pxStream ),
2999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxStream->uxFront ) );
3000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
3001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		#endif /* ipconfigHAS_DEBUG_PRINTF */
3003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( uxOffset == 0u )
3005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Data is being added to rxStream at the head (offs = 0) */
3007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#if( ipconfigUSE_CALLBACKS == 1 )
3008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( bHasHandler != pdFALSE )
3009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
3010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* The socket owner has installed an OnReceive handler. Pass the
3011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					Rx data, without copying from the rxStream, to the user. */
3012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					for (;;)
3013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
3014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						uint8_t *ucReadPtr = NULL;
3015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						uint32_t ulCount;
3016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						if( pucBuffer != NULL )
3017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
3018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							ucReadPtr = ( uint8_t * )pucBuffer;
3019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							ulCount = ulByteCount;
3020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							pucBuffer = NULL;
3021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
3022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						else
3023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
3024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxStream, &( ucReadPtr ) );
3025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
3026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						if( ulCount == 0ul )
3028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						{
3029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 							break;
3030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						}
3031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.pxHandleReceive( (Socket_t *)pxSocket, ( void* )ucReadPtr, ( size_t ) ulCoun
3033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						uxStreamBufferGet( pxStream, 0ul, NULL, ( size_t ) ulCount, pdFALSE );
3034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
3035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				} else
3036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			#endif /* ipconfigUSE_CALLBACKS */
3037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
3038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* See if running out of space. */
3039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
3040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
3041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
3042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
3043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
3044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
3045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
3046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						/* bLowWater was reached, send the changed window size. */
3048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.usTimeout = 1u;
3049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xSendEventToIPTask( eTCPTimerEvent );
3050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
3051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
3052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* New incoming data is available, wake up the user.   User's
3054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				semaphores will be set just before the IP-task goes asleep. */
3055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->xEventBits |= eSOCKET_RECEIVE;
3056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
3058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
3059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
3060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
3061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
3062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
3063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
3064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#endif
3065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
3066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xResult;
3069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 2807              		.loc 2 3069 0
 2808 008c 0500A0E1 		mov	r0, r5
 2809 0090 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2810              	.LVL342:
 2811              	.L339:
 2812              	.LBB129:
 2813              	.LBB127:
2921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxBuffer->LENGTH = ( size_t ) uxLength ;
 2814              		.loc 2 2921 0
 2815 0094 1420A0E3 		mov	r2, #20
 2816 0098 0010A0E3 		mov	r1, #0
 2817 009c FEFFFFEB 		bl	memset
 2818              	.LVL343:
2922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2819              		.loc 2 2922 0
 2820 00a0 105086E5 		str	r5, [r6, #16]
2931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 2821              		.loc 2 2931 0
 2822 00a4 6C6084E5 		str	r6, [r4, #108]
 2823              	.LVL344:
 2824              	.L336:
 2825              	.LBE127:
 2826              	.LBE129:
2988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2827              		.loc 2 2988 0
 2828 00a8 0930A0E1 		mov	r3, r9
 2829 00ac 0820A0E1 		mov	r2, r8
 2830 00b0 0710A0E1 		mov	r1, r7
 2831 00b4 0600A0E1 		mov	r0, r6
 2832 00b8 FEFFFFEB 		bl	uxStreamBufferAdd
 2833              	.LVL345:
3004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2834              		.loc 2 3004 0
 2835 00bc 000057E3 		cmp	r7, #0
2988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2836              		.loc 2 2988 0
 2837 00c0 0050A0E1 		mov	r5, r0
 2838              	.LVL346:
3004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 2839              		.loc 2 3004 0
 2840 00c4 F0FFFF1A 		bne	.L335
3039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 2841              		.loc 2 3039 0
 2842 00c8 D833D4E1 		ldrsb	r3, [r4, #56]
 2843 00cc 000053E3 		cmp	r3, #0
 2844 00d0 150000BA 		blt	.L341
 2845              	.LBB130:
3041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
 2846              		.loc 2 3041 0
 2847 00d4 6C2094E5 		ldr	r2, [r4, #108]
 2848              	.LVL347:
 2849              	.LBB131:
 2850              	.LBB132:
 113:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 2851              		.loc 1 113 0
 2852 00d8 0C1092E5 		ldr	r1, [r2, #12]
 2853              	.LVL348:
 114:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 2854              		.loc 1 114 0
 2855 00dc 003092E5 		ldr	r3, [r2]
 2856              	.LVL349:
 2857              	.LBB133:
 2858              	.LBB134:
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( uxCount >= pxBuffer->LENGTH )
 2859              		.loc 1 68 0
 2860 00e0 102092E5 		ldr	r2, [r2, #16]
 2861              	.LVL350:
 2862 00e4 023083E0 		add	r3, r3, r2
 2863              	.LVL351:
 2864 00e8 013043E2 		sub	r3, r3, #1
 2865 00ec 013043E0 		sub	r3, r3, r1
 2866              	.LVL352:
  69:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 2867              		.loc 1 69 0
 2868 00f0 030052E1 		cmp	r2, r3
  71:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 2869              		.loc 1 71 0
 2870 00f4 02304390 		subls	r3, r3, r2
 2871              	.LVL353:
 2872              	.LBE134:
 2873              	.LBE133:
 2874              	.LBE132:
 2875              	.LBE131:
3042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 2876              		.loc 2 3042 0
 2877 00f8 5C2094E5 		ldr	r2, [r4, #92]
 2878 00fc 030052E1 		cmp	r2, r3
 2879 0100 0900003A 		bcc	.L341
3044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 2880              		.loc 2 3044 0
 2881 0104 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
3049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 2882              		.loc 2 3049 0
 2883 0108 0500A0E3 		mov	r0, #5
 2884              	.LVL354:
3044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 2885              		.loc 2 3044 0
 2886 010c 803083E3 		orr	r3, r3, #128
 2887 0110 3830C4E5 		strb	r3, [r4, #56]
3045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2888              		.loc 2 3045 0
 2889 0114 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 2890 0118 013083E3 		orr	r3, r3, #1
 2891 011c 3930C4E5 		strb	r3, [r4, #57]
3048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						xSendEventToIPTask( eTCPTimerEvent );
 2892              		.loc 2 3048 0
 2893 0120 0130A0E3 		mov	r3, #1
 2894 0124 B034C4E1 		strh	r3, [r4, #64]	@ movhi
3049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 2895              		.loc 2 3049 0
 2896 0128 FEFFFFEB 		bl	xSendEventToIPTask
 2897              	.LVL355:
 2898              	.L341:
 2899              	.LBE130:
3055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2900              		.loc 2 3055 0
 2901 012c 003094E5 		ldr	r3, [r4]
 2902 0130 013083E3 		orr	r3, r3, #1
 2903 0134 003084E5 		str	r3, [r4]
 2904 0138 D3FFFFEA 		b	.L335
 2905              	.L345:
 2906              		.align	2
 2907              	.L344:
 2908 013c CDCCCCCC 		.word	-858993459
 2909              		.cfi_endproc
 2910              	.LFE56:
 2912              		.section	.text.FreeRTOS_GetRemoteAddress,"ax",%progbits
 2913              		.align	2
 2914              		.global	FreeRTOS_GetRemoteAddress
 2915              		.syntax unified
 2916              		.arm
 2917              		.fpu neon
 2919              	FreeRTOS_GetRemoteAddress:
 2920              	.LFB57:
3070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
3072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
3073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
3075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Function to get the remote address and IP port */
3077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_GetRemoteAddress( Socket_t xSocket, struct freertos_sockaddr *pxAddress )
3078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 2921              		.loc 2 3078 0
 2922              		.cfi_startproc
 2923              		@ args = 0, pretend = 0, frame = 0
 2924              		@ frame_needed = 0, uses_anonymous_args = 0
 2925              		@ link register save eliminated.
 2926              	.LVL356:
3079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
3080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xResult;
3081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 2927              		.loc 2 3082 0
 2928 0000 2730D0E5 		ldrb	r3, [r0, #39]	@ zero_extendqisi2
 2929 0004 060053E3 		cmp	r3, #6
 2930 0008 30309005 		ldreq	r3, [r0, #48]
 2931 000c 333FBF06 		reveq	r3, r3
3083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -pdFREERTOS_ERRNO_EINVAL;
3085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
3087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* BSD style sockets communicate IP and port addresses in network
3089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			byte order.
3090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			IP address of remote machine. */
3092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxAddress->sin_addr = FreeRTOS_htonl ( pxSocket->u.xTCP.ulRemoteIP );
 2932              		.loc 2 3092 0
 2933 0010 04308105 		streq	r3, [r1, #4]
3093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Port on remote machine. */
3095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			pxAddress->sin_port = FreeRTOS_htons ( pxSocket->u.xTCP.usRemotePort );
 2934              		.loc 2 3095 0
 2935 0014 B423D001 		ldrheq	r2, [r0, #52]
3096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = ( BaseType_t ) sizeof( ( *pxAddress ) );
 2936              		.loc 2 3097 0
 2937 0018 0800A003 		moveq	r0, #8
 2938              	.LVL357:
3084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 2939              		.loc 2 3084 0
 2940 001c 1500E013 		mvnne	r0, #21
3095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 2941              		.loc 2 3095 0
 2942 0020 2234A001 		lsreq	r3, r2, #8
 2943 0024 02348301 		orreq	r3, r3, r2, lsl #8
 2944 0028 B230C101 		strheq	r3, [r1, #2]	@ movhi
 2945              	.LVL358:
3098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xResult;
3101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 2946              		.loc 2 3101 0
 2947 002c 1EFF2FE1 		bx	lr
 2948              		.cfi_endproc
 2949              	.LFE57:
 2951              		.section	.text.FreeRTOS_maywrite,"ax",%progbits
 2952              		.align	2
 2953              		.global	FreeRTOS_maywrite
 2954              		.syntax unified
 2955              		.arm
 2956              		.fpu neon
 2958              	FreeRTOS_maywrite:
 2959              	.LFB58:
3102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
3104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
3106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
3108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Returns the number of bytes that may be added to txStream */
3110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_maywrite( Socket_t xSocket )
3111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 2960              		.loc 2 3111 0
 2961              		.cfi_startproc
 2962              		@ args = 0, pretend = 0, frame = 0
 2963              		@ frame_needed = 0, uses_anonymous_args = 0
 2964              		@ link register save eliminated.
 2965              	.LVL359:
3112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
3113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xResult;
3114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 2966              		.loc 2 3115 0
 2967 0000 2730D0E5 		ldrb	r3, [r0, #39]	@ zero_extendqisi2
3111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 2968              		.loc 2 3111 0
 2969 0004 0020A0E1 		mov	r2, r0
 2970              		.loc 2 3115 0
 2971 0008 060053E3 		cmp	r3, #6
 2972 000c 0D00001A 		bne	.L353
3116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = -pdFREERTOS_ERRNO_EINVAL;
3118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( pxSocket->u.xTCP.ucTCPState != eESTABLISHED )
 2973              		.loc 2 3119 0
 2974 0010 4B30D0E5 		ldrb	r3, [r0, #75]	@ zero_extendqisi2
 2975 0014 050053E3 		cmp	r3, #5
 2976 0018 0400000A 		beq	.L351
3120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( ( pxSocket->u.xTCP.ucTCPState < eCONNECT_SYN ) || ( pxSocket->u.xTCP.ucTCPState > eESTABLISH
 2977              		.loc 2 3121 0
 2978 001c 020043E2 		sub	r0, r3, #2
 2979              	.LVL360:
 2980 0020 030050E3 		cmp	r0, #3
 2981 0024 0000A093 		movls	r0, #0
 2982 0028 0000E083 		mvnhi	r0, #0
 2983 002c 1EFF2FE1 		bx	lr
 2984              	.LVL361:
 2985              	.L351:
3122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
3123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xResult = -1;
3124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
3125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
3126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
3127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xResult = 0;
3128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
3129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( pxSocket->u.xTCP.txStream == NULL )
 2986              		.loc 2 3130 0
 2987 0030 700090E5 		ldr	r0, [r0, #112]
 2988              	.LVL362:
 2989 0034 000050E3 		cmp	r0, #0
 2990 0038 0100001A 		bne	.L352
3131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 2991              		.loc 2 3132 0
 2992 003c 680092E5 		ldr	r0, [r2, #104]
 2993              	.LVL363:
 2994 0040 1EFF2FE1 		bx	lr
 2995              	.LVL364:
 2996              	.L352:
3133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
3135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xResult = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 2997              		.loc 2 3136 0
 2998 0044 FEFFFFEA 		b	uxStreamBufferGetSpace
 2999              	.LVL365:
 3000              	.L353:
3117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 3001              		.loc 2 3117 0
 3002 0048 1500E0E3 		mvn	r0, #21
 3003              	.LVL366:
3137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xResult;
3140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 3004              		.loc 2 3140 0
 3005 004c 1EFF2FE1 		bx	lr
 3006              		.cfi_endproc
 3007              	.LFE58:
 3009              		.section	.text.FreeRTOS_tx_space,"ax",%progbits
 3010              		.align	2
 3011              		.global	FreeRTOS_tx_space
 3012              		.syntax unified
 3013              		.arm
 3014              		.fpu neon
 3016              	FreeRTOS_tx_space:
 3017              	.LFB59:
3141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
3143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
3144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP ==1 )
3146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_tx_space( Socket_t xSocket )
3148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 3018              		.loc 2 3148 0
 3019              		.cfi_startproc
 3020              		@ args = 0, pretend = 0, frame = 0
 3021              		@ frame_needed = 0, uses_anonymous_args = 0
 3022              		@ link register save eliminated.
 3023              	.LVL367:
3149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
3150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xReturn;
3151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 3024              		.loc 2 3152 0
 3025 0000 2720D0E5 		ldrb	r2, [r0, #39]	@ zero_extendqisi2
3148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 3026              		.loc 2 3148 0
 3027 0004 0030A0E1 		mov	r3, r0
 3028              		.loc 2 3152 0
 3029 0008 060052E3 		cmp	r2, #6
 3030 000c 0500001A 		bne	.L357
3153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = -pdFREERTOS_ERRNO_EINVAL;
3155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
3157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->u.xTCP.txStream != NULL )
 3031              		.loc 2 3158 0
 3032 0010 700090E5 		ldr	r0, [r0, #112]
 3033              	.LVL368:
 3034 0014 000050E3 		cmp	r0, #0
 3035 0018 0000000A 		beq	.L356
3159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
3160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
 3036              		.loc 2 3160 0
 3037 001c FEFFFFEA 		b	uxStreamBufferGetSpace
 3038              	.LVL369:
 3039              	.L356:
3161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
3162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
3163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
3164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 3040              		.loc 2 3164 0
 3041 0020 680093E5 		ldr	r0, [r3, #104]
 3042              	.LVL370:
 3043 0024 1EFF2FE1 		bx	lr
 3044              	.LVL371:
 3045              	.L357:
3154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 3046              		.loc 2 3154 0
 3047 0028 1500E0E3 		mvn	r0, #21
 3048              	.LVL372:
3165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
3166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xReturn;
3169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 3049              		.loc 2 3169 0
 3050 002c 1EFF2FE1 		bx	lr
 3051              		.cfi_endproc
 3052              	.LFE59:
 3054              		.section	.text.FreeRTOS_tx_size,"ax",%progbits
 3055              		.align	2
 3056              		.global	FreeRTOS_tx_size
 3057              		.syntax unified
 3058              		.arm
 3059              		.fpu neon
 3061              	FreeRTOS_tx_size:
 3062              	.LFB60:
3170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
3172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
3173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
3175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_tx_size( Socket_t xSocket )
3177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 3063              		.loc 2 3177 0
 3064              		.cfi_startproc
 3065              		@ args = 0, pretend = 0, frame = 0
 3066              		@ frame_needed = 0, uses_anonymous_args = 0
 3067              		@ link register save eliminated.
 3068              	.LVL373:
3178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
3179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xReturn;
3180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 3069              		.loc 2 3181 0
 3070 0000 2730D0E5 		ldrb	r3, [r0, #39]	@ zero_extendqisi2
 3071 0004 060053E3 		cmp	r3, #6
 3072 0008 0300001A 		bne	.L360
3182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = -pdFREERTOS_ERRNO_EINVAL;
3184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
3186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->u.xTCP.txStream != NULL )
 3073              		.loc 2 3187 0
 3074 000c 700090E5 		ldr	r0, [r0, #112]
 3075              	.LVL374:
 3076 0010 000050E3 		cmp	r0, #0
 3077 0014 1EFF2F01 		bxeq	lr
3188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
3189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = ( BaseType_t ) uxStreamBufferGetSize ( pxSocket->u.xTCP.txStream );
 3078              		.loc 2 3189 0
 3079 0018 FEFFFFEA 		b	uxStreamBufferGetSize
 3080              	.LVL375:
 3081              	.L360:
3183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 3082              		.loc 2 3183 0
 3083 001c 1500E0E3 		mvn	r0, #21
 3084              	.LVL376:
3190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
3191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			else
3192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
3193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				xReturn = 0;
3194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
3195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xReturn;
3198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 3085              		.loc 2 3198 0
 3086 0020 1EFF2FE1 		bx	lr
 3087              		.cfi_endproc
 3088              	.LFE60:
 3090              		.global	__aeabi_uidiv
 3091              		.section	.text.FreeRTOS_setsockopt,"ax",%progbits
 3092              		.align	2
 3093              		.global	FreeRTOS_setsockopt
 3094              		.syntax unified
 3095              		.arm
 3096              		.fpu neon
 3098              	FreeRTOS_setsockopt:
 3099              	.LFB36:
1275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /* The standard Berkeley function returns 0 for success. */
 3100              		.loc 2 1275 0
 3101              		.cfi_startproc
 3102              		@ args = 4, pretend = 0, frame = 0
 3103              		@ frame_needed = 0, uses_anonymous_args = 0
 3104              	.LVL377:
 3105 0000 F7402DE9 		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 3106              		.cfi_def_cfa_offset 32
 3107              		.cfi_offset 4, -20
 3108              		.cfi_offset 5, -16
 3109              		.cfi_offset 6, -12
 3110              		.cfi_offset 7, -8
 3111              		.cfi_offset 14, -4
1288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3112              		.loc 2 1288 0
 3113 0004 004050E2 		subs	r4, r0, #0
 3114 0008 0200001A 		bne	.L363
1288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3115              		.loc 2 1288 0 is_stmt 0 discriminator 1
 3116 000c 0110A0E3 		mov	r1, #1
 3117              	.LVL378:
 3118 0010 98029FE5 		ldr	r0, .L413
 3119              	.LVL379:
 3120 0014 FEFFFFEB 		bl	longjmp
 3121              	.LVL380:
 3122              	.L363:
 3123 0018 0360A0E1 		mov	r6, r3
1290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 3124              		.loc 2 1290 0 is_stmt 1
 3125 001c 110052E3 		cmp	r2, #17
 3126 0020 02F19F97 		ldrls	pc, [pc, r2, asl #2]
 3127 0024 9D0000EA 		b	.L388
 3128              	.L366:
 3129 0028 70000000 		.word	.L365
 3130 002c 80000000 		.word	.L367
 3131 0030 B0000000 		.word	.L368
 3132 0034 A0020000 		.word	.L388
 3133 0038 DC000000 		.word	.L369
 3134 003c DC000000 		.word	.L369
 3135 0040 A0020000 		.word	.L388
 3136 0044 A0020000 		.word	.L388
 3137 0048 A0020000 		.word	.L388
 3138 004c A0020000 		.word	.L388
 3139 0050 A0020000 		.word	.L388
 3140 0054 B4010000 		.word	.L370
 3141 0058 E0010000 		.word	.L371
 3142 005c 2C010000 		.word	.L372
 3143 0060 0C020000 		.word	.L373
 3144 0064 6C020000 		.word	.L374
 3145 0068 A0020000 		.word	.L388
 3146 006c D4000000 		.word	.L375
 3147              	.L365:
1294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = 0;
 3148              		.loc 2 1294 0
 3149 0070 003093E5 		ldr	r3, [r3]
 3150              	.LVL381:
 3151 0074 1C3084E5 		str	r3, [r4, #28]
 3152              	.LVL382:
 3153              	.L408:
1594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				break;
 3154              		.loc 2 1594 0
 3155 0078 0000A0E3 		mov	r0, #0
1595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3156              		.loc 2 1595 0
 3157 007c 120000EA 		b	.L362
 3158              	.LVL383:
 3159              	.L367:
1299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 3160              		.loc 2 1299 0
 3161 0080 001093E5 		ldr	r1, [r3]
 3162              	.LVL384:
1306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3163              		.loc 2 1306 0
 3164 0084 882301E3 		movw	r2, #5000
 3165              	.LVL385:
1300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 3166              		.loc 2 1300 0
 3167 0088 2730D4E5 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
 3168              	.LVL386:
1306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3169              		.loc 2 1306 0
 3170 008c 020051E1 		cmp	r1, r2
1299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 3171              		.loc 2 1299 0
 3172 0090 201084E5 		str	r1, [r4, #32]
1306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3173              		.loc 2 1306 0
 3174 0094 113043E2 		sub	r3, r3, #17
 3175 0098 133F6FE1 		clz	r3, r3
 3176 009c A332A0E1 		lsr	r3, r3, #5
 3177 00a0 0030A093 		movls	r3, #0
 3178 00a4 000053E3 		cmp	r3, #0
1308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 3179              		.loc 2 1308 0
 3180 00a8 20208415 		strne	r2, [r4, #32]
 3181 00ac F1FFFFEA 		b	.L408
 3182              	.LVL387:
 3183              	.L368:
1334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 3184              		.loc 2 1334 0
 3185 00b0 000053E2 		subs	r0, r3, #0
 3186              	.LVL388:
 3187 00b4 2630D4E5 		ldrb	r3, [r4, #38]	@ zero_extendqisi2
 3188              	.LVL389:
1336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 3189              		.loc 2 1336 0
 3190 00b8 0230C303 		biceq	r3, r3, #2
1340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 3191              		.loc 2 1340 0
 3192 00bc 02308313 		orrne	r3, r3, #2
1336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 3193              		.loc 2 1336 0
 3194 00c0 2630C405 		strbeq	r3, [r4, #38]
1340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 3195              		.loc 2 1340 0
 3196 00c4 2630C415 		strbne	r3, [r4, #38]
1334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 3197              		.loc 2 1334 0
 3198 00c8 EAFFFF1A 		bne	.L408
 3199              	.LVL390:
 3200              	.L362:
1606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3201              		.loc 2 1606 0
 3202 00cc 0CD08DE2 		add	sp, sp, #12
 3203              		.cfi_remember_state
 3204              		.cfi_def_cfa_offset 20
 3205              		@ sp needed
 3206 00d0 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 3207              	.LVL391:
 3208              	.L375:
 3209              		.cfi_restore_state
1425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xReturn = 0;
 3210              		.loc 2 1425 0
 3211 00d4 283084E5 		str	r3, [r4, #40]
 3212              	.LVL392:
 3213 00d8 E6FFFFEA 		b	.L408
 3214              	.LVL393:
 3215              	.L369:
 3216              	.LBB135:
1436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3217              		.loc 2 1436 0
 3218 00dc 2730D4E5 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
 3219              	.LVL394:
 3220 00e0 060053E3 		cmp	r3, #6
 3221 00e4 6F00001A 		bne	.L398
1443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 3222              		.loc 2 1443 0
 3223 00e8 040052E3 		cmp	r2, #4
 3224 00ec 70309405 		ldreq	r3, [r4, #112]
1444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3225              		.loc 2 1444 0
 3226 00f0 6C309415 		ldrne	r3, [r4, #108]
 3227 00f4 000053E3 		cmp	r3, #0
 3228 00f8 6A00001A 		bne	.L398
1451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3229              		.loc 2 1451 0
 3230 00fc 000096E5 		ldr	r0, [r6]
 3231              	.LVL395:
1453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3232              		.loc 2 1453 0
 3233 0100 040052E3 		cmp	r2, #4
1461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3234              		.loc 2 1461 0
 3235 0104 64008415 		strne	r0, [r4, #100]
1453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3236              		.loc 2 1453 0
 3237 0108 DAFFFF1A 		bne	.L408
1456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 3238              		.loc 2 1456 0
 3239 010c B454D4E1 		ldrh	r5, [r4, #68]
 3240              	.LVL396:
 3241              	.LBB136:
 3242              	.LBB137:
 181:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d) { return d * ( ( a + d - 1
 3243              		.loc 3 181 0
 3244 0110 010040E2 		sub	r0, r0, #1
 3245 0114 0510A0E1 		mov	r1, r5
 3246              	.LVL397:
 3247 0118 050080E0 		add	r0, r0, r5
 3248 011c FEFFFFEB 		bl	__aeabi_uidiv
 3249              	.LVL398:
 3250 0120 950000E0 		mul	r0, r5, r0
 3251              	.LBE137:
 3252              	.LBE136:
1457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3253              		.loc 2 1457 0
 3254 0124 680084E5 		str	r0, [r4, #104]
 3255 0128 D2FFFFEA 		b	.L408
 3256              	.LVL399:
 3257              	.L372:
 3258              	.LBE135:
 3259              	.LBB138:
1471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3260              		.loc 2 1471 0
 3261 012c 2730D4E5 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
 3262              	.LVL400:
 3263 0130 060053E3 		cmp	r3, #6
 3264 0134 5B00001A 		bne	.L398
1477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3265              		.loc 2 1477 0
 3266 0138 703094E5 		ldr	r3, [r4, #112]
 3267 013c 000053E3 		cmp	r3, #0
 3268 0140 5800001A 		bne	.L398
1477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3269              		.loc 2 1477 0 is_stmt 0 discriminator 1
 3270 0144 6C5094E5 		ldr	r5, [r4, #108]
 3271 0148 000055E3 		cmp	r5, #0
 3272 014c 5500001A 		bne	.L398
 3273              	.LVL401:
1484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ), sizeof( pxProps
 3274              		.loc 2 1484 0 is_stmt 1
 3275 0150 0470A0E3 		mov	r7, #4
 3276 0154 0630A0E1 		mov	r3, r6
 3277 0158 0720A0E1 		mov	r2, r7
 3278              	.LVL402:
 3279 015c 0510A0E1 		mov	r1, r5
 3280              	.LVL403:
 3281 0160 00708DE5 		str	r7, [sp]
 3282 0164 0400A0E1 		mov	r0, r4
 3283              	.LVL404:
 3284 0168 FEFFFFEB 		bl	FreeRTOS_setsockopt
 3285              	.LVL405:
1485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					#if( ipconfigUSE_TCP_WIN == 1 )
 3286              		.loc 2 1485 0
 3287 016c 083086E2 		add	r3, r6, #8
 3288 0170 0520A0E3 		mov	r2, #5
 3289 0174 0510A0E1 		mov	r1, r5
 3290 0178 00708DE5 		str	r7, [sp]
 3291 017c 0400A0E1 		mov	r0, r4
 3292 0180 FEFFFFEB 		bl	FreeRTOS_setsockopt
 3293              	.LVL406:
1488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the T
 3294              		.loc 2 1488 0
 3295 0184 0C2096E5 		ldr	r2, [r6, #12]
1500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3296              		.loc 2 1500 0
 3297 0188 D430D4E5 		ldrb	r3, [r4, #212]	@ zero_extendqisi2
1488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the T
 3298              		.loc 2 1488 0
 3299 018c CC2084E5 		str	r2, [r4, #204]
1489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3300              		.loc 2 1489 0
 3301 0190 041096E5 		ldr	r1, [r6, #4]
1500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3302              		.loc 2 1500 0
 3303 0194 010013E3 		tst	r3, #1
1489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3304              		.loc 2 1489 0
 3305 0198 D01084E5 		str	r1, [r4, #208]
1500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3306              		.loc 2 1500 0
1502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.xTCPWindow.xSize.ulTxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket-
 3307              		.loc 2 1502 0
 3308 019c B434D411 		ldrhne	r3, [r4, #68]
 3309 01a0 93020210 		mulne	r2, r3, r2
1503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3310              		.loc 2 1503 0
 3311 01a4 93010310 		mulne	r3, r3, r1
1502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						pxSocket->u.xTCP.xTCPWindow.xSize.ulTxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket-
 3312              		.loc 2 1502 0
 3313 01a8 D8208415 		strne	r2, [r4, #216]
1503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3314              		.loc 2 1503 0
 3315 01ac DC308415 		strne	r3, [r4, #220]
 3316 01b0 B0FFFFEA 		b	.L408
 3317              	.LVL407:
 3318              	.L370:
 3319              	.LBE138:
1512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3320              		.loc 2 1512 0
 3321 01b4 2730D4E5 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
 3322              	.LVL408:
 3323 01b8 060053E3 		cmp	r3, #6
 3324 01bc 3900001A 		bne	.L398
1516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3325              		.loc 2 1516 0
 3326 01c0 000096E5 		ldr	r0, [r6]
 3327              	.LVL409:
 3328 01c4 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 3329 01c8 000050E3 		cmp	r0, #0
1518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3330              		.loc 2 1518 0
 3331 01cc 08308313 		orrne	r3, r3, #8
1522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3332              		.loc 2 1522 0
 3333 01d0 9031C307 		bfieq	r3, r0, #3, #1
1516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3334              		.loc 2 1516 0
 3335 01d4 0A00000A 		beq	.L410
 3336              	.L412:
1537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3337              		.loc 2 1537 0
 3338 01d8 3830C4E5 		strb	r3, [r4, #56]
 3339              	.LVL410:
 3340 01dc A5FFFFEA 		b	.L408
 3341              	.LVL411:
 3342              	.L371:
1530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3343              		.loc 2 1530 0
 3344 01e0 2730D4E5 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
 3345              	.LVL412:
 3346 01e4 060053E3 		cmp	r3, #6
 3347 01e8 2E00001A 		bne	.L398
1535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3348              		.loc 2 1535 0
 3349 01ec 000096E5 		ldr	r0, [r6]
 3350              	.LVL413:
 3351 01f0 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 3352 01f4 000050E3 		cmp	r0, #0
1537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3353              		.loc 2 1537 0
 3354 01f8 10308313 		orrne	r3, r3, #16
 3355 01fc F5FFFF1A 		bne	.L412
 3356              	.L383:
1541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3357              		.loc 2 1541 0
 3358 0200 1032C4E7 		bfi	r3, r0, #4, #1
 3359              	.L410:
 3360 0204 3830C4E5 		strb	r3, [r4, #56]
 3361              	.LVL414:
 3362 0208 AFFFFFEA 		b	.L362
 3363              	.LVL415:
 3364              	.L373:
1549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3365              		.loc 2 1549 0
 3366 020c 2730D4E5 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
 3367              	.LVL416:
 3368 0210 060053E3 		cmp	r3, #6
 3369 0214 2300001A 		bne	.L398
1554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3370              		.loc 2 1554 0
 3371 0218 002096E5 		ldr	r2, [r6]
 3372              	.LVL417:
 3373 021c D430D4E5 		ldrb	r3, [r4, #212]	@ zero_extendqisi2
 3374 0220 000052E3 		cmp	r2, #0
1556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3375              		.loc 2 1556 0
 3376 0224 02308313 		orrne	r3, r3, #2
1560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3377              		.loc 2 1560 0
 3378 0228 9230C107 		bfieq	r3, r2, #1, #1
 3379 022c D430C4E5 		strb	r3, [r4, #212]
1563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 3380              		.loc 2 1563 0
 3381 0230 D400D4E5 		ldrb	r0, [r4, #212]	@ zero_extendqisi2
 3382              	.LVL418:
 3383 0234 025010E2 		ands	r5, r0, #2
 3384 0238 8EFFFF1A 		bne	.L408
1563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 3385              		.loc 2 1563 0 is_stmt 0 discriminator 1
 3386 023c 4B30D4E5 		ldrb	r3, [r4, #75]	@ zero_extendqisi2
 3387 0240 040053E3 		cmp	r3, #4
 3388 0244 8BFFFF9A 		bls	.L408
1565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3389              		.loc 2 1565 0 is_stmt 1
 3390 0248 0400A0E1 		mov	r0, r4
 3391 024c FEFFFFEB 		bl	FreeRTOS_tx_size
 3392              	.LVL419:
1564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 3393              		.loc 2 1564 0
 3394 0250 000050E3 		cmp	r0, #0
 3395 0254 87FFFF0A 		beq	.L408
 3396              	.LVL420:
 3397              	.L409:
1591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xSendEventToIPTask( eTCPTimerEvent );
 3398              		.loc 2 1591 0
 3399 0258 0130A0E3 		mov	r3, #1
1592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 3400              		.loc 2 1592 0
 3401 025c 0500A0E3 		mov	r0, #5
1591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xSendEventToIPTask( eTCPTimerEvent );
 3402              		.loc 2 1591 0
 3403 0260 B034C4E1 		strh	r3, [r4, #64]	@ movhi
1592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 3404              		.loc 2 1592 0
 3405 0264 FEFFFFEB 		bl	xSendEventToIPTask
 3406              	.LVL421:
 3407 0268 82FFFFEA 		b	.L408
 3408              	.LVL422:
 3409              	.L374:
1576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3410              		.loc 2 1576 0
 3411 026c 2730D4E5 		ldrb	r3, [r4, #39]	@ zero_extendqisi2
 3412              	.LVL423:
 3413 0270 060053E3 		cmp	r3, #6
 3414 0274 0B00001A 		bne	.L398
1581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3415              		.loc 2 1581 0
 3416 0278 002096E5 		ldr	r2, [r6]
 3417              	.LVL424:
 3418 027c 3A30D4E5 		ldrb	r3, [r4, #58]	@ zero_extendqisi2
 3419 0280 000052E3 		cmp	r2, #0
1583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3420              		.loc 2 1583 0
 3421 0284 02308313 		orrne	r3, r3, #2
1587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					}
 3422              		.loc 2 1587 0
 3423 0288 9230C107 		bfieq	r3, r2, #1, #1
 3424 028c 3A30C4E5 		strb	r3, [r4, #58]
 3425              	.LVL425:
1590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bRxStopped */
 3426              		.loc 2 1590 0
 3427 0290 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 3428 0294 013083E3 		orr	r3, r3, #1
 3429 0298 3930C4E5 		strb	r3, [r4, #57]
 3430 029c EDFFFFEA 		b	.L409
 3431              	.LVL426:
 3432              	.L388:
1601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			break;
 3433              		.loc 2 1601 0
 3434 02a0 6C00E0E3 		mvn	r0, #108
 3435              	.LVL427:
 3436 02a4 88FFFFEA 		b	.L362
 3437              	.LVL428:
 3438              	.L398:
1277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** BaseType_t lOptionValue;
 3439              		.loc 2 1277 0
 3440 02a8 1500E0E3 		mvn	r0, #21
 3441              	.LVL429:
1605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** } /* Tested */
 3442              		.loc 2 1605 0
 3443 02ac 86FFFFEA 		b	.L362
 3444              	.L414:
 3445              		.align	2
 3446              	.L413:
 3447 02b0 28000000 		.word	Unity+40
 3448              		.cfi_endproc
 3449              	.LFE36:
 3451              		.section	.text.FreeRTOS_issocketconnected,"ax",%progbits
 3452              		.align	2
 3453              		.global	FreeRTOS_issocketconnected
 3454              		.syntax unified
 3455              		.arm
 3456              		.fpu neon
 3458              	FreeRTOS_issocketconnected:
 3459              	.LFB61:
3199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
3201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
3202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
3204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Returns pdTRUE if TCP socket is connected. */
3206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_issocketconnected( Socket_t xSocket )
3207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 3460              		.loc 2 3207 0
 3461              		.cfi_startproc
 3462              		@ args = 0, pretend = 0, frame = 0
 3463              		@ frame_needed = 0, uses_anonymous_args = 0
 3464              		@ link register save eliminated.
 3465              	.LVL430:
3208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
3209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xReturn = pdFALSE;
3210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 3466              		.loc 2 3211 0
 3467 0000 2730D0E5 		ldrb	r3, [r0, #39]	@ zero_extendqisi2
 3468 0004 060053E3 		cmp	r3, #6
 3469 0008 0500001A 		bne	.L417
3212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = -pdFREERTOS_ERRNO_EINVAL;
3214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
3216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
3218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
3219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if( pxSocket->u.xTCP.ucTCPState < eCLOSE_WAIT )
 3470              		.loc 2 3219 0
 3471 000c 4B00D0E5 		ldrb	r0, [r0, #75]	@ zero_extendqisi2
 3472              	.LVL431:
 3473 0010 050040E2 		sub	r0, r0, #5
 3474 0014 020050E3 		cmp	r0, #2
 3475 0018 0000A083 		movhi	r0, #0
 3476 001c 0100A093 		movls	r0, #1
 3477 0020 1EFF2FE1 		bx	lr
 3478              	.LVL432:
 3479              	.L417:
3213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 3480              		.loc 2 3213 0
 3481 0024 1500E0E3 		mvn	r0, #21
 3482              	.LVL433:
3220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
3221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					xReturn = pdTRUE;
3222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
3223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
3224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xReturn;
3227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 3483              		.loc 2 3227 0
 3484 0028 1EFF2FE1 		bx	lr
 3485              		.cfi_endproc
 3486              	.LFE61:
 3488              		.section	.text.FreeRTOS_connect,"ax",%progbits
 3489              		.align	2
 3490              		.global	FreeRTOS_connect
 3491              		.syntax unified
 3492              		.arm
 3493              		.fpu neon
 3495              	FreeRTOS_connect:
 3496              	.LFB44:
2000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t* ) xClientSocket;
 3497              		.loc 2 2000 0
 3498              		.cfi_startproc
 3499              		@ args = 0, pretend = 0, frame = 16
 3500              		@ frame_needed = 0, uses_anonymous_args = 0
 3501              	.LVL434:
 3502 0000 30402DE9 		push	{r4, r5, lr}
 3503              		.cfi_def_cfa_offset 12
 3504              		.cfi_offset 4, -12
 3505              		.cfi_offset 5, -8
 3506              		.cfi_offset 14, -4
 3507              	.LBB143:
 3508              	.LBB144:
1937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 3509              		.loc 2 1937 0
 3510 0004 0020A0E3 		mov	r2, #0
 3511              	.LVL435:
 3512              	.LBE144:
 3513              	.LBE143:
2000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t* ) xClientSocket;
 3514              		.loc 2 2000 0
 3515 0008 1CD04DE2 		sub	sp, sp, #28
 3516              		.cfi_def_cfa_offset 40
2000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t* ) xClientSocket;
 3517              		.loc 2 2000 0
 3518 000c 0150A0E1 		mov	r5, r1
 3519              	.LBB150:
 3520              	.LBB147:
1937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 3521              		.loc 2 1937 0
 3522 0010 0610A0E3 		mov	r1, #6
 3523              	.LVL436:
 3524              	.LBE147:
 3525              	.LBE150:
2000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t* ) xClientSocket;
 3526              		.loc 2 2000 0
 3527 0014 0040A0E1 		mov	r4, r0
 3528              	.LVL437:
 3529              	.LBB151:
 3530              	.LBB148:
1937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 3531              		.loc 2 1937 0
 3532 0018 FEFFFFEB 		bl	prvValidSocket
 3533              	.LVL438:
 3534 001c 000050E3 		cmp	r0, #0
1940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 3535              		.loc 2 1940 0
 3536 0020 0800E003 		mvneq	r0, #8
1937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 3537              		.loc 2 1937 0
 3538 0024 3000000A 		beq	.L418
1942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 3539              		.loc 2 1942 0
 3540 0028 0400A0E1 		mov	r0, r4
 3541 002c FEFFFFEB 		bl	FreeRTOS_issocketconnected
 3542              	.LVL439:
 3543 0030 000050E3 		cmp	r0, #0
1945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 3544              		.loc 2 1945 0
 3545 0034 7E00E0C3 		mvngt	r0, #126
1942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 3546              		.loc 2 1942 0
 3547 0038 2B0000CA 		bgt	.L418
1947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 3548              		.loc 2 1947 0
 3549 003c 182094E5 		ldr	r2, [r4, #24]
 3550 0040 000052E3 		cmp	r2, #0
 3551 0044 2300000A 		beq	.L420
 3552              	.LVL440:
 3553              	.L423:
 3554              	.LBB145:
 3555              	.LBB146:
1919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 3556              		.loc 2 1919 0
 3557 0048 4B30D4E5 		ldrb	r3, [r4, #75]	@ zero_extendqisi2
 3558 004c 020053E3 		cmp	r3, #2
1923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			default:			return -pdFREERTOS_ERRNO_EAGAIN;
 3559              		.loc 2 1923 0
 3560 0050 7600E003 		mvneq	r0, #118
1919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 3561              		.loc 2 1919 0
 3562 0054 2400000A 		beq	.L418
 3563 0058 080053E3 		cmp	r3, #8
 3564 005c 0100000A 		beq	.L422
 3565 0060 000053E3 		cmp	r3, #0
 3566 0064 1900001A 		bne	.L429
 3567              	.L422:
 3568              	.LVL441:
 3569              	.LBE146:
 3570              	.LBE145:
1963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.ucRepCount = 0u;
 3571              		.loc 2 1963 0
 3572 0068 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
1976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3573              		.loc 2 1976 0
 3574 006c 0210A0E3 		mov	r1, #2
 3575 0070 0400A0E1 		mov	r0, r4
1963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				pxSocket->u.xTCP.ucRepCount = 0u;
 3576              		.loc 2 1963 0
 3577 0074 9F31C3E7 		bfc	r3, #3, #1
 3578 0078 3930C4E5 		strb	r3, [r4, #57]
1964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3579              		.loc 2 1964 0
 3580 007c 0030A0E3 		mov	r3, #0
 3581 0080 4A30C4E5 		strb	r3, [r4, #74]
1970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3582              		.loc 2 1970 0
 3583 0084 B220D5E1 		ldrh	r2, [r5, #2]
 3584 0088 2234A0E1 		lsr	r3, r2, #8
 3585 008c 023483E1 		orr	r3, r3, r2, lsl #8
 3586 0090 B433C4E1 		strh	r3, [r4, #52]	@ movhi
 3587 0094 043095E5 		ldr	r3, [r5, #4]
 3588 0098 333FBFE6 		rev	r3, r3
1973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3589              		.loc 2 1973 0
 3590 009c 303084E5 		str	r3, [r4, #48]
1976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3591              		.loc 2 1976 0
 3592 00a0 FEFFFFEB 		bl	vTCPStateChange
 3593              	.LVL442:
1979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3594              		.loc 2 1979 0
 3595 00a4 0130A0E3 		mov	r3, #1
1981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3596              		.loc 2 1981 0
 3597 00a8 0500A0E3 		mov	r0, #5
1979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3598              		.loc 2 1979 0
 3599 00ac B034C4E1 		strh	r3, [r4, #64]	@ movhi
1981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3600              		.loc 2 1981 0
 3601 00b0 FEFFFFEB 		bl	xSendEventToIPTask
 3602              	.LVL443:
 3603 00b4 010050E3 		cmp	r0, #1
1983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 3604              		.loc 2 1983 0
 3605 00b8 8B00E013 		mvnne	r0, #139
1981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3606              		.loc 2 1981 0
 3607 00bc 0A00001A 		bne	.L418
 3608              	.LBE148:
 3609              	.LBE151:
2019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xRemainingTime == ( TickType_t )0 )
 3610              		.loc 2 2019 0
 3611 00c0 1C3094E5 		ldr	r3, [r4, #28]
2020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3612              		.loc 2 2020 0
 3613 00c4 000053E3 		cmp	r3, #0
2019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					if( xRemainingTime == ( TickType_t )0 )
 3614              		.loc 2 2019 0
 3615 00c8 0C308DE5 		str	r3, [sp, #12]
2020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					{
 3616              		.loc 2 2020 0
 3617 00cc 0800001A 		bne	.L443
 3618              	.L429:
2023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						break;
 3619              		.loc 2 2023 0
 3620 00d0 0A00E0E3 		mvn	r0, #10
 3621 00d4 040000EA 		b	.L418
 3622              	.LVL444:
 3623              	.L420:
 3624              	.LBB152:
 3625              	.LBB149:
1951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 3626              		.loc 2 1951 0
 3627 00d8 0210A0E1 		mov	r1, r2
 3628 00dc 0400A0E1 		mov	r0, r4
 3629 00e0 FEFFFFEB 		bl	FreeRTOS_bind
 3630              	.LVL445:
1954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
 3631              		.loc 2 1954 0
 3632 00e4 000050E3 		cmp	r0, #0
 3633 00e8 D6FFFF0A 		beq	.L423
 3634              	.LVL446:
 3635              	.L418:
 3636              	.LBE149:
 3637              	.LBE152:
2064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
 3638              		.loc 2 2064 0
 3639 00ec 1CD08DE2 		add	sp, sp, #28
 3640              		.cfi_remember_state
 3641              		.cfi_def_cfa_offset 12
 3642              		@ sp needed
 3643 00f0 3080BDE8 		pop	{r4, r5, pc}
 3644              	.LVL447:
 3645              	.L443:
 3646              		.cfi_restore_state
2031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 3647              		.loc 2 2031 0
 3648 00f4 10008DE2 		add	r0, sp, #16
 3649 00f8 FEFFFFEB 		bl	vTaskSetTimeOutState
 3650              	.LVL448:
 3651              	.L424:
2035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3652              		.loc 2 2035 0
 3653 00fc 0400A0E1 		mov	r0, r4
 3654 0100 FEFFFFEB 		bl	FreeRTOS_issocketconnected
 3655              	.LVL449:
2038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3656              		.loc 2 2038 0
 3657 0104 000050E3 		cmp	r0, #0
 3658 0108 F7FFFFBA 		blt	.L418
2044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3659              		.loc 2 2044 0
 3660 010c 0B00001A 		bne	.L430
2052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3661              		.loc 2 2052 0
 3662 0110 0C108DE2 		add	r1, sp, #12
 3663 0114 10008DE2 		add	r0, sp, #16
 3664              	.LVL450:
 3665 0118 FEFFFFEB 		bl	xTaskCheckForTimeOut
 3666              	.LVL451:
 3667 011c 003050E2 		subs	r3, r0, #0
 3668 0120 0800001A 		bne	.L431
2059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 3669              		.loc 2 2059 0
 3670 0124 0C209DE5 		ldr	r2, [sp, #12]
 3671 0128 0810A0E3 		mov	r1, #8
 3672 012c 040094E5 		ldr	r0, [r4, #4]
 3673 0130 00208DE5 		str	r2, [sp]
 3674 0134 0120A0E3 		mov	r2, #1
 3675 0138 FEFFFFEB 		bl	xEventGroupWaitBits
 3676              	.LVL452:
2016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3677              		.loc 2 2016 0
 3678 013c EEFFFFEA 		b	.L424
 3679              	.LVL453:
 3680              	.L430:
2047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
 3681              		.loc 2 2047 0
 3682 0140 0000A0E3 		mov	r0, #0
 3683              	.LVL454:
 3684 0144 E8FFFFEA 		b	.L418
 3685              	.L431:
2054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					break;
 3686              		.loc 2 2054 0
 3687 0148 7300E0E3 		mvn	r0, #115
 3688 014c E6FFFFEA 		b	.L418
 3689              		.cfi_endproc
 3690              	.LFE44:
 3692              		.section	.text.FreeRTOS_mss,"ax",%progbits
 3693              		.align	2
 3694              		.global	FreeRTOS_mss
 3695              		.syntax unified
 3696              		.arm
 3697              		.fpu neon
 3699              	FreeRTOS_mss:
 3700              	.LFB62:
3228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
3230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
3231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
3233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* returns the actual size of MSS being used */
3235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_mss( Socket_t xSocket )
3236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 3701              		.loc 2 3236 0
 3702              		.cfi_startproc
 3703              		@ args = 0, pretend = 0, frame = 0
 3704              		@ frame_needed = 0, uses_anonymous_args = 0
 3705              		@ link register save eliminated.
 3706              	.LVL455:
3237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
3238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xReturn;
3239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 3707              		.loc 2 3240 0
 3708 0000 2730D0E5 		ldrb	r3, [r0, #39]	@ zero_extendqisi2
 3709 0004 060053E3 		cmp	r3, #6
3241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = -pdFREERTOS_ERRNO_EINVAL;
3243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
3245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* usCurMSS is declared as uint16_t to save space.  FreeRTOS_mss()
3247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			will often be used in signed native-size expressions cast it to
3248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			BaseType_t. */
3249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = ( BaseType_t ) ( pxSocket->u.xTCP.usCurMSS );
 3710              		.loc 2 3249 0
 3711 0008 B204D001 		ldrheq	r0, [r0, #66]
 3712              	.LVL456:
3242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 3713              		.loc 2 3242 0
 3714 000c 1500E013 		mvnne	r0, #21
 3715              	.LVL457:
3250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xReturn;
3253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 3716              		.loc 2 3253 0
 3717 0010 1EFF2FE1 		bx	lr
 3718              		.cfi_endproc
 3719              	.LFE62:
 3721              		.section	.text.FreeRTOS_connstatus,"ax",%progbits
 3722              		.align	2
 3723              		.global	FreeRTOS_connstatus
 3724              		.syntax unified
 3725              		.arm
 3726              		.fpu neon
 3728              	FreeRTOS_connstatus:
 3729              	.LFB63:
3254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
3256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
3257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
3259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* HT: for internal use only: return the connection status */
3261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_connstatus( Socket_t xSocket )
3262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 3730              		.loc 2 3262 0
 3731              		.cfi_startproc
 3732              		@ args = 0, pretend = 0, frame = 0
 3733              		@ frame_needed = 0, uses_anonymous_args = 0
 3734              		@ link register save eliminated.
 3735              	.LVL458:
3263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
3264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xReturn;
3265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 3736              		.loc 2 3266 0
 3737 0000 2730D0E5 		ldrb	r3, [r0, #39]	@ zero_extendqisi2
 3738 0004 060053E3 		cmp	r3, #6
3267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = -pdFREERTOS_ERRNO_EINVAL;
3269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
3271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			/* Cast it to BaseType_t */
3273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = ( BaseType_t ) ( pxSocket->u.xTCP.ucTCPState );
 3739              		.loc 2 3273 0
 3740 0008 4B00D005 		ldrbeq	r0, [r0, #75]	@ zero_extendqisi2
 3741              	.LVL459:
3268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 3742              		.loc 2 3268 0
 3743 000c 1500E013 		mvnne	r0, #21
 3744              	.LVL460:
3274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xReturn;
3277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 3745              		.loc 2 3277 0
 3746 0010 1EFF2FE1 		bx	lr
 3747              		.cfi_endproc
 3748              	.LFE63:
 3750              		.section	.text.FreeRTOS_rx_size,"ax",%progbits
 3751              		.align	2
 3752              		.global	FreeRTOS_rx_size
 3753              		.syntax unified
 3754              		.arm
 3755              		.fpu neon
 3757              	FreeRTOS_rx_size:
 3758              	.LFB64:
3278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
3280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
3281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
3283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/*
3285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 * Returns the number of bytes which can be read.
3286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	 */
3287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t FreeRTOS_rx_size( Socket_t xSocket )
3288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 3759              		.loc 2 3288 0
 3760              		.cfi_startproc
 3761              		@ args = 0, pretend = 0, frame = 0
 3762              		@ frame_needed = 0, uses_anonymous_args = 0
 3763              		@ link register save eliminated.
 3764              	.LVL461:
3289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
3290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t xReturn;
3291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 3765              		.loc 2 3292 0
 3766 0000 2730D0E5 		ldrb	r3, [r0, #39]	@ zero_extendqisi2
 3767 0004 060053E3 		cmp	r3, #6
 3768 0008 0300001A 		bne	.L453
3293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = -pdFREERTOS_ERRNO_EINVAL;
3295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else if( pxSocket->u.xTCP.rxStream != NULL )
 3769              		.loc 2 3296 0
 3770 000c 6C0090E5 		ldr	r0, [r0, #108]
 3771              	.LVL462:
 3772 0010 000050E3 		cmp	r0, #0
 3773 0014 1EFF2F01 		bxeq	lr
3297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 3774              		.loc 2 3298 0
 3775 0018 FEFFFFEA 		b	uxStreamBufferGetSize
 3776              	.LVL463:
 3777              	.L453:
3294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
 3778              		.loc 2 3294 0
 3779 001c 1500E0E3 		mvn	r0, #21
 3780              	.LVL464:
3299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
3301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			xReturn = 0;
3303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		return xReturn;
3306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 3781              		.loc 2 3306 0
 3782 0020 1EFF2FE1 		bx	lr
 3783              		.cfi_endproc
 3784              	.LFE64:
 3786              		.section	.text.FreeRTOS_netstat,"ax",%progbits
 3787              		.align	2
 3788              		.global	FreeRTOS_netstat
 3789              		.syntax unified
 3790              		.arm
 3791              		.fpu neon
 3793              	FreeRTOS_netstat:
 3794              	.LFB65:
3307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
3309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
3310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ipconfigUSE_TCP == 1 )
3312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	void FreeRTOS_netstat( void )
3314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 3795              		.loc 2 3314 0
 3796              		.cfi_startproc
 3797              		@ args = 0, pretend = 0, frame = 8
 3798              		@ frame_needed = 0, uses_anonymous_args = 0
3315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	IPStackEvent_t xAskEvent;
3316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		/* Ask the IP-task to call vTCPNetStat()
3318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		 * to avoid accessing xBoundTCPSocketsList
3319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		 */
3320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xAskEvent.eEventType = eTCPNetStat;
 3799              		.loc 2 3320 0
 3800 0000 0730A0E3 		mov	r3, #7
3314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	IPStackEvent_t xAskEvent;
 3801              		.loc 2 3314 0
 3802 0004 07402DE9 		push	{r0, r1, r2, lr}
 3803              		.cfi_def_cfa_offset 16
 3804              		.cfi_offset 14, -4
3321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xAskEvent.pvData = ( void * ) NULL;
3322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xSendEventStructToIPTask( &xAskEvent, 1000u );
 3805              		.loc 2 3322 0
 3806 0008 FA1FA0E3 		mov	r1, #1000
3320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xAskEvent.pvData = ( void * ) NULL;
 3807              		.loc 2 3320 0
 3808 000c 0030CDE5 		strb	r3, [sp]
 3809              		.loc 2 3322 0
 3810 0010 0D00A0E1 		mov	r0, sp
3321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		xAskEvent.pvData = ( void * ) NULL;
 3811              		.loc 2 3321 0
 3812 0014 0030A0E3 		mov	r3, #0
 3813 0018 04308DE5 		str	r3, [sp, #4]
 3814              		.loc 2 3322 0
 3815 001c FEFFFFEB 		bl	xSendEventStructToIPTask
 3816              	.LVL465:
3323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 3817              		.loc 2 3323 0
 3818 0020 0CD08DE2 		add	sp, sp, #12
 3819              		.cfi_def_cfa_offset 4
 3820              		@ sp needed
 3821 0024 04F09DE4 		ldr	pc, [sp], #4
 3822              		.cfi_endproc
 3823              	.LFE65:
 3825              		.section	.text.vTCPNetStat,"ax",%progbits
 3826              		.align	2
 3827              		.global	vTCPNetStat
 3828              		.syntax unified
 3829              		.arm
 3830              		.fpu neon
 3832              	vTCPNetStat:
 3833              	.LFB66:
3324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #endif /* ipconfigUSE_TCP */
3326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** /*-----------------------------------------------------------*/
3327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** #if( ( ipconfigHAS_PRINTF != 0 ) && ( ipconfigUSE_TCP == 1 ) )
3329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	void vTCPNetStat( void )
3331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	{
 3834              		.loc 2 3331 0
 3835              		.cfi_startproc
 3836              		@ args = 0, pretend = 0, frame = 32
 3837              		@ frame_needed = 0, uses_anonymous_args = 0
 3838              	.LVL466:
 3839 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3840              		.cfi_def_cfa_offset 36
 3841              		.cfi_offset 4, -36
 3842              		.cfi_offset 5, -32
 3843              		.cfi_offset 6, -28
 3844              		.cfi_offset 7, -24
 3845              		.cfi_offset 8, -20
 3846              		.cfi_offset 9, -16
 3847              		.cfi_offset 10, -12
 3848              		.cfi_offset 11, -8
 3849              		.cfi_offset 14, -4
 3850 0004 3CD04DE2 		sub	sp, sp, #60
 3851              		.cfi_def_cfa_offset 96
3332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	/* Show a simple listing of all created sockets and their connections */
3333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	ListItem_t *pxIterator;
3334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	BaseType_t count = 0;
3335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		if( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) == pdFALSE )
 3852              		.loc 2 3336 0
 3853 0008 84419FE5 		ldr	r4, .L466
 3854 000c 083094E5 		ldr	r3, [r4, #8]
 3855 0010 010073E3 		cmn	r3, #1
 3856 0014 0300000A 		beq	.L458
3337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 3857              		.loc 2 3338 0
 3858 0018 78019FE5 		ldr	r0, .L466+4
 3859 001c FEFFFFEB 		bl	vLoggingPrintf
 3860              	.LVL467:
 3861              	.L457:
3339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		else
3341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		{
3342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			FreeRTOS_printf( ( "Prot Port IP-Remote	   : Port  R/T Status	   Alive  tmout Child\n" ) );
3343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
3344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				 pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
3345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
3346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
3347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
3348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#if( ipconfigTCP_KEEP_ALIVE == 1 )
3349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
3350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#else
3351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					TickType_t age = 0u;
3352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#endif
3353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#if( ipconfigUSE_CALLBACKS == 1 )
3354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					void *pxHandleReceive = (void*)pxSocket->u.xTCP.pxHandleReceive;
3355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#else
3356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					void *pxHandleReceive = (void*)NULL;
3357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#endif
3358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				char ucChildText[16] = "";
3359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if (pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN)
3360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
3361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
3362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						( int ) pxSocket->u.xTCP.usChildCount,
3363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						( int ) pxSocket->u.xTCP.usBacklog);
3364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* These should never evaluate to false since the buffers are both shorter than 5-6 characters
3365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					configASSERT( copied_len >= 0 );
3366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					configASSERT( copied_len < sizeof( ucChildText ) );
3367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
3368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				FreeRTOS_printf( ( "TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\n",
3369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->usLocalPort,		/* Local port on this machine */
3370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.ulRemoteIP,	/* IP address of remote machine */
3371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.usRemotePort,	/* Port on remote machine */
3372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.rxStream != NULL,
3373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.txStream != NULL,
3374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.ucTCPState ),
3375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					(age > 999999 ? 999999 : age), /* Format 'age' for printing */
3376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->u.xTCP.usTimeout,
3377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					ucChildText ) );
3378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					/* Remove compiler warnings if FreeRTOS_debug_printf() is not defined. */
3379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					( void ) pxHandleReceive;
3380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				count++;
3381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
3382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
3384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				 pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundUDPSocketsList );
3385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
3386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
3387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				/* Local port on this machine */
3388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				FreeRTOS_printf( ( "UDP Port %5u\n",
3389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					FreeRTOS_ntohs( listGET_LIST_ITEM_VALUE( pxIterator ) ) ) );
3390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				count++;
3391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
3392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
3393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			FreeRTOS_printf( ( "FreeRTOS_netstat: %lu sockets %lu < %lu < %d buffers free\n",
3394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				count,
3395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				uxGetMinimumFreeNetworkBuffers( ),
3396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				uxGetNumberOfFreeNetworkBuffers( ),
3397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
3398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 		}
3399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 	}
 3862              		.loc 2 3399 0
 3863 0020 3CD08DE2 		add	sp, sp, #60
 3864              		.cfi_remember_state
 3865              		.cfi_def_cfa_offset 36
 3866              		@ sp needed
 3867 0024 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3868              	.LVL468:
 3869              	.L458:
 3870              		.cfi_restore_state
3342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 3871              		.loc 2 3342 0
 3872 0028 6C019FE5 		ldr	r0, .L466+8
3334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 
 3873              		.loc 2 3334 0
 3874 002c 0050A0E3 		mov	r5, #0
3342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			for( pxIterator  = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 3875              		.loc 2 3342 0
 3876 0030 FEFFFFEB 		bl	vLoggingPrintf
 3877              	.LVL469:
 3878              	.LBB153:
3368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->usLocalPort,		/* Local port on this machine */
 3879              		.loc 2 3368 0
 3880 0034 64B19FE5 		ldr	fp, .L466+12
 3881              	.LBE153:
3343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				 pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 3882              		.loc 2 3343 0
 3883 0038 083084E2 		add	r3, r4, #8
 3884 003c 0C6094E5 		ldr	r6, [r4, #12]
 3885              	.LVL470:
 3886 0040 18308DE5 		str	r3, [sp, #24]
 3887              	.LVL471:
 3888              	.L460:
3343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				 pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 3889              		.loc 2 3343 0 is_stmt 0 discriminator 1
 3890 0044 18309DE5 		ldr	r3, [sp, #24]
 3891 0048 030056E1 		cmp	r6, r3
 3892 004c 1000001A 		bne	.L462
3383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				 pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundUDPSocketsList );
 3893              		.loc 2 3383 0 is_stmt 1
 3894 0050 4C319FE5 		ldr	r3, .L466+16
3388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					FreeRTOS_ntohs( listGET_LIST_ITEM_VALUE( pxIterator ) ) ) );
 3895              		.loc 2 3388 0
 3896 0054 4C719FE5 		ldr	r7, .L466+20
3383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				 pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundUDPSocketsList );
 3897              		.loc 2 3383 0
 3898 0058 0C6093E5 		ldr	r6, [r3, #12]
 3899              	.LVL472:
 3900 005c 084083E2 		add	r4, r3, #8
 3901              	.L463:
3383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				 pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundUDPSocketsList );
 3902              		.loc 2 3383 0 is_stmt 0 discriminator 1
 3903 0060 040056E1 		cmp	r6, r4
 3904 0064 4100001A 		bne	.L464
3393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				count,
 3905              		.loc 2 3393 0 is_stmt 1
 3906 0068 FEFFFFEB 		bl	uxGetMinimumFreeNetworkBuffers
 3907              	.LVL473:
 3908 006c 0040A0E1 		mov	r4, r0
 3909 0070 FEFFFFEB 		bl	uxGetNumberOfFreeNetworkBuffers
 3910              	.LVL474:
 3911 0074 0830A0E3 		mov	r3, #8
 3912 0078 0420A0E1 		mov	r2, r4
 3913 007c 00308DE5 		str	r3, [sp]
 3914 0080 0510A0E1 		mov	r1, r5
 3915 0084 0030A0E1 		mov	r3, r0
 3916 0088 1C019FE5 		ldr	r0, .L466+24
 3917 008c FEFFFFEB 		bl	vLoggingPrintf
 3918              	.LVL475:
 3919              		.loc 2 3399 0
 3920 0090 E2FFFFEA 		b	.L457
 3921              	.L462:
 3922              	.LBB155:
3347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#if( ipconfigTCP_KEEP_ALIVE == 1 )
 3923              		.loc 2 3347 0
 3924 0094 0C4096E5 		ldr	r4, [r6, #12]
 3925              	.LVL476:
 3926 0098 28A08DE2 		add	r10, sp, #40
3349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#else
 3927              		.loc 2 3349 0
 3928 009c FEFFFFEB 		bl	xTaskGetTickCount
 3929              	.LVL477:
3358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if (pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN)
 3930              		.loc 2 3358 0
 3931 00a0 0030A0E3 		mov	r3, #0
3359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3932              		.loc 2 3359 0
 3933 00a4 4B70D4E5 		ldrb	r7, [r4, #75]	@ zero_extendqisi2
3349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#else
 3934              		.loc 2 3349 0
 3935 00a8 549094E5 		ldr	r9, [r4, #84]
3358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if (pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN)
 3936              		.loc 2 3358 0
 3937 00ac 28308DE5 		str	r3, [sp, #40]
3359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3938              		.loc 2 3359 0
 3939 00b0 010057E3 		cmp	r7, #1
3358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if (pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN)
 3940              		.loc 2 3358 0
 3941 00b4 2C308DE5 		str	r3, [sp, #44]
3349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				#else
 3942              		.loc 2 3349 0
 3943 00b8 099040E0 		sub	r9, r0, r9
 3944              	.LVL478:
3358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				if (pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN)
 3945              		.loc 2 3358 0
 3946 00bc 30308DE5 		str	r3, [sp, #48]
 3947 00c0 34308DE5 		str	r3, [sp, #52]
3359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				{
 3948              		.loc 2 3359 0
 3949 00c4 0B00001A 		bne	.L461
 3950              	.LBB154:
3361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 						( int ) pxSocket->u.xTCP.usChildCount,
 3951              		.loc 2 3361 0
 3952 00c8 B824D4E1 		ldrh	r2, [r4, #72]
 3953 00cc 1010A0E3 		mov	r1, #16
 3954 00d0 B634D4E1 		ldrh	r3, [r4, #70]
 3955 00d4 0A00A0E1 		mov	r0, r10
 3956 00d8 00208DE5 		str	r2, [sp]
 3957 00dc CC209FE5 		ldr	r2, .L466+28
 3958 00e0 FEFFFFEB 		bl	snprintf
 3959              	.LVL479:
3366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 				}
 3960              		.loc 2 3366 0
 3961 00e4 0F0050E3 		cmp	r0, #15
 3962 00e8 0200009A 		bls	.L461
3365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					configASSERT( copied_len < sizeof( ucChildText ) );
 3963              		.loc 2 3365 0 discriminator 1
 3964 00ec 0710A0E1 		mov	r1, r7
 3965 00f0 BC009FE5 		ldr	r0, .L466+32
 3966              	.LVL480:
 3967 00f4 FEFFFFEB 		bl	longjmp
 3968              	.LVL481:
 3969              	.L461:
 3970              	.LBE154:
3368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->usLocalPort,		/* Local port on this machine */
 3971              		.loc 2 3368 0
 3972 00f8 6C7094E5 		ldr	r7, [r4, #108]
3380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 3973              		.loc 2 3380 0
 3974 00fc 015085E2 		add	r5, r5, #1
 3975              	.LVL482:
3368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					pxSocket->usLocalPort,		/* Local port on this machine */
 3976              		.loc 2 3368 0
 3977 0100 708094E5 		ldr	r8, [r4, #112]
 3978 0104 B412D4E1 		ldrh	r1, [r4, #36]
 3979 0108 302094E5 		ldr	r2, [r4, #48]
 3980 010c 007097E2 		adds	r7, r7, #0
 3981 0110 B433D4E1 		ldrh	r3, [r4, #52]
 3982 0114 0170A013 		movne	r7, #1
 3983 0118 4B00D4E5 		ldrb	r0, [r4, #75]	@ zero_extendqisi2
 3984 011c 008098E2 		adds	r8, r8, #0
 3985 0120 0180A013 		movne	r8, #1
 3986 0124 24108DE5 		str	r1, [sp, #36]
 3987 0128 20208DE5 		str	r2, [sp, #32]
 3988 012c 1C308DE5 		str	r3, [sp, #28]
 3989 0130 FEFFFFEB 		bl	FreeRTOS_GetTCPStateName
 3990              	.LVL483:
 3991 0134 14A08DE5 		str	r10, [sp, #20]
 3992 0138 B0C4D4E1 		ldrh	ip, [r4, #64]
 3993 013c 1C309DE5 		ldr	r3, [sp, #28]
 3994 0140 08008DE5 		str	r0, [sp, #8]
 3995 0144 10C08DE5 		str	ip, [sp, #16]
 3996 0148 0B0059E1 		cmp	r9, fp
 3997 014c 0C908D95 		strls	r9, [sp, #12]
 3998 0150 0CB08D85 		strhi	fp, [sp, #12]
 3999 0154 80018DE8 		stm	sp, {r7, r8}
 4000 0158 20209DE5 		ldr	r2, [sp, #32]
 4001 015c 24109DE5 		ldr	r1, [sp, #36]
 4002 0160 50009FE5 		ldr	r0, .L466+36
 4003 0164 FEFFFFEB 		bl	vLoggingPrintf
 4004              	.LVL484:
 4005              	.LBE155:
3345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 4006              		.loc 2 3345 0
 4007 0168 046096E5 		ldr	r6, [r6, #4]
 4008              	.LVL485:
 4009 016c B4FFFFEA 		b	.L460
 4010              	.LVL486:
 4011              	.L464:
3388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					FreeRTOS_ntohs( listGET_LIST_ITEM_VALUE( pxIterator ) ) ) );
 4012              		.loc 2 3388 0
 4013 0170 003096E5 		ldr	r3, [r6]
 4014 0174 0700A0E1 		mov	r0, r7
3390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			}
 4015              		.loc 2 3390 0
 4016 0178 015085E2 		add	r5, r5, #1
 4017              	.LVL487:
3388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 					FreeRTOS_ntohs( listGET_LIST_ITEM_VALUE( pxIterator ) ) ) );
 4018              		.loc 2 3388 0
 4019 017c 2314A0E1 		lsr	r1, r3, #8
 4020 0180 031481E1 		orr	r1, r1, r3, lsl #8
 4021 0184 7110FFE6 		uxth	r1, r1
 4022 0188 FEFFFFEB 		bl	vLoggingPrintf
 4023              	.LVL488:
3385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_Sockets.c **** 			{
 4024              		.loc 2 3385 0
 4025 018c 046096E5 		ldr	r6, [r6, #4]
 4026              	.LVL489:
 4027 0190 B2FFFFEA 		b	.L463
 4028              	.L467:
 4029              		.align	2
 4030              	.L466:
 4031 0194 00000000 		.word	xBoundTCPSocketsList
 4032 0198 00000000 		.word	.LC0
 4033 019c 1A000000 		.word	.LC1
 4034 01a0 3F420F00 		.word	999999
 4035 01a4 00000000 		.word	xBoundUDPSocketsList
 4036 01a8 92000000 		.word	.LC4
 4037 01ac A0000000 		.word	.LC5
 4038 01b0 5B000000 		.word	.LC2
 4039 01b4 28000000 		.word	Unity+40
 4040 01b8 62000000 		.word	.LC3
 4041              		.cfi_endproc
 4042              	.LFE66:
 4044              		.comm	xBoundTCPSocketsList,20,4
 4045              		.comm	xBoundUDPSocketsList,20,4
 4046              		.section	.bss.xLastTime.72681,"aw",%nobits
 4047              		.align	2
 4048              		.set	.LANCHOR0,. + 0
 4051              	xLastTime.72681:
 4052 0000 00000000 		.space	4
 4053              		.section	.rodata.vTCPNetStat.str1.1,"aMS",%progbits,1
 4054              	.LC0:
 4055 0000 504C5553 		.ascii	"PLUS-TCP not initialized\012\000"
 4055      2D544350 
 4055      206E6F74 
 4055      20696E69 
 4055      7469616C 
 4056              	.LC1:
 4057 001a 50726F74 		.ascii	"Prot Port IP-Remote\011   : Port  R/T Status\011   "
 4057      20506F72 
 4057      74204950 
 4057      2D52656D 
 4057      6F746509 
 4058 0047 416C6976 		.ascii	"Alive  tmout Child\012\000"
 4058      65202074 
 4058      6D6F7574 
 4058      20436869 
 4058      6C640A00 
 4059              	.LC2:
 4060 005b 2025642F 		.ascii	" %d/%d\000"
 4060      256400
 4061              	.LC3:
 4062 0062 54435020 		.ascii	"TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\012\000"
 4062      25356420 
 4062      252D3136 
 4062      6C786970 
 4062      3A253564 
 4063              	.LC4:
 4064 0092 55445020 		.ascii	"UDP Port %5u\012\000"
 4064      506F7274 
 4064      20253575 
 4064      0A00
 4065              	.LC5:
 4066 00a0 46726565 		.ascii	"FreeRTOS_netstat: %lu sockets %lu < %lu < %d buffer"
 4066      52544F53 
 4066      5F6E6574 
 4066      73746174 
 4066      3A20256C 
 4067 00d3 73206672 		.ascii	"s free\012\000"
 4067      65650A00 
 4068              		.text
 4069              	.Letext0:
 4070              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 4071              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 4072              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 4073              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 4074              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 4075              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 4076              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4077              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4078              		.file 12 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\unity\\src/unity_internals.h"
 4079              		.file 13 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4080              		.file 14 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS\\portable\\GCC\\ARM_CA9_RZA2M/por
 4081              		.file 15 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/list.h"
 4082              		.file 16 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/task.h"
 4083              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4084              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4085              		.file 19 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4086              		.file 20 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4087              		.file 21 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4088              		.file 22 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4089              		.file 23 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4090              		.file 24 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/event_groups.h"
 4091              		.file 25 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_Socket
 4092              		.file 26 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_TCP_WI
 4093              		.file 27 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_TCP_IP
 4094              		.file 28 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_IP_Pri
 4095              		.file 29 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4096              		.file 30 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4097              		.file 31 "D:\\Work\\DeviceTester\\amazon-freertos\\tests\\renesas\\rza2m-gr-mango\\common\\config_
 4098              		.file 32 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/NetworkBufferMa
 4099              		.file 33 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/portable.h"
 4100              		.file 34 "D:\\Work\\DeviceTester\\amazon-freertos\\tests\\renesas\\rza2m-gr-mango\\common\\config_
DEFINED SYMBOLS
                            *ABS*:00000000 FreeRTOS_Sockets.c
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:17     .text.uxStreamBufferGetSize:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:22     .text.uxStreamBufferGetSize:00000000 uxStreamBufferGetSize
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:63     .text.pxListFindListItemWithValue:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:68     .text.pxListFindListItemWithValue:00000000 pxListFindListItemWithValue
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:126    .text.prvValidSocket:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:131    .text.prvValidSocket:00000000 prvValidSocket
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:174    .text.uxStreamBufferGetSpace:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:179    .text.uxStreamBufferGetSpace:00000000 uxStreamBufferGetSpace
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:220    .text.vNetworkSocketsInit:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:226    .text.vNetworkSocketsInit:00000000 vNetworkSocketsInit
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:250    .text.vNetworkSocketsInit:0000001c $d
                            *COM*:00000014 xBoundUDPSocketsList
                            *COM*:00000014 xBoundTCPSocketsList
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:256    .text.FreeRTOS_socket:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:262    .text.FreeRTOS_socket:00000000 FreeRTOS_socket
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:436    .text.FreeRTOS_socket:00000128 $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:443    .text.FreeRTOS_recvfrom:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:449    .text.FreeRTOS_recvfrom:00000000 FreeRTOS_recvfrom
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:624    .text.FreeRTOS_bind:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:630    .text.FreeRTOS_bind:00000000 FreeRTOS_bind
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:711    .text.FreeRTOS_sendto:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:717    .text.FreeRTOS_sendto:00000000 FreeRTOS_sendto
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:896    .text.FreeRTOS_sendto:0000013c $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:902    .text.vSocketBind:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:908    .text.vSocketBind:00000000 vSocketBind
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1081   .text.vSocketBind:00000120 $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1088   .text.FreeRTOS_closesocket:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1094   .text.FreeRTOS_closesocket:00000000 FreeRTOS_closesocket
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1137   .text.vSocketClose:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1143   .text.vSocketClose:00000000 vSocketClose
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1293   .text.vSocketClose:0000010c $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1298   .text.pxUDPSocketLookup:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1304   .text.pxUDPSocketLookup:00000000 pxUDPSocketLookup
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1339   .text.pxUDPSocketLookup:00000030 $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1345   .text.FreeRTOS_GetLocalAddress:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1351   .text.FreeRTOS_GetLocalAddress:00000000 FreeRTOS_GetLocalAddress
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1378   .text.FreeRTOS_GetLocalAddress:00000024 $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1383   .text.vSocketWakeUpUser:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1389   .text.vSocketWakeUpUser:00000000 vSocketWakeUpUser
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1432   .text.FreeRTOS_accept:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1438   .text.FreeRTOS_accept:00000000 FreeRTOS_accept
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1641   .text.FreeRTOS_recv:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1647   .text.FreeRTOS_recv:00000000 FreeRTOS_recv
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1899   .text.FreeRTOS_get_tx_head:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1905   .text.FreeRTOS_get_tx_head:00000000 FreeRTOS_get_tx_head
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1964   .text.FreeRTOS_send:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:1970   .text.FreeRTOS_send:00000000 FreeRTOS_send
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2276   .text.FreeRTOS_listen:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2282   .text.FreeRTOS_listen:00000000 FreeRTOS_listen
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2407   .text.FreeRTOS_shutdown:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2413   .text.FreeRTOS_shutdown:00000000 FreeRTOS_shutdown
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2464   .text.xTCPTimerCheck:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2470   .text.xTCPTimerCheck:00000000 xTCPTimerCheck
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2583   .text.xTCPTimerCheck:000000b8 $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2589   .text.pxTCPSocketLookup:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2595   .text.pxTCPSocketLookup:00000000 pxTCPSocketLookup
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2671   .text.pxTCPSocketLookup:00000070 $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2676   .text.FreeRTOS_get_rx_buf:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2682   .text.FreeRTOS_get_rx_buf:00000000 FreeRTOS_get_rx_buf
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2698   .text.lTCPAddRxdata:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2704   .text.lTCPAddRxdata:00000000 lTCPAddRxdata
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2908   .text.lTCPAddRxdata:0000013c $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2913   .text.FreeRTOS_GetRemoteAddress:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2919   .text.FreeRTOS_GetRemoteAddress:00000000 FreeRTOS_GetRemoteAddress
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2952   .text.FreeRTOS_maywrite:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:2958   .text.FreeRTOS_maywrite:00000000 FreeRTOS_maywrite
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3010   .text.FreeRTOS_tx_space:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3016   .text.FreeRTOS_tx_space:00000000 FreeRTOS_tx_space
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3055   .text.FreeRTOS_tx_size:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3061   .text.FreeRTOS_tx_size:00000000 FreeRTOS_tx_size
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3092   .text.FreeRTOS_setsockopt:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3098   .text.FreeRTOS_setsockopt:00000000 FreeRTOS_setsockopt
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3129   .text.FreeRTOS_setsockopt:00000028 $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3149   .text.FreeRTOS_setsockopt:00000070 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3447   .text.FreeRTOS_setsockopt:000002b0 $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3452   .text.FreeRTOS_issocketconnected:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3458   .text.FreeRTOS_issocketconnected:00000000 FreeRTOS_issocketconnected
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3489   .text.FreeRTOS_connect:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3495   .text.FreeRTOS_connect:00000000 FreeRTOS_connect
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3693   .text.FreeRTOS_mss:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3699   .text.FreeRTOS_mss:00000000 FreeRTOS_mss
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3722   .text.FreeRTOS_connstatus:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3728   .text.FreeRTOS_connstatus:00000000 FreeRTOS_connstatus
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3751   .text.FreeRTOS_rx_size:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3757   .text.FreeRTOS_rx_size:00000000 FreeRTOS_rx_size
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3787   .text.FreeRTOS_netstat:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3793   .text.FreeRTOS_netstat:00000000 FreeRTOS_netstat
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3826   .text.vTCPNetStat:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:3832   .text.vTCPNetStat:00000000 vTCPNetStat
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:4031   .text.vTCPNetStat:00000194 $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:4047   .bss.xLastTime.72681:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccFEALX5.s:4051   .bss.xLastTime.72681:00000000 xLastTime.72681
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xIPIsNetworkTaskReady
vListInitialise
longjmp
pvPortMalloc
xEventGroupCreate
vPortFree
memset
vListInitialiseItem
Unity
vTaskSetTimeOutState
xEventGroupWaitBits
xTaskCheckForTimeOut
vPortEnterCritical
uxListRemove
vPortExitCritical
memcpy
vReleaseNetworkBufferAndDescriptor
xSendEventStructToIPTask
pxGetNetworkBufferWithDescriptor
pxUDPPayloadBuffer_to_NetworkBuffer
__aeabi_uidivmod
ulRand
vListInsertEnd
vTCPWindowDestroy
vEventGroupDelete
xDefaultPartUDPPacketHeader
xEventGroupSetBits
vTaskSuspendAll
xTaskResumeAll
uxStreamBufferGet
xSendEventToIPTask
vTCPStateChange
uxStreamBufferAdd
xIsCallingFromIPTask
xTaskGetTickCount
xTCPSocketCheck
__aeabi_uidiv
vLoggingPrintf
uxGetMinimumFreeNetworkBuffers
uxGetNumberOfFreeNetworkBuffers
snprintf
FreeRTOS_GetTCPStateName
