   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"timers.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  20              		.fpu neon
  22              	prvCheckForValidListAndQueue:
  23              	.LFB17:
  24              		.file 1 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/timers.c"
   1:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*
   2:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * FreeRTOS Kernel V10.1.1
   3:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  *
   5:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * the Software without restriction, including without limitation the rights to
   8:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * subject to the following conditions:
  11:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  *
  12:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * The above copyright notice and this permission notice shall be included in all
  13:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * copies or substantial portions of the Software.
  14:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  *
  15:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  *
  22:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * http://www.FreeRTOS.org
  23:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * http://aws.amazon.com/freertos
  24:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  *
  25:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * 1 tab == 4 spaces!
  26:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  */
  27:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  28:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* Standard includes. */
  29:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #include <stdlib.h>
  30:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  31:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** task.h is included from an application file. */
  34:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  36:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #include "FreeRTOS.h"
  37:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #include "task.h"
  38:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #include "queue.h"
  39:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #include "timers.h"
  40:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  41:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  42:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  43:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #endif
  44:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  45:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** for the header files above, but not in this file, in order to generate the
  48:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** correct privileged Vs unprivileged linkage and placement. */
  49:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e9021 !e961 !e750. */
  50:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  51:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  52:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* This entire source file will be skipped if the application is not configured
  53:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  54:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** of this file.  If you want to include software timer functionality then ensure
  55:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  56:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #if ( configUSE_TIMERS == 1 )
  57:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  58:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* Misc definitions. */
  59:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
  60:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  61:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  62:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  63:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #ifndef configTIMER_SERVICE_TASK_NAME
  64:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	#define configTIMER_SERVICE_TASK_NAME "Tmr Svc"
  65:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #endif
  66:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  67:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* The definition of the timers themselves. */
  68:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** typedef struct tmrTimerControl /* The old naming convention is used to prevent breaking kernel awar
  69:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
  70:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
  71:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
  72:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
  73:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	UBaseType_t				uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically restarted on
  74:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
  75:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
  76:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  77:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
  78:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	#endif
  79:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  80:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  81:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		uint8_t 			ucStaticallyAllocated; /*<< Set to pdTRUE if the timer was created statically so no at
  82:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	#endif
  83:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** } xTIMER;
  84:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  85:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  86:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** name below to enable the use of older kernel aware debuggers. */
  87:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** typedef xTIMER Timer_t;
  88:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
  89:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* The definition of messages that can be sent and received on the timer queue.
  90:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Two types of message can be queued - messages that manipulate a software timer,
  91:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** and messages that request the execution of a non-timer related callback.  The
  92:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** two message types are defined in two separate structures, xTimerParametersType
  93:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** and xCallbackParametersType respectively. */
  94:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** typedef struct tmrTimerParameters
  95:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
  96:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
  97:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
  98:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** } TimerParameter_t;
  99:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** typedef struct tmrCallbackParameters
 102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** } CallbackParameters_t;
 107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* The structure that contains the two message types, along with an identifier
 109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** that is used to determine which message type is valid. */
 110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** typedef struct tmrTimerQueueMessage
 111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	union
 114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		TimerParameter_t xTimerParameters;
 116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			CallbackParameters_t xCallbackParameters;
 121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	} u;
 123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** } DaemonTaskMessage_t;
 124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** which static variables must be declared volatile. */
 127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** timer service task is allowed to access these lists. 
 131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** xActiveTimerList1 and xActiveTimerList2 could be at function scope but that
 132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** breaks some kernel aware debuggers, and debuggers that reply on removing the
 133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static qualifier. */
 134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /* A queue that is used to send commands to the timer service task. */
 140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*lint -restore */
 144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* If static allocation is supported then the application must provide the
 150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	following callback function - which enables the application to optionally
 151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	and TCB. */
 153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #endif
 156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*
 158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * been initialised already.
 160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  */
 161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*
 164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * task.  Other tasks communicate with the timer service task using the
 166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * xTimerQueue queue.
 167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  */
 168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
 169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*
 171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * Called by the timer service task to interpret and process a command it
 172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * received on the timer queue.
 173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  */
 174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*
 177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * depending on if the expire time causes a timer counter overflow.
 179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  */
 180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*
 183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * auto reload timer, then call its callback.
 185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  */
 186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*
 189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * current timer list does not still reference some timers.
 191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  */
 192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*
 195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  */
 198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*
 201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * If the timer list contains any active timers then return the expire time of
 202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * to pdTRUE.
 205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  */
 206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*
 209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * until either a timer does expire or a command is received.
 211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  */
 212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*
 215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  * dynamically to fill in the structure's members.
 217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c ****  */
 218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									const TickType_t xTimerPeriodInTicks,
 220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									const UBaseType_t uxAutoReload,
 221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									void * const pvTimerID,
 222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
 224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xTimerCreateTimerTask( void )
 227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xReturn = pdFAIL;
 229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* This function is called when the scheduler is started if
 231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	timer service task has been created/initialised.  If timers have already
 233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	been created then the initialisation will already have been performed. */
 234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	prvCheckForValidListAndQueue();
 235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	if( xTimerQueue != NULL )
 237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			uint32_t ulTimerTaskStackSize;
 243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 													ulTimerTaskStackSize,
 248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 													NULL,
 249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 													pxTimerTaskStackBuffer,
 251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 													pxTimerTaskTCBBuffer );
 252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			if( xTimerTaskHandle != NULL )
 254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				xReturn = pdPASS;
 256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		#else
 259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
 261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									configTIMER_SERVICE_TASK_NAME,
 262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									NULL,
 264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									&xTimerTaskHandle );
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	else
 270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		mtCOVERAGE_TEST_MARKER();
 272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	configASSERT( xReturn );
 275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xReturn;
 276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types 
 282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 								const TickType_t xTimerPeriodInTicks,
 283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 								const UBaseType_t uxAutoReload,
 284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 								void * const pvTimerID,
 285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 								TimerCallbackFunction_t pxCallbackFunction )
 286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	Timer_t *pxNewTimer;
 288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values ret
 290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		if( pxNewTimer != NULL )
 292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				/* Timers can be created statically or dynamically, so note this
 298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				timer was created dynamically in case the timer is later
 299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				deleted. */
 300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		return pxNewTimer;
 306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,		/*lint !e971 Unqualified char t
 314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 										const TickType_t xTimerPeriodInTicks,
 315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 										const UBaseType_t uxAutoReload,
 316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 										void * const pvTimerID,
 317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 										StaticTimer_t *pxTimerBuffer )
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	Timer_t *pxNewTimer;
 321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		#if( configASSERT_DEFINED == 1 )
 323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			/* Sanity check that the size of the structure used to declare a
 325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			structure. */
 327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		#endif /* configASSERT_DEFINED */
 332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		configASSERT( pxTimerBuffer );
 335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Tim
 336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		if( pxNewTimer != NULL )
 338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				/* Timers can be created statically or dynamically so note this
 344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				timer was created statically in case it is later deleted. */
 345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		return pxNewTimer;
 351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,			/*lint !e971 Unqualified char 
 357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									const TickType_t xTimerPeriodInTicks,
 358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									const UBaseType_t uxAutoReload,
 359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									void * const pvTimerID,
 360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 									Timer_t *pxNewTimer )
 362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	if( pxNewTimer != NULL )
 367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		created/initialised. */
 370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		prvCheckForValidListAndQueue();
 371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Initialise the timer structure members using the function
 373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		parameters. */
 374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xReturn = pdFAIL;
 388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** DaemonTaskMessage_t xMessage;
 389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	configASSERT( xTimer );
 391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* Send a message to the timer service task to perform a particular action
 393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	on a particular timer definition. */
 394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	if( xTimerQueue != NULL )
 395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.xMessageID = xCommandID;
 398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xTimerParameters.pxTimer = xTimer;
 400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			else
 408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		else
 413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	else
 420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		mtCOVERAGE_TEST_MARKER();
 422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xReturn;
 425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xTimerTaskHandle;
 434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t *pxTimer = xTimer;
 440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	configASSERT( xTimer );
 442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t * pxTimer =  xTimer;
 449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TickType_t xReturn;
 450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	configASSERT( xTimer );
 452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xReturn;
 454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t *pxTimer = xTimer;
 460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	configASSERT( xTimer );
 462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return pxTimer->pcTimerName;
 463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xResult;
 469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !
 470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	been performed to ensure the list is not empty. */
 473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* If the timer is an auto reload timer then calculate the next
 477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		other than the current time.  It will therefore be inserted into the
 482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		correct list relative to the time this task thinks it is now. */
 483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			/* The timer expired before it was added to the active timer
 486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			list.  Reload it now.  */
 487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			configASSERT( xResult );
 489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			( void ) xResult;
 490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		else
 492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			mtCOVERAGE_TEST_MARKER();
 494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	else
 497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		mtCOVERAGE_TEST_MARKER();
 499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* Call the timer callback. */
 502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvTimerTask( void *pvParameters )
 507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TickType_t xNextExpireTime;
 509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xListWasEmpty;
 510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* Just to avoid compiler warnings. */
 512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	( void ) pvParameters;
 513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Allow the application writer to execute some code in the context of
 519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		this task at the point the task starts executing.  This is useful if the
 520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		application includes initialisation code that would benefit from
 521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		executing after the scheduler has been started. */
 522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		vApplicationDaemonTaskStartupHook();
 523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	for( ;; )
 527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		obtain the time at which the next timer will expire. */
 530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		until either a timer does expire, or a command is received. */
 534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Empty the command queue. */
 537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		prvProcessReceivedCommands();
 538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TickType_t xTimeNow;
 545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xTimerListsWereSwitched;
 546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	vTaskSuspendAll();
 548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		then don't process this timer as any timers that remained in the list
 552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		when the lists were switched will have been processed within the
 553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		prvSampleTimeNow() function. */
 554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				( void ) xTaskResumeAll();
 561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			else
 564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				/* The tick count has not overflowed, and the next expire
 566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				time has not been reached yet.  This task should therefore
 567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				block to wait for the next expire time or a command to be
 568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				received - whichever comes first.  The following line cannot
 569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				case when the current timer list is empty. */
 571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				if( xListWasEmpty != pdFALSE )
 572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				{
 573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					/* The current timer list is empty - is the overflow list
 574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					also empty? */
 575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				}
 577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				{
 582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					/* Yield to wait for either a command to arrive, or the
 583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					block time to expire.  If a command arrived between the
 584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					critical section being exited and this yield then the yield
 585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					will not cause the task to block. */
 586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					portYIELD_WITHIN_API();
 587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				}
 588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				else
 589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				{
 590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					mtCOVERAGE_TEST_MARKER();
 591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				}
 592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		else
 595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			( void ) xTaskResumeAll();
 597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TickType_t xNextExpireTime;
 605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	this task to unblock when the tick count overflows, at which point the
 611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	timer lists will be switched and the next expiry time can be
 612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	re-assessed.  */
 613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	else
 619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
 622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xNextExpireTime;
 625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TickType_t xTimeNow;
 631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	xTimeNow = xTaskGetTickCount();
 634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	if( xTimeNow < xLastTime )
 636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		prvSwitchTimerLists();
 638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	else
 641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	xLastTime = xTimeNow;
 646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xTimeNow;
 648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	if( xNextExpiryTime <= xTimeNow )
 659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		timer was issued, and the time the command was processed? */
 662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
 663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			/* The time between a command being issued and the command being
 665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			processed actually exceeds the timers period.  */
 666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xProcessTimerNow = pdTRUE;
 667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		else
 669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	else
 674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			but the expiry time has not, then the timer must have already passed
 679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			its expiry time and should be processed immediately. */
 680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xProcessTimerNow = pdTRUE;
 681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		else
 683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xProcessTimerNow;
 689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void	prvProcessReceivedCommands( void )
 693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** DaemonTaskMessage_t xMessage;
 695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t *pxTimer;
 696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TickType_t xTimeNow;
 698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			/* Negative commands are pended function calls rather than timer
 704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			commands. */
 705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				callback be executed.  Check the callback is not NULL. */
 711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				configASSERT( pxCallback );
 712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				/* Call the function. */
 714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			else
 717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				mtCOVERAGE_TEST_MARKER();
 719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Commands that are positive are timer commands rather than pended
 724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		function calls. */
 725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			software timer. */
 729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The
 732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				/* The timer is in a list, remove it. */
 734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			else
 737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				mtCOVERAGE_TEST_MARKER();
 739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			called after the message is received from xTimerQueue so there is no
 746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			possibility of a higher priority task adding a message to the message
 747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			switch( xMessage.xMessageID )
 752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				case tmrCOMMAND_START :
 754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			    case tmrCOMMAND_START_FROM_ISR :
 755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			    case tmrCOMMAND_RESET :
 756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			    case tmrCOMMAND_RESET_FROM_ISR :
 757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					/* Start or restart a timer. */
 759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					{
 761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						/* The timer expired before it was added to the active
 762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						timer list.  Process it now. */
 763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						{
 768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 							configASSERT( xResult );
 770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 							( void ) xResult;
 771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						}
 772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						else
 773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						{
 774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 							mtCOVERAGE_TEST_MARKER();
 775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						}
 776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					}
 777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					else
 778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					{
 779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						mtCOVERAGE_TEST_MARKER();
 780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					}
 781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					break;
 782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				case tmrCOMMAND_STOP :
 784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					/* The timer has already been removed from the active list.
 786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					There is nothing to do here. */
 787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					break;
 788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					/* The new period does not really have a reference, and can
 795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					be longer or shorter than the old one.  The command time is
 796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					therefore set to the current time, and as the period cannot
 797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					be zero the next expiry time can only be in the future,
 798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					no fail case that needs to be handled here. */
 800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					break;
 802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				case tmrCOMMAND_DELETE :
 804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					/* The timer has already been removed from the active list,
 805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					just free up the memory if the memory was dynamically
 806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					allocated. */
 807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					{
 809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						/* The timer can only have been allocated dynamically -
 810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						free it again. */
 811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						vPortFree( pxTimer );
 812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					}
 813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					{
 815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						/* The timer could have been allocated statically or
 816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						dynamically, so check before attempting to free the
 817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						memory. */
 818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						{
 820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 							vPortFree( pxTimer );
 821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						}
 822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						else
 823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						{
 824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 							mtCOVERAGE_TEST_MARKER();
 825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						}
 826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					}
 827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					break;
 829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				default	:
 831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					/* Don't expect to get here. */
 832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					break;
 833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvSwitchTimerLists( void )
 840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TickType_t xNextExpireTime, xReloadTime;
 842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** List_t *pxTemp;
 843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t *pxTimer;
 844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xResult;
 845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	If there are any timers still referenced from the current timer list
 848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	then they must have expired and should be processed before the lists
 849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	are switched. */
 850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Remove the timer from the list. */
 855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 v
 856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		have not yet been switched. */
 862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			/* Calculate the reload value, and if the reload value results in
 867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			the timer going into the same timer list then it has already expired
 868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			and the timer should be re-inserted into the current list so it is
 869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			the lists have been swapped. */
 872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			if( xReloadTime > xNextExpireTime )
 874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			else
 880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				configASSERT( xResult );
 883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				( void ) xResult;
 884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		else
 887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			mtCOVERAGE_TEST_MARKER();
 889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	pxTemp = pxCurrentTimerList;
 893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	pxOverflowTimerList = pxTemp;
 895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** static void prvCheckForValidListAndQueue( void )
 899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
  25              		.loc 1 899 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 F7402DE9 		push	{r0, r1, r2, r4, r5, r6, r7, lr}
  30              		.cfi_def_cfa_offset 32
  31              		.cfi_offset 4, -20
  32              		.cfi_offset 5, -16
  33              		.cfi_offset 6, -12
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
 900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* Check that the list from which active timers are referenced, and the
 901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	queue used to communicate with the timer service, have been
 902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	initialised. */
 903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	taskENTER_CRITICAL();
 904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		if( xTimerQueue == NULL )
  36              		.loc 1 905 0
  37 0004 6C409FE5 		ldr	r4, .L9
 903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
  38              		.loc 1 903 0
  39 0008 FEFFFFEB 		bl	vPortEnterCritical
  40              	.LVL0:
  41              		.loc 1 905 0
  42 000c 005094E5 		ldr	r5, [r4]
  43 0010 000055E3 		cmp	r5, #0
  44 0014 1400001A 		bne	.L3
 906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			vListInitialise( &xActiveTimerList1 );
  45              		.loc 1 907 0
  46 0018 5C709FE5 		ldr	r7, .L9+4
 908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			vListInitialise( &xActiveTimerList2 );
  47              		.loc 1 908 0
  48 001c 5C609FE5 		ldr	r6, .L9+8
 907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			vListInitialise( &xActiveTimerList2 );
  49              		.loc 1 907 0
  50 0020 0700A0E1 		mov	r0, r7
  51 0024 FEFFFFEB 		bl	vListInitialise
  52              	.LVL1:
  53              		.loc 1 908 0
  54 0028 0600A0E1 		mov	r0, r6
  55 002c FEFFFFEB 		bl	vListInitialise
  56              	.LVL2:
 909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
  57              		.loc 1 909 0
  58 0030 4C309FE5 		ldr	r3, .L9+12
  59              	.LBB2:
 910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				/* The timer queue is allocated statically in case
 915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent ad
 917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonT
 918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) siz
  60              		.loc 1 919 0
  61 0034 1010A0E3 		mov	r1, #16
  62 0038 48209FE5 		ldr	r2, .L9+16
  63 003c 0500A0E3 		mov	r0, #5
  64              	.LBE2:
 909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
  65              		.loc 1 909 0
  66 0040 007083E5 		str	r7, [r3]
 910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
  67              		.loc 1 910 0
  68 0044 40309FE5 		ldr	r3, .L9+20
  69 0048 006083E5 		str	r6, [r3]
  70              	.LBB3:
  71              		.loc 1 919 0
  72 004c 00508DE5 		str	r5, [sp]
  73 0050 38309FE5 		ldr	r3, .L9+24
  74 0054 FEFFFFEB 		bl	xQueueGenericCreateStatic
  75              	.LVL3:
  76              	.LBE3:
 920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			#else
 922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			#endif
 926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				if( xTimerQueue != NULL )
  77              		.loc 1 929 0
  78 0058 000050E3 		cmp	r0, #0
  79              	.LBB4:
 919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
  80              		.loc 1 919 0
  81 005c 000084E5 		str	r0, [r4]
  82              	.LBE4:
  83              		.loc 1 929 0
  84 0060 0100000A 		beq	.L3
 930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				{
 931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  85              		.loc 1 931 0
  86 0064 28109FE5 		ldr	r1, .L9+28
  87 0068 FEFFFFEB 		bl	vQueueAddToRegistry
  88              	.LVL4:
  89              	.L3:
 932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				}
 933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				else
 934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				{
 935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					mtCOVERAGE_TEST_MARKER();
 936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				}
 937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		else
 941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			mtCOVERAGE_TEST_MARKER();
 943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	taskEXIT_CRITICAL();
 946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
  90              		.loc 1 946 0
  91 006c 0CD08DE2 		add	sp, sp, #12
  92              		.cfi_def_cfa_offset 20
  93              		@ sp needed
  94 0070 F040BDE8 		pop	{r4, r5, r6, r7, lr}
  95              		.cfi_restore 14
  96              		.cfi_restore 7
  97              		.cfi_restore 6
  98              		.cfi_restore 5
  99              		.cfi_restore 4
 100              		.cfi_def_cfa_offset 0
 945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 101              		.loc 1 945 0
 102 0074 FEFFFFEA 		b	vPortExitCritical
 103              	.LVL5:
 104              	.L10:
 105              		.align	2
 106              	.L9:
 107 0078 00000000 		.word	.LANCHOR0
 108 007c 00000000 		.word	.LANCHOR1
 109 0080 00000000 		.word	.LANCHOR2
 110 0084 00000000 		.word	.LANCHOR3
 111 0088 00000000 		.word	.LANCHOR6
 112 008c 00000000 		.word	.LANCHOR4
 113 0090 00000000 		.word	.LANCHOR5
 114 0094 00000000 		.word	.LC0
 115              		.cfi_endproc
 116              	.LFE17:
 118              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
 119              		.align	2
 120              		.syntax unified
 121              		.arm
 122              		.fpu neon
 124              	prvInsertTimerInActiveList:
 125              	.LFB14:
 652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 126              		.loc 1 652 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              	.LVL6:
 658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 131              		.loc 1 658 0
 132 0000 020051E1 		cmp	r1, r2
 652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 133              		.loc 1 652 0
 134 0004 10402DE9 		push	{r4, lr}
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 4, -8
 137              		.cfi_offset 14, -4
 655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 138              		.loc 1 655 0
 139 0008 041080E5 		str	r1, [r0, #4]
 656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 140              		.loc 1 656 0
 141 000c 100080E5 		str	r0, [r0, #16]
 658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 142              		.loc 1 658 0
 143 0010 0900008A 		bhi	.L12
 662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 144              		.loc 1 662 0
 145 0014 032042E0 		sub	r2, r2, r3
 146              	.LVL7:
 147 0018 183090E5 		ldr	r3, [r0, #24]
 148              	.LVL8:
 149 001c 030052E1 		cmp	r2, r3
 150 0020 0E00002A 		bcs	.L15
 151              	.LVL9:
 152              	.LBB7:
 153              	.LBB8:
 670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 154              		.loc 1 670 0
 155 0024 3C309FE5 		ldr	r3, .L18
 156 0028 041080E2 		add	r1, r0, #4
 157              	.LVL10:
 158              	.L17:
 159 002c 000093E5 		ldr	r0, [r3]
 160              	.LVL11:
 161 0030 FEFFFFEB 		bl	vListInsert
 162              	.LVL12:
 163 0034 0000A0E3 		mov	r0, #0
 164 0038 1080BDE8 		pop	{r4, pc}
 165              	.LVL13:
 166              	.L12:
 167              	.LBE8:
 168              	.LBE7:
 675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 169              		.loc 1 675 0
 170 003c 030052E1 		cmp	r2, r3
 171 0040 0140A033 		movcc	r4, #1
 172 0044 0040A023 		movcs	r4, #0
 173 0048 030051E1 		cmp	r1, r3
 174 004c 0040A033 		movcc	r4, #0
 175 0050 000054E3 		cmp	r4, #0
 684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 176              		.loc 1 684 0
 177 0054 04108002 		addeq	r1, r0, #4
 178              	.LVL14:
 179 0058 0C309F05 		ldreq	r3, .L18+4
 180              	.LVL15:
 675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 181              		.loc 1 675 0
 182 005c F2FFFF0A 		beq	.L17
 183              	.LVL16:
 184              	.L15:
 666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 185              		.loc 1 666 0
 186 0060 0100A0E3 		mov	r0, #1
 187              	.LVL17:
 689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 188              		.loc 1 689 0
 189 0064 1080BDE8 		pop	{r4, pc}
 190              	.L19:
 191              		.align	2
 192              	.L18:
 193 0068 00000000 		.word	.LANCHOR4
 194 006c 00000000 		.word	.LANCHOR3
 195              		.cfi_endproc
 196              	.LFE14:
 198              		.section	.text.unlikely.xTimerGenericCommand.part.2,"ax",%progbits
 199              		.align	2
 200              		.syntax unified
 201              		.arm
 202              		.fpu neon
 204              	xTimerGenericCommand.part.2:
 205              	.LFB27:
 385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 206              		.loc 1 385 0
 207              		.cfi_startproc
 208              		@ Volatile: function does not return.
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              	.LVL18:
 212 0000 10402DE9 		push	{r4, lr}
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 4, -8
 215              		.cfi_offset 14, -4
 390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 216              		.loc 1 390 0
 217 0004 0110A0E3 		mov	r1, #1
 218 0008 00009FE5 		ldr	r0, .L22
 219 000c FEFFFFEB 		bl	longjmp
 220              	.LVL19:
 221              	.L23:
 222              		.align	2
 223              	.L22:
 224 0010 28000000 		.word	Unity+40
 225              		.cfi_endproc
 226              	.LFE27:
 228              		.set	prvInitialiseNewTimer.part.1,xTimerGenericCommand.part.2
 229              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
 230              		.align	2
 231              		.global	xTimerCreateTimerTask
 232              		.syntax unified
 233              		.arm
 234              		.fpu neon
 236              	xTimerCreateTimerTask:
 237              	.LFB0:
 227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xReturn = pdFAIL;
 238              		.loc 1 227 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 16
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              	.LVL20:
 243 0000 10402DE9 		push	{r4, lr}
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 4, -8
 246              		.cfi_offset 14, -4
 247 0004 20D04DE2 		sub	sp, sp, #32
 248              		.cfi_def_cfa_offset 40
 234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 249              		.loc 1 234 0
 250 0008 FEFFFFEB 		bl	prvCheckForValidListAndQueue
 251              	.LVL21:
 236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 252              		.loc 1 236 0
 253 000c 78309FE5 		ldr	r3, .L31
 254 0010 003093E5 		ldr	r3, [r3]
 255 0014 000053E3 		cmp	r3, #0
 256 0018 0200001A 		bne	.L25
 257              	.LVL22:
 258              	.L26:
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xReturn;
 259              		.loc 1 274 0
 260 001c 0110A0E3 		mov	r1, #1
 261 0020 68009FE5 		ldr	r0, .L31+4
 262 0024 FEFFFFEB 		bl	longjmp
 263              	.LVL23:
 264              	.L25:
 265              	.LBB9:
 240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 266              		.loc 1 240 0
 267 0028 0040A0E3 		mov	r4, #0
 244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 268              		.loc 1 244 0
 269 002c 1C208DE2 		add	r2, sp, #28
 270 0030 18108DE2 		add	r1, sp, #24
 271 0034 14008DE2 		add	r0, sp, #20
 240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 272              		.loc 1 240 0
 273 0038 14408DE5 		str	r4, [sp, #20]
 241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			uint32_t ulTimerTaskStackSize;
 274              		.loc 1 241 0
 275 003c 18408DE5 		str	r4, [sp, #24]
 244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 276              		.loc 1 244 0
 277 0040 FEFFFFEB 		bl	vApplicationGetTimerTaskMemory
 278              	.LVL24:
 245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 279              		.loc 1 245 0
 280 0044 14309DE5 		ldr	r3, [sp, #20]
 281 0048 1C209DE5 		ldr	r2, [sp, #28]
 282 004c 40109FE5 		ldr	r1, .L31+8
 283 0050 08308DE5 		str	r3, [sp, #8]
 284 0054 18309DE5 		ldr	r3, [sp, #24]
 285 0058 38009FE5 		ldr	r0, .L31+12
 286 005c 04308DE5 		str	r3, [sp, #4]
 287 0060 1330A0E3 		mov	r3, #19
 288 0064 00308DE5 		str	r3, [sp]
 289 0068 0430A0E1 		mov	r3, r4
 290 006c FEFFFFEB 		bl	xTaskCreateStatic
 291              	.LVL25:
 292 0070 24309FE5 		ldr	r3, .L31+16
 293              	.LBE9:
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xReturn;
 294              		.loc 1 274 0
 295 0074 040050E1 		cmp	r0, r4
 296              	.LBB10:
 245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 													configTIMER_SERVICE_TASK_NAME,
 297              		.loc 1 245 0
 298 0078 000083E5 		str	r0, [r3]
 299              	.LVL26:
 300              	.LBE10:
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xReturn;
 301              		.loc 1 274 0
 302 007c E6FFFF0A 		beq	.L26
 276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 303              		.loc 1 276 0
 304 0080 0100A0E3 		mov	r0, #1
 305              	.LVL27:
 306 0084 20D08DE2 		add	sp, sp, #32
 307              		.cfi_def_cfa_offset 8
 308              		@ sp needed
 309 0088 1080BDE8 		pop	{r4, pc}
 310              	.L32:
 311              		.align	2
 312              	.L31:
 313 008c 00000000 		.word	.LANCHOR0
 314 0090 28000000 		.word	Unity+40
 315 0094 00000000 		.word	.LC1
 316 0098 00000000 		.word	prvTimerTask
 317 009c 00000000 		.word	.LANCHOR7
 318              		.cfi_endproc
 319              	.LFE0:
 321              		.section	.text.xTimerCreate,"ax",%progbits
 322              		.align	2
 323              		.global	xTimerCreate
 324              		.syntax unified
 325              		.arm
 326              		.fpu neon
 328              	xTimerCreate:
 329              	.LFB1:
 286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	Timer_t *pxNewTimer;
 330              		.loc 1 286 0
 331              		.cfi_startproc
 332              		@ args = 4, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              	.LVL28:
 335 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 336              		.cfi_def_cfa_offset 24
 337              		.cfi_offset 4, -24
 338              		.cfi_offset 5, -20
 339              		.cfi_offset 6, -16
 340              		.cfi_offset 7, -12
 341              		.cfi_offset 8, -8
 342              		.cfi_offset 14, -4
 286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	Timer_t *pxNewTimer;
 343              		.loc 1 286 0
 344 0004 0080A0E1 		mov	r8, r0
 289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 345              		.loc 1 289 0
 346 0008 3000A0E3 		mov	r0, #48
 347              	.LVL29:
 286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	Timer_t *pxNewTimer;
 348              		.loc 1 286 0
 349 000c 0150A0E1 		mov	r5, r1
 350 0010 0270A0E1 		mov	r7, r2
 351 0014 0360A0E1 		mov	r6, r3
 289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 352              		.loc 1 289 0
 353 0018 FEFFFFEB 		bl	pvPortMalloc
 354              	.LVL30:
 291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 355              		.loc 1 291 0
 356 001c 004050E2 		subs	r4, r0, #0
 357 0020 0D00000A 		beq	.L33
 358              	.LVL31:
 359              	.LBB13:
 360              	.LBB14:
 364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 361              		.loc 1 364 0
 362 0024 000055E3 		cmp	r5, #0
 363 0028 0000001A 		bne	.L35
 364 002c FEFFFFEB 		bl	prvInitialiseNewTimer.part.1
 365              	.LVL32:
 366              	.L35:
 370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 367              		.loc 1 370 0
 368 0030 FEFFFFEB 		bl	prvCheckForValidListAndQueue
 369              	.LVL33:
 378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 370              		.loc 1 378 0
 371 0034 18309DE5 		ldr	r3, [sp, #24]
 379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 372              		.loc 1 379 0
 373 0038 040084E2 		add	r0, r4, #4
 374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 374              		.loc 1 374 0
 375 003c 008084E5 		str	r8, [r4]
 375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 376              		.loc 1 375 0
 377 0040 185084E5 		str	r5, [r4, #24]
 378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 378              		.loc 1 378 0
 379 0044 243084E5 		str	r3, [r4, #36]
 376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 380              		.loc 1 376 0
 381 0048 1C7084E5 		str	r7, [r4, #28]
 377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 382              		.loc 1 377 0
 383 004c 206084E5 		str	r6, [r4, #32]
 379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 384              		.loc 1 379 0
 385 0050 FEFFFFEB 		bl	vListInitialiseItem
 386              	.LVL34:
 387              	.LBE14:
 388              	.LBE13:
 300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 389              		.loc 1 300 0
 390 0054 0030A0E3 		mov	r3, #0
 391 0058 2C30C4E5 		strb	r3, [r4, #44]
 392              	.L33:
 306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 393              		.loc 1 306 0
 394 005c 0400A0E1 		mov	r0, r4
 395 0060 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 396              		.cfi_endproc
 397              	.LFE1:
 399              		.section	.text.xTimerCreateStatic,"ax",%progbits
 400              		.align	2
 401              		.global	xTimerCreateStatic
 402              		.syntax unified
 403              		.arm
 404              		.fpu neon
 406              	xTimerCreateStatic:
 407              	.LFB2:
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	Timer_t *pxNewTimer;
 408              		.loc 1 319 0
 409              		.cfi_startproc
 410              		@ args = 8, pretend = 0, frame = 8
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              	.LVL35:
 413 0000 F3412DE9 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 414              		.cfi_def_cfa_offset 32
 415              		.cfi_offset 4, -24
 416              		.cfi_offset 5, -20
 417              		.cfi_offset 6, -16
 418              		.cfi_offset 7, -12
 419              		.cfi_offset 8, -8
 420              		.cfi_offset 14, -4
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	Timer_t *pxNewTimer;
 421              		.loc 1 319 0
 422 0004 0360A0E1 		mov	r6, r3
 423              	.LBB18:
 327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 424              		.loc 1 327 0
 425 0008 3030A0E3 		mov	r3, #48
 426              	.LVL36:
 427              	.LBE18:
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	Timer_t *pxNewTimer;
 428              		.loc 1 319 0
 429 000c 24409DE5 		ldr	r4, [sp, #36]
 430              	.LBB19:
 327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 431              		.loc 1 327 0
 432 0010 04308DE5 		str	r3, [sp, #4]
 328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 433              		.loc 1 328 0
 434 0014 04309DE5 		ldr	r3, [sp, #4]
 435 0018 300053E3 		cmp	r3, #48
 436 001c 0200000A 		beq	.L41
 437              	.L42:
 328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 438              		.loc 1 328 0 is_stmt 0 discriminator 1
 439 0020 0110A0E3 		mov	r1, #1
 440              	.LVL37:
 441 0024 5C009FE5 		ldr	r0, .L48
 442              	.LVL38:
 443 0028 FEFFFFEB 		bl	longjmp
 444              	.LVL39:
 445              	.L41:
 446              	.LBE19:
 334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Tim
 447              		.loc 1 334 0 is_stmt 1
 448 002c 000054E3 		cmp	r4, #0
 449              	.LBB20:
 329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 450              		.loc 1 329 0
 451 0030 04309DE5 		ldr	r3, [sp, #4]
 452              	.LBE20:
 334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Tim
 453              		.loc 1 334 0
 454 0034 F9FFFF0A 		beq	.L42
 455              	.LBB21:
 456              	.LBB22:
 364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 457              		.loc 1 364 0
 458 0038 000051E3 		cmp	r1, #0
 459 003c 0150A0E1 		mov	r5, r1
 460              	.LVL40:
 461 0040 0000001A 		bne	.L43
 462              	.LVL41:
 463 0044 FEFFFFEB 		bl	prvInitialiseNewTimer.part.1
 464              	.LVL42:
 465              	.L43:
 466 0048 0080A0E1 		mov	r8, r0
 467 004c 0270A0E1 		mov	r7, r2
 370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 468              		.loc 1 370 0
 469 0050 FEFFFFEB 		bl	prvCheckForValidListAndQueue
 470              	.LVL43:
 378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 471              		.loc 1 378 0
 472 0054 20309DE5 		ldr	r3, [sp, #32]
 379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 473              		.loc 1 379 0
 474 0058 040084E2 		add	r0, r4, #4
 374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 475              		.loc 1 374 0
 476 005c 008084E5 		str	r8, [r4]
 375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 477              		.loc 1 375 0
 478 0060 185084E5 		str	r5, [r4, #24]
 378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 479              		.loc 1 378 0
 480 0064 243084E5 		str	r3, [r4, #36]
 376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 481              		.loc 1 376 0
 482 0068 1C7084E5 		str	r7, [r4, #28]
 377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 483              		.loc 1 377 0
 484 006c 206084E5 		str	r6, [r4, #32]
 379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 485              		.loc 1 379 0
 486 0070 FEFFFFEB 		bl	vListInitialiseItem
 487              	.LVL44:
 488              	.LBE22:
 489              	.LBE21:
 345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 490              		.loc 1 345 0
 491 0074 0130A0E3 		mov	r3, #1
 351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 492              		.loc 1 351 0
 493 0078 0400A0E1 		mov	r0, r4
 345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 494              		.loc 1 345 0
 495 007c 2C30C4E5 		strb	r3, [r4, #44]
 351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 496              		.loc 1 351 0
 497 0080 08D08DE2 		add	sp, sp, #8
 498              		.cfi_def_cfa_offset 24
 499              		@ sp needed
 500 0084 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 501              	.LVL45:
 502              	.L49:
 503              		.align	2
 504              	.L48:
 505 0088 28000000 		.word	Unity+40
 506              		.cfi_endproc
 507              	.LFE2:
 509              		.section	.text.xTimerGenericCommand,"ax",%progbits
 510              		.align	2
 511              		.global	xTimerGenericCommand
 512              		.syntax unified
 513              		.arm
 514              		.fpu neon
 516              	xTimerGenericCommand:
 517              	.LFB4:
 386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xReturn = pdFAIL;
 518              		.loc 1 386 0
 519              		.cfi_startproc
 520              		@ args = 4, pretend = 0, frame = 16
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522              	.LVL46:
 523 0000 1F402DE9 		push	{r0, r1, r2, r3, r4, lr}
 524              		.cfi_def_cfa_offset 24
 525              		.cfi_offset 4, -8
 526              		.cfi_offset 14, -4
 386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xReturn = pdFAIL;
 527              		.loc 1 386 0
 528 0004 02C0A0E1 		mov	ip, r2
 529 0008 0320A0E1 		mov	r2, r3
 530              	.LVL47:
 390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 531              		.loc 1 390 0
 532 000c 003050E2 		subs	r3, r0, #0
 533              	.LVL48:
 534 0010 0000001A 		bne	.L51
 535 0014 FEFFFFEB 		bl	xTimerGenericCommand.part.2
 536              	.LVL49:
 537              	.L51:
 394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 538              		.loc 1 394 0
 539 0018 50409FE5 		ldr	r4, .L58
 540 001c 000094E5 		ldr	r0, [r4]
 541              	.LVL50:
 542 0020 000050E3 		cmp	r0, #0
 543 0024 0B00000A 		beq	.L50
 401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 544              		.loc 1 401 0
 545 0028 050051E3 		cmp	r1, #5
 398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xTimerParameters.pxTimer = xTimer;
 546              		.loc 1 398 0
 547 002c 02108DE8 		stm	sp, {r1, ip}
 399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 548              		.loc 1 399 0
 549 0030 08308DE5 		str	r3, [sp, #8]
 401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 550              		.loc 1 401 0
 551 0034 090000CA 		bgt	.L53
 403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 552              		.loc 1 403 0
 553 0038 FEFFFFEB 		bl	xTaskGetSchedulerState
 554              	.LVL51:
 405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 555              		.loc 1 405 0
 556 003c 0030A0E3 		mov	r3, #0
 403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 557              		.loc 1 403 0
 558 0040 020050E3 		cmp	r0, #2
 405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 559              		.loc 1 405 0
 560 0044 18209D05 		ldreq	r2, [sp, #24]
 409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 561              		.loc 1 409 0
 562 0048 0320A011 		movne	r2, r3
 563 004c 0D10A0E1 		mov	r1, sp
 564 0050 000094E5 		ldr	r0, [r4]
 565 0054 FEFFFFEB 		bl	xQueueGenericSend
 566              	.LVL52:
 567              	.L50:
 425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 568              		.loc 1 425 0
 569 0058 10D08DE2 		add	sp, sp, #16
 570              		.cfi_remember_state
 571              		.cfi_def_cfa_offset 8
 572              		@ sp needed
 573 005c 1080BDE8 		pop	{r4, pc}
 574              	.LVL53:
 575              	.L53:
 576              		.cfi_restore_state
 414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 577              		.loc 1 414 0
 578 0060 0030A0E3 		mov	r3, #0
 579              	.LVL54:
 580 0064 0D10A0E1 		mov	r1, sp
 581              	.LVL55:
 582 0068 FEFFFFEB 		bl	xQueueGenericSendFromISR
 583              	.LVL56:
 584 006c F9FFFFEA 		b	.L50
 585              	.L59:
 586              		.align	2
 587              	.L58:
 588 0070 00000000 		.word	.LANCHOR0
 589              		.cfi_endproc
 590              	.LFE4:
 592              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 593              		.align	2
 594              		.syntax unified
 595              		.arm
 596              		.fpu neon
 598              	prvSwitchTimerLists:
 599              	.LFB16:
 840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TickType_t xNextExpireTime, xReloadTime;
 600              		.loc 1 840 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604 0000 F7432DE9 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 605              		.cfi_def_cfa_offset 40
 606              		.cfi_offset 4, -28
 607              		.cfi_offset 5, -24
 608              		.cfi_offset 6, -20
 609              		.cfi_offset 7, -16
 610              		.cfi_offset 8, -12
 611              		.cfi_offset 9, -8
 612              		.cfi_offset 14, -4
 881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				configASSERT( xResult );
 613              		.loc 1 881 0
 614 0004 0080A0E3 		mov	r8, #0
 850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 615              		.loc 1 850 0
 616 0008 A8509FE5 		ldr	r5, .L68
 617              	.L62:
 618 000c 003095E5 		ldr	r3, [r5]
 619 0010 002093E5 		ldr	r2, [r3]
 620 0014 000052E3 		cmp	r2, #0
 621 0018 0500001A 		bne	.L65
 622              	.LVL57:
 893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	pxOverflowTimerList = pxTemp;
 623              		.loc 1 893 0
 624 001c 98209FE5 		ldr	r2, .L68+4
 625 0020 001092E5 		ldr	r1, [r2]
 894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 626              		.loc 1 894 0
 627 0024 003082E5 		str	r3, [r2]
 893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	pxOverflowTimerList = pxTemp;
 628              		.loc 1 893 0
 629 0028 001085E5 		str	r1, [r5]
 895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 630              		.loc 1 895 0
 631 002c 0CD08DE2 		add	sp, sp, #12
 632              		.cfi_remember_state
 633              		.cfi_def_cfa_offset 28
 634              		@ sp needed
 635 0030 F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}
 636              	.LVL58:
 637              	.L65:
 638              		.cfi_restore_state
 852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 639              		.loc 1 852 0
 640 0034 0C3093E5 		ldr	r3, [r3, #12]
 855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 641              		.loc 1 855 0
 642 0038 0C4093E5 		ldr	r4, [r3, #12]
 852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 643              		.loc 1 852 0
 644 003c 006093E5 		ldr	r6, [r3]
 645              	.LVL59:
 856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 646              		.loc 1 856 0
 647 0040 049084E2 		add	r9, r4, #4
 648 0044 0900A0E1 		mov	r0, r9
 649 0048 FEFFFFEB 		bl	uxListRemove
 650              	.LVL60:
 862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 651              		.loc 1 862 0
 652 004c 243094E5 		ldr	r3, [r4, #36]
 653 0050 0400A0E1 		mov	r0, r4
 654 0054 33FF2FE1 		blx	r3
 655              	.LVL61:
 864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 656              		.loc 1 864 0
 657 0058 1C7094E5 		ldr	r7, [r4, #28]
 658 005c 010057E3 		cmp	r7, #1
 659 0060 E9FFFF1A 		bne	.L62
 872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			if( xReloadTime > xNextExpireTime )
 660              		.loc 1 872 0
 661 0064 183094E5 		ldr	r3, [r4, #24]
 662 0068 033086E0 		add	r3, r6, r3
 663              	.LVL62:
 873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 664              		.loc 1 873 0
 665 006c 030056E1 		cmp	r6, r3
 666 0070 0500002A 		bcs	.L63
 875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 667              		.loc 1 875 0
 668 0074 043084E5 		str	r3, [r4, #4]
 877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 669              		.loc 1 877 0
 670 0078 0910A0E1 		mov	r1, r9
 876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 671              		.loc 1 876 0
 672 007c 104084E5 		str	r4, [r4, #16]
 877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 673              		.loc 1 877 0
 674 0080 000095E5 		ldr	r0, [r5]
 675 0084 FEFFFFEB 		bl	vListInsert
 676              	.LVL63:
 677 0088 DFFFFFEA 		b	.L62
 678              	.LVL64:
 679              	.L63:
 881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				configASSERT( xResult );
 680              		.loc 1 881 0
 681 008c 0030A0E3 		mov	r3, #0
 682              	.LVL65:
 683 0090 00808DE5 		str	r8, [sp]
 684              	.LVL66:
 685 0094 0620A0E1 		mov	r2, r6
 686 0098 0310A0E1 		mov	r1, r3
 687 009c 0400A0E1 		mov	r0, r4
 688 00a0 FEFFFFEB 		bl	xTimerGenericCommand
 689              	.LVL67:
 882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				( void ) xResult;
 690              		.loc 1 882 0
 691 00a4 000050E3 		cmp	r0, #0
 692 00a8 D7FFFF1A 		bne	.L62
 882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				( void ) xResult;
 693              		.loc 1 882 0 is_stmt 0 discriminator 1
 694 00ac 0710A0E1 		mov	r1, r7
 695 00b0 08009FE5 		ldr	r0, .L68+8
 696              	.LVL68:
 697 00b4 FEFFFFEB 		bl	longjmp
 698              	.LVL69:
 699              	.L69:
 700              		.align	2
 701              	.L68:
 702 00b8 00000000 		.word	.LANCHOR3
 703 00bc 00000000 		.word	.LANCHOR4
 704 00c0 28000000 		.word	Unity+40
 705              		.cfi_endproc
 706              	.LFE16:
 708              		.section	.text.prvTimerTask,"ax",%progbits
 709              		.align	2
 710              		.syntax unified
 711              		.arm
 712              		.fpu neon
 714              	prvTimerTask:
 715              	.LFB10:
 507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** TickType_t xNextExpireTime;
 716              		.loc 1 507 0 is_stmt 1
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 16
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720              	.LVL70:
 721 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 722              		.cfi_def_cfa_offset 36
 723              		.cfi_offset 4, -36
 724              		.cfi_offset 5, -32
 725              		.cfi_offset 6, -28
 726              		.cfi_offset 7, -24
 727              		.cfi_offset 8, -20
 728              		.cfi_offset 9, -16
 729              		.cfi_offset 10, -12
 730              		.cfi_offset 11, -8
 731              		.cfi_offset 14, -4
 732 0004 1CD04DE2 		sub	sp, sp, #28
 733              		.cfi_def_cfa_offset 64
 734              	.LBB37:
 735              	.LBB38:
 613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 736              		.loc 1 613 0
 737 0008 70629FE5 		ldr	r6, .L114
 738              	.LBE38:
 739              	.LBE37:
 740              	.LBB40:
 741              	.LBB41:
 742              	.LBB42:
 743              	.LBB43:
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 744              		.loc 1 635 0
 745 000c 70529FE5 		ldr	r5, .L114+4
 746 0010 0680A0E1 		mov	r8, r6
 747              	.LBE43:
 748              	.LBE42:
 749              	.LBE41:
 750              	.LBE40:
 751              	.LBB52:
 522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 752              		.loc 1 522 0
 753 0014 FEFFFFEB 		bl	vApplicationDaemonTaskStartupHook
 754              	.LVL71:
 755              	.L91:
 756              	.LBE52:
 757              	.LBB53:
 758              	.LBB39:
 613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 759              		.loc 1 613 0 discriminator 1
 760 0018 003096E5 		ldr	r3, [r6]
 761 001c 004093E5 		ldr	r4, [r3]
 762 0020 000054E3 		cmp	r4, #0
 616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 763              		.loc 1 616 0 discriminator 1
 764 0024 0C309315 		ldrne	r3, [r3, #12]
 613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 765              		.loc 1 613 0 discriminator 1
 766 0028 00B0A013 		movne	fp, #0
 767 002c 01B0A003 		moveq	fp, #1
 616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 768              		.loc 1 616 0 discriminator 1
 769 0030 00409315 		ldrne	r4, [r3]
 770              	.LVL72:
 771              	.LBE39:
 772              	.LBE53:
 773              	.LBB54:
 774              	.LBB50:
 547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 775              		.loc 1 547 0 discriminator 1
 776 0034 FEFFFFEB 		bl	vTaskSuspendAll
 777              	.LVL73:
 778              	.LBB46:
 779              	.LBB44:
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 780              		.loc 1 633 0 discriminator 1
 781 0038 FEFFFFEB 		bl	xTaskGetTickCount
 782              	.LVL74:
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 783              		.loc 1 635 0 discriminator 1
 784 003c 003095E5 		ldr	r3, [r5]
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 785              		.loc 1 633 0 discriminator 1
 786 0040 0090A0E1 		mov	r9, r0
 787              	.LVL75:
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 788              		.loc 1 635 0 discriminator 1
 789 0044 030050E1 		cmp	r0, r3
 642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 790              		.loc 1 642 0 discriminator 1
 791 0048 00A0A023 		movcs	r10, #0
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 792              		.loc 1 635 0 discriminator 1
 793 004c 0100002A 		bcs	.L72
 638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 794              		.loc 1 638 0
 795 0050 01A0A0E3 		mov	r10, #1
 637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 796              		.loc 1 637 0
 797 0054 FEFFFFEB 		bl	prvSwitchTimerLists
 798              	.LVL76:
 799              	.L72:
 800              	.LBE44:
 801              	.LBE46:
 555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 802              		.loc 1 555 0
 803 0058 00005AE3 		cmp	r10, #0
 804              	.LBB47:
 805              	.LBB45:
 645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 806              		.loc 1 645 0
 807 005c 009085E5 		str	r9, [r5]
 808              	.LVL77:
 809 0060 20729FE5 		ldr	r7, .L114+8
 810              	.LBE45:
 811              	.LBE47:
 555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 812              		.loc 1 555 0
 813 0064 6000001A 		bne	.L73
 814              	.LVL78:
 558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 815              		.loc 1 558 0
 816 0068 01202BE2 		eor	r2, fp, #1
 817 006c 090054E1 		cmp	r4, r9
 818 0070 0020A083 		movhi	r2, #0
 819 0074 01200292 		andls	r2, r2, #1
 820 0078 000052E3 		cmp	r2, #0
 821 007c 4C00000A 		beq	.L74
 560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 822              		.loc 1 560 0
 823 0080 FEFFFFEB 		bl	xTaskResumeAll
 824              	.LVL79:
 825              	.LBB48:
 826              	.LBB49:
 469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 827              		.loc 1 469 0
 828 0084 003098E5 		ldr	r3, [r8]
 829 0088 0C3093E5 		ldr	r3, [r3, #12]
 830 008c 0CB093E5 		ldr	fp, [r3, #12]
 831              	.LVL80:
 473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 832              		.loc 1 473 0
 833 0090 04008BE2 		add	r0, fp, #4
 834 0094 FEFFFFEB 		bl	uxListRemove
 835              	.LVL81:
 478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 836              		.loc 1 478 0
 837 0098 1C309BE5 		ldr	r3, [fp, #28]
 838 009c 010053E3 		cmp	r3, #1
 839 00a0 1200001A 		bne	.L75
 483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 840              		.loc 1 483 0
 841 00a4 18109BE5 		ldr	r1, [fp, #24]
 842 00a8 0430A0E1 		mov	r3, r4
 843 00ac 0920A0E1 		mov	r2, r9
 844 00b0 0B00A0E1 		mov	r0, fp
 845 00b4 011084E0 		add	r1, r4, r1
 846 00b8 FEFFFFEB 		bl	prvInsertTimerInActiveList
 847              	.LVL82:
 848 00bc 000050E3 		cmp	r0, #0
 849 00c0 0A00000A 		beq	.L75
 487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			configASSERT( xResult );
 850              		.loc 1 487 0
 851 00c4 00A08DE5 		str	r10, [sp]
 852 00c8 0A30A0E1 		mov	r3, r10
 853 00cc 0420A0E1 		mov	r2, r4
 854 00d0 0A10A0E1 		mov	r1, r10
 855 00d4 0B00A0E1 		mov	r0, fp
 856 00d8 FEFFFFEB 		bl	xTimerGenericCommand
 857              	.LVL83:
 488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			( void ) xResult;
 858              		.loc 1 488 0
 859 00dc 000050E3 		cmp	r0, #0
 860 00e0 0200001A 		bne	.L75
 861              	.LVL84:
 862              	.L89:
 863 00e4 0110A0E3 		mov	r1, #1
 864 00e8 9C019FE5 		ldr	r0, .L114+12
 865 00ec FEFFFFEB 		bl	longjmp
 866              	.LVL85:
 867              	.L75:
 502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 868              		.loc 1 502 0
 869 00f0 24309BE5 		ldr	r3, [fp, #36]
 870 00f4 0B00A0E1 		mov	r0, fp
 871 00f8 33FF2FE1 		blx	r3
 872              	.LVL86:
 873              	.L78:
 874 00fc 0190A0E3 		mov	r9, #1
 875              	.L80:
 876              	.LBE49:
 877              	.LBE48:
 878              	.LBE50:
 879              	.LBE54:
 880              	.LBB55:
 881              	.LBB56:
 699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 882              		.loc 1 699 0
 883 0100 0020A0E3 		mov	r2, #0
 884 0104 08108DE2 		add	r1, sp, #8
 885 0108 000097E5 		ldr	r0, [r7]
 886 010c FEFFFFEB 		bl	xQueueReceive
 887              	.LVL87:
 888 0110 000050E3 		cmp	r0, #0
 889 0114 BFFFFF0A 		beq	.L91
 705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 890              		.loc 1 705 0
 891 0118 08309DE5 		ldr	r3, [sp, #8]
 892 011c 000053E3 		cmp	r3, #0
 893 0120 030000AA 		bge	.L79
 894              	.LVL88:
 895              	.LBB57:
 714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 896              		.loc 1 714 0
 897 0124 14109DE5 		ldr	r1, [sp, #20]
 898 0128 10009DE5 		ldr	r0, [sp, #16]
 899 012c 0C309DE5 		ldr	r3, [sp, #12]
 900 0130 33FF2FE1 		blx	r3
 901              	.LVL89:
 902              	.L79:
 903              	.LBE57:
 725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 904              		.loc 1 725 0
 905 0134 08309DE5 		ldr	r3, [sp, #8]
 906 0138 000053E3 		cmp	r3, #0
 907 013c EFFFFFBA 		blt	.L80
 729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 908              		.loc 1 729 0
 909 0140 10409DE5 		ldr	r4, [sp, #16]
 910              	.LVL90:
 731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			{
 911              		.loc 1 731 0
 912 0144 143094E5 		ldr	r3, [r4, #20]
 913 0148 000053E3 		cmp	r3, #0
 914 014c 0100000A 		beq	.L81
 734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			}
 915              		.loc 1 734 0
 916 0150 040084E2 		add	r0, r4, #4
 917 0154 FEFFFFEB 		bl	uxListRemove
 918              	.LVL91:
 919              	.L81:
 920              	.LBB58:
 921              	.LBB59:
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 922              		.loc 1 633 0
 923 0158 FEFFFFEB 		bl	xTaskGetTickCount
 924              	.LVL92:
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 925              		.loc 1 635 0
 926 015c 003095E5 		ldr	r3, [r5]
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 927              		.loc 1 633 0
 928 0160 00B0A0E1 		mov	fp, r0
 929              	.LVL93:
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 930              		.loc 1 635 0
 931 0164 030050E1 		cmp	r0, r3
 932 0168 0000002A 		bcs	.L82
 637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 933              		.loc 1 637 0
 934 016c FEFFFFEB 		bl	prvSwitchTimerLists
 935              	.LVL94:
 936              	.L82:
 937 0170 08309DE5 		ldr	r3, [sp, #8]
 645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 938              		.loc 1 645 0
 939 0174 00B085E5 		str	fp, [r5]
 940              	.LVL95:
 941 0178 090053E3 		cmp	r3, #9
 942 017c DFFFFF8A 		bhi	.L80
 943 0180 1933A0E1 		lsl	r3, r9, r3
 944 0184 21AE13E2 		ands	r10, r3, #528
 945 0188 3200001A 		bne	.L85
 946 018c C70013E3 		tst	r3, #199
 947 0190 1700001A 		bne	.L86
 948 0194 200013E3 		tst	r3, #32
 949 0198 D8FFFF0A 		beq	.L80
 950              	.LBE59:
 951              	.LBE58:
 818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						{
 952              		.loc 1 818 0
 953 019c 2C30D4E5 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 954 01a0 000053E3 		cmp	r3, #0
 955 01a4 D5FFFF1A 		bne	.L80
 820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						}
 956              		.loc 1 820 0
 957 01a8 0400A0E1 		mov	r0, r4
 958 01ac FEFFFFEB 		bl	vPortFree
 959              	.LVL96:
 960 01b0 D2FFFFEA 		b	.L80
 961              	.LVL97:
 962              	.L74:
 963              	.LBE56:
 964              	.LBE55:
 965              	.LBB61:
 966              	.LBB51:
 571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				{
 967              		.loc 1 571 0
 968 01b4 00005BE3 		cmp	fp, #0
 578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 969              		.loc 1 578 0
 970 01b8 091044E0 		sub	r1, r4, r9
 575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				}
 971              		.loc 1 575 0
 972 01bc CC309F15 		ldrne	r3, .L114+16
 578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 973              		.loc 1 578 0
 974 01c0 000097E5 		ldr	r0, [r7]
 575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				}
 975              		.loc 1 575 0
 976 01c4 00309315 		ldrne	r3, [r3]
 977 01c8 00209315 		ldrne	r2, [r3]
 978 01cc 122F6F11 		clzne	r2, r2
 979 01d0 A222A011 		lsrne	r2, r2, #5
 980              	.LVL98:
 578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 981              		.loc 1 578 0
 982 01d4 FEFFFFEB 		bl	vQueueWaitForMessageRestricted
 983              	.LVL99:
 580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				{
 984              		.loc 1 580 0
 985 01d8 FEFFFFEB 		bl	xTaskResumeAll
 986              	.LVL100:
 987 01dc 000050E3 		cmp	r0, #0
 988 01e0 C5FFFF1A 		bne	.L78
 586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 				}
 989              		.loc 1 586 0
 990              		.syntax divided
 991              	@ 586 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/timers.c" 1
 992 01e4 000000EF 		SWI 0
 993              	@ 0 "" 2
 994              		.arm
 995              		.syntax unified
 996 01e8 C3FFFFEA 		b	.L78
 997              	.LVL101:
 998              	.L73:
 596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 999              		.loc 1 596 0
 1000 01ec FEFFFFEB 		bl	xTaskResumeAll
 1001              	.LVL102:
 1002 01f0 C1FFFFEA 		b	.L78
 1003              	.LVL103:
 1004              	.L86:
 1005              	.LBE51:
 1006              	.LBE61:
 1007              	.LBB62:
 1008              	.LBB60:
 759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					{
 1009              		.loc 1 759 0
 1010 01f4 181094E5 		ldr	r1, [r4, #24]
 1011 01f8 0B20A0E1 		mov	r2, fp
 1012 01fc 0C309DE5 		ldr	r3, [sp, #12]
 1013 0200 0400A0E1 		mov	r0, r4
 1014 0204 011083E0 		add	r1, r3, r1
 1015 0208 FEFFFFEB 		bl	prvInsertTimerInActiveList
 1016              	.LVL104:
 1017 020c 000050E3 		cmp	r0, #0
 1018 0210 BAFFFF0A 		beq	.L80
 763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1019              		.loc 1 763 0
 1020 0214 243094E5 		ldr	r3, [r4, #36]
 1021 0218 0400A0E1 		mov	r0, r4
 1022 021c 33FF2FE1 		blx	r3
 1023              	.LVL105:
 766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 						{
 1024              		.loc 1 766 0
 1025 0220 1C3094E5 		ldr	r3, [r4, #28]
 1026 0224 010053E3 		cmp	r3, #1
 1027 0228 B4FFFF1A 		bne	.L80
 768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 							configASSERT( xResult );
 1028              		.loc 1 768 0
 1029 022c 182094E5 		ldr	r2, [r4, #24]
 1030 0230 0A30A0E1 		mov	r3, r10
 1031 0234 0C109DE5 		ldr	r1, [sp, #12]
 1032 0238 0400A0E1 		mov	r0, r4
 1033 023c 00A08DE5 		str	r10, [sp]
 1034 0240 022081E0 		add	r2, r1, r2
 1035 0244 0A10A0E1 		mov	r1, r10
 1036 0248 FEFFFFEB 		bl	xTimerGenericCommand
 1037              	.LVL106:
 769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 							( void ) xResult;
 1038              		.loc 1 769 0
 1039 024c 000050E3 		cmp	r0, #0
 1040 0250 AAFFFF1A 		bne	.L80
 1041 0254 A2FFFFEA 		b	.L89
 1042              	.LVL107:
 1043              	.L85:
 791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1044              		.loc 1 791 0
 1045 0258 0C109DE5 		ldr	r1, [sp, #12]
 792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 1046              		.loc 1 792 0
 1047 025c 000051E3 		cmp	r1, #0
 791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1048              		.loc 1 791 0
 1049 0260 181084E5 		str	r1, [r4, #24]
 792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 1050              		.loc 1 792 0
 1051 0264 9EFFFF0A 		beq	.L89
 800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 					break;
 1052              		.loc 1 800 0
 1053 0268 0B30A0E1 		mov	r3, fp
 1054 026c 0B20A0E1 		mov	r2, fp
 1055 0270 0B1081E0 		add	r1, r1, fp
 1056 0274 0400A0E1 		mov	r0, r4
 1057 0278 FEFFFFEB 		bl	prvInsertTimerInActiveList
 1058              	.LVL108:
 1059 027c 9FFFFFEA 		b	.L80
 1060              	.L115:
 1061              		.align	2
 1062              	.L114:
 1063 0280 00000000 		.word	.LANCHOR3
 1064 0284 00000000 		.word	.LANCHOR8
 1065 0288 00000000 		.word	.LANCHOR0
 1066 028c 28000000 		.word	Unity+40
 1067 0290 00000000 		.word	.LANCHOR4
 1068              	.LBE60:
 1069              	.LBE62:
 1070              		.cfi_endproc
 1071              	.LFE10:
 1073              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1074              		.align	2
 1075              		.global	xTimerGetTimerDaemonTaskHandle
 1076              		.syntax unified
 1077              		.arm
 1078              		.fpu neon
 1080              	xTimerGetTimerDaemonTaskHandle:
 1081              	.LFB5:
 429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1082              		.loc 1 429 0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 0
 1085              		@ frame_needed = 0, uses_anonymous_args = 0
 432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xTimerTaskHandle;
 1086              		.loc 1 432 0
 1087 0000 1C309FE5 		ldr	r3, .L121
 1088 0004 000093E5 		ldr	r0, [r3]
 1089 0008 000050E3 		cmp	r0, #0
 1090 000c 0300001A 		bne	.L116
 429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1091              		.loc 1 429 0 discriminator 1
 1092 0010 10402DE9 		push	{r4, lr}
 1093              		.cfi_def_cfa_offset 8
 1094              		.cfi_offset 4, -8
 1095              		.cfi_offset 14, -4
 432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xTimerTaskHandle;
 1096              		.loc 1 432 0 discriminator 1
 1097 0014 0110A0E3 		mov	r1, #1
 1098 0018 08009FE5 		ldr	r0, .L121+4
 1099 001c FEFFFFEB 		bl	longjmp
 1100              	.LVL109:
 1101              	.L116:
 1102              		.cfi_def_cfa_offset 0
 1103              		.cfi_restore 4
 1104              		.cfi_restore 14
 434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 1105              		.loc 1 434 0
 1106 0020 1EFF2FE1 		bx	lr
 1107              	.L122:
 1108              		.align	2
 1109              	.L121:
 1110 0024 00000000 		.word	.LANCHOR7
 1111 0028 28000000 		.word	Unity+40
 1112              		.cfi_endproc
 1113              	.LFE5:
 1115              		.section	.text.xTimerGetPeriod,"ax",%progbits
 1116              		.align	2
 1117              		.global	xTimerGetPeriod
 1118              		.syntax unified
 1119              		.arm
 1120              		.fpu neon
 1122              	xTimerGetPeriod:
 1123              	.LFB6:
 438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t *pxTimer = xTimer;
 1124              		.loc 1 438 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 0
 1127              		@ frame_needed = 0, uses_anonymous_args = 0
 1128              	.LVL110:
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1129              		.loc 1 441 0
 1130 0000 000050E3 		cmp	r0, #0
 1131 0004 0300001A 		bne	.L124
 438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t *pxTimer = xTimer;
 1132              		.loc 1 438 0 discriminator 1
 1133 0008 10402DE9 		push	{r4, lr}
 1134              		.cfi_def_cfa_offset 8
 1135              		.cfi_offset 4, -8
 1136              		.cfi_offset 14, -4
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1137              		.loc 1 441 0 discriminator 1
 1138 000c 0110A0E3 		mov	r1, #1
 1139 0010 08009FE5 		ldr	r0, .L128
 1140              	.LVL111:
 1141 0014 FEFFFFEB 		bl	longjmp
 1142              	.LVL112:
 1143              	.L124:
 1144              		.cfi_def_cfa_offset 0
 1145              		.cfi_restore 4
 1146              		.cfi_restore 14
 443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 1147              		.loc 1 443 0
 1148 0018 180090E5 		ldr	r0, [r0, #24]
 1149              	.LVL113:
 1150 001c 1EFF2FE1 		bx	lr
 1151              	.L129:
 1152              		.align	2
 1153              	.L128:
 1154 0020 28000000 		.word	Unity+40
 1155              		.cfi_endproc
 1156              	.LFE6:
 1158              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 1159              		.align	2
 1160              		.global	xTimerGetExpiryTime
 1161              		.syntax unified
 1162              		.arm
 1163              		.fpu neon
 1165              	xTimerGetExpiryTime:
 1166              	.LFB7:
 447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t * pxTimer =  xTimer;
 1167              		.loc 1 447 0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 0
 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171              	.LVL114:
 451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1172              		.loc 1 451 0
 1173 0000 000050E3 		cmp	r0, #0
 1174 0004 0300001A 		bne	.L131
 447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t * pxTimer =  xTimer;
 1175              		.loc 1 447 0 discriminator 1
 1176 0008 10402DE9 		push	{r4, lr}
 1177              		.cfi_def_cfa_offset 8
 1178              		.cfi_offset 4, -8
 1179              		.cfi_offset 14, -4
 451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1180              		.loc 1 451 0 discriminator 1
 1181 000c 0110A0E3 		mov	r1, #1
 1182 0010 08009FE5 		ldr	r0, .L135
 1183              	.LVL115:
 1184 0014 FEFFFFEB 		bl	longjmp
 1185              	.LVL116:
 1186              	.L131:
 1187              		.cfi_def_cfa_offset 0
 1188              		.cfi_restore 4
 1189              		.cfi_restore 14
 454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 1190              		.loc 1 454 0
 1191 0018 040090E5 		ldr	r0, [r0, #4]
 1192              	.LVL117:
 1193 001c 1EFF2FE1 		bx	lr
 1194              	.L136:
 1195              		.align	2
 1196              	.L135:
 1197 0020 28000000 		.word	Unity+40
 1198              		.cfi_endproc
 1199              	.LFE7:
 1201              		.section	.text.pcTimerGetName,"ax",%progbits
 1202              		.align	2
 1203              		.global	pcTimerGetName
 1204              		.syntax unified
 1205              		.arm
 1206              		.fpu neon
 1208              	pcTimerGetName:
 1209              	.LFB8:
 458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t *pxTimer = xTimer;
 1210              		.loc 1 458 0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 0
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 1214              	.LVL118:
 461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return pxTimer->pcTimerName;
 1215              		.loc 1 461 0
 1216 0000 000050E3 		cmp	r0, #0
 1217 0004 0300001A 		bne	.L138
 458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t *pxTimer = xTimer;
 1218              		.loc 1 458 0 discriminator 1
 1219 0008 10402DE9 		push	{r4, lr}
 1220              		.cfi_def_cfa_offset 8
 1221              		.cfi_offset 4, -8
 1222              		.cfi_offset 14, -4
 461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return pxTimer->pcTimerName;
 1223              		.loc 1 461 0 discriminator 1
 1224 000c 0110A0E3 		mov	r1, #1
 1225 0010 08009FE5 		ldr	r0, .L142
 1226              	.LVL119:
 1227 0014 FEFFFFEB 		bl	longjmp
 1228              	.LVL120:
 1229              	.L138:
 1230              		.cfi_def_cfa_offset 0
 1231              		.cfi_restore 4
 1232              		.cfi_restore 14
 463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 1233              		.loc 1 463 0
 1234 0018 000090E5 		ldr	r0, [r0]
 1235              	.LVL121:
 1236 001c 1EFF2FE1 		bx	lr
 1237              	.L143:
 1238              		.align	2
 1239              	.L142:
 1240 0020 28000000 		.word	Unity+40
 1241              		.cfi_endproc
 1242              	.LFE8:
 1244              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1245              		.align	2
 1246              		.global	xTimerIsTimerActive
 1247              		.syntax unified
 1248              		.arm
 1249              		.fpu neon
 1251              	xTimerIsTimerActive:
 1252              	.LFB18:
 947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 1253              		.loc 1 950 0
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 0
 1256              		@ frame_needed = 0, uses_anonymous_args = 0
 1257              	.LVL122:
 1258 0000 10402DE9 		push	{r4, lr}
 1259              		.cfi_def_cfa_offset 8
 1260              		.cfi_offset 4, -8
 1261              		.cfi_offset 14, -4
 951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** BaseType_t xTimerIsInActiveList;
 952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t *pxTimer = xTimer;
 953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	configASSERT( xTimer );
 1262              		.loc 1 954 0
 1263 0004 004050E2 		subs	r4, r0, #0
 1264 0008 0200001A 		bne	.L145
 1265              		.loc 1 954 0 is_stmt 0 discriminator 1
 1266 000c 0110A0E3 		mov	r1, #1
 1267 0010 1C009FE5 		ldr	r0, .L147
 1268              	.LVL123:
 1269 0014 FEFFFFEB 		bl	longjmp
 1270              	.LVL124:
 1271              	.L145:
 955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	/* Is the timer in the list of active timers? */
 957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	taskENTER_CRITICAL();
 1272              		.loc 1 957 0 is_stmt 1
 1273 0018 FEFFFFEB 		bl	vPortEnterCritical
 1274              	.LVL125:
 958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Checking to see if it is in the NULL list in effect checks to see if
 960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		it is referenced from either the current or the overflow timer lists in
 961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		one go, but the logic has to be reversed, hence the '!'. */
 962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdTRUE )
 1275              		.loc 1 962 0
 1276 001c 144094E5 		ldr	r4, [r4, #20]
 1277              	.LVL126:
 1278 0020 004094E2 		adds	r4, r4, #0
 1279 0024 0140A013 		movne	r4, #1
 1280              	.LVL127:
 963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xTimerIsInActiveList = pdFALSE;
 965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		else
 967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		{
 968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 			xTimerIsInActiveList = pdTRUE;
 969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		}
 970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	taskEXIT_CRITICAL();
 1281              		.loc 1 971 0
 1282 0028 FEFFFFEB 		bl	vPortExitCritical
 1283              	.LVL128:
 972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return xTimerIsInActiveList;
 974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1284              		.loc 1 974 0
 1285 002c 0400A0E1 		mov	r0, r4
 1286 0030 1080BDE8 		pop	{r4, pc}
 1287              	.L148:
 1288              		.align	2
 1289              	.L147:
 1290 0034 28000000 		.word	Unity+40
 1291              		.cfi_endproc
 1292              	.LFE18:
 1294              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1295              		.align	2
 1296              		.global	pvTimerGetTimerID
 1297              		.syntax unified
 1298              		.arm
 1299              		.fpu neon
 1301              	pvTimerGetTimerID:
 1302              	.LFB19:
 975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
 978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 1303              		.loc 1 978 0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 0
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 1307              	.LVL129:
 1308 0000 10402DE9 		push	{r4, lr}
 1309              		.cfi_def_cfa_offset 8
 1310              		.cfi_offset 4, -8
 1311              		.cfi_offset 14, -4
 979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t * const pxTimer = xTimer;
 980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** void *pvReturn;
 981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	configASSERT( xTimer );
 1312              		.loc 1 982 0
 1313 0004 004050E2 		subs	r4, r0, #0
 1314 0008 0200001A 		bne	.L150
 1315              		.loc 1 982 0 is_stmt 0 discriminator 1
 1316 000c 0110A0E3 		mov	r1, #1
 1317 0010 14009FE5 		ldr	r0, .L152
 1318              	.LVL130:
 1319 0014 FEFFFFEB 		bl	longjmp
 1320              	.LVL131:
 1321              	.L150:
 983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	taskENTER_CRITICAL();
 1322              		.loc 1 984 0 is_stmt 1
 1323 0018 FEFFFFEB 		bl	vPortEnterCritical
 1324              	.LVL132:
 985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1325              		.loc 1 986 0
 1326 001c 204094E5 		ldr	r4, [r4, #32]
 1327              	.LVL133:
 987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	taskEXIT_CRITICAL();
 1328              		.loc 1 988 0
 1329 0020 FEFFFFEB 		bl	vPortExitCritical
 1330              	.LVL134:
 989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	return pvReturn;
 991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 1331              		.loc 1 991 0
 1332 0024 0400A0E1 		mov	r0, r4
 1333 0028 1080BDE8 		pop	{r4, pc}
 1334              	.L153:
 1335              		.align	2
 1336              	.L152:
 1337 002c 28000000 		.word	Unity+40
 1338              		.cfi_endproc
 1339              	.LFE19:
 1341              		.section	.text.vTimerSetTimerID,"ax",%progbits
 1342              		.align	2
 1343              		.global	vTimerSetTimerID
 1344              		.syntax unified
 1345              		.arm
 1346              		.fpu neon
 1348              	vTimerSetTimerID:
 1349              	.LFB20:
 992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
 993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
 995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** {
 1350              		.loc 1 995 0
 1351              		.cfi_startproc
 1352              		@ args = 0, pretend = 0, frame = 0
 1353              		@ frame_needed = 0, uses_anonymous_args = 0
 1354              	.LVL135:
 1355 0000 70402DE9 		push	{r4, r5, r6, lr}
 1356              		.cfi_def_cfa_offset 16
 1357              		.cfi_offset 4, -16
 1358              		.cfi_offset 5, -12
 1359              		.cfi_offset 6, -8
 1360              		.cfi_offset 14, -4
 996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** Timer_t * const pxTimer = xTimer;
 997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
 998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	configASSERT( xTimer );
 1361              		.loc 1 998 0
 1362 0004 004050E2 		subs	r4, r0, #0
 1363 0008 0200001A 		bne	.L155
 1364              		.loc 1 998 0 is_stmt 0 discriminator 1
 1365 000c 0110A0E3 		mov	r1, #1
 1366              	.LVL136:
 1367 0010 14009FE5 		ldr	r0, .L157
 1368              	.LVL137:
 1369 0014 FEFFFFEB 		bl	longjmp
 1370              	.LVL138:
 1371              	.L155:
 1372 0018 0150A0E1 		mov	r5, r1
 999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	taskENTER_CRITICAL();
 1373              		.loc 1 1000 0 is_stmt 1
 1374 001c FEFFFFEB 		bl	vPortEnterCritical
 1375              	.LVL139:
1001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
1002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		pxTimer->pvTimerID = pvNewID;
 1376              		.loc 1 1002 0
 1377 0020 205084E5 		str	r5, [r4, #32]
1003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
1004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	taskEXIT_CRITICAL();
1005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 1378              		.loc 1 1005 0
 1379 0024 7040BDE8 		pop	{r4, r5, r6, lr}
 1380              		.cfi_restore 14
 1381              		.cfi_restore 6
 1382              		.cfi_restore 5
 1383              		.cfi_restore 4
 1384              		.cfi_def_cfa_offset 0
 1385              	.LVL140:
1004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** }
 1386              		.loc 1 1004 0
 1387 0028 FEFFFFEA 		b	vPortExitCritical
 1388              	.LVL141:
 1389              	.L158:
 1390              		.align	2
 1391              	.L157:
 1392 002c 28000000 		.word	Unity+40
 1393              		.cfi_endproc
 1394              	.LFE20:
 1396              		.section	.text.xTimerPendFunctionCallFromISR,"ax",%progbits
 1397              		.align	2
 1398              		.global	xTimerPendFunctionCallFromISR
 1399              		.syntax unified
 1400              		.arm
 1401              		.fpu neon
 1403              	xTimerPendFunctionCallFromISR:
 1404              	.LFB21:
1006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
1007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, ui
1011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 1405              		.loc 1 1011 0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 16
 1408              		@ frame_needed = 0, uses_anonymous_args = 0
 1409              	.LVL142:
 1410 0000 1F402DE9 		push	{r0, r1, r2, r3, r4, lr}
 1411              		.cfi_def_cfa_offset 24
 1412              		.cfi_offset 14, -4
 1413              		.loc 1 1011 0
 1414 0004 03C0A0E1 		mov	ip, r3
1012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	DaemonTaskMessage_t xMessage;
1013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	BaseType_t xReturn;
1014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Complete the message with the function parameters and post it to the
1016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		daemon task. */
1017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
1018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
1019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
1020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1415              		.loc 1 1020 0
 1416 0008 07008DE9 		stmib	sp, {r0, r1, r2}
1017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1417              		.loc 1 1017 0
 1418 000c 0130E0E3 		mvn	r3, #1
 1419              	.LVL143:
1021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1420              		.loc 1 1022 0
 1421 0010 0C20A0E1 		mov	r2, ip
 1422              	.LVL144:
 1423 0014 0D10A0E1 		mov	r1, sp
 1424              	.LVL145:
 1425 0018 14009FE5 		ldr	r0, .L161
 1426              	.LVL146:
1017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1427              		.loc 1 1017 0
 1428 001c 00308DE5 		str	r3, [sp]
 1429              		.loc 1 1022 0
 1430 0020 0030A0E3 		mov	r3, #0
 1431 0024 000090E5 		ldr	r0, [r0]
 1432 0028 FEFFFFEB 		bl	xQueueGenericSendFromISR
 1433              	.LVL147:
1023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		return xReturn;
1027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 1434              		.loc 1 1027 0
 1435 002c 14D08DE2 		add	sp, sp, #20
 1436              		.cfi_def_cfa_offset 4
 1437              		@ sp needed
 1438 0030 04F09DE4 		ldr	pc, [sp], #4
 1439              	.L162:
 1440              		.align	2
 1441              	.L161:
 1442 0034 00000000 		.word	.LANCHOR0
 1443              		.cfi_endproc
 1444              	.LFE21:
 1446              		.section	.text.xTimerPendFunctionCall,"ax",%progbits
 1447              		.align	2
 1448              		.global	xTimerPendFunctionCall
 1449              		.syntax unified
 1450              		.arm
 1451              		.fpu neon
 1453              	xTimerPendFunctionCall:
 1454              	.LFB22:
1028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
1031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t 
1035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 1455              		.loc 1 1035 0
 1456              		.cfi_startproc
 1457              		@ args = 0, pretend = 0, frame = 16
 1458              		@ frame_needed = 0, uses_anonymous_args = 0
 1459              	.LVL148:
 1460 0000 1F402DE9 		push	{r0, r1, r2, r3, r4, lr}
 1461              		.cfi_def_cfa_offset 24
 1462              		.cfi_offset 14, -4
 1463              		.loc 1 1035 0
 1464 0004 02C0A0E1 		mov	ip, r2
 1465 0008 0320A0E1 		mov	r2, r3
 1466              	.LVL149:
1036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	DaemonTaskMessage_t xMessage;
1037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	BaseType_t xReturn;
1038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* This function can only be called after a timer has been created or
1040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		after the scheduler has been started because, until then, the timer
1041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		queue does not exist. */
1042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		configASSERT( xTimerQueue );
 1467              		.loc 1 1042 0
 1468 000c 3C309FE5 		ldr	r3, .L166
 1469              	.LVL150:
1035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	DaemonTaskMessage_t xMessage;
 1470              		.loc 1 1035 0
 1471 0010 00E0A0E1 		mov	lr, r0
 1472              		.loc 1 1042 0
 1473 0014 000093E5 		ldr	r0, [r3]
 1474              	.LVL151:
 1475 0018 000050E3 		cmp	r0, #0
 1476 001c 0200001A 		bne	.L164
 1477              		.loc 1 1042 0 is_stmt 0 discriminator 1
 1478 0020 0110A0E3 		mov	r1, #1
 1479              	.LVL152:
 1480 0024 28009FE5 		ldr	r0, .L166+4
 1481 0028 FEFFFFEB 		bl	longjmp
 1482              	.LVL153:
 1483              	.L164:
1043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		/* Complete the message with the function parameters and post it to the
1045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		daemon task. */
1046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 1484              		.loc 1 1046 0 is_stmt 1
 1485 002c 0030E0E3 		mvn	r3, #0
1047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
1048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1486              		.loc 1 1048 0
 1487 0030 08108DE5 		str	r1, [sp, #8]
1047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1488              		.loc 1 1047 0
 1489 0034 08408DE8 		stm	sp, {r3, lr}
1049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
1050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 1490              		.loc 1 1051 0
 1491 0038 0D10A0E1 		mov	r1, sp
 1492              	.LVL154:
 1493 003c 0030A0E3 		mov	r3, #0
1049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1494              		.loc 1 1049 0
 1495 0040 0CC08DE5 		str	ip, [sp, #12]
 1496              		.loc 1 1051 0
 1497 0044 FEFFFFEB 		bl	xQueueGenericSend
 1498              	.LVL155:
1052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		return xReturn;
1056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 1499              		.loc 1 1056 0
 1500 0048 14D08DE2 		add	sp, sp, #20
 1501              		.cfi_def_cfa_offset 4
 1502              		@ sp needed
 1503 004c 04F09DE4 		ldr	pc, [sp], #4
 1504              	.L167:
 1505              		.align	2
 1506              	.L166:
 1507 0050 00000000 		.word	.LANCHOR0
 1508 0054 28000000 		.word	Unity+40
 1509              		.cfi_endproc
 1510              	.LFE22:
 1512              		.section	.text.uxTimerGetTimerNumber,"ax",%progbits
 1513              		.align	2
 1514              		.global	uxTimerGetTimerNumber
 1515              		.syntax unified
 1516              		.arm
 1517              		.fpu neon
 1519              	uxTimerGetTimerNumber:
 1520              	.LFB23:
1057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
1060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
1064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 1521              		.loc 1 1064 0
 1522              		.cfi_startproc
 1523              		@ args = 0, pretend = 0, frame = 0
 1524              		@ frame_needed = 0, uses_anonymous_args = 0
 1525              		@ link register save eliminated.
 1526              	.LVL156:
1065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
1066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	}
 1527              		.loc 1 1066 0
 1528 0000 280090E5 		ldr	r0, [r0, #40]
 1529              	.LVL157:
 1530 0004 1EFF2FE1 		bx	lr
 1531              		.cfi_endproc
 1532              	.LFE23:
 1534              		.section	.text.vTimerSetTimerNumber,"ax",%progbits
 1535              		.align	2
 1536              		.global	vTimerSetTimerNumber
 1537              		.syntax unified
 1538              		.arm
 1539              		.fpu neon
 1541              	vTimerSetTimerNumber:
 1542              	.LFB24:
1067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #endif /* configUSE_TRACE_FACILITY */
1069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** /*-----------------------------------------------------------*/
1070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 
1073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
1074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 	{
 1543              		.loc 1 1074 0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 0
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 1547              		@ link register save eliminated.
 1548              	.LVL158:
1075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\timers.c **** 		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 1549              		.loc 1 1075 0
 1550 0000 281080E5 		str	r1, [r0, #40]
 1551 0004 1EFF2FE1 		bx	lr
 1552              		.cfi_endproc
 1553              	.LFE24:
 1555              		.section	.bss.pxCurrentTimerList,"aw",%nobits
 1556              		.align	2
 1557              		.set	.LANCHOR3,. + 0
 1560              	pxCurrentTimerList:
 1561 0000 00000000 		.space	4
 1562              		.section	.bss.pxOverflowTimerList,"aw",%nobits
 1563              		.align	2
 1564              		.set	.LANCHOR4,. + 0
 1567              	pxOverflowTimerList:
 1568 0000 00000000 		.space	4
 1569              		.section	.bss.ucStaticTimerQueueStorage.7370,"aw",%nobits
 1570              		.set	.LANCHOR6,. + 0
 1573              	ucStaticTimerQueueStorage.7370:
 1574 0000 00000000 		.space	80
 1574      00000000 
 1574      00000000 
 1574      00000000 
 1574      00000000 
 1575              		.section	.bss.xActiveTimerList1,"aw",%nobits
 1576              		.align	2
 1577              		.set	.LANCHOR1,. + 0
 1580              	xActiveTimerList1:
 1581 0000 00000000 		.space	20
 1581      00000000 
 1581      00000000 
 1581      00000000 
 1581      00000000 
 1582              		.section	.bss.xActiveTimerList2,"aw",%nobits
 1583              		.align	2
 1584              		.set	.LANCHOR2,. + 0
 1587              	xActiveTimerList2:
 1588 0000 00000000 		.space	20
 1588      00000000 
 1588      00000000 
 1588      00000000 
 1588      00000000 
 1589              		.section	.bss.xLastTime.7323,"aw",%nobits
 1590              		.align	2
 1591              		.set	.LANCHOR8,. + 0
 1594              	xLastTime.7323:
 1595 0000 00000000 		.space	4
 1596              		.section	.bss.xStaticTimerQueue.7369,"aw",%nobits
 1597              		.align	2
 1598              		.set	.LANCHOR5,. + 0
 1601              	xStaticTimerQueue.7369:
 1602 0000 00000000 		.space	80
 1602      00000000 
 1602      00000000 
 1602      00000000 
 1602      00000000 
 1603              		.section	.bss.xTimerQueue,"aw",%nobits
 1604              		.align	2
 1605              		.set	.LANCHOR0,. + 0
 1608              	xTimerQueue:
 1609 0000 00000000 		.space	4
 1610              		.section	.bss.xTimerTaskHandle,"aw",%nobits
 1611              		.align	2
 1612              		.set	.LANCHOR7,. + 0
 1615              	xTimerTaskHandle:
 1616 0000 00000000 		.space	4
 1617              		.section	.rodata.prvCheckForValidListAndQueue.str1.1,"aMS",%progbits,1
 1618              	.LC0:
 1619 0000 546D7251 		.ascii	"TmrQ\000"
 1619      00
 1620              		.section	.rodata.xTimerCreateTimerTask.str1.1,"aMS",%progbits,1
 1621              	.LC1:
 1622 0000 546D7220 		.ascii	"Tmr Svc\000"
 1622      53766300 
 1623              		.text
 1624              	.Letext0:
 1625              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 1626              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1627              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1628              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1629              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1630              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1631              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1632              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1633              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 1634              		.file 11 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\unity\\src/unity_internals.h"
 1635              		.file 12 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/projdefs.h"
 1636              		.file 13 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS\\portable\\GCC\\ARM_CA9_RZA2M/por
 1637              		.file 14 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/FreeRTOS.h"
 1638              		.file 15 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/list.h"
 1639              		.file 16 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/task.h"
 1640              		.file 17 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/queue.h"
 1641              		.file 18 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/timers.h"
 1642              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 1643              		.file 20 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/portable.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:17     .text.prvCheckForValidListAndQueue:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:22     .text.prvCheckForValidListAndQueue:00000000 prvCheckForValidListAndQueue
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:107    .text.prvCheckForValidListAndQueue:00000078 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:119    .text.prvInsertTimerInActiveList:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:124    .text.prvInsertTimerInActiveList:00000000 prvInsertTimerInActiveList
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:193    .text.prvInsertTimerInActiveList:00000068 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:199    .text.unlikely.xTimerGenericCommand.part.2:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:204    .text.unlikely.xTimerGenericCommand.part.2:00000000 xTimerGenericCommand.part.2
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:224    .text.unlikely.xTimerGenericCommand.part.2:00000010 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:204    .text.unlikely.xTimerGenericCommand.part.2:00000000 prvInitialiseNewTimer.part.1
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:230    .text.xTimerCreateTimerTask:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:236    .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:313    .text.xTimerCreateTimerTask:0000008c $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:714    .text.prvTimerTask:00000000 prvTimerTask
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:322    .text.xTimerCreate:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:328    .text.xTimerCreate:00000000 xTimerCreate
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:400    .text.xTimerCreateStatic:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:406    .text.xTimerCreateStatic:00000000 xTimerCreateStatic
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:505    .text.xTimerCreateStatic:00000088 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:510    .text.xTimerGenericCommand:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:516    .text.xTimerGenericCommand:00000000 xTimerGenericCommand
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:588    .text.xTimerGenericCommand:00000070 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:593    .text.prvSwitchTimerLists:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:598    .text.prvSwitchTimerLists:00000000 prvSwitchTimerLists
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:702    .text.prvSwitchTimerLists:000000b8 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:709    .text.prvTimerTask:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1063   .text.prvTimerTask:00000280 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1074   .text.xTimerGetTimerDaemonTaskHandle:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1080   .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1110   .text.xTimerGetTimerDaemonTaskHandle:00000024 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1116   .text.xTimerGetPeriod:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1122   .text.xTimerGetPeriod:00000000 xTimerGetPeriod
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1154   .text.xTimerGetPeriod:00000020 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1159   .text.xTimerGetExpiryTime:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1165   .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1197   .text.xTimerGetExpiryTime:00000020 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1202   .text.pcTimerGetName:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1208   .text.pcTimerGetName:00000000 pcTimerGetName
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1240   .text.pcTimerGetName:00000020 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1245   .text.xTimerIsTimerActive:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1251   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1290   .text.xTimerIsTimerActive:00000034 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1295   .text.pvTimerGetTimerID:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1301   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1337   .text.pvTimerGetTimerID:0000002c $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1342   .text.vTimerSetTimerID:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1348   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1392   .text.vTimerSetTimerID:0000002c $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1397   .text.xTimerPendFunctionCallFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1403   .text.xTimerPendFunctionCallFromISR:00000000 xTimerPendFunctionCallFromISR
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1442   .text.xTimerPendFunctionCallFromISR:00000034 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1447   .text.xTimerPendFunctionCall:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1453   .text.xTimerPendFunctionCall:00000000 xTimerPendFunctionCall
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1507   .text.xTimerPendFunctionCall:00000050 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1513   .text.uxTimerGetTimerNumber:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1519   .text.uxTimerGetTimerNumber:00000000 uxTimerGetTimerNumber
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1535   .text.vTimerSetTimerNumber:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1541   .text.vTimerSetTimerNumber:00000000 vTimerSetTimerNumber
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1556   .bss.pxCurrentTimerList:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1560   .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1563   .bss.pxOverflowTimerList:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1567   .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1573   .bss.ucStaticTimerQueueStorage.7370:00000000 ucStaticTimerQueueStorage.7370
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1574   .bss.ucStaticTimerQueueStorage.7370:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1576   .bss.xActiveTimerList1:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1580   .bss.xActiveTimerList1:00000000 xActiveTimerList1
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1583   .bss.xActiveTimerList2:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1587   .bss.xActiveTimerList2:00000000 xActiveTimerList2
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1590   .bss.xLastTime.7323:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1594   .bss.xLastTime.7323:00000000 xLastTime.7323
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1597   .bss.xStaticTimerQueue.7369:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1601   .bss.xStaticTimerQueue.7369:00000000 xStaticTimerQueue.7369
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1604   .bss.xTimerQueue:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1608   .bss.xTimerQueue:00000000 xTimerQueue
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1611   .bss.xTimerTaskHandle:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\ccfSfbLF.s:1615   .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vListInitialise
xQueueGenericCreateStatic
vQueueAddToRegistry
vPortExitCritical
vListInsert
longjmp
Unity
vApplicationGetTimerTaskMemory
xTaskCreateStatic
pvPortMalloc
vListInitialiseItem
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
vApplicationDaemonTaskStartupHook
vTaskSuspendAll
xTaskGetTickCount
xTaskResumeAll
xQueueReceive
vPortFree
vQueueWaitForMessageRestricted
