   1              	# 1 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S"
   1              	/*
   0              	
   0              	
   0              	
   2              	 * FreeRTOS Kernel V10.0.0
   3              	 * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4              	 *
   5              	 * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6              	 * this software and associated documentation files (the "Software"), to deal in
   7              	 * the Software without restriction, including without limitation the rights to
   8              	 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9              	 * the Software, and to permit persons to whom the Software is furnished to do so,
  10              	 * subject to the following conditions:
  11              	 *
  12              	 * The above copyright notice and this permission notice shall be included in all
  13              	 * copies or substantial portions of the Software. If you wish to use our Amazon
  14              	 * FreeRTOS name, please do so in a fair use way that does not cause confusion.
  15              	 *
  16              	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17              	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  18              	 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  19              	 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  20              	 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  21              	 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  22              	 *
  23              	 * http://www.FreeRTOS.org
  24              	 * http://aws.amazon.com/freertos
  25              	 *
  26              	 * 1 tab == 4 spaces!
  27              	 */
  28              	
  29              		.text
  30              		.arm
  31              	
  32              		.set SYS_MODE,	0x1f
  33              		.set SVC_MODE,	0x13
  34              		.set IRQ_MODE,	0x12
  35              	
  36              		/* Hardware registers. */
  37              		.extern ulICCIAR
  38              		.extern ulICCEOIR
  39              		.extern ulICCPMR
  40              	
  41              		/* Variables and functions. */
  42              		.extern ulMaxAPIPriorityMask
  43              		.extern _freertos_vector_table
  44              		.extern pxCurrentTCB
  45              		.extern vTaskSwitchContext
  46              		.extern vApplicationIRQHandler
  47              		.extern ulPortInterruptNesting
  48              		.extern ulPortTaskHasFPUContext
  49              	
  50              		.global FreeRTOS_IRQ_Handler
  51              		.global FreeRTOS_SWI_Handler
  52              		.global vPortRestoreTaskContext
  53              	
  54              		.cpu cortex-a9
  55              		.fpu vfpv3
  56              	
  57              	
  58              	
  59              	.macro portSAVE_CONTEXT
  60              	
  61              		/* Save the LR and SPSR onto the system mode stack before switching to
  62              		system mode to save the remaining system mode registers. */
  63              		SRSDB	sp!, #SYS_MODE
  64              		CPS		#SYS_MODE
  65              		PUSH	{R0-R12, R14}
  66              	
  67              		/* Push the critical nesting count. */
  68              		LDR		R2, ulCriticalNestingConst
  69              		LDR		R1, [R2]
  70              		PUSH	{R1}
  71              	
  72              		/* Does the task have a floating point context that needs saving?  If
  73              		ulPortTaskHasFPUContext is 0 then no. */
  74              		LDR		R2, ulPortTaskHasFPUContextConst
  75              		LDR		R3, [R2]
  76              		CMP		R3, #0
  77              	
  78              		/* Save the floating point context, if any. */
  79              		FMRXNE  R1,  FPSCR
  80              		VPUSHNE {D0-D15}
  81              		VPUSHNE	{D16-D31}
  82              		PUSHNE	{R1}
  83              	
  84              		/* Save ulPortTaskHasFPUContext itself. */
  85              		PUSH	{R3}
  86              	
  87              		/* Save the stack pointer in the TCB. */
  88              		LDR		R0, pxCurrentTCBConst
  89              		LDR		R1, [R0]
  90              		STR		SP, [R1]
  91              	
  92              		.endm
  93              	
  94              	; /**********************************************************************/
  95              	
  96              	.macro portRESTORE_CONTEXT
  97              	
  98              		/* Set the SP to point to the stack of the task being restored. */
  99              		LDR		R0, pxCurrentTCBConst
 100              		LDR		R1, [R0]
 101              		LDR		SP, [R1]
 102              	
 103              		/* Is there a floating point context to restore?  If the restored
 104              		ulPortTaskHasFPUContext is zero then no. */
 105              		LDR		R0, ulPortTaskHasFPUContextConst
 106              		POP		{R1}
 107              		STR		R1, [R0]
 108              		CMP		R1, #0
 109              	
 110              		/* Restore the floating point context, if any. */
 111              		POPNE 	{R0}
 112              		VPOPNE	{D16-D31}
 113              		VPOPNE	{D0-D15}
 114              		VMSRNE  FPSCR, R0
 115              	
 116              		/* Restore the critical section nesting depth. */
 117              		LDR		R0, ulCriticalNestingConst
 118              		POP		{R1}
 119              		STR		R1, [R0]
 120              	
 121              		/* Ensure the priority mask is correct for the critical nesting depth. */
 122              		LDR		R2, ulICCPMRConst
 123              		LDR		R2, [R2]
 124              		CMP		R1, #0
 125              		MOVEQ	R4, #255
 126              		LDRNE	R4, ulMaxAPIPriorityMaskConst
 127              		LDRNE	R4, [R4]
 128              		STR		R4, [R2]
 129              	
 130              		/* Restore all system mode registers other than the SP (which is already
 131              		being used). */
 132              		POP		{R0-R12, R14}
 133              	
 134              		/* Return to the task code, loading CPSR on the way. */
 135              		RFEIA	sp!
 136              	
 137              		.endm
 138              	
 139              	
 140              	
 141              	
 142              	/******************************************************************************
 143              	 * SVC handler is used to start the scheduler.
 144              	 *****************************************************************************/
 145              	.align 4
 147              	FreeRTOS_SWI_Handler:
 148              		/* Save the context of the current task and select a new task to run. */
 149 0000 1F056DF9 		portSAVE_CONTEXT
 149      1F0002F1 
 149      FF5F2DE9 
 149      AC229FE5 
 149      001092E5 
 150 0044 80029FE5 		LDR R0, vTaskSwitchContextConst
 151 0048 30FF2FE1 		BLX	R0
 152 004c 68029FE5 		portRESTORE_CONTEXT
 152      001090E5 
 152      00D091E5 
 152      64029FE5 
 152      04109DE4 
 153              	
 154              	
 155              	/******************************************************************************
 156              	 * vPortRestoreTaskContext is used to start the scheduler.
 157              	 *****************************************************************************/
 159              	vPortRestoreTaskContext:
 160              		/* Switch to system mode. */
 161 00a8 1F0002F1 		CPS		#SYS_MODE
 162 00ac 08029FE5 		portRESTORE_CONTEXT
 162      001090E5 
 162      00D091E5 
 162      04029FE5 
 162      04109DE4 
 163              	
 164 0108 00F020E3 	.align 4
 164      00F020E3 
 166              	FreeRTOS_IRQ_Handler:
 167              		/* Return to the interrupted instruction. */
 168 0110 04E04EE2 		SUB		lr, lr, #4
 169              	
 170              		/* Push the return address and SPSR. */
 171 0114 04E02DE5 		PUSH	{lr}
 172 0118 00E04FE1 		MRS		lr, SPSR
 173 011c 04E02DE5 		PUSH	{lr}
 174              	
 175              		/* Change to supervisor mode to allow reentry. */
 176 0120 130002F1 		CPS		#SVC_MODE
 177              	
 178              		/* Push used registers. */
 179 0124 1F102DE9 		PUSH	{r0-r4, r12}
 180              	
 181              		/* Increment nesting count.  r3 holds the address of ulPortInterruptNesting
 182              		for future use.  r1 holds the original ulPortInterruptNesting value for
 183              		future use. */
 184 0128 A4319FE5 		LDR		r3, ulPortInterruptNestingConst
 185 012c 001093E5 		LDR		r1, [r3]
 186 0130 014081E2 		ADD		r4, r1, #1
 187 0134 004083E5 		STR		r4, [r3]
 188              	
 189              		/* Read value from the interrupt acknowledge register, which is stored in r0
 190              		for future parameter and interrupt clearing use. */
 191 0138 70219FE5 		LDR 	r2, ulICCIARConst
 192 013c 002092E5 		LDR		r2, [r2]
 193 0140 000092E5 		LDR		r0, [r2]
 194              	
 195              		/* Ensure bit 2 of the stack pointer is clear.  r2 holds the bit 2 value for
 196              		future use.  Guard against the start of the stack not being 8-byte aligned */
 197 0144 0D20A0E1 		MOV		r2, sp
 198 0148 042002E2 		AND		r2, r2, #4
 199 014c 02D04DE0 		SUB		sp, sp, r2
 200              	
 201              		/* Call the interrupt handler.  r4 pushed to maintain alignment. */
 202 0150 1F402DE9 		PUSH	{r0-r4, lr}
 203 0154 74119FE5 		LDR		r1, vApplicationIRQHandlerConst
 204 0158 31FF2FE1 		BLX		r1
 205 015c 1F40BDE8 		POP		{r0-r4, lr}
 206 0160 02D08DE0 		ADD		sp, sp, r2
 207              	
 208 0164 80000CF1 		CPSID	i
 209 0168 4FF07FF5 		DSB
 210 016c 6FF07FF5 		ISB
 211              	
 212              		/* Write the value read from ICCIAR to ICCEOIR. */
 213 0170 3C419FE5 		LDR 	r4, ulICCEOIRConst
 214 0174 004094E5 		LDR		r4, [r4]
 215 0178 000084E5 		STR		r0, [r4]
 216              	
 217              		/* Restore the old nesting count. */
 218 017c 001083E5 		STR		r1, [r3]
 219              	
 220              		/* A context switch is never performed if the nesting count is not 0. */
 221 0180 000051E3 		CMP		r1, #0
 222 0184 0300001A 		BNE		exit_without_switch
 223              	
 224              		/* Did the interrupt request a context switch?  r1 holds the address of
 225              		ulPortYieldRequired and r0 the value of ulPortYieldRequired for future
 226              		use. */
 227 0188 4C119FE5 		LDR		r1, =ulPortYieldRequired
 228 018c 000091E5 		LDR		r0, [r1]
 229 0190 000050E3 		CMP		r0, #0
 230 0194 0500001A 		BNE		switch_before_exit
 231              	
 232              	exit_without_switch:
 233              		/* No context switch.  Restore used registers, LR_irq and SPSR before
 234              		returning. */
 235 0198 1F10BDE8 		POP		{r0-r4, r12}
 236 019c 120002F1 		CPS		#IRQ_MODE
 237 01a0 04E09DE4 		POP		{LR}
 238 01a4 0EF06FE1 		MSR		SPSR_cxsf, LR
 239 01a8 04E09DE4 		POP		{LR}
 240 01ac 0EF0B0E1 		MOVS	PC, LR
 241              	
 242              	switch_before_exit:
 243              		/* A context swtich is to be performed.  Clear the context switch pending
 244              		flag. */
 245 01b0 0000A0E3 		MOV		r0, #0
 246 01b4 000081E5 		STR		r0, [r1]
 247              	
 248              		/* Restore used registers, LR-irq and SPSR before saving the context
 249              		to the task stack. */
 250 01b8 1F10BDE8 		POP		{r0-r4, r12}
 251 01bc 120002F1 		CPS		#IRQ_MODE
 252 01c0 04E09DE4 		POP		{LR}
 253 01c4 0EF06FE1 		MSR		SPSR_cxsf, LR
 254 01c8 04E09DE4 		POP		{LR}
 255 01cc 1F056DF9 		portSAVE_CONTEXT
 255      1F0002F1 
 255      FF5F2DE9 
 255      E0209FE5 
 255      001092E5 
 256              	
 257              		/* Call the function that selects the new task to execute.
 258              		vTaskSwitchContext() if vTaskSwitchContext() uses LDRD or STRD
 259              		instructions, or 8 byte aligned stack allocated data.  LR does not need
 260              		saving as a new LR will be loaded by portRESTORE_CONTEXT anyway. */
 261 0210 B4009FE5 		LDR		R0, vTaskSwitchContextConst
 262 0214 30FF2FE1 		BLX		R0
 263              	
 264              		/* Restore the context of, and branch to, the task selected to execute
 265              		next. */
 266 0218 9C009FE5 		portRESTORE_CONTEXT
 266      001090E5 
 266      00D091E5 
 266      98009FE5 
 266      04109DE4 
 267              	
 268              	
 269              	/******************************************************************************
 270              	 * If the application provides an implementation of vApplicationIRQHandler(),
 271              	 * then it will get called directly without saving the FPU registers on
 272              	 * interrupt entry, and this weak implementation of
 273              	 * vApplicationIRQHandler() will not get called.
 274              	 *
 275              	 * If the application provides its own implementation of
 276              	 * vApplicationFPUSafeIRQHandler() then this implementation of
 277              	 * vApplicationIRQHandler() will be called, save the FPU registers, and then
 278              	 * call vApplicationFPUSafeIRQHandler().
 279              	 *
 280              	 * Therefore, if the application writer wants FPU registers to be saved on
 281              	 * interrupt entry their IRQ handler must be called
 282              	 * vApplicationFPUSafeIRQHandler(), and if the application writer does not want
 283              	 * FPU registers to be saved on interrupt entry their IRQ handler must be
 284              	 * called vApplicationIRQHandler().
 285              	 *****************************************************************************/
 286              	
 287 0274 00F020E3 	.align 4
 287      00F020E3 
 287      00F020E3 
 288              	.weak vApplicationIRQHandler
 290              	vApplicationIRQHandler:
 291 0280 04E02DE5 		PUSH	{LR}
 292 0284 101AF1EE 		FMRX	R1,  FPSCR
 293 0288 200B2DED 		VPUSH	{D0-D15}
 294 028c 200B6DED 		VPUSH	{D16-D31}
 295 0290 04102DE5 		PUSH	{R1}
 296              	
 297 0294 3C109FE5 		LDR		r1, vApplicationFPUSafeIRQHandlerConst
 298 0298 31FF2FE1 		BLX		r1
 299              	
 300 029c 04009DE4 		POP		{R0}
 301 02a0 200BFDEC 		VPOP	{D16-D31}
 302 02a4 200BBDEC 		VPOP	{D0-D15}
 303 02a8 100AE1EE 		VMSR	FPSCR, R0
 304              	
 305 02ac 04F09DE4 		POP {PC}
 306              	
 307              	
 308 02b0 00000000 	ulICCIARConst:	.word ulICCIAR
 309 02b4 00000000 	ulICCEOIRConst:	.word ulICCEOIR
 310 02b8 00000000 	ulICCPMRConst: .word ulICCPMR
 311 02bc 00000000 	pxCurrentTCBConst: .word pxCurrentTCB
 312 02c0 00000000 	ulCriticalNestingConst: .word ulCriticalNesting
 313 02c4 00000000 	ulPortTaskHasFPUContextConst: .word ulPortTaskHasFPUContext
 314 02c8 00000000 	ulMaxAPIPriorityMaskConst: .word ulMaxAPIPriorityMask
 315 02cc 00000000 	vTaskSwitchContextConst: .word vTaskSwitchContext
 316 02d0 00000000 	vApplicationIRQHandlerConst: .word vApplicationIRQHandler
 317 02d4 00000000 	ulPortInterruptNestingConst: .word ulPortInterruptNesting
 318 02d8 00000000 	vApplicationFPUSafeIRQHandlerConst: .word vApplicationFPUSafeIRQHandler
 319              	
 320 02dc 00000000 	.end
DEFINED SYMBOLS
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:32     *ABS*:0000001f SYS_MODE
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:33     *ABS*:00000013 SVC_MODE
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:34     *ABS*:00000012 IRQ_MODE
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:166    .text:00000110 FreeRTOS_IRQ_Handler
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:147    .text:00000000 FreeRTOS_SWI_Handler
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:159    .text:000000a8 vPortRestoreTaskContext
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:145    .text:00000000 $a
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:312    .text:000002c0 ulCriticalNestingConst
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:313    .text:000002c4 ulPortTaskHasFPUContextConst
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:311    .text:000002bc pxCurrentTCBConst
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:315    .text:000002cc vTaskSwitchContextConst
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:310    .text:000002b8 ulICCPMRConst
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:314    .text:000002c8 ulMaxAPIPriorityMaskConst
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:317    .text:000002d4 ulPortInterruptNestingConst
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:308    .text:000002b0 ulICCIARConst
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:316    .text:000002d0 vApplicationIRQHandlerConst
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:309    .text:000002b4 ulICCEOIRConst
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:232    .text:00000198 exit_without_switch
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:242    .text:000001b0 switch_before_exit
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:290    .text:00000280 vApplicationIRQHandler
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:318    .text:000002d8 vApplicationFPUSafeIRQHandlerConst
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:308    .text:000002b0 $d
D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/portasm.S:320    .text:000002dc $d

UNDEFINED SYMBOLS
ulPortYieldRequired
ulICCIAR
ulICCEOIR
ulICCPMR
pxCurrentTCB
ulCriticalNesting
ulPortTaskHasFPUContext
ulMaxAPIPriorityMask
vTaskSwitchContext
ulPortInterruptNesting
vApplicationFPUSafeIRQHandler
