   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"tasks.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  20              		.fpu neon
  22              	prvAddNewTaskToReadyList:
  23              	.LFB4:
  24              		.file 1 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c"
   1:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
   2:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * FreeRTOS Kernel V10.1.1
   3:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
   5:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * subject to the following conditions:
  11:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
  12:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * copies or substantial portions of the Software.
  14:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
  15:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
  22:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * http://www.FreeRTOS.org
  23:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * http://aws.amazon.com/freertos
  24:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
  25:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * 1 tab == 4 spaces!
  26:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
  27:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
  28:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* Standard includes. */
  29:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #include <stdlib.h>
  30:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #include <string.h>
  31:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
  32:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** task.h is included from an application file. */
  35:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
  37:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* FreeRTOS includes. */
  38:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #include "FreeRTOS.h"
  39:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #include "task.h"
  40:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #include "timers.h"
  41:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #include "stack_macros.h"
  42:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
  43:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** for the header files above, but not in this file, in order to generate the
  46:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
  49:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** functions but without including stdio.h here. */
  51:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	to generate human readable text from the raw data generated by the
  54:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#include <stdio.h>
  57:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
  59:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	performed just because a higher priority task has been woken. */
  62:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #else
  64:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
  66:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
  67:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
  72:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
  73:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
  76:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
  78:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** settings allow a task to be created using either statically or dynamically
  85:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** made to free the RAM that was allocated statically.
  89:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #else
 106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * global, rather than file scope.
 121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define static
 124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #ifndef configIDLE_TASK_NAME
 129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	microcontroller architecture. */
 137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	state task. */
 140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{																									\
 142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{																								\
 144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}																								\
 146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/*-----------------------------------------------------------*/
 149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{																									\
 152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 																										\
 154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{																								\
 157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			configASSERT( uxTopPriority );																\
 158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			--uxTopPriority;																			\
 159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}																								\
 160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 																										\
 161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/*-----------------------------------------------------------*/
 168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	they are only required when a port optimised method of task selection is
 171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	being used. */
 172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	architecture being used. */
 180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/*-----------------------------------------------------------*/
 185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{																								\
 188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 																									\
 190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/*-----------------------------------------------------------*/
 197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{																									\
 203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{																								\
 205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}																								\
 207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** count overflows. */
 215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {																									\
 217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	List_t *pxTemp;																					\
 218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 																									\
 219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 																									\
 222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	xNumOfOverflows++;																				\
 226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * the task.  It is inserted at the end of the list.
 234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** is important its value is not updated due to a task priority change while it is
 254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** to its original value when it is released. */
 258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #else
 261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * (the task's run time environment, including register values)
 268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** typedef struct tskTaskControlBlock /* The old naming convention is used to prevent breaking kernel 
 270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
 271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		struct	_reent xNewLib_reent;
 322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		volatile uint8_t ucNotifyState;
 327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* See the comments above the definition of
 330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uint8_t ucDelayAborted;
 337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		int iTaskErrno;
 341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** } tskTCB;
 344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** below to enable the use of older kernel aware debuggers. */
 347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** typedef tskTCB TCB_t;
 348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** which static variables must be declared volatile. */
 351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* Lists for ready and blocked tasks. --------------------
 354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** the static qualifier. */
 357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** the errno of the currently running task. */
 379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	int FreeRTOS_errno = 0;
 381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* Other file private variables. --------------------------------*/
 384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** kernel to move the task from the pending ready list into the real ready list
 401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** accessed from a critical section. */
 403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*lint -restore */
 415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* Callback function prototypes. --------------------------*/
 419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* File private functions. --------------------------------*/
 438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /**
 440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * is in any other state.
 443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * automatically upon the creation of the first task.
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * creation of the first user task.
 460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
 461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
 464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * void prvIdleTask( void *pvParameters );
 465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
 466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * including the stack pointed to by the TCB.
 472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
 473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * and its TCB deleted.
 486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * either the current or the overflow delayed task list.
 492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * a suspended list, etc.).
 499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
 500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * NORMAL APPLICATION CODE.
 502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * the task if it is found, or NULL if the task is not found.
 512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * This function determines the 'high water mark' of the task stack by
 522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * determining how much of the stack remains at the original preset value.
 523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * next move a task from the Blocked state to the Running state.
 533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
 534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * set to a value other than 1.
 538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * will exit the Blocked state.
 548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvResetNextTaskUnblockTime( void );
 550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/*
 554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	 * human readable tables of task information.
 556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	 */
 557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * dynamically to fill in the structure's members.
 564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									const uint32_t ulStackDepth,
 568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									void * const pvParameters,
 569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									UBaseType_t uxPriority,
 570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									TCB_t *pxNewTCB,
 572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * Called after a new task has been created and initialised to place the task
 576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * under the control of the scheduler.
 577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
 581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * called by the function.
 584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
 585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif
 590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									const uint32_t ulStackDepth,
 598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									void * const pvParameters,
 599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									UBaseType_t uxPriority,
 600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									StackType_t * const puxStackBuffer,
 601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxNewTCB;
 604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskHandle_t xReturn;
 605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			structure. */
 614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configASSERT_DEFINED */
 619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			function - use them. */
 625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				task was created statically in case the task is later deleted. */
 632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
 640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = NULL;
 642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
 645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxNewTCB;
 655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			on the implementation of the port malloc function and whether or
 664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			not static allocation is being used. */
 665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Store the stack location in the TCB. */
 668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				task was created statically in case the task is later deleted. */
 674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									pxTaskDefinition->pcName,
 680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									pxTaskDefinition->pvParameters,
 682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									pxTaskDefinition->uxPriority,
 683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									pxCreatedTask, pxNewTCB,
 684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									pxTaskDefinition->xRegions );
 685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdPASS;
 688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
 691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxNewTCB;
 701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			on the implementation of the port malloc function and whether or
 709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			not static allocation is being used. */
 710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxNewTCB != NULL )
 713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Store the stack location in the TCB. */
 715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					this task had a statically allocated stack in case it is
 721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#endif
 725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										pxTaskDefinition->pcName,
 728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										pxTaskDefinition->pvParameters,
 730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										pxTaskDefinition->uxPriority,
 731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										pxCreatedTask, pxNewTCB,
 732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										pxTaskDefinition->xRegions );
 733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdPASS;
 736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
 740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							void * const pvParameters,
 751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							UBaseType_t uxPriority,
 752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxNewTCB;
 755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn;
 756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		the TCB then the stack. */
 760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			the implementation of the port malloc function and whether or not static
 764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			allocation is being used. */
 765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxNewTCB != NULL )
 768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Allocate space for the stack used by the task being created.
 770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				be deleted later if required. */
 772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					vPortFree( pxNewTCB );
 778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxNewTCB = NULL;
 779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#else /* portSTACK_GROWTH */
 783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		StackType_t *pxStack;
 785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxStack != NULL )
 790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Allocate space for the TCB. */
 792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxNewTCB != NULL )
 795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Store the stack location in the TCB. */
 797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxNewTCB->pxStack = pxStack;
 798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
 800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					it again. */
 803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					vPortFree( pxStack );
 804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
 807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxNewTCB = NULL;
 809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* portSTACK_GROWTH */
 812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxNewTCB != NULL )
 814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				task was created dynamically in case it is later deleted. */
 819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdPASS;
 826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
 828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
 833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									const uint32_t ulStackDepth,
 841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									void * const pvParameters,
 842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									UBaseType_t uxPriority,
 843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									TCB_t *pxNewTCB,
 845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									const MemoryRegion_t * const xRegions )
 846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
 847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** StackType_t *pxTopOfStack;
 848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** UBaseType_t x;
 849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Should the task be created in privileged mode? */
 852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		BaseType_t xRunPrivileged;
 853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xRunPrivileged = pdTRUE;
 856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
 858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xRunPrivileged = pdFALSE;
 860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pcName );
 865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	by the port. */
 878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Also record the stack's high address, which may assist
 889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			debugging. */
 890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#else /* portSTACK_GROWTH */
 895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		performed. */
 903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* portSTACK_GROWTH */
 906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Store the task name in the TCB. */
 908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		string is not accessible (extremely unlikely). */
 915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pcName[ x ] == ( char ) 0x00 )
 916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			break;
 918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
 920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	remove the privilege bit if one is present. */
 931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	else
 936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* configUSE_MUTEXES */
 947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Event lists are always in priority order. */
 956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#else
 982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		( void ) xRegions;
 985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
 996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
1000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
1003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
1005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Initialise this task's Newlib reent structure. */
1007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
1010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
1016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	to the start of the task function. Once the stack has been initialised
1020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	the top of stack variable is updated. */
1021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( pxCreatedTask != NULL )
1032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	else
1038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
1042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
  25              		.loc 1 1045 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
  31              		.cfi_def_cfa_offset 24
  32              		.cfi_offset 4, -24
  33              		.cfi_offset 5, -20
  34              		.cfi_offset 6, -16
  35              		.cfi_offset 7, -12
  36              		.cfi_offset 8, -8
  37              		.cfi_offset 14, -4
  38              		.loc 1 1045 0
  39 0004 0040A0E1 		mov	r4, r0
1046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	updated. */
1048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	taskENTER_CRITICAL();
  40              		.loc 1 1048 0
  41 0008 FEFFFFEB 		bl	vPortEnterCritical
  42              	.LVL1:
1049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxCurrentNumberOfTasks++;
  43              		.loc 1 1050 0
  44 000c 10319FE5 		ldr	r3, .L14
1051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxCurrentTCB == NULL )
  45              		.loc 1 1051 0
  46 0010 10519FE5 		ldr	r5, .L14+4
  47 0014 10719FE5 		ldr	r7, .L14+8
1050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxCurrentTCB == NULL )
  48              		.loc 1 1050 0
  49 0018 002093E5 		ldr	r2, [r3]
  50 001c 012082E2 		add	r2, r2, #1
  51 0020 002083E5 		str	r2, [r3]
  52              		.loc 1 1051 0
  53 0024 006095E5 		ldr	r6, [r5]
  54 0028 000056E3 		cmp	r6, #0
  55 002c 3200001A 		bne	.L2
1052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			the suspended state - make this the current task. */
1055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxCurrentTCB = pxNewTCB;
  56              		.loc 1 1055 0
  57 0030 004085E5 		str	r4, [r5]
1056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  58              		.loc 1 1057 0
  59 0034 003093E5 		ldr	r3, [r3]
  60 0038 010053E3 		cmp	r3, #1
  61 003c 1400001A 		bne	.L4
  62              	.L5:
  63              	.LBB10:
  64              	.LBB11:
1058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* This is the first task to be created so do the preliminary
1060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				initialisation required.  We will not recover if this call
1061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				fails, but we will report the failure. */
1062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvInitialiseTaskLists();
1063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If the scheduler is not already running, make this task the
1072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			current task if it is the highest priority task to be created
1073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			so far. */
1074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxCurrentTCB = pxNewTCB;
1079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
1081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxTaskNumber++;
1092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portSETUP_TCB( pxNewTCB );
1104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	taskEXIT_CRITICAL();
1106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If the created task is of a higher priority than the current task
1110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		then it should run now. */
1111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	else
1121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
1125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
1132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
1134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If null is passed in here then it is the calling task that is
1136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			being deleted. */
1137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Remove task from the ready list. */
1140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Is the task waiting on an event also? */
1150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			detect that the task lists need re-generating.  This is done before
1161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			not return. */
1163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			uxTaskNumber++;
1164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxTCB == pxCurrentTCB )
1166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				task itself, as a context switch to another task is required.
1169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				Place the task in the termination list.  The idle task will
1170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				check the termination list and free up any memory allocated by
1171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				there is a task that has been deleted and that it should therefore
1176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				check the xTasksWaitingTermination list. */
1177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				in which Windows specific clean up operations are performed,
1181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				after which it is not possible to yield away from this task -
1182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				required. */
1184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				--uxCurrentNumberOfTasks;
1189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvDeleteTCB( pxTCB );
1190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				the task that has just been deleted. */
1193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvResetNextTaskUnblockTime();
1194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			traceTASK_DELETE( pxTCB );
1197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
1199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		been deleted. */
1202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxTCB == pxCurrentTCB )
1205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				portYIELD_WITHIN_API();
1208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_vTaskDelete */
1217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TickType_t xTimeToWake;
1224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( pxPreviousWakeTime );
1227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vTaskSuspendAll();
1231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			block. */
1234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The tick count has overflowed since this function was
1242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				lasted called.  In this case the only time we should ever
1243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				actually delay is if the wake time has also	overflowed,
1244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				and the wake time is greater than the tick time.  When this
1245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				is the case it is as if neither time had overflowed. */
1246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xShouldDelay = pdTRUE;
1249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
1251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				delay if either the wake time has overflowed, and/or the
1259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				tick time is less than the wake time. */
1260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xShouldDelay = pdTRUE;
1263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
1265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Update the wake time ready for the next call. */
1271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( xShouldDelay != pdFALSE )
1274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				the time to wake, so subtract the current tick count. */
1279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		have put ourselves to sleep. */
1290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			portYIELD_WITHIN_API();
1293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vTaskSuspendAll();
1314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				traceTASK_DELAY();
1316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* A task that is removed from the event list while the
1318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				scheduler is suspended will not get placed in the ready
1319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				list or removed from the blocked list until the scheduler
1320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				is resumed.
1321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				This task cannot be in an event list as it is the currently
1323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				executing task. */
1324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		have put ourselves to sleep. */
1335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			portYIELD_WITHIN_API();
1338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_vTaskDelay */
1346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	eTaskState eReturn;
1353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	const TCB_t * const pxTCB = xTask;
1355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( pxTCB );
1357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxTCB == pxCurrentTCB )
1359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* The task calling this function is querying its own state. */
1361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			eReturn = eRunning;
1362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			taskENTER_CRITICAL();
1366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			taskEXIT_CRITICAL();
1372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				lists. */
1377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				eReturn = eBlocked;
1378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The task being queried is referenced from the suspended
1384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					indefinitely? */
1386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
1390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							/* The task does not appear on the event list item of
1391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							and of the RTOS objects, but could still be in the
1392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							blocked state if it is waiting on its notification
1393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							rather than waiting on an object. */
1394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							{
1396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 								eReturn = eBlocked;
1397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							}
1398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							else
1399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							{
1400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 								eReturn = eSuspended;
1401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							}
1402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
1403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#else
1404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
1405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							eReturn = eSuspended;
1406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
1407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#endif
1408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
1410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						eReturn = eBlocked;
1412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#endif
1415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The task being queried is referenced from the deleted
1420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					tasks list, or it is not referenced from any lists at
1421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					all. */
1422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					eReturn = eDeleted;
1423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#endif
1425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* If the task is not in any other state, it must be in the
1429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				Ready (including pending ready) state. */
1430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				eReturn = eReady;
1431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return eReturn;
1435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_eTaskGetState */
1438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t const *pxTCB;
1445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxReturn;
1446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
1448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If null is passed in here then it is the priority of the task
1450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			uxReturn = pxTCB->uxPriority;
1453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
1455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return uxReturn;
1457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t const *pxTCB;
1467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		is defined in FreeRTOSConfig.h then
1475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		been assigned a priority above the configured maximum system call
1478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		provided on the following link:
1484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			task that is being queried. */
1491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			uxReturn = pxTCB->uxPriority;
1493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return uxReturn;
1497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
1507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Ensure the new priority is valid. */
1513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
1523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			task that is being changed. */
1526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#else
1535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#endif
1539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The priority change may have readied a task of higher
1543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				priority than the calling task. */
1544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( pxTCB != pxCurrentTCB )
1547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* The priority of a task other than the currently
1549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						running task is being raised.  Is the priority being
1550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						raised above that of the running task? */
1551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
1553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							xYieldRequired = pdTRUE;
1554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
1555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						else
1556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
1557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
1559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
1561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* The priority of the running task is being raised,
1563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						but the running task must already be the highest
1564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						priority task able to run so no yield is required. */
1565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Setting the priority of the running task down means
1570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					there may now be another task of higher priority that
1571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					is ready to execute. */
1572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xYieldRequired = pdTRUE;
1573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
1575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Setting the priority of any other task down does not
1577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					require a yield as the running task must be above the
1578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					new priority of the task being modified. */
1579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Remember the ready list the task might be referenced from
1582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				before its uxPriority member is changed so the
1583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Only change the priority being used if the task is not
1589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					currently using an inherited priority. */
1590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
1595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The base priority gets set whatever. */
1600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#else
1603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#endif
1607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Only reset the event list item value if the value is not
1609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				being used for anything else. */
1610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
1615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				nothing more than change its priority variable. However, if
1621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				the task is in a ready list it needs to be removed and placed
1622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				in the list appropriate to its new priority. */
1623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The task is currently in its ready list - remove before
1626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					section we can do this even if the scheduler is suspended. */
1628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* It is known that the task is in its ready list so
1631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						there is no need to check again and the port level
1632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						reset macro can be called directly. */
1633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
1636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
1642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( xYieldRequired != pdFALSE )
1647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
1651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Remove compiler warning about unused variables when the port
1656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				optimised task selection is not being used. */
1657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
1661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
1671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
1673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If null is passed in here then it is the running task that is
1675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			being suspended. */
1676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			suspended list. */
1682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Is the task waiting on an event also? */
1692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The task was blocked to wait for a notification, but is
1708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					now suspended, so no notification was received. */
1709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#endif
1713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
1715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			task that is now in the Suspended state. */
1720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			taskENTER_CRITICAL();
1721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvResetNextTaskUnblockTime();
1723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			taskEXIT_CRITICAL();
1725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxTCB == pxCurrentTCB )
1732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The current task has just been suspended. */
1736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				portYIELD_WITHIN_API();
1738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				must be adjusted to point to a different task. */
1744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					be set to point to it no matter what its relative priority
1749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					is. */
1750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxCurrentTCB = NULL;
1751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
1753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					vTaskSwitchContext();
1755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn = pdFALSE;
1772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	const TCB_t * const pxTCB = xTask;
1773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		section. */
1776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( xTask );
1779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
1782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				state, or because is is blocked with no timeout? */
1788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
1789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xReturn = pdTRUE;
1791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
1793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
1808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* It does not make sense to resume the calling task. */
1820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( xTaskToResume );
1821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		currently executing task. */
1824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			taskENTER_CRITICAL();
1827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					traceTASK_RESUME( pxTCB );
1831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					suspended because this is inside a critical section. */
1834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* A higher priority task may have just been resumed. */
1838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* This yield may not cause the task just resumed to run,
1841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						but will leave the lists in the correct state for the
1842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						next yield. */
1843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
1846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
1851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			taskEXIT_CRITICAL();
1856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( xTaskToResume );
1876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		is defined in FreeRTOSConfig.h then
1883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		been assigned a priority above the configured maximum system call
1886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		provided on the following link:
1892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Check the ready lists can be accessed. */
1902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Ready lists can be accessed so move the task from the
1905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					suspended list to the ready list directly. */
1906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						xYieldRequired = pdTRUE;
1909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
1911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
1912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
1914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
1919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
1920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					is held in the pending ready list until the scheduler is
1922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					unsuspended. */
1923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
1925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
1927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
1928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
1930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xYieldRequired;
1934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
1938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** void vTaskStartScheduler( void )
1940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
1941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** BaseType_t xReturn;
1942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Add the idle task at the lowest priority. */
1944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uint32_t ulIdleTaskStackSize;
1949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		address of the RAM then create the idle task. */
1952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 												configIDLE_TASK_NAME,
1955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 												ulIdleTaskStackSize,
1956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 												pxIdleTaskStackBuffer,
1959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xIdleTaskHandle != NULL )
1962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdPASS;
1964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdFAIL;
1968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#else
1971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 								configIDLE_TASK_NAME,
1975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 								configMINIMAL_STACK_SIZE,
1976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 								( void * ) NULL,
1977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
1978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xReturn == pdPASS )
1985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = xTimerCreateTimerTask();
1987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
1989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
1990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
1992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
1993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* configUSE_TIMERS */
1994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
1995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( xReturn == pdPASS )
1996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
1997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		the only macro called by the function. */
2000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			freertos_tasks_c_additions_init();
2003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif
2005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		the created tasks contain a status word with interrupts switched on
2009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		starts to run. */
2011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portDISABLE_INTERRUPTS();
2012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			structure specific to the task that will run first. */
2017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xSchedulerRunning = pdTRUE;
2023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		FreeRTOSConfig.h file. */
2031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		traceTASK_SWITCHED_IN();
2034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portable interface. */
2037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Should not reach here as if the scheduler is running the
2040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			function will not return. */
2041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
2043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	else
2048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		or the timer task. */
2052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	( void ) xIdleTaskHandle;
2058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
2059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** void vTaskEndScheduler( void )
2062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
2063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	portDISABLE_INTERRUPTS();
2067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	xSchedulerRunning = pdFALSE;
2068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vPortEndScheduler();
2069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
2070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*----------------------------------------------------------*/
2071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** void vTaskSuspendAll( void )
2073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
2074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* A critical section is not required as the variable is of type
2075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	http://goo.gl/wu4acr */
2078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	++uxSchedulerSuspended;
2079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
2080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*----------------------------------------------------------*/
2081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TickType_t xReturn;
2087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		task that are in the Ready state, even though the idle task is
2092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		running. */
2093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#else
2101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			variable is used as a bit map.  If bits other than the least
2106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			significant bit are set then there are tasks that have a priority
2107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif
2115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = 0;
2119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			time slicing is used then the very next tick interrupt must be
2124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			processed. */
2125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = 0;
2126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			idle priority.  This path can only be reached if
2131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			configUSE_PREEMPTION is 0. */
2132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = 0;
2133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
2135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
2140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*----------------------------------------------------------*/
2144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** BaseType_t xTaskResumeAll( void )
2146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
2147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxTCB = NULL;
2148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	previous call to vTaskSuspendAll(). */
2152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( uxSchedulerSuspended );
2153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	tasks from this list into their appropriate ready list. */
2159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	taskENTER_CRITICAL();
2160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		--uxSchedulerSuspended;
2162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Move any readied tasks from the pending list into the
2168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				appropriate ready list. */
2169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* If the moved task has a priority higher than the current
2177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					task then a yield must be performed. */
2178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						xYieldPending = pdTRUE;
2181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
2183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxTCB != NULL )
2189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					which may have prevented the next unblock time from being
2192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					important for low power tickless implementations, where
2194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					this can prevent an unnecessary exit from low power
2195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					state. */
2196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvResetNextTaskUnblockTime();
2197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				they should be processed now.  This ensures the tick count does
2201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				time. */
2203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						do
2209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
2210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							{
2212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 								xYieldPending = pdTRUE;
2213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							}
2214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							else
2215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							{
2216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							}
2218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							--uxPendedCounts;
2219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						uxPendedTicks = 0;
2222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
2224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( xYieldPending != pdFALSE )
2230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						xAlreadyYielded = pdTRUE;
2234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					#endif
2236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
2239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
2245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	taskEXIT_CRITICAL();
2250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	return xAlreadyYielded;
2252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
2253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t xTaskGetTickCount( void )
2256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
2257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t xTicks;
2258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xTicks = xTickCount;
2263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	return xTicks;
2267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
2268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
2272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t xReturn;
2273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** UBaseType_t uxSavedInterruptStatus;
2274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	assigned a priority above the configured maximum system call priority.
2283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xReturn = xTickCount;
2294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	return xReturn;
2298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
2299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
2303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* A critical section is not required because the variables are of type
2304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t. */
2305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	return uxCurrentNumberOfTasks;
2306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
2307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
2311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxTCB;
2312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	queried. */
2315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxTCB );
2317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
2319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t x;
2327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	char cNextChar;
2328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xBreakLoop;
2329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* This function is called with the scheduler suspended. */
2331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			do
2337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Check each character in the name looking for a match or
2341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mismatch. */
2342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xBreakLoop = pdFALSE;
2343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* Characters didn't match. */
2350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						xBreakLoop = pdTRUE;
2351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* Both strings terminated, a match must have been
2355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						found. */
2356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						pxReturn = pxNextTCB;
2357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						xBreakLoop = pdTRUE;
2358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
2360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( xBreakLoop != pdFALSE )
2365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						break;
2367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxReturn != NULL )
2371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The handle has been found. */
2373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
2374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
2379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return pxReturn;
2384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t* pxTCB;
2395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vTaskSuspendAll();
2400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Search the ready lists. */
2402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			do
2403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxQueue--;
2405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxTCB != NULL )
2408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Found the handle. */
2410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
2411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Search the delayed lists. */
2416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxTCB == NULL )
2417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxTCB == NULL )
2422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxTCB == NULL )
2429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Search the suspended list. */
2431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#endif
2435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxTCB == NULL )
2439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Search the deleted list. */
2441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#endif
2445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		( void ) xTaskResumeAll();
2447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return pxTCB;
2449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vTaskSuspendAll();
2461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Is there a space in the array for each task in the system? */
2463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				task in the Ready state. */
2467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				do
2468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					uxQueue--;
2470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				task in the Blocked state. */
2476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#endif
2486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					each task in the Suspended state. */
2491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#endif
2494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( pulTotalRunTime != NULL )
2498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#else
2502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#endif
2504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#else
2507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( pulTotalRunTime != NULL )
2509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						*pulTotalRunTime = 0;
2511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#endif
2514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
2516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		( void ) xTaskResumeAll();
2521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return uxTask;
2523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*----------------------------------------------------------*/
2527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xIdleTaskHandle;
2536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*----------------------------------------------------------*/
2540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 1. */
2545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Correct the tick count value after a period during which the tick
2550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		each stepped tick. */
2552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xTickCount += xTicksToJump;
2554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*----------------------------------------------------------*/
2559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB = xTask;
2565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn;
2566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( pxTCB );
2568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vTaskSuspendAll();
2570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			it is actually in the Blocked state. */
2573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdPASS;
2576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				interrupt won't touch the xStateListItem because the
2579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				scheduler is suspended. */
2580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				even though the scheduler is suspended, so a critical section
2585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				is used. */
2586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				taskENTER_CRITICAL();
2587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
2594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				taskEXIT_CRITICAL();
2599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				switch if preemption is turned off. */
2605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Preemption is on, but a context switch should only be
2608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					performed if the unblocked task has a priority that is
2609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					equal to or higher than the currently executing task. */
2610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* Pend the yield to be performed when the scheduler
2613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						is unsuspended. */
2614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						xYieldPending = pdTRUE;
2615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
2617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#endif /* configUSE_PREEMPTION */
2622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
2624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdFAIL;
2626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		( void ) xTaskResumeAll();
2629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
2631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*----------------------------------------------------------*/
2635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** BaseType_t xTaskIncrementTick( void )
2637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
2638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t * pxTCB;
2639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t xItemValue;
2640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	tasks to be unblocked. */
2645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		block. */
2650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		delayed lists if it wraps to 0. */
2654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xTickCount = xConstTickCount;
2655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
2661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		has been found whose block time has not expired there is no need to
2668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		look any further down the list. */
2669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			for( ;; )
2672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					to the maximum possible value so it is extremely
2677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					unlikely that the
2678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					next time through. */
2680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
2682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
2684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The delayed list is not empty, get the value of the
2686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					item at the head of the delayed list.  This is the time
2687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					at which the task at the head of the delayed list must
2688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					be removed from the Blocked state. */
2689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( xConstTickCount < xItemValue )
2693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* It is not time to unblock this item yet, but the
2695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						item value is the time at which the task at the head
2696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						of the blocked list must be removed from the Blocked
2697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						state -	so record the item value in
2698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						xNextTaskUnblockTime. */
2699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
2703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					it from the event list. */
2712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
2717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Place the unblocked task into the appropriate ready
2722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					list. */
2723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* A task being unblocked cannot cause an immediate
2726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					context switch if preemption is turned off. */
2727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
2729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* Preemption is on, but a context switch should
2730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						only be performed if the unblocked task has a
2731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						priority that is equal to or higher than the
2732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						currently executing task. */
2733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
2735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							xSwitchRequired = pdTRUE;
2736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
2737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						else
2738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
2739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
2741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
2742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					#endif /* configUSE_PREEMPTION */
2743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		processing time (time slice) if preemption is on, and the application
2749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		writer has not explicitly turned time slicing off. */
2750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xSwitchRequired = pdTRUE;
2755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
2757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vApplicationTickHook();
2770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
2772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
2773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
2775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	else
2779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		++uxPendedTicks;
2781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		scheduler is locked. */
2784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vApplicationTickHook();
2787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif
2789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xYieldPending != pdFALSE )
2794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xSwitchRequired = pdTRUE;
2796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
2798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* configUSE_PREEMPTION */
2803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	return xSwitchRequired;
2805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
2806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *xTCB;
2813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		getting set. */
2816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xTask == NULL )
2817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
2821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xTCB = xTask;
2823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		the value can be accessed from an interrupt. */
2827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
2828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
2832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *xTCB;
2842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskHookFunction_t xReturn;
2843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xTask == NULL )
2846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
2850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xTCB = xTask;
2852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		the value can be accessed from an interrupt. */
2856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
2857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = xTCB->pxTaskTag;
2859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
2861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
2863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *xTCB;
2873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn;
2874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xTask == NULL )
2877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xTCB = pxCurrentTCB;
2879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
2881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xTCB = xTask;
2883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
2890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdFAIL;
2892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
2895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** void vTaskSwitchContext( void )
2901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
2902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		switch. */
2906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xYieldPending = pdTRUE;
2907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	else
2909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xYieldPending = pdFALSE;
2911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		traceTASK_SWITCHED_OUT();
2912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#else
2918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#endif
2920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Add the amount of time the task has been running to the
2922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				accumulated time so far.  The time the task started running was
2923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				protection here so count values are only valid until the timer
2925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				overflows.  The guard against negative values is to protect
2926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				against suspect run time stat counter implementations - which
2927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				are provided by the application, not the kernel. */
2928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
2933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
2934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
2936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Check for stack overflow, if configured. */
2941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif
2949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Select a new task to run using either the generic C or port
2951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		optimised asm code. */
2952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
2953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		traceTASK_SWITCHED_IN();
2954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* After the new task is switched in, update the global errno. */
2956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
2959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif
2961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
2964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			structure specific to this task. */
2966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
2968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
2970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
2971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
2975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxEventList );
2976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	This is placed in the list in priority order so the highest priority task
2982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
2988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
2989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
2992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxEventList );
2993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	the event groups implementation. */
2996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
2998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	event list item here as interrupts won't access the event list item of a
3000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	task that is not in the Blocked state. */
3001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	event group implementation - and interrupts don't access event groups
3006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	the task level). */
3008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
3012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_TIMERS == 1 )
3015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( pxEventList );
3019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* This function should not be called by application code hence the
3021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		it should be called with the scheduler suspended. */
3024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		In this case it is assume that this is the only task that is going to
3028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		can be used in place of vListInsert. */
3030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		value that will be recognised as an indefinite delay inside the
3034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xTicksToWait = portMAX_DELAY;
3038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TIMERS */
3045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
3049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxUnblockedTCB;
3050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** BaseType_t xReturn;
3051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	called from a critical section within an ISR. */
3054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	the delayed list, and add it to the ready list.
3058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	If an event is for a queue that is locked then this function will never
3060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	means exclusive access to the event list is guaranteed here.
3062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	This function assumes that a check has already been made to ensure that
3064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxEventList is not empty. */
3065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxUnblockedTCB );
3067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	else
3075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pending until the scheduler is resumed. */
3078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Return true if the task removed from the event list has a higher
3084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		it should force a context switch now. */
3086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xReturn = pdTRUE;
3087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xYieldPending = pdTRUE;
3091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	else
3093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xReturn = pdFALSE;
3095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		ensure it is updated at the earliest possible time. */
3107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		prvResetNextTaskUnblockTime();
3108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
3110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	return xReturn;
3112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
3113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
3117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxUnblockedTCB;
3118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	the event flags implementation. */
3121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Store the new item value in the event list. */
3124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	event flags. */
3128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxUnblockedTCB );
3130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	lists. */
3135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		a context switch is required.  This function is called with the
3142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xYieldPending = pdTRUE;
3145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
3147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
3151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxTimeOut );
3152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	taskENTER_CRITICAL();
3153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	taskEXIT_CRITICAL();
3158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
3159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
3163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* For internal use only as it does not use a critical section. */
3164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
3167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
3171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** BaseType_t xReturn;
3172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxTimeOut );
3174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxTicksToWait );
3175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	taskENTER_CRITICAL();
3177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				but has the same result. */
3187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdTRUE;
3189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
3191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif
3192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				specified is the maximum block time then the task should block
3198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				indefinitely, and therefore never time out. */
3199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdFALSE;
3200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
3202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif
3203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* The tick count is greater than the time at which
3207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			was called. */
3211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdTRUE;
3212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdFALSE;
3219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
3221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			*pxTicksToWait = 0;
3223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdTRUE;
3224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	taskEXIT_CRITICAL();
3227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	return xReturn;
3229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
3230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** void vTaskMissedYield( void )
3233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
3234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	xYieldPending = pdTRUE;
3235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
3236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxReturn;
3243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t const *pxTCB;
3244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xTask != NULL )
3246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB = xTask;
3248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
3251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			uxReturn = 0U;
3253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return uxReturn;
3256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * pxTCB;
3266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xTask != NULL )
3268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB = xTask;
3270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*
3277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * -----------------------------------------------------------
3278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * The Idle task.
3279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * ----------------------------------------------------------
3280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
3281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
3284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  * void prvIdleTask( void *pvParameters );
3285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  *
3286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c ****  */
3287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
3289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Stop warnings. */
3290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	( void ) pvParameters;
3291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	SCHEDULER IS STARTED. **/
3294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	any. */
3298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	for( ;; )
3301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		prvCheckTasksWaitingTermination();
3305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			see if any other task has become available.  If we are using
3310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			preemption we don't need to do this as any task becoming available
3311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			will automatically get the processor anyway. */
3312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			taskYIELD();
3313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configUSE_PREEMPTION */
3315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* When using preemption tasks of equal priority will be
3319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			to run then the idle task should yield before the end of the
3321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			timeslice.
3322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			A critical region is not required here as we are just reading from
3324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			the ready list at the idle priority contains more than one task
3326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			then a task other than the idle task is ready to execute. */
3327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				taskYIELD();
3330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
3332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			extern void vApplicationIdleHook( void );
3341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Call the user defined function from within the idle task.  This
3343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			allows the application designer to add background functionality
3344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			without the overhead of a separate task.
3345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vApplicationIdleHook();
3348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		user defined low power mode	implementations require
3354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		TickType_t xExpectedIdleTime;
3358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			test of the expected idle time is performed without the
3362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			scheduler suspended.  The result here is not necessarily
3363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			valid. */
3364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vTaskSuspendAll();
3369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
3370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					time can be sampled again, and this time its value can
3372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					be used. */
3373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if the application does not want
3378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
3383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						traceLOW_POWER_IDLE_END();
3386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
3387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
3388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
3389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
3391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
3392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				( void ) xTaskResumeAll();
3393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
3395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
3402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			eReturn = eAbortSleep;
3416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else if( xYieldPending != pdFALSE )
3418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			eReturn = eAbortSleep;
3421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
3423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			have an infinite block time rather than actually being suspended)
3426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			interrupts. */
3428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
3433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return eReturn;
3439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
3449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void *pvReturn = NULL;
3465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
3466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
3473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pvReturn = NULL;
3475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return pvReturn;
3478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
3488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		the calling task. */
3491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvInitialiseTaskLists( void )
3500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
3501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** UBaseType_t uxPriority;
3502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  65              		.loc 1 3505 0
  66 0040 060087E0 		add	r0, r7, r6
  67 0044 146086E2 		add	r6, r6, #20
  68 0048 FEFFFFEB 		bl	vListInitialise
  69              	.LVL2:
3503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
  70              		.loc 1 3503 0
  71 004c 190E56E3 		cmp	r6, #400
  72 0050 FAFFFF1A 		bne	.L5
3506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
  73              		.loc 1 3508 0
  74 0054 D4809FE5 		ldr	r8, .L14+12
3509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
  75              		.loc 1 3509 0
  76 0058 D4609FE5 		ldr	r6, .L14+16
3508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
  77              		.loc 1 3508 0
  78 005c 0800A0E1 		mov	r0, r8
  79 0060 FEFFFFEB 		bl	vListInitialise
  80              	.LVL3:
  81              		.loc 1 3509 0
  82 0064 0600A0E1 		mov	r0, r6
  83 0068 FEFFFFEB 		bl	vListInitialise
  84              	.LVL4:
3510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vListInitialise( &xPendingReadyList );
  85              		.loc 1 3510 0
  86 006c C4009FE5 		ldr	r0, .L14+20
  87 0070 FEFFFFEB 		bl	vListInitialise
  88              	.LVL5:
3511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
  89              		.loc 1 3514 0
  90 0074 C0009FE5 		ldr	r0, .L14+24
  91 0078 FEFFFFEB 		bl	vListInitialise
  92              	.LVL6:
3515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		vListInitialise( &xSuspendedTaskList );
  93              		.loc 1 3520 0
  94 007c BC009FE5 		ldr	r0, .L14+28
  95 0080 FEFFFFEB 		bl	vListInitialise
  96              	.LVL7:
3521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	using list2. */
3526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
  97              		.loc 1 3526 0
  98 0084 B8309FE5 		ldr	r3, .L14+32
  99 0088 008083E5 		str	r8, [r3]
3527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 100              		.loc 1 3527 0
 101 008c B4309FE5 		ldr	r3, .L14+36
 102 0090 006083E5 		str	r6, [r3]
 103              	.L4:
 104              	.LBE11:
 105              	.LBE10:
1091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 106              		.loc 1 1091 0
 107 0094 B0209FE5 		ldr	r2, .L14+40
1101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 108              		.loc 1 1101 0
 109 0098 1400A0E3 		mov	r0, #20
1091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 110              		.loc 1 1091 0
 111 009c 003092E5 		ldr	r3, [r2]
 112 00a0 013083E2 		add	r3, r3, #1
 113 00a4 003082E5 		str	r3, [r2]
1101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 114              		.loc 1 1101 0
 115 00a8 A0209FE5 		ldr	r2, .L14+44
1096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 116              		.loc 1 1096 0
 117 00ac 503084E5 		str	r3, [r4, #80]
1101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 118              		.loc 1 1101 0
 119 00b0 2C3094E5 		ldr	r3, [r4, #44]
 120 00b4 001092E5 		ldr	r1, [r2]
 121 00b8 907320E0 		mla	r0, r0, r3, r7
 122 00bc 010053E1 		cmp	r3, r1
 123 00c0 041084E2 		add	r1, r4, #4
 124 00c4 00308285 		strhi	r3, [r2]
 125 00c8 FEFFFFEB 		bl	vListInsertEnd
 126              	.LVL8:
1105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 127              		.loc 1 1105 0
 128 00cc FEFFFFEB 		bl	vPortExitCritical
 129              	.LVL9:
1107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 130              		.loc 1 1107 0
 131 00d0 7C309FE5 		ldr	r3, .L14+48
 132 00d4 003093E5 		ldr	r3, [r3]
 133 00d8 000053E3 		cmp	r3, #0
 134 00dc F081BD08 		popeq	{r4, r5, r6, r7, r8, pc}
1111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 135              		.loc 1 1111 0
 136 00e0 003095E5 		ldr	r3, [r5]
 137 00e4 2C2093E5 		ldr	r2, [r3, #44]
 138 00e8 2C3094E5 		ldr	r3, [r4, #44]
 139 00ec 030052E1 		cmp	r2, r3
 140 00f0 F081BD28 		popcs	{r4, r5, r6, r7, r8, pc}
1113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 141              		.loc 1 1113 0
 142              		.syntax divided
 143              	@ 1113 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 144 00f4 000000EF 		SWI 0
 145              	@ 0 "" 2
 146              		.arm
 147              		.syntax unified
 148 00f8 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 149              	.L2:
1074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 150              		.loc 1 1074 0
 151 00fc 50309FE5 		ldr	r3, .L14+48
 152 0100 003093E5 		ldr	r3, [r3]
 153 0104 000053E3 		cmp	r3, #0
 154 0108 E1FFFF1A 		bne	.L4
1076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 155              		.loc 1 1076 0
 156 010c 003095E5 		ldr	r3, [r5]
 157 0110 2C2093E5 		ldr	r2, [r3, #44]
 158 0114 2C3094E5 		ldr	r3, [r4, #44]
 159 0118 030052E1 		cmp	r2, r3
1078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 160              		.loc 1 1078 0
 161 011c 00408595 		strls	r4, [r5]
 162 0120 DBFFFFEA 		b	.L4
 163              	.L15:
 164              		.align	2
 165              	.L14:
 166 0124 00000000 		.word	.LANCHOR0
 167 0128 00000000 		.word	.LANCHOR1
 168 012c 00000000 		.word	.LANCHOR2
 169 0130 00000000 		.word	.LANCHOR3
 170 0134 00000000 		.word	.LANCHOR4
 171 0138 00000000 		.word	.LANCHOR5
 172 013c 00000000 		.word	.LANCHOR6
 173 0140 00000000 		.word	.LANCHOR7
 174 0144 00000000 		.word	.LANCHOR8
 175 0148 00000000 		.word	.LANCHOR9
 176 014c 00000000 		.word	.LANCHOR11
 177 0150 00000000 		.word	.LANCHOR12
 178 0154 00000000 		.word	.LANCHOR10
 179              		.cfi_endproc
 180              	.LFE4:
 182              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 183              		.align	2
 184              		.syntax unified
 185              		.arm
 186              		.fpu neon
 188              	prvWriteNameToBuffer:
 189              	.LFB55:
3528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
3529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvCheckTasksWaitingTermination( void )
3532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
3533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		TCB_t *pxTCB;
3539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		being called too often in the idle task. */
3542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			taskENTER_CRITICAL();
3545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				--uxCurrentNumberOfTasks;
3549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			taskEXIT_CRITICAL();
3552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			prvDeleteTCB( pxTCB );
3554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
3558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
3565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#else
3580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif
3584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#else
3590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif
3594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		state is just set to whatever is passed in. */
3598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( eState != eInvalid )
3599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxTCB == pxCurrentTCB )
3601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
3605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
3610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* If the task is in the suspended list then there is a
3611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					chance it is actually just blocked indefinitely - so really
3612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					it should be reported as being in the Blocked state. */
3613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( eState == eSuspended )
3614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
3615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						vTaskSuspendAll();
3616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
3617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							{
3619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							}
3621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
3622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						( void ) xTaskResumeAll();
3623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
3624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
3625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
3629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		parameter is provided to allow it to be skipped. */
3635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#else
3642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#endif
3646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
3648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxTask = 0;
3662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Populate an TaskStatus_t structure within the
3668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			meaning of each TaskStatus_t structure member. */
3671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			do
3672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxTask++;
3676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
3679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return uxTask;
3684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uint32_t ulCount = 0U;
3694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			ulCount++;
3699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
3714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uint8_t *pucEndOfStack;
3715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxReturn;
3716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if portSTACK_GROWTH < 0
3720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#else
3724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif
3728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return uxReturn;
3732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		want to allocate and clean RAM statically. */
3744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		to the task to free any memory allocated at the application level. */
3748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* The task can only have been allocated dynamically - free both
3757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			the stack and TCB. */
3758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vPortFree( pxTCB->pxStack );
3759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vPortFree( pxTCB );
3760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			check what was statically allocated before trying to free the
3765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			memory. */
3766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				must be freed. */
3770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vPortFree( pxTCB->pxStack );
3771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vPortFree( pxTCB );
3772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				only memory that must be freed. */
3777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vPortFree( pxTCB );
3778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
3780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				nothing needs to be freed. */
3783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* INCLUDE_vTaskDelete */
3791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvResetNextTaskUnblockTime( void )
3794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
3795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxTCB;
3796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		there is an item in the delayed list. */
3803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	else
3806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The new current delayed list is not empty, get the value of
3808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		the item at the head of the delayed list.  This is the time at
3809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		which the task at the head of the delayed list should be removed
3810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		from the Blocked state. */
3811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
3815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskHandle_t xReturn;
3822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* A critical section is not required as this is not called from
3824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		an interrupt and the current TCB will always be the same for any
3825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		individual execution thread. */
3826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xReturn = pxCurrentTCB;
3827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
3829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn;
3839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
3845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
3851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
3857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_MUTEXES == 1 )
3863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn = pdFALSE;
3868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		needed as interrupts can no longer use mutexes? */
3872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxMutexHolder != NULL )
3873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Adjust the mutex holder state to account for its new
3880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				priority.  Only reset the event list item value if the value is
3881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				not being used for anything else. */
3882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
3884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
3886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
3887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
3888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
3890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* If the task being modified is in the ready state it will need
3892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				to be moved into a new list. */
3893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
3895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
3897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
3899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
3900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
3901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
3903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
3908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
3909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
3910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Just inherit the priority. */
3911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
3913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Inheritance occurred. */
3917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdTRUE;
3918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
3920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
3923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The base priority of the mutex holder is lower than the
3924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					priority of the task attempting to take the mutex, but the
3925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					current priority of the mutex holder is not lower than the
3926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					priority of the task attempting to take the mutex.
3927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					Therefore the mutex holder must have already inherited a
3928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					priority, but inheritance would have occurred if that had
3929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					not been the case. */
3930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xReturn = pdTRUE;
3931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
3932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
3933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
3934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
3936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
3937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
3939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
3942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
3944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
3945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_MUTEXES */
3947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
3948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
3953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
3954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn = pdFALSE;
3955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxMutexHolder != NULL )
3957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
3958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			be the running state task. */
3962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			task? */
3968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
3970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
3973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* A task can only have an inherited priority if it holds
3974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					given from an interrupt, and if a mutex is given by the
3976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					holding task then it must be the running state task.  Remove
3977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					the holding task from the ready list. */
3978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
3980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
3982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
3983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
3984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
3986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Disinherit the priority before adding the task into the
3988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					new	ready list. */
3989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					any other purpose if this task is running, and it must be
3994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					running to give back the mutex. */
3995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
3998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Return true to indicate that a context switch is required.
3999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					This is only actually required in the corner case whereby
4000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					multiple mutexes were held and the mutexes were given back
4001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					in an order different to that in which they were taken.
4002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					If a context switch did not occur when the first mutex was
4003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					returned, even if a task was waiting on it, then a context
4004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					switch should occur when the last mutex is returned whether
4005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					a task is waiting on it or not. */
4006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xReturn = pdTRUE;
4007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
4009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
4014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
4019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
4024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_MUTEXES */
4027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_MUTEXES == 1 )
4030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxMutexHolder != NULL )
4038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			one mutex. */
4041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Determine the priority to which the priority of the task that
4044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			holding task's base priority and the priority of the highest
4046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			priority task that is waiting to obtain the mutex. */
4047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
4052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Does the priority need to change? */
4057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				simplification in the priority inheritance implementation.  If
4061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* If a task has timed out because it already holds the
4066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					its own priority. */
4068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Disinherit the priority, remembering the previous
4071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					priority to facilitate determining the subject task's
4072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					state. */
4073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Only reset the event list item value if the value is not
4078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					being used for anything else. */
4079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
4084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* If the running task is not the task that holds the mutex
4089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					then the task that holds the mutex could be in either the
4090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					from its current state list if it is in the Ready state as
4092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					the task's priority is going to change and there is one
4093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					Ready list per priority. */
4094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
4098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
4100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						else
4101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
4102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
4104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
4108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
4113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
4118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
4123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_MUTEXES */
4129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskEnterCritical( void )
4134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portDISABLE_INTERRUPTS();
4136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			function so	assert() if it is being called from an interrupt
4143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			protect against recursive calls if the assert function also uses a
4146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			critical section. */
4147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				portASSERT_IF_IN_ISR();
4150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
4153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskExitCritical( void )
4164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					portENABLE_INTERRUPTS();
4174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
4176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
4181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
4186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 190              		.loc 1 4197 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              	.LVL10:
 195 0000 10402DE9 		push	{r4, lr}
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 4, -8
 198              		.cfi_offset 14, -4
 199              		.loc 1 4197 0
 200 0004 0040A0E1 		mov	r4, r0
4198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	size_t x;
4199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Start by copying the entire string. */
4201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		strcpy( pcBuffer, pcTaskName );
 201              		.loc 1 4201 0
 202 0008 FEFFFFEB 		bl	strcpy
 203              	.LVL11:
4202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		printed out. */
4205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 204              		.loc 1 4205 0
 205 000c 0400A0E1 		mov	r0, r4
 206 0010 FEFFFFEB 		bl	strlen
 207              	.LVL12:
4206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pcBuffer[ x ] = ' ';
 208              		.loc 1 4207 0
 209 0014 2030A0E3 		mov	r3, #32
 210              	.L17:
4205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 211              		.loc 1 4205 0 discriminator 1
 212 0018 160050E3 		cmp	r0, #22
 213 001c 0300009A 		bls	.L18
4208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Terminate. */
4211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
 214              		.loc 1 4211 0
 215 0020 0030A0E3 		mov	r3, #0
 216 0024 0030C4E7 		strb	r3, [r4, r0]
4212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Return the new end of string. */
4214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return &( pcBuffer[ x ] );
4215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 217              		.loc 1 4215 0
 218 0028 000084E0 		add	r0, r4, r0
 219              	.LVL13:
 220 002c 1080BDE8 		pop	{r4, pc}
 221              	.LVL14:
 222              	.L18:
4207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 223              		.loc 1 4207 0 discriminator 3
 224 0030 0030C4E7 		strb	r3, [r4, r0]
4205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 225              		.loc 1 4205 0 discriminator 3
 226 0034 010080E2 		add	r0, r0, #1
 227              	.LVL15:
 228 0038 F6FFFFEA 		b	.L17
 229              		.cfi_endproc
 230              	.LFE55:
 232              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 233              		.align	2
 234              		.syntax unified
 235              		.arm
 236              		.fpu neon
 238              	prvResetNextTaskUnblockTime:
 239              	.LFB49:
3794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxTCB;
 240              		.loc 1 3794 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
3797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 245              		.loc 1 3797 0
 246 0000 28209FE5 		ldr	r2, .L24
 247 0004 003092E5 		ldr	r3, [r2]
 248 0008 003093E5 		ldr	r3, [r3]
 249 000c 000053E3 		cmp	r3, #0
 250 0010 1C309FE5 		ldr	r3, .L24+4
 251              	.LBB14:
 252              	.LBB15:
3811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 253              		.loc 1 3811 0
 254 0014 00209215 		ldrne	r2, [r2]
 255              	.LBE15:
 256              	.LBE14:
3803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 257              		.loc 1 3803 0
 258 0018 0020E003 		mvneq	r2, #0
 259              	.LVL16:
 260              	.LBB17:
 261              	.LBB16:
3811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 262              		.loc 1 3811 0
 263 001c 0C209215 		ldrne	r2, [r2, #12]
 264              	.LVL17:
3812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 265              		.loc 1 3812 0
 266 0020 0C209215 		ldrne	r2, [r2, #12]
 267 0024 04209215 		ldrne	r2, [r2, #4]
 268 0028 002083E5 		str	r2, [r3]
 269 002c 1EFF2FE1 		bx	lr
 270              	.L25:
 271              		.align	2
 272              	.L24:
 273 0030 00000000 		.word	.LANCHOR8
 274 0034 00000000 		.word	.LANCHOR13
 275              	.LBE16:
 276              	.LBE17:
 277              		.cfi_endproc
 278              	.LFE49:
 280              		.section	.text.prvInitialiseNewTask.isra.2,"ax",%progbits
 281              		.align	2
 282              		.syntax unified
 283              		.arm
 284              		.fpu neon
 286              	prvInitialiseNewTask.isra.2:
 287              	.LFB69:
 838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 288              		.loc 1 838 0
 289              		.cfi_startproc
 290              		@ args = 12, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              	.LVL18:
 293 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 294              		.cfi_def_cfa_offset 32
 295              		.cfi_offset 4, -32
 296              		.cfi_offset 5, -28
 297              		.cfi_offset 6, -24
 298              		.cfi_offset 7, -20
 299              		.cfi_offset 8, -16
 300              		.cfi_offset 9, -12
 301              		.cfi_offset 10, -8
 302              		.cfi_offset 14, -4
 864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 303              		.loc 1 864 0
 304 0004 005051E2 		subs	r5, r1, #0
 838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 305              		.loc 1 838 0
 306 0008 20609DE5 		ldr	r6, [sp, #32]
 307 000c 24709DE5 		ldr	r7, [sp, #36]
 308 0010 28409DE5 		ldr	r4, [sp, #40]
 864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 309              		.loc 1 864 0
 310 0014 0200001A 		bne	.L27
 311 0018 0110A0E3 		mov	r1, #1
 312              	.LVL19:
 313 001c D0009FE5 		ldr	r0, .L39
 314              	.LVL20:
 315 0020 FEFFFFEB 		bl	longjmp
 316              	.LVL21:
 317              	.L27:
 870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 318              		.loc 1 870 0
 319 0024 02A1A0E1 		lsl	r10, r2, #2
 320 0028 0080A0E1 		mov	r8, r0
 321 002c A510A0E3 		mov	r1, #165
 322              	.LVL22:
 323 0030 300094E5 		ldr	r0, [r4, #48]
 324              	.LVL23:
 325 0034 0A20A0E1 		mov	r2, r10
 326              	.LVL24:
 327 0038 0390A0E1 		mov	r9, r3
 328 003c FEFFFFEB 		bl	memset
 329              	.LVL25:
 880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 330              		.loc 1 880 0
 331 0040 302094E5 		ldr	r2, [r4, #48]
 332 0044 04A04AE2 		sub	r10, r10, #4
 333              	.LVL26:
 334 0048 013045E2 		sub	r3, r5, #1
 335 004c 175085E2 		add	r5, r5, #23
 336              	.LVL27:
 337 0050 0AA082E0 		add	r10, r2, r10
 338              	.LVL28:
 339 0054 342084E2 		add	r2, r4, #52
 881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 340              		.loc 1 881 0
 341 0058 07A0CAE3 		bic	r10, r10, #7
 342              	.LVL29:
 890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 343              		.loc 1 890 0
 344 005c 4CA084E5 		str	r10, [r4, #76]
 345              	.LVL30:
 346              	.L29:
 910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 347              		.loc 1 910 0
 348 0060 0110D3E5 		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 349 0064 0110C2E4 		strb	r1, [r2], #1
 915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 350              		.loc 1 915 0
 351 0068 0110F3E5 		ldrb	r1, [r3, #1]!	@ zero_extendqisi2
 352              	.LVL31:
 353 006c 000051E3 		cmp	r1, #0
 354 0070 0100000A 		beq	.L28
 355              	.LVL32:
 908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 356              		.loc 1 908 0
 357 0074 050053E1 		cmp	r3, r5
 358 0078 F8FFFF1A 		bne	.L29
 359              	.LVL33:
 360              	.L28:
 361 007c 130056E3 		cmp	r6, #19
 927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 362              		.loc 1 927 0
 363 0080 0050A0E3 		mov	r5, #0
 364              	.LVL34:
 365 0084 1360A023 		movcs	r6, #19
 366              	.LVL35:
 948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 367              		.loc 1 948 0
 368 0088 040084E2 		add	r0, r4, #4
 940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 369              		.loc 1 940 0
 370 008c 2C6084E5 		str	r6, [r4, #44]
 943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 371              		.loc 1 943 0
 372 0090 586084E5 		str	r6, [r4, #88]
 956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 373              		.loc 1 956 0
 374 0094 146066E2 		rsb	r6, r6, #20
 375              	.LVL36:
 927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 376              		.loc 1 927 0
 377 0098 4B50C4E5 		strb	r5, [r4, #75]
 944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 378              		.loc 1 944 0
 379 009c 5C5084E5 		str	r5, [r4, #92]
 948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 380              		.loc 1 948 0
 381 00a0 FEFFFFEB 		bl	vListInitialiseItem
 382              	.LVL37:
 949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 383              		.loc 1 949 0
 384 00a4 180084E2 		add	r0, r4, #24
 385 00a8 FEFFFFEB 		bl	vListInitialiseItem
 386              	.LVL38:
 999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 387              		.loc 1 999 0
 388 00ac 705084E5 		str	r5, [r4, #112]
1027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 389              		.loc 1 1027 0
 390 00b0 0920A0E1 		mov	r2, r9
 953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 391              		.loc 1 953 0
 392 00b4 104084E5 		str	r4, [r4, #16]
1027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 393              		.loc 1 1027 0
 394 00b8 0810A0E1 		mov	r1, r8
 956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 395              		.loc 1 956 0
 396 00bc 186084E5 		str	r6, [r4, #24]
1027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 397              		.loc 1 1027 0
 398 00c0 0A00A0E1 		mov	r0, r10
 957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 399              		.loc 1 957 0
 400 00c4 244084E5 		str	r4, [r4, #36]
 973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 401              		.loc 1 973 0
 402 00c8 6C5084E5 		str	r5, [r4, #108]
 403              	.LVL39:
 992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 404              		.loc 1 992 0
 405 00cc 605084E5 		str	r5, [r4, #96]
 406              	.LVL40:
 407 00d0 645084E5 		str	r5, [r4, #100]
 408              	.LVL41:
 409 00d4 685084E5 		str	r5, [r4, #104]
 410              	.LVL42:
1000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 411              		.loc 1 1000 0
 412 00d8 7450C4E5 		strb	r5, [r4, #116]
1013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 413              		.loc 1 1013 0
 414 00dc 7650C4E5 		strb	r5, [r4, #118]
1027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 415              		.loc 1 1027 0
 416 00e0 FEFFFFEB 		bl	pxPortInitialiseStack
 417              	.LVL43:
1031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 418              		.loc 1 1031 0
 419 00e4 050057E1 		cmp	r7, r5
1027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 420              		.loc 1 1027 0
 421 00e8 000084E5 		str	r0, [r4]
1035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 422              		.loc 1 1035 0
 423 00ec 00408715 		strne	r4, [r7]
 424 00f0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 425              	.L40:
 426              		.align	2
 427              	.L39:
 428 00f4 28000000 		.word	Unity+40
 429              		.cfi_endproc
 430              	.LFE69:
 432              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 433              		.align	2
 434              		.syntax unified
 435              		.arm
 436              		.fpu neon
 438              	prvAddCurrentTaskToDelayedList:
 439              	.LFB66:
4216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxArraySize, x;
4226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	char cStatus;
4227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/*
4229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * PLEASE NOTE:
4230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 *
4231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * This function is provided for convenience only, and is used by many
4232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * scheduler.
4234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 *
4235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * displays task names, states and stack usage.
4238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 *
4239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * snprintf() implementation!).
4246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 *
4247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * through a call to vTaskList().
4250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 */
4251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		function is executing. */
4258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		equate to NULL. */
4263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxTaskStatusArray != NULL )
4266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Generate the (binary) data. */
4268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Create a human readable table from the binary data. */
4271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										break;
4277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										break;
4280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										break;
4283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										break;
4286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										break;
4289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					case eInvalid:		/* Fall through. */
4291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					default:			/* Should not get here, but it is included
4292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										to prevent static checking errors. */
4293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										cStatus = ( char ) 0x00;
4294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 										break;
4295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				can be printed in tabular form more easily. */
4299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Write the rest of the string. */
4302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vPortFree( pxTaskStatusArray );
4309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
4311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*----------------------------------------------------------*/
4318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxArraySize, x;
4325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		#endif
4332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/*
4334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * PLEASE NOTE:
4335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 *
4336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * This function is provided for convenience only, and is used by many
4337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * scheduler.
4339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 *
4340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * in both absolute and percentage terms.
4344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 *
4345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * provide different results on different platforms.  An alternative,
4348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * a full snprintf() implementation!).
4352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 *
4353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		 */
4357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		function is executing. */
4363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		equate to NULL. */
4368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxTaskStatusArray != NULL )
4371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Generate the (binary) data. */
4373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* For percentage calculations. */
4376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			ulTotalTime /= 100UL;
4377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Avoid divide by zero errors. */
4379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( ulTotalTime > 0UL )
4380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Create a human readable table from the binary data. */
4382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* What percentage of the total run time has the task used?
4385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					This will always be rounded down to the nearest integer.
4386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Write the task name to the string, padding with
4390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					spaces so it can be printed in tabular form more
4391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					easily. */
4392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
4398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
4400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#else
4401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
4402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							printf() library can be used. */
4404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
4406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#endif
4407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
4409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* If the percentage is zero here then the task has
4411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						consumed less than 1% of the total run time. */
4412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
4414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
4416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#else
4417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
4418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							printf() library can be used. */
4420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
4422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#endif
4423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
4429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vPortFree( pxTaskStatusArray );
4436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
4438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
4448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t uxReturn;
4449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	queues and semaphores. */
4454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	return uxReturn;
4457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
4458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if ( configUSE_MUTEXES == 1 )
4461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		then pxCurrentTCB will be NULL. */
4466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( pxCurrentTCB != NULL )
4467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return pxCurrentTCB;
4472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_MUTEXES */
4475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uint32_t ulReturn;
4482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
4484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Mark this task as waiting for a notification. */
4489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* All ports are written to allow a yield in a critical
4497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					section (some will yield immediately, others wait until the
4498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					critical section exits) - but it is not something that
4499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					application code should ever do. */
4500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					portYIELD_WITHIN_API();
4501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
4503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
4508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
4513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
4515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			traceTASK_NOTIFY_TAKE();
4517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( ulReturn != 0UL )
4520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
4526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
4531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
4538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return ulReturn;
4540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn;
4550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
4552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Only block if a notification is not already pending. */
4554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				clear the value to zero. */
4559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Mark this task as waiting for a notification. */
4562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* All ports are written to allow a yield in a critical
4570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					section (some will yield immediately, others wait until the
4571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					critical section exits) - but it is not something that
4572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					application code should ever do. */
4573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					portYIELD_WITHIN_API();
4574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
4576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
4581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
4586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
4588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			traceTASK_NOTIFY_WAIT();
4590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pulNotificationValue != NULL )
4592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Output the current notification value, which may or may not
4594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				have changed. */
4595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			blocked state (because a notification was already pending) or the
4600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			unblocked because of a timeout. */
4602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* A notification was not received. */
4605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdFALSE;
4606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
4608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* A notification was already pending or a notification was
4610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				received while the task was waiting. */
4611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdTRUE;
4613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
4618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
4620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * pxTCB;
4630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn = pdPASS;
4631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uint8_t ucOriginalNotifyState;
4632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( xTaskToNotify );
4634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTCB = xTaskToNotify;
4635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
4637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			switch( eAction )
4648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				case eSetBits	:
4650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				case eIncrement	:
4654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				case eSetValueWithOverwrite	:
4658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				case eSetValueWithoutOverwrite :
4662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
4667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* The value could not be written to the task. */
4669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						xReturn = pdFAIL;
4670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				case eNoAction:
4674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The task is being notified without its notify value being
4675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					updated. */
4676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				default:
4679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Should not get here if all enums are handled.
4680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					Artificially force an assert by testing a value the
4681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					compiler can't assume is const. */
4682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			traceTASK_NOTIFY();
4688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			notification then unblock it now. */
4691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The task should not have been on an event list. */
4697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* If a task is blocked waiting for a notification then
4702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					out time.  If the task is unblocked for a reason other than
4704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					because it will automatically get reset to a new value when
4706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					tickless idling is used it might be more important to enter
4708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					sleep mode at the earliest possible time - so reset
4709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					earliest possible time. */
4711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvResetNextTaskUnblockTime();
4712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#endif
4714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The notified task has a priority above the currently
4718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					executing task so a yield is required. */
4719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
4722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
4727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
4732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
4734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * pxTCB;
4744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uint8_t ucOriginalNotifyState;
4745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn = pdPASS;
4746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( xTaskToNotify );
4749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		is defined in FreeRTOSConfig.h then
4756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		been assigned a priority above the configured maximum system call
4759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		provided on the following link:
4765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTCB = xTaskToNotify;
4769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			switch( eAction )
4781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				case eSetBits	:
4783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				case eIncrement	:
4787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				case eSetValueWithOverwrite	:
4791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				case eSetValueWithoutOverwrite :
4795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					else
4800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						/* The value could not be written to the task. */
4802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						xReturn = pdFAIL;
4803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				case eNoAction :
4807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The task is being notified without its notify value being
4808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					updated. */
4809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				default:
4812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Should not get here if all enums are handled.
4813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					Artificially force an assert by testing a value the
4814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					compiler can't assume is const. */
4815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
4817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			notification then unblock it now. */
4823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The task should not have been on an event list. */
4826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
4834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					this task pending until the scheduler is resumed. */
4837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The notified task has a priority above the currently
4843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					executing task so a yield is required. */
4844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Mark that a yield is pending in case the user is not
4850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					safe FreeRTOS function. */
4852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xYieldPending = pdTRUE;
4853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
4855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
4863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * pxTCB;
4873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uint8_t ucOriginalNotifyState;
4874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( xTaskToNotify );
4877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		is defined in FreeRTOSConfig.h then
4884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		been assigned a priority above the configured maximum system call
4887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		provided on the following link:
4893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTCB = xTaskToNotify;
4897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			semaphore. */
4905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			notification then unblock it now. */
4911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The task should not have been on an event list. */
4914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
4922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					this task pending until the scheduler is resumed. */
4925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* The notified task has a priority above the currently
4931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					executing task so a yield is required. */
4932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
4934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
4936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					/* Mark that a yield is pending in case the user is not
4938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
4939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					safe FreeRTOS function. */
4940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xYieldPending = pdTRUE;
4941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
4943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
4944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
4946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
4960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn;
4961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		its notification state cleared. */
4964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskENTER_CRITICAL();
4967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
4968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdPASS;
4972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
4974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
4975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdFAIL;
4976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
4977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
4978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		taskEXIT_CRITICAL();
4979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		return xReturn;
4981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
4985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** {
 440              		.loc 1 4988 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              	.LVL44:
 445 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 446              		.cfi_def_cfa_offset 24
 447              		.cfi_offset 4, -24
 448              		.cfi_offset 5, -20
 449              		.cfi_offset 6, -16
 450              		.cfi_offset 7, -12
 451              		.cfi_offset 8, -8
 452              		.cfi_offset 14, -4
 453              		.loc 1 4988 0
 454 0004 0040A0E1 		mov	r4, r0
4989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t xTimeToWake;
4990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** const TickType_t xConstTickCount = xTickCount;
 455              		.loc 1 4990 0
 456 0008 A0309FE5 		ldr	r3, .L46
4991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
4992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
4994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		when the task leaves the Blocked state. */
4997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
 457              		.loc 1 4997 0
 458 000c 0020A0E3 		mov	r2, #0
4988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t xTimeToWake;
 459              		.loc 1 4988 0
 460 0010 0160A0E1 		mov	r6, r1
 461              		.loc 1 4997 0
 462 0014 98509FE5 		ldr	r5, .L46+4
4990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 463              		.loc 1 4990 0
 464 0018 007093E5 		ldr	r7, [r3]
 465              	.LVL45:
 466              		.loc 1 4997 0
 467 001c 003095E5 		ldr	r3, [r5]
4998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
4999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif
5000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
5001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	as the same list item is used for both lists. */
5003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 468              		.loc 1 5003 0
 469 0020 000095E5 		ldr	r0, [r5]
 470              	.LVL46:
4997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 471              		.loc 1 4997 0
 472 0024 7620C3E5 		strb	r2, [r3, #118]
 473              		.loc 1 5003 0
 474 0028 040080E2 		add	r0, r0, #4
 475 002c FEFFFFEB 		bl	uxListRemove
 476              	.LVL47:
5004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
5005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		check, and the port reset macro can be called directly. */
5007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
5009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	else
5010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
5011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
5013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
5014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
5016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 477              		.loc 1 5016 0
 478 0030 006096E2 		adds	r6, r6, #0
 479 0034 0160A013 		movne	r6, #1
 480              	.LVL48:
 481 0038 010074E3 		cmn	r4, #1
 482 003c 0060A013 		movne	r6, #0
 483 0040 000056E3 		cmp	r6, #0
 484 0044 0400000A 		beq	.L42
 485              	.LVL49:
 486              	.LBB20:
 487              	.LBB21:
5017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
5018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			indefinitely. */
5021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 488              		.loc 1 5021 0
 489 0048 001095E5 		ldr	r1, [r5]
 490 004c 64009FE5 		ldr	r0, .L46+8
 491              	.LBE21:
 492              	.LBE20:
5022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
5023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
5024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
5025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			kernel will manage it correctly. */
5028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
5030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* The list item will be inserted in wake time order. */
5031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
5033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( xTimeToWake < xConstTickCount )
5034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
5035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				list. */
5037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
5039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
5040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
5041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* The wake time has not overflowed, so the current block list
5042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				is used. */
5043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
5045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				/* If the task entering the blocked state was placed at the
5046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				needs to be updated too. */
5048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
5050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
5052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				else
5053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
5054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
5056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
5057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
5058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
5059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
5061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		will manage it correctly. */
5064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
5066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* The list item will be inserted in wake time order. */
5067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
5069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		if( xTimeToWake < xConstTickCount )
5070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
5071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
5074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		else
5075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
5076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
5079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			too. */
5082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
5084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
5086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			else
5087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
5088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
5090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
5091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
5092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		( void ) xCanBlockIndefinitely;
5094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
5095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 493              		.loc 1 5096 0
 494 0050 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}
 495              		.cfi_remember_state
 496              		.cfi_restore 14
 497              		.cfi_restore 8
 498              		.cfi_restore 7
 499              		.cfi_restore 6
 500              		.cfi_restore 5
 501              		.cfi_restore 4
 502              		.cfi_def_cfa_offset 0
 503              	.LVL50:
 504              	.LBB23:
 505              	.LBB22:
5021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 506              		.loc 1 5021 0
 507 0054 041081E2 		add	r1, r1, #4
 508 0058 FEFFFFEA 		b	vListInsertEnd
 509              	.LVL51:
 510              	.L42:
 511              		.cfi_restore_state
 512              	.LBE22:
 513              	.LBE23:
5028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 514              		.loc 1 5028 0
 515 005c 044087E0 		add	r4, r7, r4
 516              	.LVL52:
5031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 517              		.loc 1 5031 0
 518 0060 003095E5 		ldr	r3, [r5]
5033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 519              		.loc 1 5033 0
 520 0064 040057E1 		cmp	r7, r4
5031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 521              		.loc 1 5031 0
 522 0068 044083E5 		str	r4, [r3, #4]
5033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 523              		.loc 1 5033 0
 524 006c 0500009A 		bls	.L43
5037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 525              		.loc 1 5037 0
 526 0070 44309FE5 		ldr	r3, .L46+12
 527 0074 000093E5 		ldr	r0, [r3]
 528 0078 001095E5 		ldr	r1, [r5]
 529              		.loc 1 5096 0
 530 007c F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}
 531              		.cfi_remember_state
 532              		.cfi_restore 14
 533              		.cfi_restore 8
 534              		.cfi_restore 7
 535              		.cfi_restore 6
 536              		.cfi_restore 5
 537              		.cfi_restore 4
 538              		.cfi_def_cfa_offset 0
 539              	.LVL53:
5037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 540              		.loc 1 5037 0
 541 0080 041081E2 		add	r1, r1, #4
 542 0084 FEFFFFEA 		b	vListInsert
 543              	.LVL54:
 544              	.L43:
 545              		.cfi_restore_state
5043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 546              		.loc 1 5043 0
 547 0088 30309FE5 		ldr	r3, .L46+16
 548 008c 000093E5 		ldr	r0, [r3]
 549 0090 001095E5 		ldr	r1, [r5]
 550 0094 041081E2 		add	r1, r1, #4
 551 0098 FEFFFFEB 		bl	vListInsert
 552              	.LVL55:
5048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 553              		.loc 1 5048 0
 554 009c 20309FE5 		ldr	r3, .L46+20
 555 00a0 002093E5 		ldr	r2, [r3]
 556 00a4 020054E1 		cmp	r4, r2
5050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 557              		.loc 1 5050 0
 558 00a8 00408335 		strcc	r4, [r3]
 559 00ac F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 560              	.L47:
 561              		.align	2
 562              	.L46:
 563 00b0 00000000 		.word	.LANCHOR14
 564 00b4 00000000 		.word	.LANCHOR1
 565 00b8 00000000 		.word	.LANCHOR7
 566 00bc 00000000 		.word	.LANCHOR9
 567 00c0 00000000 		.word	.LANCHOR8
 568 00c4 00000000 		.word	.LANCHOR13
 569              		.cfi_endproc
 570              	.LFE66:
 572              		.section	.text.unlikely.eTaskGetState.part.6,"ax",%progbits
 573              		.align	2
 574              		.syntax unified
 575              		.arm
 576              		.fpu neon
 578              	eTaskGetState.part.6:
 579              	.LFB73:
1350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 580              		.loc 1 1350 0
 581              		.cfi_startproc
 582              		@ Volatile: function does not return.
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              	.LVL56:
 586 0000 10402DE9 		push	{r4, lr}
 587              		.cfi_def_cfa_offset 8
 588              		.cfi_offset 4, -8
 589              		.cfi_offset 14, -4
1356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 590              		.loc 1 1356 0
 591 0004 0110A0E3 		mov	r1, #1
 592 0008 00009FE5 		ldr	r0, .L50
 593 000c FEFFFFEB 		bl	longjmp
 594              	.LVL57:
 595              	.L51:
 596              		.align	2
 597              	.L50:
 598 0010 28000000 		.word	Unity+40
 599              		.cfi_endproc
 600              	.LFE73:
 602              		.set	prvDeleteTCB.part.3,eTaskGetState.part.6
 603              		.set	xTaskCreateStatic.part.5,eTaskGetState.part.6
 604              		.section	.text.prvDeleteTCB,"ax",%progbits
 605              		.align	2
 606              		.syntax unified
 607              		.arm
 608              		.fpu neon
 610              	prvDeleteTCB:
 611              	.LFB48:
3740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 612              		.loc 1 3740 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              	.LVL58:
 617 0000 10402DE9 		push	{r4, lr}
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 4, -8
 620              		.cfi_offset 14, -4
3766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 621              		.loc 1 3766 0
 622 0004 7530D0E5 		ldrb	r3, [r0, #117]	@ zero_extendqisi2
 623 0008 000053E3 		cmp	r3, #0
 624 000c 0500001A 		bne	.L53
 625 0010 0040A0E1 		mov	r4, r0
3770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vPortFree( pxTCB );
 626              		.loc 1 3770 0
 627 0014 300090E5 		ldr	r0, [r0, #48]
 628              	.LVL59:
 629 0018 FEFFFFEB 		bl	vPortFree
 630              	.LVL60:
3771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 631              		.loc 1 3771 0
 632 001c 0400A0E1 		mov	r0, r4
 633              	.LVL61:
 634              	.L57:
3788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 635              		.loc 1 3788 0
 636 0020 1040BDE8 		pop	{r4, lr}
 637              		.cfi_remember_state
 638              		.cfi_restore 14
 639              		.cfi_restore 4
 640              		.cfi_def_cfa_offset 0
3777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 641              		.loc 1 3777 0
 642 0024 FEFFFFEA 		b	vPortFree
 643              	.LVL62:
 644              	.L53:
 645              		.cfi_restore_state
3773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 646              		.loc 1 3773 0
 647 0028 010053E3 		cmp	r3, #1
 648 002c FBFFFF0A 		beq	.L57
3783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 649              		.loc 1 3783 0
 650 0030 020053E3 		cmp	r3, #2
 651 0034 1080BD08 		popeq	{r4, pc}
 652 0038 FEFFFFEB 		bl	prvDeleteTCB.part.3
 653              	.LVL63:
 654              		.cfi_endproc
 655              	.LFE48:
 657              		.section	.text.prvIdleTask,"ax",%progbits
 658              		.align	2
 659              		.syntax unified
 660              		.arm
 661              		.fpu neon
 663              	prvIdleTask:
 664              	.LFB39:
3288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Stop warnings. */
 665              		.loc 1 3288 0
 666              		.cfi_startproc
 667              		@ Volatile: function does not return.
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 670              	.LVL64:
 671 0000 80402DE9 		push	{r7, lr}
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 7, -8
 674              		.cfi_offset 14, -4
 675              	.LBB27:
 676              	.LBB28:
3542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 677              		.loc 1 3542 0
 678 0004 64409FE5 		ldr	r4, .L65
3546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 679              		.loc 1 3546 0
 680 0008 64709FE5 		ldr	r7, .L65+4
 681              	.LVL65:
 682              	.L61:
3548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 683              		.loc 1 3548 0
 684 000c 64509FE5 		ldr	r5, .L65+8
 685              	.L59:
3542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 686              		.loc 1 3542 0
 687 0010 003094E5 		ldr	r3, [r4]
 688 0014 000053E3 		cmp	r3, #0
 689 0018 0500001A 		bne	.L60
 690              	.LBE28:
 691              	.LBE27:
3327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 692              		.loc 1 3327 0
 693 001c 58309FE5 		ldr	r3, .L65+12
 694 0020 003093E5 		ldr	r3, [r3]
 695 0024 010053E3 		cmp	r3, #1
 696 0028 F7FFFF9A 		bls	.L61
3329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 697              		.loc 1 3329 0
 698              		.syntax divided
 699              	@ 3329 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 700 002c 000000EF 		SWI 0
 701              	@ 0 "" 2
 702              		.arm
 703              		.syntax unified
 704 0030 F5FFFFEA 		b	.L61
 705              	.L60:
 706              	.LBB30:
 707              	.LBB29:
3544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 708              		.loc 1 3544 0
 709 0034 FEFFFFEB 		bl	vPortEnterCritical
 710              	.LVL66:
3546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 711              		.loc 1 3546 0
 712 0038 0C3097E5 		ldr	r3, [r7, #12]
 713 003c 0C6093E5 		ldr	r6, [r3, #12]
 714              	.LVL67:
3547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				--uxCurrentNumberOfTasks;
 715              		.loc 1 3547 0
 716 0040 040086E2 		add	r0, r6, #4
 717 0044 FEFFFFEB 		bl	uxListRemove
 718              	.LVL68:
3548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 719              		.loc 1 3548 0
 720 0048 003095E5 		ldr	r3, [r5]
 721 004c 013043E2 		sub	r3, r3, #1
 722 0050 003085E5 		str	r3, [r5]
3549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 723              		.loc 1 3549 0
 724 0054 003094E5 		ldr	r3, [r4]
 725 0058 013043E2 		sub	r3, r3, #1
 726 005c 003084E5 		str	r3, [r4]
3551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 727              		.loc 1 3551 0
 728 0060 FEFFFFEB 		bl	vPortExitCritical
 729              	.LVL69:
3553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 730              		.loc 1 3553 0
 731 0064 0600A0E1 		mov	r0, r6
 732 0068 FEFFFFEB 		bl	prvDeleteTCB
 733              	.LVL70:
 734 006c E7FFFFEA 		b	.L59
 735              	.L66:
 736              		.align	2
 737              	.L65:
 738 0070 00000000 		.word	.LANCHOR15
 739 0074 00000000 		.word	.LANCHOR6
 740 0078 00000000 		.word	.LANCHOR0
 741 007c 00000000 		.word	.LANCHOR2
 742              	.LBE29:
 743              	.LBE30:
 744              		.cfi_endproc
 745              	.LFE39:
 747              		.section	.text.xTaskCreateStatic,"ax",%progbits
 748              		.align	2
 749              		.global	xTaskCreateStatic
 750              		.syntax unified
 751              		.arm
 752              		.fpu neon
 754              	xTaskCreateStatic:
 755              	.LFB1:
 602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxNewTCB;
 756              		.loc 1 602 0
 757              		.cfi_startproc
 758              		@ args = 12, pretend = 0, frame = 8
 759              		@ frame_needed = 0, uses_anonymous_args = 0
 760              	.LVL71:
 761 0000 10402DE9 		push	{r4, lr}
 762              		.cfi_def_cfa_offset 8
 763              		.cfi_offset 4, -8
 764              		.cfi_offset 14, -4
 765 0004 18D04DE2 		sub	sp, sp, #24
 766              		.cfi_def_cfa_offset 32
 602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxNewTCB;
 767              		.loc 1 602 0
 768 0008 24C09DE5 		ldr	ip, [sp, #36]
 769 000c 28409DE5 		ldr	r4, [sp, #40]
 606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 770              		.loc 1 606 0
 771 0010 00005CE3 		cmp	ip, #0
 772 0014 0000001A 		bne	.L68
 773 0018 FEFFFFEB 		bl	xTaskCreateStatic.part.5
 774              	.LVL72:
 775              	.L68:
 607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 776              		.loc 1 607 0
 777 001c 000054E3 		cmp	r4, #0
 778 0020 0200001A 		bne	.L69
 779              	.L70:
 607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 780              		.loc 1 607 0 is_stmt 0 discriminator 1
 781 0024 0110A0E3 		mov	r1, #1
 782              	.LVL73:
 783 0028 50009FE5 		ldr	r0, .L72
 784              	.LVL74:
 785 002c FEFFFFEB 		bl	longjmp
 786              	.LVL75:
 787              	.L69:
 788              	.LBB31:
 614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 789              		.loc 1 614 0 is_stmt 1
 790 0030 78E0A0E3 		mov	lr, #120
 791 0034 14E08DE5 		str	lr, [sp, #20]
 615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 792              		.loc 1 615 0
 793 0038 14E09DE5 		ldr	lr, [sp, #20]
 794 003c 78005EE3 		cmp	lr, #120
 795 0040 F7FFFF1A 		bne	.L70
 796              	.LBE31:
 626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 797              		.loc 1 626 0
 798 0044 30C084E5 		str	ip, [r4, #48]
 632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 799              		.loc 1 632 0
 800 0048 02C0A0E3 		mov	ip, #2
 801 004c 75C0C4E5 		strb	ip, [r4, #117]
 636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 802              		.loc 1 636 0
 803 0050 10C08DE2 		add	ip, sp, #16
 804 0054 04C08DE5 		str	ip, [sp, #4]
 805 0058 20C09DE5 		ldr	ip, [sp, #32]
 806 005c 08408DE5 		str	r4, [sp, #8]
 807              	.LBB32:
 616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 808              		.loc 1 616 0
 809 0060 14E09DE5 		ldr	lr, [sp, #20]
 810              	.LVL76:
 811              	.LBE32:
 636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 812              		.loc 1 636 0
 813 0064 00C08DE5 		str	ip, [sp]
 814 0068 FEFFFFEB 		bl	prvInitialiseNewTask.isra.2
 815              	.LVL77:
 637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 816              		.loc 1 637 0
 817 006c 0400A0E1 		mov	r0, r4
 818 0070 FEFFFFEB 		bl	prvAddNewTaskToReadyList
 819              	.LVL78:
 645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 820              		.loc 1 645 0
 821 0074 10009DE5 		ldr	r0, [sp, #16]
 822 0078 18D08DE2 		add	sp, sp, #24
 823              		.cfi_def_cfa_offset 8
 824              		@ sp needed
 825 007c 1080BDE8 		pop	{r4, pc}
 826              	.LVL79:
 827              	.L73:
 828              		.align	2
 829              	.L72:
 830 0080 28000000 		.word	Unity+40
 831              		.cfi_endproc
 832              	.LFE1:
 834              		.section	.text.xTaskCreate,"ax",%progbits
 835              		.align	2
 836              		.global	xTaskCreate
 837              		.syntax unified
 838              		.arm
 839              		.fpu neon
 841              	xTaskCreate:
 842              	.LFB2:
 753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxNewTCB;
 843              		.loc 1 753 0
 844              		.cfi_startproc
 845              		@ args = 8, pretend = 0, frame = 0
 846              		@ frame_needed = 0, uses_anonymous_args = 0
 847              	.LVL80:
 848 0000 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}
 849              		.cfi_def_cfa_offset 28
 850              		.cfi_offset 4, -28
 851              		.cfi_offset 5, -24
 852              		.cfi_offset 6, -20
 853              		.cfi_offset 7, -16
 854              		.cfi_offset 8, -12
 855              		.cfi_offset 9, -8
 856              		.cfi_offset 14, -4
 857 0004 0070A0E1 		mov	r7, r0
 858 0008 14D04DE2 		sub	sp, sp, #20
 859              		.cfi_def_cfa_offset 48
 860              	.LBB33:
 787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 861              		.loc 1 787 0
 862 000c 0201A0E1 		lsl	r0, r2, #2
 863              	.LVL81:
 864              	.LBE33:
 753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxNewTCB;
 865              		.loc 1 753 0
 866 0010 0180A0E1 		mov	r8, r1
 867 0014 0260A0E1 		mov	r6, r2
 868 0018 0390A0E1 		mov	r9, r3
 869              	.LBB34:
 787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 870              		.loc 1 787 0
 871 001c FEFFFFEB 		bl	pvPortMalloc
 872              	.LVL82:
 789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 873              		.loc 1 789 0
 874 0020 005050E2 		subs	r5, r0, #0
 875 0024 1700000A 		beq	.L77
 792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 876              		.loc 1 792 0
 877 0028 7800A0E3 		mov	r0, #120
 878              	.LVL83:
 879 002c FEFFFFEB 		bl	pvPortMalloc
 880              	.LVL84:
 794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 881              		.loc 1 794 0
 882 0030 004050E2 		subs	r4, r0, #0
 883 0034 1100000A 		beq	.L76
 884              	.LBE34:
 819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 885              		.loc 1 819 0
 886 0038 0030A0E3 		mov	r3, #0
 887              	.LBB35:
 797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 888              		.loc 1 797 0
 889 003c 305084E5 		str	r5, [r4, #48]
 890              	.LBE35:
 819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 891              		.loc 1 819 0
 892 0040 7530C4E5 		strb	r3, [r4, #117]
 823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 893              		.loc 1 823 0
 894 0044 0620A0E1 		mov	r2, r6
 895 0048 34309DE5 		ldr	r3, [sp, #52]
 896 004c 0810A0E1 		mov	r1, r8
 897 0050 0700A0E1 		mov	r0, r7
 898              	.LVL85:
 899 0054 08408DE5 		str	r4, [sp, #8]
 900 0058 04308DE5 		str	r3, [sp, #4]
 901 005c 30309DE5 		ldr	r3, [sp, #48]
 902 0060 00308DE5 		str	r3, [sp]
 903 0064 0930A0E1 		mov	r3, r9
 904 0068 FEFFFFEB 		bl	prvInitialiseNewTask.isra.2
 905              	.LVL86:
 824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdPASS;
 906              		.loc 1 824 0
 907 006c 0400A0E1 		mov	r0, r4
 908 0070 FEFFFFEB 		bl	prvAddNewTaskToReadyList
 909              	.LVL87:
 825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 910              		.loc 1 825 0
 911 0074 0100A0E3 		mov	r0, #1
 912              	.LVL88:
 913              	.L74:
 833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 914              		.loc 1 833 0
 915 0078 14D08DE2 		add	sp, sp, #20
 916              		.cfi_remember_state
 917              		.cfi_def_cfa_offset 28
 918              		@ sp needed
 919 007c F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}
 920              	.LVL89:
 921              	.L76:
 922              		.cfi_restore_state
 923              	.LBB36:
 803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 924              		.loc 1 803 0
 925 0080 0500A0E1 		mov	r0, r5
 926              	.LVL90:
 927 0084 FEFFFFEB 		bl	vPortFree
 928              	.LVL91:
 929              	.L77:
 930              	.LBE36:
 829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 931              		.loc 1 829 0
 932 0088 0000E0E3 		mvn	r0, #0
 933              	.LVL92:
 832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 934              		.loc 1 832 0
 935 008c F9FFFFEA 		b	.L74
 936              		.cfi_endproc
 937              	.LFE2:
 939              		.section	.text.vTaskDelete,"ax",%progbits
 940              		.align	2
 941              		.global	vTaskDelete
 942              		.syntax unified
 943              		.arm
 944              		.fpu neon
 946              	vTaskDelete:
 947              	.LFB5:
1130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 948              		.loc 1 1130 0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 0
 951              		@ frame_needed = 0, uses_anonymous_args = 0
 952              	.LVL93:
 953 0000 70402DE9 		push	{r4, r5, r6, lr}
 954              		.cfi_def_cfa_offset 16
 955              		.cfi_offset 4, -16
 956              		.cfi_offset 5, -12
 957              		.cfi_offset 6, -8
 958              		.cfi_offset 14, -4
1130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 959              		.loc 1 1130 0
 960 0004 0040A0E1 		mov	r4, r0
 961 0008 C4509FE5 		ldr	r5, .L93
1133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 962              		.loc 1 1133 0
 963 000c FEFFFFEB 		bl	vPortEnterCritical
 964              	.LVL94:
1137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 965              		.loc 1 1137 0
 966 0010 000054E3 		cmp	r4, #0
 967 0014 00409505 		ldreq	r4, [r5]
 968              	.LVL95:
1140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 969              		.loc 1 1140 0
 970 0018 046084E2 		add	r6, r4, #4
 971 001c 0600A0E1 		mov	r0, r6
 972 0020 FEFFFFEB 		bl	uxListRemove
 973              	.LVL96:
1150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 974              		.loc 1 1150 0
 975 0024 283094E5 		ldr	r3, [r4, #40]
 976 0028 000053E3 		cmp	r3, #0
 977 002c 0100000A 		beq	.L81
1152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 978              		.loc 1 1152 0
 979 0030 180084E2 		add	r0, r4, #24
 980 0034 FEFFFFEB 		bl	uxListRemove
 981              	.LVL97:
 982              	.L81:
1163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 983              		.loc 1 1163 0
 984 0038 98209FE5 		ldr	r2, .L93+4
 985 003c 003092E5 		ldr	r3, [r2]
 986 0040 013083E2 		add	r3, r3, #1
 987 0044 003082E5 		str	r3, [r2]
1165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 988              		.loc 1 1165 0
 989 0048 003095E5 		ldr	r3, [r5]
 990 004c 030054E1 		cmp	r4, r3
 991 0050 1500001A 		bne	.L82
1172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 992              		.loc 1 1172 0
 993 0054 0610A0E1 		mov	r1, r6
 994 0058 7C009FE5 		ldr	r0, .L93+8
 995 005c FEFFFFEB 		bl	vListInsertEnd
 996              	.LVL98:
1177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 997              		.loc 1 1177 0
 998 0060 78209FE5 		ldr	r2, .L93+12
 999 0064 003092E5 		ldr	r3, [r2]
 1000 0068 013083E2 		add	r3, r3, #1
 1001 006c 003082E5 		str	r3, [r2]
 1002              	.L83:
1198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1003              		.loc 1 1198 0
 1004 0070 FEFFFFEB 		bl	vPortExitCritical
 1005              	.LVL99:
1202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1006              		.loc 1 1202 0
 1007 0074 68309FE5 		ldr	r3, .L93+16
 1008 0078 003093E5 		ldr	r3, [r3]
 1009 007c 000053E3 		cmp	r3, #0
 1010 0080 7080BD08 		popeq	{r4, r5, r6, pc}
1204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 1011              		.loc 1 1204 0
 1012 0084 003095E5 		ldr	r3, [r5]
 1013 0088 030054E1 		cmp	r4, r3
 1014 008c 7080BD18 		popne	{r4, r5, r6, pc}
1206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				portYIELD_WITHIN_API();
 1015              		.loc 1 1206 0
 1016 0090 50309FE5 		ldr	r3, .L93+20
 1017 0094 003093E5 		ldr	r3, [r3]
 1018 0098 000053E3 		cmp	r3, #0
 1019 009c 0A00000A 		beq	.L85
1206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				portYIELD_WITHIN_API();
 1020              		.loc 1 1206 0 is_stmt 0 discriminator 1
 1021 00a0 0110A0E3 		mov	r1, #1
 1022 00a4 40009FE5 		ldr	r0, .L93+24
 1023 00a8 FEFFFFEB 		bl	longjmp
 1024              	.LVL100:
 1025              	.L82:
1188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvDeleteTCB( pxTCB );
 1026              		.loc 1 1188 0 is_stmt 1
 1027 00ac 3C209FE5 		ldr	r2, .L93+28
1189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1028              		.loc 1 1189 0
 1029 00b0 0400A0E1 		mov	r0, r4
1188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvDeleteTCB( pxTCB );
 1030              		.loc 1 1188 0
 1031 00b4 003092E5 		ldr	r3, [r2]
 1032 00b8 013043E2 		sub	r3, r3, #1
 1033 00bc 003082E5 		str	r3, [r2]
1189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1034              		.loc 1 1189 0
 1035 00c0 FEFFFFEB 		bl	prvDeleteTCB
 1036              	.LVL101:
1193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 1037              		.loc 1 1193 0
 1038 00c4 FEFFFFEB 		bl	prvResetNextTaskUnblockTime
 1039              	.LVL102:
 1040 00c8 E8FFFFEA 		b	.L83
 1041              	.L85:
1207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 1042              		.loc 1 1207 0
 1043              		.syntax divided
 1044              	@ 1207 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 1045 00cc 000000EF 		SWI 0
 1046              	@ 0 "" 2
 1047              		.arm
 1048              		.syntax unified
 1049 00d0 7080BDE8 		pop	{r4, r5, r6, pc}
 1050              	.L94:
 1051              		.align	2
 1052              	.L93:
 1053 00d4 00000000 		.word	.LANCHOR1
 1054 00d8 00000000 		.word	.LANCHOR11
 1055 00dc 00000000 		.word	.LANCHOR6
 1056 00e0 00000000 		.word	.LANCHOR15
 1057 00e4 00000000 		.word	.LANCHOR10
 1058 00e8 00000000 		.word	.LANCHOR16
 1059 00ec 28000000 		.word	Unity+40
 1060 00f0 00000000 		.word	.LANCHOR0
 1061              		.cfi_endproc
 1062              	.LFE5:
 1064              		.section	.text.eTaskGetState,"ax",%progbits
 1065              		.align	2
 1066              		.global	eTaskGetState
 1067              		.syntax unified
 1068              		.arm
 1069              		.fpu neon
 1071              	eTaskGetState:
 1072              	.LFB8:
1351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	eTaskState eReturn;
 1073              		.loc 1 1351 0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077              	.LVL103:
 1078 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1079              		.cfi_def_cfa_offset 24
 1080              		.cfi_offset 4, -24
 1081              		.cfi_offset 5, -20
 1082              		.cfi_offset 6, -16
 1083              		.cfi_offset 7, -12
 1084              		.cfi_offset 8, -8
 1085              		.cfi_offset 14, -4
1356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1086              		.loc 1 1356 0
 1087 0004 005050E2 		subs	r5, r0, #0
 1088 0008 0000001A 		bne	.L96
 1089 000c FEFFFFEB 		bl	eTaskGetState.part.6
 1090              	.LVL104:
 1091              	.L96:
1358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1092              		.loc 1 1358 0
 1093 0010 84309FE5 		ldr	r3, .L105
 1094 0014 003093E5 		ldr	r3, [r3]
 1095 0018 030055E1 		cmp	r5, r3
 1096 001c 1A00000A 		beq	.L99
1365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 1097              		.loc 1 1365 0
 1098 0020 FEFFFFEB 		bl	vPortEnterCritical
 1099              	.LVL105:
1368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1100              		.loc 1 1368 0
 1101 0024 74309FE5 		ldr	r3, .L105+4
1367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1102              		.loc 1 1367 0
 1103 0028 144095E5 		ldr	r4, [r5, #20]
 1104              	.LVL106:
1368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1105              		.loc 1 1368 0
 1106 002c 007093E5 		ldr	r7, [r3]
 1107              	.LVL107:
1369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 1108              		.loc 1 1369 0
 1109 0030 6C309FE5 		ldr	r3, .L105+8
 1110 0034 006093E5 		ldr	r6, [r3]
 1111              	.LVL108:
1371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1112              		.loc 1 1371 0
 1113 0038 FEFFFFEB 		bl	vPortExitCritical
 1114              	.LVL109:
1373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 1115              		.loc 1 1373 0
 1116 003c 060054E1 		cmp	r4, r6
 1117 0040 07005411 		cmpne	r4, r7
 1118 0044 1200000A 		beq	.L101
1381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1119              		.loc 1 1381 0
 1120 0048 58309FE5 		ldr	r3, .L105+12
 1121 004c 030054E1 		cmp	r4, r3
 1122 0050 0700001A 		bne	.L98
1386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 1123              		.loc 1 1386 0
 1124 0054 283095E5 		ldr	r3, [r5, #40]
 1125 0058 000053E3 		cmp	r3, #0
 1126 005c 0C00001A 		bne	.L101
1394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							{
 1127              		.loc 1 1394 0
 1128 0060 7430D5E5 		ldrb	r3, [r5, #116]	@ zero_extendqisi2
 1129 0064 010053E3 		cmp	r3, #1
1400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							}
 1130              		.loc 1 1400 0
 1131 0068 0200A003 		moveq	r0, #2
 1132 006c 0300A013 		movne	r0, #3
 1133 0070 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1134              	.L98:
1417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1135              		.loc 1 1417 0 discriminator 1
 1136 0074 30309FE5 		ldr	r3, .L105+16
 1137 0078 030054E1 		cmp	r4, r3
 1138 007c 00005413 		cmpne	r4, #0
1430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 1139              		.loc 1 1430 0 discriminator 1
 1140 0080 0400A003 		moveq	r0, #4
 1141 0084 0100A013 		movne	r0, #1
 1142 0088 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1143              	.LVL110:
 1144              	.L99:
1361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 1145              		.loc 1 1361 0
 1146 008c 0000A0E3 		mov	r0, #0
 1147              	.LVL111:
 1148 0090 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1149              	.LVL112:
 1150              	.L101:
1377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 1151              		.loc 1 1377 0
 1152 0094 0200A0E3 		mov	r0, #2
 1153              	.LVL113:
1435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1154              		.loc 1 1435 0
 1155 0098 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1156              	.L106:
 1157              		.align	2
 1158              	.L105:
 1159 009c 00000000 		.word	.LANCHOR1
 1160 00a0 00000000 		.word	.LANCHOR8
 1161 00a4 00000000 		.word	.LANCHOR9
 1162 00a8 00000000 		.word	.LANCHOR7
 1163 00ac 00000000 		.word	.LANCHOR6
 1164              		.cfi_endproc
 1165              	.LFE8:
 1167              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1168              		.align	2
 1169              		.global	uxTaskPriorityGet
 1170              		.syntax unified
 1171              		.arm
 1172              		.fpu neon
 1174              	uxTaskPriorityGet:
 1175              	.LFB9:
1443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t const *pxTCB;
 1176              		.loc 1 1443 0
 1177              		.cfi_startproc
 1178              		@ args = 0, pretend = 0, frame = 0
 1179              		@ frame_needed = 0, uses_anonymous_args = 0
 1180              	.LVL114:
 1181 0000 10402DE9 		push	{r4, lr}
 1182              		.cfi_def_cfa_offset 8
 1183              		.cfi_offset 4, -8
 1184              		.cfi_offset 14, -4
1443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t const *pxTCB;
 1185              		.loc 1 1443 0
 1186 0004 0040A0E1 		mov	r4, r0
1447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1187              		.loc 1 1447 0
 1188 0008 FEFFFFEB 		bl	vPortEnterCritical
 1189              	.LVL115:
1451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1190              		.loc 1 1451 0
 1191 000c 000054E3 		cmp	r4, #0
 1192 0010 10309F05 		ldreq	r3, .L111
 1193 0014 00409305 		ldreq	r4, [r3]
 1194              	.LVL116:
1452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 1195              		.loc 1 1452 0
 1196 0018 2C4094E5 		ldr	r4, [r4, #44]
 1197              	.LVL117:
1454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1198              		.loc 1 1454 0
 1199 001c FEFFFFEB 		bl	vPortExitCritical
 1200              	.LVL118:
1457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1201              		.loc 1 1457 0
 1202 0020 0400A0E1 		mov	r0, r4
 1203 0024 1080BDE8 		pop	{r4, pc}
 1204              	.L112:
 1205              		.align	2
 1206              	.L111:
 1207 0028 00000000 		.word	.LANCHOR1
 1208              		.cfi_endproc
 1209              	.LFE9:
 1211              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1212              		.align	2
 1213              		.global	uxTaskPriorityGetFromISR
 1214              		.syntax unified
 1215              		.arm
 1216              		.fpu neon
 1218              	uxTaskPriorityGetFromISR:
 1219              	.LFB10:
1465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t const *pxTCB;
 1220              		.loc 1 1465 0
 1221              		.cfi_startproc
 1222              		@ args = 0, pretend = 0, frame = 0
 1223              		@ frame_needed = 0, uses_anonymous_args = 0
 1224              	.LVL119:
 1225 0000 10402DE9 		push	{r4, lr}
 1226              		.cfi_def_cfa_offset 8
 1227              		.cfi_offset 4, -8
 1228              		.cfi_offset 14, -4
1465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t const *pxTCB;
 1229              		.loc 1 1465 0
 1230 0004 0040A0E1 		mov	r4, r0
1485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1231              		.loc 1 1485 0
 1232 0008 FEFFFFEB 		bl	vPortValidateInterruptPriority
 1233              	.LVL120:
1487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1234              		.loc 1 1487 0
 1235 000c FEFFFFEB 		bl	ulPortSetInterruptMask
 1236              	.LVL121:
1491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1237              		.loc 1 1491 0
 1238 0010 000054E3 		cmp	r4, #0
 1239 0014 10309F05 		ldreq	r3, .L117
 1240 0018 00409305 		ldreq	r4, [r3]
 1241              	.LVL122:
1492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 1242              		.loc 1 1492 0
 1243 001c 2C4094E5 		ldr	r4, [r4, #44]
 1244              	.LVL123:
1494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1245              		.loc 1 1494 0
 1246 0020 FEFFFFEB 		bl	vPortClearInterruptMask
 1247              	.LVL124:
1497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1248              		.loc 1 1497 0
 1249 0024 0400A0E1 		mov	r0, r4
 1250 0028 1080BDE8 		pop	{r4, pc}
 1251              	.L118:
 1252              		.align	2
 1253              	.L117:
 1254 002c 00000000 		.word	.LANCHOR1
 1255              		.cfi_endproc
 1256              	.LFE10:
 1258              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1259              		.align	2
 1260              		.global	vTaskPrioritySet
 1261              		.syntax unified
 1262              		.arm
 1263              		.fpu neon
 1265              	vTaskPrioritySet:
 1266              	.LFB11:
1505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 1267              		.loc 1 1505 0
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 0
 1270              		@ frame_needed = 0, uses_anonymous_args = 0
 1271              	.LVL125:
1510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1272              		.loc 1 1510 0
 1273 0000 130051E3 		cmp	r1, #19
1505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 1274              		.loc 1 1505 0
 1275 0004 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1276              		.cfi_def_cfa_offset 24
 1277              		.cfi_offset 4, -24
 1278              		.cfi_offset 5, -20
 1279              		.cfi_offset 6, -16
 1280              		.cfi_offset 7, -12
 1281              		.cfi_offset 8, -8
 1282              		.cfi_offset 14, -4
1510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1283              		.loc 1 1510 0
 1284 0008 0200009A 		bls	.L120
1510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1285              		.loc 1 1510 0 is_stmt 0 discriminator 1
 1286 000c 0110A0E3 		mov	r1, #1
 1287              	.LVL126:
 1288 0010 E4009FE5 		ldr	r0, .L136
 1289              	.LVL127:
 1290 0014 FEFFFFEB 		bl	longjmp
 1291              	.LVL128:
 1292              	.L120:
 1293 0018 0040A0E1 		mov	r4, r0
 1294 001c 0150A0E1 		mov	r5, r1
 1295              	.LVL129:
1522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1296              		.loc 1 1522 0 is_stmt 1
 1297 0020 FEFFFFEB 		bl	vPortEnterCritical
 1298              	.LVL130:
1526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1299              		.loc 1 1526 0
 1300 0024 000054E3 		cmp	r4, #0
 1301 0028 D0309F05 		ldreq	r3, .L136+4
 1302 002c 00409305 		ldreq	r4, [r3]
 1303              	.LVL131:
1532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 1304              		.loc 1 1532 0
 1305 0030 582094E5 		ldr	r2, [r4, #88]
 1306              	.LVL132:
1540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 1307              		.loc 1 1540 0
 1308 0034 020055E1 		cmp	r5, r2
 1309 0038 2800000A 		beq	.L123
 1310 003c BC309FE5 		ldr	r3, .L136+4
1544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1311              		.loc 1 1544 0
 1312 0040 2800009A 		bls	.L124
1546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 1313              		.loc 1 1546 0
 1314 0044 001093E5 		ldr	r1, [r3]
 1315 0048 010054E1 		cmp	r4, r1
1508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1316              		.loc 1 1508 0
 1317 004c 0060A003 		moveq	r6, #0
1546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 1318              		.loc 1 1546 0
 1319 0050 0400000A 		beq	.L125
1551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
 1320              		.loc 1 1551 0
 1321 0054 003093E5 		ldr	r3, [r3]
 1322 0058 2C6093E5 		ldr	r6, [r3, #44]
 1323 005c 060055E1 		cmp	r5, r6
 1324 0060 0060A033 		movcc	r6, #0
 1325 0064 0160A023 		movcs	r6, #1
 1326              	.L125:
 1327              	.LVL133:
1584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1328              		.loc 1 1584 0
 1329 0068 2C3094E5 		ldr	r3, [r4, #44]
 1330              	.LVL134:
1623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1331              		.loc 1 1623 0
 1332 006c 90009FE5 		ldr	r0, .L136+8
1600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 1333              		.loc 1 1600 0
 1334 0070 585084E5 		str	r5, [r4, #88]
1590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 1335              		.loc 1 1590 0
 1336 0074 030052E1 		cmp	r2, r3
1610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1337              		.loc 1 1610 0
 1338 0078 182094E5 		ldr	r2, [r4, #24]
 1339              	.LVL135:
1592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 1340              		.loc 1 1592 0
 1341 007c 2C508405 		streq	r5, [r4, #44]
1610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1342              		.loc 1 1610 0
 1343 0080 000052E3 		cmp	r2, #0
1623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1344              		.loc 1 1623 0
 1345 0084 1420A0E3 		mov	r2, #20
 1346 0088 920323E0 		mla	r3, r2, r3, r0
 1347              	.LVL136:
 1348 008c 142094E5 		ldr	r2, [r4, #20]
1612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 1349              		.loc 1 1612 0
 1350 0090 145065A2 		rsbge	r5, r5, #20
 1351              	.LVL137:
 1352 0094 185084A5 		strge	r5, [r4, #24]
 1353 0098 0050A0E1 		mov	r5, r0
1623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1354              		.loc 1 1623 0
 1355 009c 030052E1 		cmp	r2, r3
 1356 00a0 0B00001A 		bne	.L128
1628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 1357              		.loc 1 1628 0
 1358 00a4 047084E2 		add	r7, r4, #4
 1359 00a8 0700A0E1 		mov	r0, r7
 1360 00ac FEFFFFEB 		bl	uxListRemove
 1361              	.LVL138:
1639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 1362              		.loc 1 1639 0
 1363 00b0 50209FE5 		ldr	r2, .L136+12
 1364 00b4 1400A0E3 		mov	r0, #20
 1365 00b8 2C3094E5 		ldr	r3, [r4, #44]
 1366 00bc 001092E5 		ldr	r1, [r2]
 1367 00c0 905320E0 		mla	r0, r0, r3, r5
 1368 00c4 010053E1 		cmp	r3, r1
 1369 00c8 0710A0E1 		mov	r1, r7
 1370 00cc 00308285 		strhi	r3, [r2]
 1371 00d0 FEFFFFEB 		bl	vListInsertEnd
 1372              	.LVL139:
 1373              	.L128:
1646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1374              		.loc 1 1646 0
 1375 00d4 000056E3 		cmp	r6, #0
 1376 00d8 0000000A 		beq	.L123
1648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 1377              		.loc 1 1648 0
 1378              		.syntax divided
 1379              	@ 1648 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 1380 00dc 000000EF 		SWI 0
 1381              	@ 0 "" 2
 1382              	.LVL140:
 1383              		.arm
 1384              		.syntax unified
 1385              	.L123:
1661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1386              		.loc 1 1661 0
 1387 00e0 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}
 1388              		.cfi_remember_state
 1389              		.cfi_restore 14
 1390              		.cfi_restore 8
 1391              		.cfi_restore 7
 1392              		.cfi_restore 6
 1393              		.cfi_restore 5
 1394              		.cfi_restore 4
 1395              		.cfi_def_cfa_offset 0
 1396              	.LVL141:
1660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 1397              		.loc 1 1660 0
 1398 00e4 FEFFFFEA 		b	vPortExitCritical
 1399              	.LVL142:
 1400              	.L124:
 1401              		.cfi_restore_state
1567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1402              		.loc 1 1567 0
 1403 00e8 006093E5 		ldr	r6, [r3]
 1404 00ec 066044E0 		sub	r6, r4, r6
 1405 00f0 166F6FE1 		clz	r6, r6
 1406 00f4 A662A0E1 		lsr	r6, r6, #5
 1407 00f8 DAFFFFEA 		b	.L125
 1408              	.L137:
 1409              		.align	2
 1410              	.L136:
 1411 00fc 28000000 		.word	Unity+40
 1412 0100 00000000 		.word	.LANCHOR1
 1413 0104 00000000 		.word	.LANCHOR2
 1414 0108 00000000 		.word	.LANCHOR12
 1415              		.cfi_endproc
 1416              	.LFE11:
 1418              		.section	.text.vTaskResume,"ax",%progbits
 1419              		.align	2
 1420              		.global	vTaskResume
 1421              		.syntax unified
 1422              		.arm
 1423              		.fpu neon
 1425              	vTaskResume:
 1426              	.LFB14:
1816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1427              		.loc 1 1816 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              	.LVL143:
 1432 0000 70402DE9 		push	{r4, r5, r6, lr}
 1433              		.cfi_def_cfa_offset 16
 1434              		.cfi_offset 4, -16
 1435              		.cfi_offset 5, -12
 1436              		.cfi_offset 6, -8
 1437              		.cfi_offset 14, -4
1820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1438              		.loc 1 1820 0
 1439 0004 004050E2 		subs	r4, r0, #0
 1440 0008 0200001A 		bne	.L139
1820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1441              		.loc 1 1820 0 is_stmt 0 discriminator 1
 1442 000c 0110A0E3 		mov	r1, #1
 1443 0010 9C009FE5 		ldr	r0, .L148
 1444              	.LVL144:
 1445 0014 FEFFFFEB 		bl	longjmp
 1446              	.LVL145:
 1447              	.L139:
1824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1448              		.loc 1 1824 0 is_stmt 1
 1449 0018 98309FE5 		ldr	r3, .L148+4
 1450 001c 002093E5 		ldr	r2, [r3]
 1451 0020 0360A0E1 		mov	r6, r3
 1452 0024 020054E1 		cmp	r4, r2
 1453 0028 7080BD08 		popeq	{r4, r5, r6, pc}
1826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 1454              		.loc 1 1826 0
 1455 002c FEFFFFEB 		bl	vPortEnterCritical
 1456              	.LVL146:
 1457              	.LBB41:
 1458              	.LBB42:
1781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1459              		.loc 1 1781 0
 1460 0030 142094E5 		ldr	r2, [r4, #20]
 1461 0034 80309FE5 		ldr	r3, .L148+8
 1462 0038 030052E1 		cmp	r2, r3
 1463 003c 1A00001A 		bne	.L142
1784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 1464              		.loc 1 1784 0
 1465 0040 282094E5 		ldr	r2, [r4, #40]
1788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1466              		.loc 1 1788 0
 1467 0044 74309FE5 		ldr	r3, .L148+12
 1468 0048 033052E0 		subs	r3, r2, r3
 1469 004c 0130A013 		movne	r3, #1
 1470 0050 000052E3 		cmp	r2, #0
 1471 0054 0030A013 		movne	r3, #0
 1472 0058 000053E3 		cmp	r3, #0
 1473 005c 1200000A 		beq	.L142
 1474              	.LVL147:
 1475              	.LBE42:
 1476              	.LBE41:
1834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1477              		.loc 1 1834 0
 1478 0060 045084E2 		add	r5, r4, #4
 1479 0064 0500A0E1 		mov	r0, r5
 1480 0068 FEFFFFEB 		bl	uxListRemove
 1481              	.LVL148:
1835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1482              		.loc 1 1835 0
 1483 006c 50209FE5 		ldr	r2, .L148+16
 1484 0070 1400A0E3 		mov	r0, #20
 1485 0074 2C3094E5 		ldr	r3, [r4, #44]
 1486 0078 001092E5 		ldr	r1, [r2]
 1487 007c 010053E1 		cmp	r3, r1
 1488 0080 0510A0E1 		mov	r1, r5
 1489 0084 00308285 		strhi	r3, [r2]
 1490 0088 38209FE5 		ldr	r2, .L148+20
 1491 008c 902320E0 		mla	r0, r0, r3, r2
 1492 0090 FEFFFFEB 		bl	vListInsertEnd
 1493              	.LVL149:
1838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 1494              		.loc 1 1838 0
 1495 0094 003096E5 		ldr	r3, [r6]
 1496 0098 2C2094E5 		ldr	r2, [r4, #44]
 1497 009c 2C3093E5 		ldr	r3, [r3, #44]
 1498 00a0 030052E1 		cmp	r2, r3
 1499 00a4 0000003A 		bcc	.L142
1843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 1500              		.loc 1 1843 0
 1501              		.syntax divided
 1502              	@ 1843 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 1503 00a8 000000EF 		SWI 0
 1504              	@ 0 "" 2
 1505              		.arm
 1506              		.syntax unified
 1507              	.L142:
1861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1508              		.loc 1 1861 0
 1509 00ac 7040BDE8 		pop	{r4, r5, r6, lr}
 1510              		.cfi_restore 14
 1511              		.cfi_restore 6
 1512              		.cfi_restore 5
 1513              		.cfi_restore 4
 1514              		.cfi_def_cfa_offset 0
 1515              	.LVL150:
1855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 1516              		.loc 1 1855 0
 1517 00b0 FEFFFFEA 		b	vPortExitCritical
 1518              	.LVL151:
 1519              	.L149:
 1520              		.align	2
 1521              	.L148:
 1522 00b4 28000000 		.word	Unity+40
 1523 00b8 00000000 		.word	.LANCHOR1
 1524 00bc 00000000 		.word	.LANCHOR7
 1525 00c0 00000000 		.word	.LANCHOR5
 1526 00c4 00000000 		.word	.LANCHOR12
 1527 00c8 00000000 		.word	.LANCHOR2
 1528              		.cfi_endproc
 1529              	.LFE14:
 1531              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1532              		.align	2
 1533              		.global	xTaskResumeFromISR
 1534              		.syntax unified
 1535              		.arm
 1536              		.fpu neon
 1538              	xTaskResumeFromISR:
 1539              	.LFB15:
1870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1540              		.loc 1 1870 0
 1541              		.cfi_startproc
 1542              		@ args = 0, pretend = 0, frame = 0
 1543              		@ frame_needed = 0, uses_anonymous_args = 0
 1544              	.LVL152:
 1545 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1546              		.cfi_def_cfa_offset 24
 1547              		.cfi_offset 4, -24
 1548              		.cfi_offset 5, -20
 1549              		.cfi_offset 6, -16
 1550              		.cfi_offset 7, -12
 1551              		.cfi_offset 8, -8
 1552              		.cfi_offset 14, -4
1875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1553              		.loc 1 1875 0
 1554 0004 005050E2 		subs	r5, r0, #0
 1555 0008 0200001A 		bne	.L151
1875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1556              		.loc 1 1875 0 is_stmt 0 discriminator 1
 1557 000c 0110A0E3 		mov	r1, #1
 1558 0010 C0009FE5 		ldr	r0, .L161
 1559              	.LVL153:
 1560 0014 FEFFFFEB 		bl	longjmp
 1561              	.LVL154:
 1562              	.L151:
1893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1563              		.loc 1 1893 0 is_stmt 1
 1564 0018 FEFFFFEB 		bl	vPortValidateInterruptPriority
 1565              	.LVL155:
1895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1566              		.loc 1 1895 0
 1567 001c FEFFFFEB 		bl	ulPortSetInterruptMask
 1568              	.LVL156:
 1569              	.LBB47:
 1570              	.LBB48:
1781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1571              		.loc 1 1781 0
 1572 0020 142095E5 		ldr	r2, [r5, #20]
 1573              	.LBE48:
 1574              	.LBE47:
1895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1575              		.loc 1 1895 0
 1576 0024 0070A0E1 		mov	r7, r0
 1577              	.LVL157:
 1578              	.LBB50:
 1579              	.LBB49:
1781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1580              		.loc 1 1781 0
 1581 0028 AC309FE5 		ldr	r3, .L161+4
 1582 002c 030052E1 		cmp	r2, r3
 1583 0030 2600001A 		bne	.L157
1784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 1584              		.loc 1 1784 0
 1585 0034 283095E5 		ldr	r3, [r5, #40]
 1586 0038 A0009FE5 		ldr	r0, .L161+8
 1587              	.LVL158:
1788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1588              		.loc 1 1788 0
 1589 003c 004053E0 		subs	r4, r3, r0
 1590 0040 0140A013 		movne	r4, #1
 1591 0044 000053E3 		cmp	r3, #0
 1592 0048 0040A013 		movne	r4, #0
 1593 004c 000054E3 		cmp	r4, #0
 1594 0050 1800001A 		bne	.L153
 1595              	.LVL159:
 1596              	.L152:
 1597              	.LBE49:
 1598              	.LBE50:
1931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1599              		.loc 1 1931 0
 1600 0054 0700A0E1 		mov	r0, r7
 1601 0058 FEFFFFEB 		bl	vPortClearInterruptMask
 1602              	.LVL160:
1934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1603              		.loc 1 1934 0
 1604 005c 0400A0E1 		mov	r0, r4
 1605 0060 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1606              	.LVL161:
 1607              	.L155:
1906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 1608              		.loc 1 1906 0
 1609 0064 78309FE5 		ldr	r3, .L161+12
1915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1610              		.loc 1 1915 0
 1611 0068 046085E2 		add	r6, r5, #4
1906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 1612              		.loc 1 1906 0
 1613 006c 2C4095E5 		ldr	r4, [r5, #44]
1915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1614              		.loc 1 1915 0
 1615 0070 0600A0E1 		mov	r0, r6
1906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 1616              		.loc 1 1906 0
 1617 0074 003093E5 		ldr	r3, [r3]
 1618 0078 2C3093E5 		ldr	r3, [r3, #44]
 1619 007c 030054E1 		cmp	r4, r3
 1620 0080 0040A033 		movcc	r4, #0
 1621 0084 0140A023 		movcs	r4, #1
 1622              	.LVL162:
1915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1623              		.loc 1 1915 0
 1624 0088 FEFFFFEB 		bl	uxListRemove
 1625              	.LVL163:
1916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 1626              		.loc 1 1916 0
 1627 008c 54209FE5 		ldr	r2, .L161+16
 1628 0090 1400A0E3 		mov	r0, #20
 1629 0094 2C3095E5 		ldr	r3, [r5, #44]
 1630 0098 001092E5 		ldr	r1, [r2]
 1631 009c 010053E1 		cmp	r3, r1
 1632 00a0 0610A0E1 		mov	r1, r6
 1633 00a4 00308285 		strhi	r3, [r2]
 1634 00a8 3C209FE5 		ldr	r2, .L161+20
 1635 00ac 902320E0 		mla	r0, r0, r3, r2
 1636 00b0 FEFFFFEB 		bl	vListInsertEnd
 1637              	.LVL164:
 1638 00b4 E6FFFFEA 		b	.L152
 1639              	.LVL165:
 1640              	.L153:
1902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 1641              		.loc 1 1902 0
 1642 00b8 30309FE5 		ldr	r3, .L161+24
 1643 00bc 003093E5 		ldr	r3, [r3]
 1644 00c0 000053E3 		cmp	r3, #0
 1645 00c4 E6FFFF0A 		beq	.L155
1923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 1646              		.loc 1 1923 0
 1647 00c8 181085E2 		add	r1, r5, #24
 1648 00cc FEFFFFEB 		bl	vListInsertEnd
 1649              	.LVL166:
 1650              	.L157:
1871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1651              		.loc 1 1871 0
 1652 00d0 0040A0E3 		mov	r4, #0
 1653 00d4 DEFFFFEA 		b	.L152
 1654              	.L162:
 1655              		.align	2
 1656              	.L161:
 1657 00d8 28000000 		.word	Unity+40
 1658 00dc 00000000 		.word	.LANCHOR7
 1659 00e0 00000000 		.word	.LANCHOR5
 1660 00e4 00000000 		.word	.LANCHOR1
 1661 00e8 00000000 		.word	.LANCHOR12
 1662 00ec 00000000 		.word	.LANCHOR2
 1663 00f0 00000000 		.word	.LANCHOR16
 1664              		.cfi_endproc
 1665              	.LFE15:
 1667              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1668              		.align	2
 1669              		.global	vTaskStartScheduler
 1670              		.syntax unified
 1671              		.arm
 1672              		.fpu neon
 1674              	vTaskStartScheduler:
 1675              	.LFB16:
1940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** BaseType_t xReturn;
 1676              		.loc 1 1940 0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 16
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 1680 0000 30402DE9 		push	{r4, r5, lr}
 1681              		.cfi_def_cfa_offset 12
 1682              		.cfi_offset 4, -12
 1683              		.cfi_offset 5, -8
 1684              		.cfi_offset 14, -4
 1685 0004 24D04DE2 		sub	sp, sp, #36
 1686              		.cfi_def_cfa_offset 48
 1687              	.LBB51:
1946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1688              		.loc 1 1946 0
 1689 0008 0040A0E3 		mov	r4, #0
1952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1690              		.loc 1 1952 0
 1691 000c 1C208DE2 		add	r2, sp, #28
 1692 0010 18108DE2 		add	r1, sp, #24
 1693 0014 14008DE2 		add	r0, sp, #20
1946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1694              		.loc 1 1946 0
 1695 0018 14408DE5 		str	r4, [sp, #20]
1947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1696              		.loc 1 1947 0
 1697 001c 18408DE5 		str	r4, [sp, #24]
1952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1698              		.loc 1 1952 0
 1699 0020 FEFFFFEB 		bl	vApplicationGetIdleTaskMemory
 1700              	.LVL167:
1953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 												configIDLE_TASK_NAME,
 1701              		.loc 1 1953 0
 1702 0024 14309DE5 		ldr	r3, [sp, #20]
 1703 0028 00408DE5 		str	r4, [sp]
 1704 002c 1C209DE5 		ldr	r2, [sp, #28]
 1705 0030 08308DE5 		str	r3, [sp, #8]
 1706 0034 18309DE5 		ldr	r3, [sp, #24]
 1707 0038 6C109FE5 		ldr	r1, .L171
 1708 003c 6C009FE5 		ldr	r0, .L171+4
 1709 0040 04308DE5 		str	r3, [sp, #4]
 1710 0044 0430A0E1 		mov	r3, r4
 1711 0048 FEFFFFEB 		bl	xTaskCreateStatic
 1712              	.LVL168:
1961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1713              		.loc 1 1961 0
 1714 004c 040050E1 		cmp	r0, r4
 1715 0050 0C00001A 		bne	.L164
 1716              	.L163:
 1717              	.LBE51:
2058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 1718              		.loc 1 2058 0
 1719 0054 24D08DE2 		add	sp, sp, #36
 1720              		.cfi_remember_state
 1721              		.cfi_def_cfa_offset 12
 1722              		@ sp needed
 1723 0058 3080BDE8 		pop	{r4, r5, pc}
 1724              	.LVL169:
 1725              	.L167:
 1726              		.cfi_restore_state
2011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1727              		.loc 1 2011 0
 1728 005c FEFFFFEB 		bl	ulPortSetInterruptMask
 1729              	.LVL170:
2021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xSchedulerRunning = pdTRUE;
 1730              		.loc 1 2021 0
 1731 0060 4C309FE5 		ldr	r3, .L171+8
 1732 0064 0020E0E3 		mvn	r2, #0
 1733 0068 002083E5 		str	r2, [r3]
2022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1734              		.loc 1 2022 0
 1735 006c 44309FE5 		ldr	r3, .L171+12
 1736 0070 005083E5 		str	r5, [r3]
2023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1737              		.loc 1 2023 0
 1738 0074 40309FE5 		ldr	r3, .L171+16
 1739 0078 004083E5 		str	r4, [r3]
2031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1740              		.loc 1 2031 0
 1741 007c FEFFFFEB 		bl	vInitialiseRunTimeStats
 1742              	.LVL171:
2037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 1743              		.loc 1 2037 0
 1744 0080 FEFFFFEB 		bl	xPortStartScheduler
 1745              	.LVL172:
 1746 0084 F2FFFFEA 		b	.L163
 1747              	.LVL173:
 1748              	.L164:
1986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 1749              		.loc 1 1986 0
 1750 0088 FEFFFFEB 		bl	xTimerCreateTimerTask
 1751              	.LVL174:
1995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 1752              		.loc 1 1995 0
 1753 008c 010050E3 		cmp	r0, #1
1986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 1754              		.loc 1 1986 0
 1755 0090 0050A0E1 		mov	r5, r0
 1756              	.LVL175:
1995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 1757              		.loc 1 1995 0
 1758 0094 F0FFFF0A 		beq	.L167
2052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 1759              		.loc 1 2052 0
 1760 0098 010075E3 		cmn	r5, #1
 1761 009c ECFFFF1A 		bne	.L163
2052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 1762              		.loc 1 2052 0 is_stmt 0 discriminator 1
 1763 00a0 0110A0E3 		mov	r1, #1
 1764 00a4 14009FE5 		ldr	r0, .L171+20
 1765              	.LVL176:
 1766 00a8 FEFFFFEB 		bl	longjmp
 1767              	.LVL177:
 1768              	.L172:
 1769              		.align	2
 1770              	.L171:
 1771 00ac 00000000 		.word	.LC0
 1772 00b0 00000000 		.word	prvIdleTask
 1773 00b4 00000000 		.word	.LANCHOR13
 1774 00b8 00000000 		.word	.LANCHOR10
 1775 00bc 00000000 		.word	.LANCHOR14
 1776 00c0 28000000 		.word	Unity+40
 1777              		.cfi_endproc
 1778              	.LFE16:
 1780              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1781              		.align	2
 1782              		.global	vTaskEndScheduler
 1783              		.syntax unified
 1784              		.arm
 1785              		.fpu neon
 1787              	vTaskEndScheduler:
 1788              	.LFB17:
2062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1789              		.loc 1 2062 0 is_stmt 1
 1790              		.cfi_startproc
 1791              		@ args = 0, pretend = 0, frame = 0
 1792              		@ frame_needed = 0, uses_anonymous_args = 0
 1793 0000 10402DE9 		push	{r4, lr}
 1794              		.cfi_def_cfa_offset 8
 1795              		.cfi_offset 4, -8
 1796              		.cfi_offset 14, -4
2066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	xSchedulerRunning = pdFALSE;
 1797              		.loc 1 2066 0
 1798 0004 FEFFFFEB 		bl	ulPortSetInterruptMask
 1799              	.LVL178:
2067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vPortEndScheduler();
 1800              		.loc 1 2067 0
 1801 0008 0020A0E3 		mov	r2, #0
 1802 000c 08309FE5 		ldr	r3, .L175
2069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*----------------------------------------------------------*/
 1803              		.loc 1 2069 0
 1804 0010 1040BDE8 		pop	{r4, lr}
 1805              		.cfi_restore 14
 1806              		.cfi_restore 4
 1807              		.cfi_def_cfa_offset 0
2067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	vPortEndScheduler();
 1808              		.loc 1 2067 0
 1809 0014 002083E5 		str	r2, [r3]
2068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 1810              		.loc 1 2068 0
 1811 0018 FEFFFFEA 		b	vPortEndScheduler
 1812              	.LVL179:
 1813              	.L176:
 1814              		.align	2
 1815              	.L175:
 1816 001c 00000000 		.word	.LANCHOR10
 1817              		.cfi_endproc
 1818              	.LFE17:
 1820              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1821              		.align	2
 1822              		.global	vTaskSuspendAll
 1823              		.syntax unified
 1824              		.arm
 1825              		.fpu neon
 1827              	vTaskSuspendAll:
 1828              	.LFB18:
2073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* A critical section is not required as the variable is of type
 1829              		.loc 1 2073 0
 1830              		.cfi_startproc
 1831              		@ args = 0, pretend = 0, frame = 0
 1832              		@ frame_needed = 0, uses_anonymous_args = 0
 1833              		@ link register save eliminated.
2078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 1834              		.loc 1 2078 0
 1835 0000 0C209FE5 		ldr	r2, .L178
 1836 0004 003092E5 		ldr	r3, [r2]
 1837 0008 013083E2 		add	r3, r3, #1
 1838 000c 003082E5 		str	r3, [r2]
 1839 0010 1EFF2FE1 		bx	lr
 1840              	.L179:
 1841              		.align	2
 1842              	.L178:
 1843 0014 00000000 		.word	.LANCHOR16
 1844              		.cfi_endproc
 1845              	.LFE18:
 1847              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1848              		.align	2
 1849              		.global	xTaskGetTickCount
 1850              		.syntax unified
 1851              		.arm
 1852              		.fpu neon
 1854              	xTaskGetTickCount:
 1855              	.LFB20:
2256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t xTicks;
 1856              		.loc 1 2256 0
 1857              		.cfi_startproc
 1858              		@ args = 0, pretend = 0, frame = 0
 1859              		@ frame_needed = 0, uses_anonymous_args = 0
 1860              		@ link register save eliminated.
2262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 1861              		.loc 1 2262 0
 1862 0000 04309FE5 		ldr	r3, .L181
 1863 0004 000093E5 		ldr	r0, [r3]
 1864              	.LVL180:
2267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 1865              		.loc 1 2267 0
 1866 0008 1EFF2FE1 		bx	lr
 1867              	.L182:
 1868              		.align	2
 1869              	.L181:
 1870 000c 00000000 		.word	.LANCHOR14
 1871              		.cfi_endproc
 1872              	.LFE20:
 1874              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1875              		.align	2
 1876              		.global	xTaskGetTickCountFromISR
 1877              		.syntax unified
 1878              		.arm
 1879              		.fpu neon
 1881              	xTaskGetTickCountFromISR:
 1882              	.LFB21:
2271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t xReturn;
 1883              		.loc 1 2271 0
 1884              		.cfi_startproc
 1885              		@ args = 0, pretend = 0, frame = 0
 1886              		@ frame_needed = 0, uses_anonymous_args = 0
 1887 0000 10402DE9 		push	{r4, lr}
 1888              		.cfi_def_cfa_offset 8
 1889              		.cfi_offset 4, -8
 1890              		.cfi_offset 14, -4
2289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 1891              		.loc 1 2289 0
 1892 0004 FEFFFFEB 		bl	vPortValidateInterruptPriority
 1893              	.LVL181:
2293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 1894              		.loc 1 2293 0
 1895 0008 04309FE5 		ldr	r3, .L185
 1896 000c 000093E5 		ldr	r0, [r3]
 1897              	.LVL182:
2298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 1898              		.loc 1 2298 0
 1899 0010 1080BDE8 		pop	{r4, pc}
 1900              	.L186:
 1901              		.align	2
 1902              	.L185:
 1903 0014 00000000 		.word	.LANCHOR14
 1904              		.cfi_endproc
 1905              	.LFE21:
 1907              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1908              		.align	2
 1909              		.global	uxTaskGetNumberOfTasks
 1910              		.syntax unified
 1911              		.arm
 1912              		.fpu neon
 1914              	uxTaskGetNumberOfTasks:
 1915              	.LFB22:
2302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* A critical section is not required because the variables are of type
 1916              		.loc 1 2302 0
 1917              		.cfi_startproc
 1918              		@ args = 0, pretend = 0, frame = 0
 1919              		@ frame_needed = 0, uses_anonymous_args = 0
 1920              		@ link register save eliminated.
2305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 1921              		.loc 1 2305 0
 1922 0000 04309FE5 		ldr	r3, .L188
 1923 0004 000093E5 		ldr	r0, [r3]
2306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 1924              		.loc 1 2306 0
 1925 0008 1EFF2FE1 		bx	lr
 1926              	.L189:
 1927              		.align	2
 1928              	.L188:
 1929 000c 00000000 		.word	.LANCHOR0
 1930              		.cfi_endproc
 1931              	.LFE22:
 1933              		.section	.text.pcTaskGetName,"ax",%progbits
 1934              		.align	2
 1935              		.global	pcTaskGetName
 1936              		.syntax unified
 1937              		.arm
 1938              		.fpu neon
 1940              	pcTaskGetName:
 1941              	.LFB23:
2310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxTCB;
 1942              		.loc 1 2310 0
 1943              		.cfi_startproc
 1944              		@ args = 0, pretend = 0, frame = 0
 1945              		@ frame_needed = 0, uses_anonymous_args = 0
 1946              	.LVL183:
2315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxTCB );
 1947              		.loc 1 2315 0
 1948 0000 000050E3 		cmp	r0, #0
 1949 0004 0700001A 		bne	.L191
2315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxTCB );
 1950              		.loc 1 2315 0 is_stmt 0 discriminator 1
 1951 0008 20309FE5 		ldr	r3, .L195
 1952 000c 000093E5 		ldr	r0, [r3]
 1953              	.LVL184:
2316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1954              		.loc 1 2316 0 is_stmt 1 discriminator 1
 1955 0010 000050E3 		cmp	r0, #0
 1956 0014 0300001A 		bne	.L191
2310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxTCB;
 1957              		.loc 1 2310 0 discriminator 1
 1958 0018 10402DE9 		push	{r4, lr}
 1959              		.cfi_def_cfa_offset 8
 1960              		.cfi_offset 4, -8
 1961              		.cfi_offset 14, -4
2316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1962              		.loc 1 2316 0 discriminator 1
 1963 001c 0110A0E3 		mov	r1, #1
 1964 0020 0C009FE5 		ldr	r0, .L195+4
 1965              	.LVL185:
 1966 0024 FEFFFFEB 		bl	longjmp
 1967              	.LVL186:
 1968              	.L191:
 1969              		.cfi_def_cfa_offset 0
 1970              		.cfi_restore 4
 1971              		.cfi_restore 14
2318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 1972              		.loc 1 2318 0
 1973 0028 340080E2 		add	r0, r0, #52
 1974              	.LVL187:
 1975 002c 1EFF2FE1 		bx	lr
 1976              	.L196:
 1977              		.align	2
 1978              	.L195:
 1979 0030 00000000 		.word	.LANCHOR1
 1980 0034 28000000 		.word	Unity+40
 1981              		.cfi_endproc
 1982              	.LFE23:
 1984              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1985              		.align	2
 1986              		.global	xTaskIncrementTick
 1987              		.syntax unified
 1988              		.arm
 1989              		.fpu neon
 1991              	xTaskIncrementTick:
 1992              	.LFB26:
2637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t * pxTCB;
 1993              		.loc 1 2637 0
 1994              		.cfi_startproc
 1995              		@ args = 0, pretend = 0, frame = 0
 1996              		@ frame_needed = 0, uses_anonymous_args = 0
 1997              	.LVL188:
 1998 0000 F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1999              		.cfi_def_cfa_offset 40
 2000              		.cfi_offset 3, -40
 2001              		.cfi_offset 4, -36
 2002              		.cfi_offset 5, -32
 2003              		.cfi_offset 6, -28
 2004              		.cfi_offset 7, -24
 2005              		.cfi_offset 8, -20
 2006              		.cfi_offset 9, -16
 2007              		.cfi_offset 10, -12
 2008              		.cfi_offset 11, -8
 2009              		.cfi_offset 14, -4
2646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 2010              		.loc 1 2646 0
 2011 0004 68319FE5 		ldr	r3, .L217
 2012 0008 003093E5 		ldr	r3, [r3]
 2013 000c 000053E3 		cmp	r3, #0
 2014 0010 5100001A 		bne	.L198
 2015              	.LBB52:
2650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2016              		.loc 1 2650 0
 2017 0014 5C319FE5 		ldr	r3, .L217+4
 2018 0018 004093E5 		ldr	r4, [r3]
 2019 001c 014084E2 		add	r4, r4, #1
 2020              	.LVL189:
2656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2021              		.loc 1 2656 0
 2022 0020 000054E3 		cmp	r4, #0
2654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2023              		.loc 1 2654 0
 2024 0024 004083E5 		str	r4, [r3]
2656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2025              		.loc 1 2656 0
 2026 0028 1100001A 		bne	.L199
 2027              	.LBB53:
2658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 2028              		.loc 1 2658 0
 2029 002c 48319FE5 		ldr	r3, .L217+8
 2030 0030 002093E5 		ldr	r2, [r3]
 2031 0034 002092E5 		ldr	r2, [r2]
 2032 0038 000052E3 		cmp	r2, #0
 2033 003c 0200000A 		beq	.L200
2658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 2034              		.loc 1 2658 0 is_stmt 0 discriminator 1
 2035 0040 0110A0E3 		mov	r1, #1
 2036 0044 34019FE5 		ldr	r0, .L217+12
 2037 0048 FEFFFFEB 		bl	longjmp
 2038              	.LVL190:
 2039              	.L200:
2658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 2040              		.loc 1 2658 0 discriminator 2
 2041 004c 30219FE5 		ldr	r2, .L217+16
 2042 0050 001093E5 		ldr	r1, [r3]
 2043              	.LVL191:
 2044 0054 000092E5 		ldr	r0, [r2]
 2045 0058 000083E5 		str	r0, [r3]
 2046 005c 001082E5 		str	r1, [r2]
 2047 0060 20219FE5 		ldr	r2, .L217+20
 2048 0064 003092E5 		ldr	r3, [r2]
 2049 0068 013083E2 		add	r3, r3, #1
 2050 006c 003082E5 		str	r3, [r2]
 2051 0070 FEFFFFEB 		bl	prvResetNextTaskUnblockTime
 2052              	.LVL192:
 2053              	.L199:
 2054              	.LBE53:
2669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2055              		.loc 1 2669 0 is_stmt 1
 2056 0074 10519FE5 		ldr	r5, .L217+24
 2057 0078 00B0A0E3 		mov	fp, #0
 2058 007c 0C719FE5 		ldr	r7, .L217+28
 2059 0080 003095E5 		ldr	r3, [r5]
 2060 0084 030054E1 		cmp	r4, r3
 2061 0088 0700003A 		bcc	.L201
2673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2062              		.loc 1 2673 0
 2063 008c E8909FE5 		ldr	r9, .L217+8
2723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2064              		.loc 1 2723 0
 2065 0090 FCA09FE5 		ldr	r10, .L217+32
 2066              	.LVL193:
 2067              	.L202:
2673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2068              		.loc 1 2673 0
 2069 0094 002099E5 		ldr	r2, [r9]
 2070 0098 002092E5 		ldr	r2, [r2]
 2071 009c 000052E3 		cmp	r2, #0
 2072 00a0 0F00001A 		bne	.L203
2680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
 2073              		.loc 1 2680 0
 2074 00a4 0020E0E3 		mvn	r2, #0
 2075 00a8 002085E5 		str	r2, [r5]
 2076              	.LVL194:
 2077              	.L201:
2752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2078              		.loc 1 2752 0
 2079 00ac 002097E5 		ldr	r2, [r7]
 2080 00b0 E0309FE5 		ldr	r3, .L217+36
 2081 00b4 2C1092E5 		ldr	r1, [r2, #44]
 2082 00b8 1420A0E3 		mov	r2, #20
 2083 00bc 920102E0 		mul	r2, r2, r1
 2084 00c0 022093E7 		ldr	r2, [r3, r2]
2754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 2085              		.loc 1 2754 0
 2086 00c4 020052E3 		cmp	r2, #2
 2087 00c8 01B0A023 		movcs	fp, #1
 2088              	.LVL195:
 2089              	.L208:
 2090              	.LBE52:
2793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2091              		.loc 1 2793 0
 2092 00cc C8209FE5 		ldr	r2, .L217+40
 2093 00d0 002092E5 		ldr	r2, [r2]
2795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 2094              		.loc 1 2795 0
 2095 00d4 000052E3 		cmp	r2, #0
2805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 2096              		.loc 1 2805 0
 2097 00d8 0B00A001 		moveq	r0, fp
 2098 00dc 0100A013 		movne	r0, #1
 2099 00e0 F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2100              	.LVL196:
 2101              	.L203:
 2102              	.LBB54:
2689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2103              		.loc 1 2689 0
 2104 00e4 002099E5 		ldr	r2, [r9]
 2105 00e8 0C2092E5 		ldr	r2, [r2, #12]
 2106 00ec 0C6092E5 		ldr	r6, [r2, #12]
 2107              	.LVL197:
2690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2108              		.loc 1 2690 0
 2109 00f0 041096E5 		ldr	r1, [r6, #4]
 2110              	.LVL198:
2692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 2111              		.loc 1 2692 0
 2112 00f4 010054E1 		cmp	r4, r1
2699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2113              		.loc 1 2699 0
 2114 00f8 00108535 		strcc	r1, [r5]
2700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 2115              		.loc 1 2700 0
 2116 00fc EAFFFF3A 		bcc	.L201
 2117              	.L204:
2708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2118              		.loc 1 2708 0
 2119 0100 048086E2 		add	r8, r6, #4
 2120 0104 0800A0E1 		mov	r0, r8
 2121 0108 FEFFFFEB 		bl	uxListRemove
 2122              	.LVL199:
2712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 2123              		.loc 1 2712 0
 2124 010c 281096E5 		ldr	r1, [r6, #40]
 2125 0110 000051E3 		cmp	r1, #0
 2126 0114 0100000A 		beq	.L205
2714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 2127              		.loc 1 2714 0
 2128 0118 180086E2 		add	r0, r6, #24
 2129 011c FEFFFFEB 		bl	uxListRemove
 2130              	.LVL200:
 2131              	.L205:
2723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2132              		.loc 1 2723 0
 2133 0120 2C0096E5 		ldr	r0, [r6, #44]
 2134 0124 1430A0E3 		mov	r3, #20
 2135 0128 00109AE5 		ldr	r1, [r10]
 2136 012c 64209FE5 		ldr	r2, .L217+36
 2137 0130 010050E1 		cmp	r0, r1
 2138 0134 0810A0E1 		mov	r1, r8
 2139 0138 00008A85 		strhi	r0, [r10]
 2140 013c 932020E0 		mla	r0, r3, r0, r2
 2141 0140 FEFFFFEB 		bl	vListInsertEnd
 2142              	.LVL201:
2733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
 2143              		.loc 1 2733 0
 2144 0144 000097E5 		ldr	r0, [r7]
 2145 0148 2C1096E5 		ldr	r1, [r6, #44]
 2146 014c 2C2090E5 		ldr	r2, [r0, #44]
2735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
 2147              		.loc 1 2735 0
 2148 0150 020051E1 		cmp	r1, r2
 2149 0154 01B0A023 		movcs	fp, #1
 2150              	.LVL202:
 2151 0158 CDFFFFEA 		b	.L202
 2152              	.LVL203:
 2153              	.L198:
 2154              	.LBE54:
2780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2155              		.loc 1 2780 0
 2156 015c 3C209FE5 		ldr	r2, .L217+44
2640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2157              		.loc 1 2640 0
 2158 0160 00B0A0E3 		mov	fp, #0
2780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2159              		.loc 1 2780 0
 2160 0164 003092E5 		ldr	r3, [r2]
 2161 0168 013083E2 		add	r3, r3, #1
 2162 016c 003082E5 		str	r3, [r2]
 2163 0170 D5FFFFEA 		b	.L208
 2164              	.L218:
 2165              		.align	2
 2166              	.L217:
 2167 0174 00000000 		.word	.LANCHOR16
 2168 0178 00000000 		.word	.LANCHOR14
 2169 017c 00000000 		.word	.LANCHOR8
 2170 0180 28000000 		.word	Unity+40
 2171 0184 00000000 		.word	.LANCHOR9
 2172 0188 00000000 		.word	.LANCHOR17
 2173 018c 00000000 		.word	.LANCHOR13
 2174 0190 00000000 		.word	.LANCHOR1
 2175 0194 00000000 		.word	.LANCHOR12
 2176 0198 00000000 		.word	.LANCHOR2
 2177 019c 00000000 		.word	.LANCHOR19
 2178 01a0 00000000 		.word	.LANCHOR18
 2179              		.cfi_endproc
 2180              	.LFE26:
 2182              		.section	.text.xTaskResumeAll,"ax",%progbits
 2183              		.align	2
 2184              		.global	xTaskResumeAll
 2185              		.syntax unified
 2186              		.arm
 2187              		.fpu neon
 2189              	xTaskResumeAll:
 2190              	.LFB19:
2146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxTCB = NULL;
 2191              		.loc 1 2146 0
 2192              		.cfi_startproc
 2193              		@ args = 0, pretend = 0, frame = 0
 2194              		@ frame_needed = 0, uses_anonymous_args = 0
 2195              	.LVL204:
 2196 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 2197              		.cfi_def_cfa_offset 24
 2198              		.cfi_offset 4, -24
 2199              		.cfi_offset 5, -20
 2200              		.cfi_offset 6, -16
 2201              		.cfi_offset 7, -12
 2202              		.cfi_offset 8, -8
 2203              		.cfi_offset 14, -4
2152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2204              		.loc 1 2152 0
 2205 0004 24419FE5 		ldr	r4, .L249
 2206 0008 003094E5 		ldr	r3, [r4]
 2207 000c 000053E3 		cmp	r3, #0
 2208 0010 0200001A 		bne	.L220
2152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2209              		.loc 1 2152 0 is_stmt 0 discriminator 1
 2210 0014 0110A0E3 		mov	r1, #1
 2211 0018 14019FE5 		ldr	r0, .L249+4
 2212 001c FEFFFFEB 		bl	longjmp
 2213              	.LVL205:
 2214              	.L220:
2159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 2215              		.loc 1 2159 0 is_stmt 1
 2216 0020 FEFFFFEB 		bl	vPortEnterCritical
 2217              	.LVL206:
2161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2218              		.loc 1 2161 0
 2219 0024 003094E5 		ldr	r3, [r4]
 2220 0028 013043E2 		sub	r3, r3, #1
 2221 002c 003084E5 		str	r3, [r4]
2163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2222              		.loc 1 2163 0
 2223 0030 004094E5 		ldr	r4, [r4]
 2224 0034 000054E3 		cmp	r4, #0
 2225 0038 0300000A 		beq	.L221
 2226              	.LVL207:
 2227              	.L223:
2148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2228              		.loc 1 2148 0
 2229 003c 0040A0E3 		mov	r4, #0
 2230              	.LVL208:
 2231              	.L222:
2249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2232              		.loc 1 2249 0
 2233 0040 FEFFFFEB 		bl	vPortExitCritical
 2234              	.LVL209:
2252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 2235              		.loc 1 2252 0
 2236 0044 0400A0E1 		mov	r0, r4
 2237 0048 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 2238              	.LVL210:
 2239              	.L221:
2165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2240              		.loc 1 2165 0
 2241 004c E4309FE5 		ldr	r3, .L249+8
 2242 0050 003093E5 		ldr	r3, [r3]
 2243 0054 000053E3 		cmp	r3, #0
 2244 0058 F7FFFF0A 		beq	.L223
2169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2245              		.loc 1 2169 0
 2246 005c D8609FE5 		ldr	r6, .L249+12
2174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2247              		.loc 1 2174 0
 2248 0060 D8709FE5 		ldr	r7, .L249+16
 2249 0064 D8809FE5 		ldr	r8, .L249+20
 2250              	.LVL211:
 2251              	.L224:
2169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2252              		.loc 1 2169 0
 2253 0068 003096E5 		ldr	r3, [r6]
 2254 006c 000053E3 		cmp	r3, #0
 2255 0070 1600001A 		bne	.L227
2188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2256              		.loc 1 2188 0
 2257 0074 000054E3 		cmp	r4, #0
 2258 0078 0000000A 		beq	.L228
2196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 2259              		.loc 1 2196 0
 2260 007c FEFFFFEB 		bl	prvResetNextTaskUnblockTime
 2261              	.LVL212:
 2262              	.L228:
 2263              	.LBB55:
2204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2264              		.loc 1 2204 0
 2265 0080 C0309FE5 		ldr	r3, .L249+24
 2266 0084 004093E5 		ldr	r4, [r3]
 2267              	.LVL213:
 2268 0088 0350A0E1 		mov	r5, r3
2206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 2269              		.loc 1 2206 0
 2270 008c 000054E3 		cmp	r4, #0
 2271 0090 0700000A 		beq	.L229
2212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							}
 2272              		.loc 1 2212 0
 2273 0094 B0609FE5 		ldr	r6, .L249+28
 2274 0098 0170A0E3 		mov	r7, #1
 2275              	.L231:
2210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							{
 2276              		.loc 1 2210 0
 2277 009c FEFFFFEB 		bl	xTaskIncrementTick
 2278              	.LVL214:
 2279 00a0 000050E3 		cmp	r0, #0
2212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							}
 2280              		.loc 1 2212 0
 2281 00a4 00708615 		strne	r7, [r6]
2219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2282              		.loc 1 2219 0
 2283 00a8 014054E2 		subs	r4, r4, #1
 2284              	.LVL215:
 2285 00ac FAFFFF1A 		bne	.L231
2221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 2286              		.loc 1 2221 0
 2287 00b0 004085E5 		str	r4, [r5]
 2288              	.L229:
 2289              	.LBE55:
2229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2290              		.loc 1 2229 0
 2291 00b4 90309FE5 		ldr	r3, .L249+28
 2292 00b8 003093E5 		ldr	r3, [r3]
 2293 00bc 000053E3 		cmp	r3, #0
 2294 00c0 DDFFFF0A 		beq	.L223
 2295              	.LVL216:
2236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 2296              		.loc 1 2236 0
 2297              		.syntax divided
 2298              	@ 2236 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 2299 00c4 000000EF 		SWI 0
 2300              	@ 0 "" 2
2233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 2301              		.loc 1 2233 0
 2302              		.arm
 2303              		.syntax unified
 2304 00c8 0140A0E3 		mov	r4, #1
 2305              	.LVL217:
 2306 00cc DBFFFFEA 		b	.L222
 2307              	.LVL218:
 2308              	.L227:
2171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2309              		.loc 1 2171 0
 2310 00d0 0C3096E5 		ldr	r3, [r6, #12]
 2311 00d4 0C4093E5 		ldr	r4, [r3, #12]
 2312              	.LVL219:
2173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2313              		.loc 1 2173 0
 2314 00d8 045084E2 		add	r5, r4, #4
2172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2315              		.loc 1 2172 0
 2316 00dc 180084E2 		add	r0, r4, #24
 2317 00e0 FEFFFFEB 		bl	uxListRemove
 2318              	.LVL220:
2173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2319              		.loc 1 2173 0
 2320 00e4 0500A0E1 		mov	r0, r5
 2321 00e8 FEFFFFEB 		bl	uxListRemove
 2322              	.LVL221:
2174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2323              		.loc 1 2174 0
 2324 00ec 2C3094E5 		ldr	r3, [r4, #44]
 2325 00f0 1400A0E3 		mov	r0, #20
 2326 00f4 002097E5 		ldr	r2, [r7]
 2327 00f8 0510A0E1 		mov	r1, r5
 2328 00fc 020053E1 		cmp	r3, r2
 2329 0100 908320E0 		mla	r0, r0, r3, r8
 2330 0104 00308785 		strhi	r3, [r7]
 2331 0108 FEFFFFEB 		bl	vListInsertEnd
 2332              	.LVL222:
2178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 2333              		.loc 1 2178 0
 2334 010c 3C309FE5 		ldr	r3, .L249+32
 2335 0110 2C2094E5 		ldr	r2, [r4, #44]
 2336 0114 003093E5 		ldr	r3, [r3]
 2337 0118 2C3093E5 		ldr	r3, [r3, #44]
 2338 011c 030052E1 		cmp	r2, r3
2180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 2339              		.loc 1 2180 0
 2340 0120 24309F25 		ldrcs	r3, .L249+28
 2341 0124 0120A023 		movcs	r2, #1
 2342 0128 00208325 		strcs	r2, [r3]
 2343 012c CDFFFFEA 		b	.L224
 2344              	.L250:
 2345              		.align	2
 2346              	.L249:
 2347 0130 00000000 		.word	.LANCHOR16
 2348 0134 28000000 		.word	Unity+40
 2349 0138 00000000 		.word	.LANCHOR0
 2350 013c 00000000 		.word	.LANCHOR5
 2351 0140 00000000 		.word	.LANCHOR12
 2352 0144 00000000 		.word	.LANCHOR2
 2353 0148 00000000 		.word	.LANCHOR18
 2354 014c 00000000 		.word	.LANCHOR19
 2355 0150 00000000 		.word	.LANCHOR1
 2356              		.cfi_endproc
 2357              	.LFE19:
 2359              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2360              		.align	2
 2361              		.global	vTaskDelayUntil
 2362              		.syntax unified
 2363              		.arm
 2364              		.fpu neon
 2366              	vTaskDelayUntil:
 2367              	.LFB6:
1222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TickType_t xTimeToWake;
 2368              		.loc 1 1222 0
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 0
 2371              		@ frame_needed = 0, uses_anonymous_args = 0
 2372              	.LVL223:
 2373 0000 10402DE9 		push	{r4, lr}
 2374              		.cfi_def_cfa_offset 8
 2375              		.cfi_offset 4, -8
 2376              		.cfi_offset 14, -4
1226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2377              		.loc 1 1226 0
 2378 0004 004050E2 		subs	r4, r0, #0
 2379 0008 0200001A 		bne	.L252
 2380              	.L253:
1226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2381              		.loc 1 1226 0 is_stmt 0 discriminator 1
 2382 000c 0110A0E3 		mov	r1, #1
 2383              	.LVL224:
 2384 0010 8C009FE5 		ldr	r0, .L265
 2385              	.LVL225:
 2386 0014 FEFFFFEB 		bl	longjmp
 2387              	.LVL226:
 2388              	.L252:
1227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2389              		.loc 1 1227 0 is_stmt 1
 2390 0018 000051E3 		cmp	r1, #0
 2391 001c FAFFFF0A 		beq	.L253
1228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2392              		.loc 1 1228 0
 2393 0020 80309FE5 		ldr	r3, .L265+4
 2394 0024 003093E5 		ldr	r3, [r3]
 2395 0028 000053E3 		cmp	r3, #0
 2396 002c F6FFFF1A 		bne	.L253
1230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2397              		.loc 1 1230 0
 2398 0030 FEFFFFEB 		bl	vTaskSuspendAll
 2399              	.LVL227:
 2400              	.LBB56:
1234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2401              		.loc 1 1234 0
 2402 0034 70309FE5 		ldr	r3, .L265+8
1237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2403              		.loc 1 1237 0
 2404 0038 002094E5 		ldr	r2, [r4]
1234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2405              		.loc 1 1234 0
 2406 003c 000093E5 		ldr	r0, [r3]
 2407              	.LVL228:
1237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2408              		.loc 1 1237 0
 2409 0040 023081E0 		add	r3, r1, r2
 2410              	.LVL229:
1239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2411              		.loc 1 1239 0
 2412 0044 020050E1 		cmp	r0, r2
 2413 0048 0F00002A 		bcs	.L254
 2414              	.LBE56:
1224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2415              		.loc 1 1224 0 discriminator 1
 2416 004c 030052E1 		cmp	r2, r3
 2417 0050 0020A093 		movls	r2, #0
 2418 0054 0120A083 		movhi	r2, #1
 2419 0058 030050E1 		cmp	r0, r3
 2420 005c 0020A023 		movcs	r2, #0
 2421              	.L255:
 2422              	.LVL230:
 2423              	.LBB57:
1273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2424              		.loc 1 1273 0
 2425 0060 000052E3 		cmp	r2, #0
1271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2426              		.loc 1 1271 0
 2427 0064 003084E5 		str	r3, [r4]
1273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2428              		.loc 1 1273 0
 2429 0068 0200000A 		beq	.L256
 2430              	.LVL231:
1279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 2431              		.loc 1 1279 0
 2432 006c 0010A0E3 		mov	r1, #0
 2433              	.LVL232:
 2434 0070 000043E0 		sub	r0, r3, r0
 2435              	.LVL233:
 2436 0074 FEFFFFEB 		bl	prvAddCurrentTaskToDelayedList
 2437              	.LVL234:
 2438              	.L256:
 2439              	.LBE57:
1286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2440              		.loc 1 1286 0
 2441 0078 FEFFFFEB 		bl	xTaskResumeAll
 2442              	.LVL235:
1290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2443              		.loc 1 1290 0
 2444 007c 000050E3 		cmp	r0, #0
 2445 0080 1080BD18 		popne	{r4, pc}
1292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 2446              		.loc 1 1292 0
 2447              		.syntax divided
 2448              	@ 1292 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 2449 0084 000000EF 		SWI 0
 2450              	@ 0 "" 2
 2451              		.arm
 2452              		.syntax unified
 2453 0088 1080BDE8 		pop	{r4, pc}
 2454              	.LVL236:
 2455              	.L254:
 2456              	.LBB58:
1260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2457              		.loc 1 1260 0 discriminator 1
 2458 008c 030052E1 		cmp	r2, r3
 2459 0090 0020A093 		movls	r2, #0
 2460 0094 0120A083 		movhi	r2, #1
 2461              	.LBE58:
1224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2462              		.loc 1 1224 0 discriminator 1
 2463 0098 030050E1 		cmp	r0, r3
 2464 009c 01208233 		orrcc	r2, r2, #1
 2465              	.LBB59:
 2466 00a0 EEFFFFEA 		b	.L255
 2467              	.L266:
 2468              		.align	2
 2469              	.L265:
 2470 00a4 28000000 		.word	Unity+40
 2471 00a8 00000000 		.word	.LANCHOR16
 2472 00ac 00000000 		.word	.LANCHOR14
 2473              	.LBE59:
 2474              		.cfi_endproc
 2475              	.LFE6:
 2477              		.section	.text.vTaskDelay,"ax",%progbits
 2478              		.align	2
 2479              		.global	vTaskDelay
 2480              		.syntax unified
 2481              		.arm
 2482              		.fpu neon
 2484              	vTaskDelay:
 2485              	.LFB7:
1306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2486              		.loc 1 1306 0
 2487              		.cfi_startproc
 2488              		@ args = 0, pretend = 0, frame = 0
 2489              		@ frame_needed = 0, uses_anonymous_args = 0
 2490              	.LVL237:
1310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2491              		.loc 1 1310 0
 2492 0000 000050E3 		cmp	r0, #0
 2493 0004 0300001A 		bne	.L268
 2494              	.LVL238:
1337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 2495              		.loc 1 1337 0
 2496              		.syntax divided
 2497              	@ 1337 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 2498 0008 000000EF 		SWI 0
 2499              	@ 0 "" 2
 2500              		.arm
 2501              		.syntax unified
 2502 000c 1EFF2FE1 		bx	lr
 2503              	.LVL239:
 2504              	.L271:
 2505              		.cfi_def_cfa_offset 8
 2506              		.cfi_offset 4, -8
 2507              		.cfi_offset 14, -4
 2508              		.syntax divided
 2509              	@ 1337 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 2510 0010 000000EF 		SWI 0
 2511              	@ 0 "" 2
 2512              		.arm
 2513              		.syntax unified
 2514 0014 1080BDE8 		pop	{r4, pc}
 2515              	.LVL240:
 2516              	.L268:
 2517              		.cfi_def_cfa_offset 0
 2518              		.cfi_restore 4
 2519              		.cfi_restore 14
1312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vTaskSuspendAll();
 2520              		.loc 1 1312 0
 2521 0018 30309FE5 		ldr	r3, .L278
1306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2522              		.loc 1 1306 0
 2523 001c 10402DE9 		push	{r4, lr}
 2524              		.cfi_def_cfa_offset 8
 2525              		.cfi_offset 4, -8
 2526              		.cfi_offset 14, -4
1312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vTaskSuspendAll();
 2527              		.loc 1 1312 0
 2528 0020 001093E5 		ldr	r1, [r3]
 2529 0024 000051E3 		cmp	r1, #0
 2530 0028 0200000A 		beq	.L270
1312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vTaskSuspendAll();
 2531              		.loc 1 1312 0 is_stmt 0 discriminator 1
 2532 002c 0110A0E3 		mov	r1, #1
 2533 0030 1C009FE5 		ldr	r0, .L278+4
 2534              	.LVL241:
 2535 0034 FEFFFFEB 		bl	longjmp
 2536              	.LVL242:
 2537              	.L270:
1313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2538              		.loc 1 1313 0 is_stmt 1
 2539 0038 FEFFFFEB 		bl	vTaskSuspendAll
 2540              	.LVL243:
1324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 2541              		.loc 1 1324 0
 2542 003c FEFFFFEB 		bl	prvAddCurrentTaskToDelayedList
 2543              	.LVL244:
1326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 2544              		.loc 1 1326 0
 2545 0040 FEFFFFEB 		bl	xTaskResumeAll
 2546              	.LVL245:
1335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2547              		.loc 1 1335 0
 2548 0044 000050E3 		cmp	r0, #0
 2549 0048 F0FFFF0A 		beq	.L271
 2550 004c 1080BDE8 		pop	{r4, pc}
 2551              	.L279:
 2552              		.align	2
 2553              	.L278:
 2554 0050 00000000 		.word	.LANCHOR16
 2555 0054 28000000 		.word	Unity+40
 2556              		.cfi_endproc
 2557              	.LFE7:
 2559              		.section	.text.xTaskAbortDelay,"ax",%progbits
 2560              		.align	2
 2561              		.global	xTaskAbortDelay
 2562              		.syntax unified
 2563              		.arm
 2564              		.fpu neon
 2566              	xTaskAbortDelay:
 2567              	.LFB25:
2563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB = xTask;
 2568              		.loc 1 2563 0
 2569              		.cfi_startproc
 2570              		@ args = 0, pretend = 0, frame = 0
 2571              		@ frame_needed = 0, uses_anonymous_args = 0
 2572              	.LVL246:
 2573 0000 70402DE9 		push	{r4, r5, r6, lr}
 2574              		.cfi_def_cfa_offset 16
 2575              		.cfi_offset 4, -16
 2576              		.cfi_offset 5, -12
 2577              		.cfi_offset 6, -8
 2578              		.cfi_offset 14, -4
2567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2579              		.loc 1 2567 0
 2580 0004 004050E2 		subs	r4, r0, #0
 2581 0008 0200001A 		bne	.L281
2567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2582              		.loc 1 2567 0 is_stmt 0 discriminator 1
 2583 000c 0110A0E3 		mov	r1, #1
 2584 0010 9C009FE5 		ldr	r0, .L291
 2585              	.LVL247:
 2586 0014 FEFFFFEB 		bl	longjmp
 2587              	.LVL248:
 2588              	.L281:
2569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2589              		.loc 1 2569 0 is_stmt 1
 2590 0018 FEFFFFEB 		bl	vTaskSuspendAll
 2591              	.LVL249:
2573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2592              		.loc 1 2573 0
 2593 001c 0400A0E1 		mov	r0, r4
 2594              	.LVL250:
 2595 0020 FEFFFFEB 		bl	eTaskGetState
 2596              	.LVL251:
 2597 0024 020050E3 		cmp	r0, #2
2625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 2598              		.loc 1 2625 0
 2599 0028 0040A013 		movne	r4, #0
 2600              	.LVL252:
2573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2601              		.loc 1 2573 0
 2602 002c 1D00001A 		bne	.L282
 2603              	.LVL253:
2580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2604              		.loc 1 2580 0
 2605 0030 045084E2 		add	r5, r4, #4
 2606 0034 0500A0E1 		mov	r0, r5
 2607 0038 FEFFFFEB 		bl	uxListRemove
 2608              	.LVL254:
2586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2609              		.loc 1 2586 0
 2610 003c FEFFFFEB 		bl	vPortEnterCritical
 2611              	.LVL255:
2588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 2612              		.loc 1 2588 0
 2613 0040 283094E5 		ldr	r3, [r4, #40]
 2614 0044 000053E3 		cmp	r3, #0
 2615 0048 0300000A 		beq	.L283
2590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
 2616              		.loc 1 2590 0
 2617 004c 180084E2 		add	r0, r4, #24
 2618 0050 FEFFFFEB 		bl	uxListRemove
 2619              	.LVL256:
2591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 2620              		.loc 1 2591 0
 2621 0054 0130A0E3 		mov	r3, #1
 2622 0058 7630C4E5 		strb	r3, [r4, #118]
 2623              	.L283:
2598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2624              		.loc 1 2598 0
 2625 005c FEFFFFEB 		bl	vPortExitCritical
 2626              	.LVL257:
2601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2627              		.loc 1 2601 0
 2628 0060 50209FE5 		ldr	r2, .L291+4
 2629 0064 1400A0E3 		mov	r0, #20
 2630 0068 2C3094E5 		ldr	r3, [r4, #44]
 2631 006c 001092E5 		ldr	r1, [r2]
 2632 0070 010053E1 		cmp	r3, r1
 2633 0074 0510A0E1 		mov	r1, r5
 2634 0078 00308285 		strhi	r3, [r2]
 2635 007c 38209FE5 		ldr	r2, .L291+8
 2636 0080 902320E0 		mla	r0, r0, r3, r2
 2637 0084 FEFFFFEB 		bl	vListInsertEnd
 2638              	.LVL258:
2610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 2639              		.loc 1 2610 0
 2640 0088 30309FE5 		ldr	r3, .L291+12
 2641 008c 2C2094E5 		ldr	r2, [r4, #44]
 2642 0090 0140A0E3 		mov	r4, #1
 2643 0094 003093E5 		ldr	r3, [r3]
 2644 0098 2C3093E5 		ldr	r3, [r3, #44]
 2645 009c 030052E1 		cmp	r2, r3
2614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 2646              		.loc 1 2614 0
 2647 00a0 1C309F85 		ldrhi	r3, .L291+16
 2648 00a4 00408385 		strhi	r4, [r3]
 2649              	.LVL259:
 2650              	.L282:
2628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2651              		.loc 1 2628 0
 2652 00a8 FEFFFFEB 		bl	xTaskResumeAll
 2653              	.LVL260:
2631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2654              		.loc 1 2631 0
 2655 00ac 0400A0E1 		mov	r0, r4
 2656 00b0 7080BDE8 		pop	{r4, r5, r6, pc}
 2657              	.L292:
 2658              		.align	2
 2659              	.L291:
 2660 00b4 28000000 		.word	Unity+40
 2661 00b8 00000000 		.word	.LANCHOR12
 2662 00bc 00000000 		.word	.LANCHOR2
 2663 00c0 00000000 		.word	.LANCHOR1
 2664 00c4 00000000 		.word	.LANCHOR19
 2665              		.cfi_endproc
 2666              	.LFE25:
 2668              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2669              		.align	2
 2670              		.global	vTaskSwitchContext
 2671              		.syntax unified
 2672              		.arm
 2673              		.fpu neon
 2675              	vTaskSwitchContext:
 2676              	.LFB27:
2901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2677              		.loc 1 2901 0
 2678              		.cfi_startproc
 2679              		@ args = 0, pretend = 0, frame = 0
 2680              		@ frame_needed = 0, uses_anonymous_args = 0
2902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 2681              		.loc 1 2902 0
 2682 0000 1C319FE5 		ldr	r3, .L306
 2683 0004 002093E5 		ldr	r2, [r3]
 2684 0008 18319FE5 		ldr	r3, .L306+4
 2685 000c 000052E3 		cmp	r2, #0
 2686 0010 0200000A 		beq	.L294
2906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 2687              		.loc 1 2906 0
 2688 0014 0120A0E3 		mov	r2, #1
 2689 0018 002083E5 		str	r2, [r3]
 2690 001c 1EFF2FE1 		bx	lr
 2691              	.L294:
2901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2692              		.loc 1 2901 0
 2693 0020 70402DE9 		push	{r4, r5, r6, lr}
 2694              		.cfi_def_cfa_offset 16
 2695              		.cfi_offset 4, -16
 2696              		.cfi_offset 5, -12
 2697              		.cfi_offset 6, -8
 2698              		.cfi_offset 14, -4
 2699              	.LBB65:
 2700              	.LBB66:
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		traceTASK_SWITCHED_OUT();
 2701              		.loc 1 2910 0
 2702 0024 002083E5 		str	r2, [r3]
2918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				#endif
 2703              		.loc 1 2918 0
 2704 0028 FEFFFFEB 		bl	ulGetRunTimeCounterValue
 2705              	.LVL261:
2928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2706              		.loc 1 2928 0
 2707 002c F8209FE5 		ldr	r2, .L306+8
 2708 0030 F8409FE5 		ldr	r4, .L306+12
 2709 0034 00C092E5 		ldr	ip, [r2]
2936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 2710              		.loc 1 2936 0
 2711 0038 000082E5 		str	r0, [r2]
2928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2712              		.loc 1 2928 0
 2713 003c 0C0050E1 		cmp	r0, ip
2930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 2714              		.loc 1 2930 0
 2715 0040 00109485 		ldrhi	r1, [r4]
 2716 0044 6C309185 		ldrhi	r3, [r1, #108]
 2717 0048 0C304380 		subhi	r3, r3, ip
 2718 004c 00308380 		addhi	r3, r3, r0
 2719 0050 6C308185 		strhi	r3, [r1, #108]
 2720              	.LBB67:
2941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2721              		.loc 1 2941 0
 2722 0054 003094E5 		ldr	r3, [r4]
 2723 0058 D4109FE5 		ldr	r1, .L306+16
 2724 005c 303093E5 		ldr	r3, [r3, #48]
 2725              	.LVL262:
 2726 0060 002093E5 		ldr	r2, [r3]
 2727 0064 010052E1 		cmp	r2, r1
 2728 0068 0800001A 		bne	.L297
 2729 006c 041093E5 		ldr	r1, [r3, #4]
 2730 0070 020051E1 		cmp	r1, r2
 2731 0074 0500001A 		bne	.L297
 2732 0078 082093E5 		ldr	r2, [r3, #8]
 2733 007c 010052E1 		cmp	r2, r1
 2734 0080 0200001A 		bne	.L297
 2735 0084 0C3093E5 		ldr	r3, [r3, #12]
 2736              	.LVL263:
 2737 0088 020053E1 		cmp	r3, r2
 2738 008c 0300000A 		beq	.L298
 2739              	.L297:
 2740 0090 000094E5 		ldr	r0, [r4]
 2741 0094 001094E5 		ldr	r1, [r4]
 2742 0098 341081E2 		add	r1, r1, #52
 2743 009c FEFFFFEB 		bl	vApplicationStackOverflowHook
 2744              	.LVL264:
 2745              	.L298:
 2746              	.LBE67:
 2747              	.LBB68:
2952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		traceTASK_SWITCHED_IN();
 2748              		.loc 1 2952 0
 2749 00a0 90209FE5 		ldr	r2, .L306+20
 2750 00a4 1460A0E3 		mov	r6, #20
 2751 00a8 003092E5 		ldr	r3, [r2]
 2752              	.LVL265:
 2753 00ac 02E0A0E1 		mov	lr, r2
 2754 00b0 84209FE5 		ldr	r2, .L306+24
 2755 00b4 0250A0E1 		mov	r5, r2
 2756              	.L299:
 2757 00b8 960301E0 		mul	r1, r6, r3
 2758 00bc 01C092E7 		ldr	ip, [r2, r1]
 2759 00c0 010082E0 		add	r0, r2, r1
 2760 00c4 00005CE3 		cmp	ip, #0
 2761 00c8 0E00000A 		beq	.L301
 2762              	.LVL266:
 2763              	.LBB69:
 2764 00cc 04C090E5 		ldr	ip, [r0, #4]
 2765 00d0 081081E2 		add	r1, r1, #8
 2766 00d4 012082E0 		add	r2, r2, r1
 2767 00d8 04C09CE5 		ldr	ip, [ip, #4]
 2768 00dc 02005CE1 		cmp	ip, r2
 2769 00e0 04C080E5 		str	ip, [r0, #4]
 2770 00e4 04209C05 		ldreq	r2, [ip, #4]
 2771 00e8 04208005 		streq	r2, [r0, #4]
 2772 00ec 1420A0E3 		mov	r2, #20
 2773 00f0 925322E0 		mla	r2, r2, r3, r5
 2774 00f4 042092E5 		ldr	r2, [r2, #4]
 2775 00f8 0C2092E5 		ldr	r2, [r2, #12]
 2776 00fc 002084E5 		str	r2, [r4]
 2777              	.LBE69:
 2778 0100 00308EE5 		str	r3, [lr]
 2779 0104 7080BDE8 		pop	{r4, r5, r6, pc}
 2780              	.LVL267:
 2781              	.L301:
 2782 0108 000053E3 		cmp	r3, #0
 2783 010c 0200001A 		bne	.L300
 2784 0110 0110A0E3 		mov	r1, #1
 2785 0114 24009FE5 		ldr	r0, .L306+28
 2786 0118 FEFFFFEB 		bl	longjmp
 2787              	.LVL268:
 2788              	.L300:
 2789 011c 013043E2 		sub	r3, r3, #1
 2790              	.LVL269:
 2791 0120 E4FFFFEA 		b	.L299
 2792              	.L307:
 2793              		.align	2
 2794              	.L306:
 2795 0124 00000000 		.word	.LANCHOR16
 2796 0128 00000000 		.word	.LANCHOR19
 2797 012c 00000000 		.word	.LANCHOR20
 2798 0130 00000000 		.word	.LANCHOR1
 2799 0134 A5A5A5A5 		.word	-1515870811
 2800 0138 00000000 		.word	.LANCHOR12
 2801 013c 00000000 		.word	.LANCHOR2
 2802 0140 28000000 		.word	Unity+40
 2803              	.LBE68:
 2804              	.LBE66:
 2805              	.LBE65:
 2806              		.cfi_endproc
 2807              	.LFE27:
 2809              		.section	.text.vTaskSuspend,"ax",%progbits
 2810              		.align	2
 2811              		.global	vTaskSuspend
 2812              		.syntax unified
 2813              		.arm
 2814              		.fpu neon
 2816              	vTaskSuspend:
 2817              	.LFB12:
1669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 2818              		.loc 1 1669 0
 2819              		.cfi_startproc
 2820              		@ args = 0, pretend = 0, frame = 0
 2821              		@ frame_needed = 0, uses_anonymous_args = 0
 2822              	.LVL270:
 2823 0000 70402DE9 		push	{r4, r5, r6, lr}
 2824              		.cfi_def_cfa_offset 16
 2825              		.cfi_offset 4, -16
 2826              		.cfi_offset 5, -12
 2827              		.cfi_offset 6, -8
 2828              		.cfi_offset 14, -4
1669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 2829              		.loc 1 1669 0
 2830 0004 0040A0E1 		mov	r4, r0
 2831 0008 CC609FE5 		ldr	r6, .L324
1672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2832              		.loc 1 1672 0
 2833 000c FEFFFFEB 		bl	vPortEnterCritical
 2834              	.LVL271:
1676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2835              		.loc 1 1676 0
 2836 0010 000054E3 		cmp	r4, #0
 2837 0014 00409605 		ldreq	r4, [r6]
 2838              	.LVL272:
1682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2839              		.loc 1 1682 0
 2840 0018 045084E2 		add	r5, r4, #4
 2841 001c 0500A0E1 		mov	r0, r5
 2842 0020 FEFFFFEB 		bl	uxListRemove
 2843              	.LVL273:
1692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2844              		.loc 1 1692 0
 2845 0024 283094E5 		ldr	r3, [r4, #40]
 2846 0028 000053E3 		cmp	r3, #0
 2847 002c 0100000A 		beq	.L310
1694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 2848              		.loc 1 1694 0
 2849 0030 180084E2 		add	r0, r4, #24
 2850 0034 FEFFFFEB 		bl	uxListRemove
 2851              	.LVL274:
 2852              	.L310:
1701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2853              		.loc 1 1701 0
 2854 0038 0510A0E1 		mov	r1, r5
 2855 003c 9C009FE5 		ldr	r0, .L324+4
 2856 0040 FEFFFFEB 		bl	vListInsertEnd
 2857              	.LVL275:
1705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2858              		.loc 1 1705 0
 2859 0044 7430D4E5 		ldrb	r3, [r4, #116]	@ zero_extendqisi2
 2860 0048 010053E3 		cmp	r3, #1
1709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 2861              		.loc 1 1709 0
 2862 004c 0030A003 		moveq	r3, #0
 2863 0050 7430C405 		strbeq	r3, [r4, #116]
1714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2864              		.loc 1 1714 0
 2865 0054 FEFFFFEB 		bl	vPortExitCritical
 2866              	.LVL276:
1716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2867              		.loc 1 1716 0
 2868 0058 84309FE5 		ldr	r3, .L324+8
 2869 005c 002093E5 		ldr	r2, [r3]
 2870 0060 0350A0E1 		mov	r5, r3
 2871 0064 000052E3 		cmp	r2, #0
 2872 0068 0200000A 		beq	.L312
1720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2873              		.loc 1 1720 0
 2874 006c FEFFFFEB 		bl	vPortEnterCritical
 2875              	.LVL277:
1722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 2876              		.loc 1 1722 0
 2877 0070 FEFFFFEB 		bl	prvResetNextTaskUnblockTime
 2878              	.LVL278:
1724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 2879              		.loc 1 1724 0
 2880 0074 FEFFFFEB 		bl	vPortExitCritical
 2881              	.LVL279:
 2882              	.L312:
1731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 2883              		.loc 1 1731 0
 2884 0078 003096E5 		ldr	r3, [r6]
 2885 007c 030054E1 		cmp	r4, r3
 2886 0080 7080BD18 		popne	{r4, r5, r6, pc}
1733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 2887              		.loc 1 1733 0
 2888 0084 003095E5 		ldr	r3, [r5]
 2889 0088 000053E3 		cmp	r3, #0
 2890 008c 0800000A 		beq	.L314
1736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				portYIELD_WITHIN_API();
 2891              		.loc 1 1736 0
 2892 0090 50309FE5 		ldr	r3, .L324+12
 2893 0094 003093E5 		ldr	r3, [r3]
 2894 0098 000053E3 		cmp	r3, #0
 2895 009c 0200000A 		beq	.L315
1736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				portYIELD_WITHIN_API();
 2896              		.loc 1 1736 0 is_stmt 0 discriminator 1
 2897 00a0 0110A0E3 		mov	r1, #1
 2898 00a4 40009FE5 		ldr	r0, .L324+16
 2899 00a8 FEFFFFEB 		bl	longjmp
 2900              	.LVL280:
 2901              	.L315:
1737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 2902              		.loc 1 1737 0 is_stmt 1
 2903              		.syntax divided
 2904              	@ 1737 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 2905 00ac 000000EF 		SWI 0
 2906              	@ 0 "" 2
 2907              		.arm
 2908              		.syntax unified
 2909 00b0 7080BDE8 		pop	{r4, r5, r6, pc}
 2910              	.L314:
1744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 2911              		.loc 1 1744 0
 2912 00b4 24209FE5 		ldr	r2, .L324+4
 2913 00b8 001092E5 		ldr	r1, [r2]
 2914 00bc 2C209FE5 		ldr	r2, .L324+20
 2915 00c0 002092E5 		ldr	r2, [r2]
 2916 00c4 020051E1 		cmp	r1, r2
 2917 00c8 0100001A 		bne	.L316
1750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 2918              		.loc 1 1750 0
 2919 00cc 003086E5 		str	r3, [r6]
 2920 00d0 7080BDE8 		pop	{r4, r5, r6, pc}
 2921              	.L316:
1762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2922              		.loc 1 1762 0
 2923 00d4 7040BDE8 		pop	{r4, r5, r6, lr}
 2924              		.cfi_restore 14
 2925              		.cfi_restore 6
 2926              		.cfi_restore 5
 2927              		.cfi_restore 4
 2928              		.cfi_def_cfa_offset 0
 2929              	.LVL281:
1754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 2930              		.loc 1 1754 0
 2931 00d8 FEFFFFEA 		b	vTaskSwitchContext
 2932              	.LVL282:
 2933              	.L325:
 2934              		.align	2
 2935              	.L324:
 2936 00dc 00000000 		.word	.LANCHOR1
 2937 00e0 00000000 		.word	.LANCHOR7
 2938 00e4 00000000 		.word	.LANCHOR10
 2939 00e8 00000000 		.word	.LANCHOR16
 2940 00ec 28000000 		.word	Unity+40
 2941 00f0 00000000 		.word	.LANCHOR0
 2942              		.cfi_endproc
 2943              	.LFE12:
 2945              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2946              		.align	2
 2947              		.global	vTaskPlaceOnEventList
 2948              		.syntax unified
 2949              		.arm
 2950              		.fpu neon
 2952              	vTaskPlaceOnEventList:
 2953              	.LFB28:
2974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxEventList );
 2954              		.loc 1 2974 0
 2955              		.cfi_startproc
 2956              		@ args = 0, pretend = 0, frame = 0
 2957              		@ frame_needed = 0, uses_anonymous_args = 0
 2958              	.LVL283:
2975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2959              		.loc 1 2975 0
 2960 0000 000050E3 		cmp	r0, #0
2974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxEventList );
 2961              		.loc 1 2974 0
 2962 0004 10402DE9 		push	{r4, lr}
 2963              		.cfi_def_cfa_offset 8
 2964              		.cfi_offset 4, -8
 2965              		.cfi_offset 14, -4
2975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2966              		.loc 1 2975 0
 2967 0008 0200001A 		bne	.L327
2975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2968              		.loc 1 2975 0 is_stmt 0 discriminator 1
 2969 000c 0110A0E3 		mov	r1, #1
 2970              	.LVL284:
 2971 0010 24009FE5 		ldr	r0, .L329
 2972              	.LVL285:
 2973 0014 FEFFFFEB 		bl	longjmp
 2974              	.LVL286:
 2975              	.L327:
2984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 2976              		.loc 1 2984 0 is_stmt 1
 2977 0018 20309FE5 		ldr	r3, .L329+4
 2978 001c 0140A0E1 		mov	r4, r1
 2979 0020 001093E5 		ldr	r1, [r3]
 2980              	.LVL287:
 2981 0024 181081E2 		add	r1, r1, #24
 2982 0028 FEFFFFEB 		bl	vListInsert
 2983              	.LVL288:
2986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 2984              		.loc 1 2986 0
 2985 002c 0400A0E1 		mov	r0, r4
 2986 0030 0110A0E3 		mov	r1, #1
2987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 2987              		.loc 1 2987 0
 2988 0034 1040BDE8 		pop	{r4, lr}
 2989              		.cfi_restore 14
 2990              		.cfi_restore 4
 2991              		.cfi_def_cfa_offset 0
 2992              	.LVL289:
2986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 2993              		.loc 1 2986 0
 2994 0038 FEFFFFEA 		b	prvAddCurrentTaskToDelayedList
 2995              	.LVL290:
 2996              	.L330:
 2997              		.align	2
 2998              	.L329:
 2999 003c 28000000 		.word	Unity+40
 3000 0040 00000000 		.word	.LANCHOR1
 3001              		.cfi_endproc
 3002              	.LFE28:
 3004              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3005              		.align	2
 3006              		.global	vTaskPlaceOnUnorderedEventList
 3007              		.syntax unified
 3008              		.arm
 3009              		.fpu neon
 3011              	vTaskPlaceOnUnorderedEventList:
 3012              	.LFB29:
2991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxEventList );
 3013              		.loc 1 2991 0
 3014              		.cfi_startproc
 3015              		@ args = 0, pretend = 0, frame = 0
 3016              		@ frame_needed = 0, uses_anonymous_args = 0
 3017              	.LVL291:
2992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3018              		.loc 1 2992 0
 3019 0000 000050E3 		cmp	r0, #0
2991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxEventList );
 3020              		.loc 1 2991 0
 3021 0004 10402DE9 		push	{r4, lr}
 3022              		.cfi_def_cfa_offset 8
 3023              		.cfi_offset 4, -8
 3024              		.cfi_offset 14, -4
2992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3025              		.loc 1 2992 0
 3026 0008 0200001A 		bne	.L332
 3027              	.L333:
2992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3028              		.loc 1 2992 0 is_stmt 0 discriminator 1
 3029 000c 0110A0E3 		mov	r1, #1
 3030              	.LVL292:
 3031 0010 40009FE5 		ldr	r0, .L338
 3032              	.LVL293:
 3033 0014 FEFFFFEB 		bl	longjmp
 3034              	.LVL294:
 3035              	.L332:
2996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3036              		.loc 1 2996 0 is_stmt 1
 3037 0018 3C309FE5 		ldr	r3, .L338+4
 3038 001c 003093E5 		ldr	r3, [r3]
 3039 0020 000053E3 		cmp	r3, #0
 3040 0024 F8FFFF0A 		beq	.L333
3001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3041              		.loc 1 3001 0
 3042 0028 30309FE5 		ldr	r3, .L338+8
 3043 002c 0240A0E1 		mov	r4, r2
 3044 0030 021181E3 		orr	r1, r1, #-2147483648
 3045              	.LVL295:
 3046 0034 002093E5 		ldr	r2, [r3]
 3047              	.LVL296:
 3048 0038 181082E5 		str	r1, [r2, #24]
3008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3049              		.loc 1 3008 0
 3050 003c 001093E5 		ldr	r1, [r3]
 3051 0040 181081E2 		add	r1, r1, #24
 3052 0044 FEFFFFEB 		bl	vListInsertEnd
 3053              	.LVL297:
3010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 3054              		.loc 1 3010 0
 3055 0048 0400A0E1 		mov	r0, r4
 3056 004c 0110A0E3 		mov	r1, #1
3011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 3057              		.loc 1 3011 0
 3058 0050 1040BDE8 		pop	{r4, lr}
 3059              		.cfi_restore 14
 3060              		.cfi_restore 4
 3061              		.cfi_def_cfa_offset 0
 3062              	.LVL298:
3010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 3063              		.loc 1 3010 0
 3064 0054 FEFFFFEA 		b	prvAddCurrentTaskToDelayedList
 3065              	.LVL299:
 3066              	.L339:
 3067              		.align	2
 3068              	.L338:
 3069 0058 28000000 		.word	Unity+40
 3070 005c 00000000 		.word	.LANCHOR16
 3071 0060 00000000 		.word	.LANCHOR1
 3072              		.cfi_endproc
 3073              	.LFE29:
 3075              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3076              		.align	2
 3077              		.global	vTaskPlaceOnEventListRestricted
 3078              		.syntax unified
 3079              		.arm
 3080              		.fpu neon
 3082              	vTaskPlaceOnEventListRestricted:
 3083              	.LFB30:
3017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( pxEventList );
 3084              		.loc 1 3017 0
 3085              		.cfi_startproc
 3086              		@ args = 0, pretend = 0, frame = 0
 3087              		@ frame_needed = 0, uses_anonymous_args = 0
 3088              	.LVL300:
3018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3089              		.loc 1 3018 0
 3090 0000 000050E3 		cmp	r0, #0
3017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		configASSERT( pxEventList );
 3091              		.loc 1 3017 0
 3092 0004 70402DE9 		push	{r4, r5, r6, lr}
 3093              		.cfi_def_cfa_offset 16
 3094              		.cfi_offset 4, -16
 3095              		.cfi_offset 5, -12
 3096              		.cfi_offset 6, -8
 3097              		.cfi_offset 14, -4
3018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3098              		.loc 1 3018 0
 3099 0008 0200001A 		bne	.L341
3018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3100              		.loc 1 3018 0 is_stmt 0 discriminator 1
 3101 000c 0110A0E3 		mov	r1, #1
 3102              	.LVL301:
 3103 0010 30009FE5 		ldr	r0, .L346
 3104              	.LVL302:
 3105 0014 FEFFFFEB 		bl	longjmp
 3106              	.LVL303:
 3107              	.L341:
3030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3108              		.loc 1 3030 0 is_stmt 1
 3109 0018 2C309FE5 		ldr	r3, .L346+4
 3110 001c 0150A0E1 		mov	r5, r1
 3111 0020 0240A0E1 		mov	r4, r2
 3112 0024 001093E5 		ldr	r1, [r3]
 3113              	.LVL304:
 3114 0028 181081E2 		add	r1, r1, #24
 3115 002c FEFFFFEB 		bl	vListInsertEnd
 3116              	.LVL305:
3035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3117              		.loc 1 3035 0
 3118 0030 000054E3 		cmp	r4, #0
 3119              	.LVL306:
3041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 3120              		.loc 1 3041 0
 3121 0034 0410A0E1 		mov	r1, r4
 3122 0038 0500A001 		moveq	r0, r5
 3123 003c 0000E013 		mvnne	r0, #0
3042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3124              		.loc 1 3042 0
 3125 0040 7040BDE8 		pop	{r4, r5, r6, lr}
 3126              		.cfi_restore 14
 3127              		.cfi_restore 6
 3128              		.cfi_restore 5
 3129              		.cfi_restore 4
 3130              		.cfi_def_cfa_offset 0
 3131              	.LVL307:
3041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 3132              		.loc 1 3041 0
 3133 0044 FEFFFFEA 		b	prvAddCurrentTaskToDelayedList
 3134              	.LVL308:
 3135              	.L347:
 3136              		.align	2
 3137              	.L346:
 3138 0048 28000000 		.word	Unity+40
 3139 004c 00000000 		.word	.LANCHOR1
 3140              		.cfi_endproc
 3141              	.LFE30:
 3143              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3144              		.align	2
 3145              		.global	xTaskRemoveFromEventList
 3146              		.syntax unified
 3147              		.arm
 3148              		.fpu neon
 3150              	xTaskRemoveFromEventList:
 3151              	.LFB31:
3048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxUnblockedTCB;
 3152              		.loc 1 3048 0
 3153              		.cfi_startproc
 3154              		@ args = 0, pretend = 0, frame = 0
 3155              		@ frame_needed = 0, uses_anonymous_args = 0
 3156              	.LVL309:
3065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxUnblockedTCB );
 3157              		.loc 1 3065 0
 3158 0000 0C3090E5 		ldr	r3, [r0, #12]
3048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxUnblockedTCB;
 3159              		.loc 1 3048 0
 3160 0004 70402DE9 		push	{r4, r5, r6, lr}
 3161              		.cfi_def_cfa_offset 16
 3162              		.cfi_offset 4, -16
 3163              		.cfi_offset 5, -12
 3164              		.cfi_offset 6, -8
 3165              		.cfi_offset 14, -4
3065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxUnblockedTCB );
 3166              		.loc 1 3065 0
 3167 0008 0C4093E5 		ldr	r4, [r3, #12]
 3168              	.LVL310:
3066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3169              		.loc 1 3066 0
 3170 000c 000054E3 		cmp	r4, #0
 3171 0010 0200001A 		bne	.L349
3066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3172              		.loc 1 3066 0 is_stmt 0 discriminator 1
 3173 0014 0110A0E3 		mov	r1, #1
 3174 0018 80009FE5 		ldr	r0, .L357
 3175              	.LVL311:
 3176 001c FEFFFFEB 		bl	longjmp
 3177              	.LVL312:
 3178              	.L349:
3067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3179              		.loc 1 3067 0 is_stmt 1
 3180 0020 185084E2 		add	r5, r4, #24
 3181 0024 0500A0E1 		mov	r0, r5
 3182              	.LVL313:
 3183 0028 FEFFFFEB 		bl	uxListRemove
 3184              	.LVL314:
3069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 3185              		.loc 1 3069 0
 3186 002c 70309FE5 		ldr	r3, .L357+4
 3187 0030 003093E5 		ldr	r3, [r3]
 3188 0034 000053E3 		cmp	r3, #0
3078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 3189              		.loc 1 3078 0
 3190 0038 0510A011 		movne	r1, r5
 3191 003c 64009F15 		ldrne	r0, .L357+8
3069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 3192              		.loc 1 3069 0
 3193 0040 0B00001A 		bne	.L356
3071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3194              		.loc 1 3071 0
 3195 0044 045084E2 		add	r5, r4, #4
 3196 0048 0500A0E1 		mov	r0, r5
 3197 004c FEFFFFEB 		bl	uxListRemove
 3198              	.LVL315:
3072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 3199              		.loc 1 3072 0
 3200 0050 54209FE5 		ldr	r2, .L357+12
 3201 0054 1400A0E3 		mov	r0, #20
 3202 0058 2C3094E5 		ldr	r3, [r4, #44]
 3203 005c 001092E5 		ldr	r1, [r2]
 3204 0060 010053E1 		cmp	r3, r1
 3205 0064 0510A0E1 		mov	r1, r5
 3206 0068 00308285 		strhi	r3, [r2]
 3207 006c 3C209FE5 		ldr	r2, .L357+16
 3208 0070 902320E0 		mla	r0, r0, r3, r2
 3209              	.L356:
3078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 3210              		.loc 1 3078 0
 3211 0074 FEFFFFEB 		bl	vListInsertEnd
 3212              	.LVL316:
3081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 3213              		.loc 1 3081 0
 3214 0078 34309FE5 		ldr	r3, .L357+20
 3215 007c 2C2094E5 		ldr	r2, [r4, #44]
 3216 0080 003093E5 		ldr	r3, [r3]
 3217 0084 2C3093E5 		ldr	r3, [r3, #44]
 3218 0088 030052E1 		cmp	r2, r3
 3219              	.LVL317:
3090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 3220              		.loc 1 3090 0
 3221 008c 24309F85 		ldrhi	r3, .L357+24
 3222 0090 0100A083 		movhi	r0, #1
3094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 3223              		.loc 1 3094 0
 3224 0094 0000A093 		movls	r0, #0
 3225              	.LVL318:
3090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 3226              		.loc 1 3090 0
 3227 0098 00008385 		strhi	r0, [r3]
3112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 3228              		.loc 1 3112 0
 3229 009c 7080BDE8 		pop	{r4, r5, r6, pc}
 3230              	.L358:
 3231              		.align	2
 3232              	.L357:
 3233 00a0 28000000 		.word	Unity+40
 3234 00a4 00000000 		.word	.LANCHOR16
 3235 00a8 00000000 		.word	.LANCHOR5
 3236 00ac 00000000 		.word	.LANCHOR12
 3237 00b0 00000000 		.word	.LANCHOR2
 3238 00b4 00000000 		.word	.LANCHOR1
 3239 00b8 00000000 		.word	.LANCHOR19
 3240              		.cfi_endproc
 3241              	.LFE31:
 3243              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3244              		.align	2
 3245              		.global	vTaskRemoveFromUnorderedEventList
 3246              		.syntax unified
 3247              		.arm
 3248              		.fpu neon
 3250              	vTaskRemoveFromUnorderedEventList:
 3251              	.LFB32:
3116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxUnblockedTCB;
 3252              		.loc 1 3116 0
 3253              		.cfi_startproc
 3254              		@ args = 0, pretend = 0, frame = 0
 3255              		@ frame_needed = 0, uses_anonymous_args = 0
 3256              	.LVL319:
3121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3257              		.loc 1 3121 0
 3258 0000 88209FE5 		ldr	r2, .L368
3116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TCB_t *pxUnblockedTCB;
 3259              		.loc 1 3116 0
 3260 0004 70402DE9 		push	{r4, r5, r6, lr}
 3261              		.cfi_def_cfa_offset 16
 3262              		.cfi_offset 4, -16
 3263              		.cfi_offset 5, -12
 3264              		.cfi_offset 6, -8
 3265              		.cfi_offset 14, -4
3121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3266              		.loc 1 3121 0
 3267 0008 002092E5 		ldr	r2, [r2]
 3268 000c 000052E3 		cmp	r2, #0
 3269 0010 0200001A 		bne	.L360
 3270              	.LVL320:
 3271              	.L361:
3121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3272              		.loc 1 3121 0 is_stmt 0 discriminator 1
 3273 0014 0110A0E3 		mov	r1, #1
 3274 0018 74009FE5 		ldr	r0, .L368+4
 3275              	.LVL321:
 3276 001c FEFFFFEB 		bl	longjmp
 3277              	.LVL322:
 3278              	.L360:
3128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxUnblockedTCB );
 3279              		.loc 1 3128 0 is_stmt 1
 3280 0020 0C4090E5 		ldr	r4, [r0, #12]
 3281              	.LVL323:
3124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3282              		.loc 1 3124 0
 3283 0024 021181E3 		orr	r1, r1, #-2147483648
 3284              	.LVL324:
 3285 0028 001080E5 		str	r1, [r0]
3129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3286              		.loc 1 3129 0
 3287 002c 000054E3 		cmp	r4, #0
 3288 0030 F7FFFF0A 		beq	.L361
3135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3289              		.loc 1 3135 0
 3290 0034 045084E2 		add	r5, r4, #4
3130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3291              		.loc 1 3130 0
 3292 0038 FEFFFFEB 		bl	uxListRemove
 3293              	.LVL325:
3135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3294              		.loc 1 3135 0
 3295 003c 0500A0E1 		mov	r0, r5
 3296 0040 FEFFFFEB 		bl	uxListRemove
 3297              	.LVL326:
3136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3298              		.loc 1 3136 0
 3299 0044 4C209FE5 		ldr	r2, .L368+8
 3300 0048 1400A0E3 		mov	r0, #20
 3301 004c 2C3094E5 		ldr	r3, [r4, #44]
 3302 0050 001092E5 		ldr	r1, [r2]
 3303 0054 010053E1 		cmp	r3, r1
 3304 0058 0510A0E1 		mov	r1, r5
 3305 005c 00308285 		strhi	r3, [r2]
 3306 0060 34209FE5 		ldr	r2, .L368+12
 3307 0064 902320E0 		mla	r0, r0, r3, r2
 3308 0068 FEFFFFEB 		bl	vListInsertEnd
 3309              	.LVL327:
3138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 3310              		.loc 1 3138 0
 3311 006c 2C309FE5 		ldr	r3, .L368+16
 3312 0070 2C2094E5 		ldr	r2, [r4, #44]
 3313 0074 003093E5 		ldr	r3, [r3]
 3314 0078 2C3093E5 		ldr	r3, [r3, #44]
 3315 007c 030052E1 		cmp	r2, r3
3144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 3316              		.loc 1 3144 0
 3317 0080 1C309F85 		ldrhi	r3, .L368+20
 3318 0084 0120A083 		movhi	r2, #1
 3319 0088 00208385 		strhi	r2, [r3]
 3320 008c 7080BDE8 		pop	{r4, r5, r6, pc}
 3321              	.L369:
 3322              		.align	2
 3323              	.L368:
 3324 0090 00000000 		.word	.LANCHOR16
 3325 0094 28000000 		.word	Unity+40
 3326 0098 00000000 		.word	.LANCHOR12
 3327 009c 00000000 		.word	.LANCHOR2
 3328 00a0 00000000 		.word	.LANCHOR1
 3329 00a4 00000000 		.word	.LANCHOR19
 3330              		.cfi_endproc
 3331              	.LFE32:
 3333              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3334              		.align	2
 3335              		.global	vTaskSetTimeOutState
 3336              		.syntax unified
 3337              		.arm
 3338              		.fpu neon
 3340              	vTaskSetTimeOutState:
 3341              	.LFB33:
3150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxTimeOut );
 3342              		.loc 1 3150 0
 3343              		.cfi_startproc
 3344              		@ args = 0, pretend = 0, frame = 0
 3345              		@ frame_needed = 0, uses_anonymous_args = 0
 3346              	.LVL328:
 3347 0000 10402DE9 		push	{r4, lr}
 3348              		.cfi_def_cfa_offset 8
 3349              		.cfi_offset 4, -8
 3350              		.cfi_offset 14, -4
3151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	taskENTER_CRITICAL();
 3351              		.loc 1 3151 0
 3352 0004 004050E2 		subs	r4, r0, #0
 3353 0008 0200001A 		bne	.L371
3151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	taskENTER_CRITICAL();
 3354              		.loc 1 3151 0 is_stmt 0 discriminator 1
 3355 000c 0110A0E3 		mov	r1, #1
 3356 0010 24009FE5 		ldr	r0, .L373
 3357              	.LVL329:
 3358 0014 FEFFFFEB 		bl	longjmp
 3359              	.LVL330:
 3360              	.L371:
3152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 3361              		.loc 1 3152 0 is_stmt 1
 3362 0018 FEFFFFEB 		bl	vPortEnterCritical
 3363              	.LVL331:
3154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3364              		.loc 1 3154 0
 3365 001c 1C309FE5 		ldr	r3, .L373+4
 3366 0020 003093E5 		ldr	r3, [r3]
 3367 0024 003084E5 		str	r3, [r4]
3155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 3368              		.loc 1 3155 0
 3369 0028 14309FE5 		ldr	r3, .L373+8
 3370 002c 003093E5 		ldr	r3, [r3]
 3371 0030 043084E5 		str	r3, [r4, #4]
3158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 3372              		.loc 1 3158 0
 3373 0034 1040BDE8 		pop	{r4, lr}
 3374              		.cfi_restore 14
 3375              		.cfi_restore 4
 3376              		.cfi_def_cfa_offset 0
 3377              	.LVL332:
3157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 3378              		.loc 1 3157 0
 3379 0038 FEFFFFEA 		b	vPortExitCritical
 3380              	.LVL333:
 3381              	.L374:
 3382              		.align	2
 3383              	.L373:
 3384 003c 28000000 		.word	Unity+40
 3385 0040 00000000 		.word	.LANCHOR17
 3386 0044 00000000 		.word	.LANCHOR14
 3387              		.cfi_endproc
 3388              	.LFE33:
 3390              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3391              		.align	2
 3392              		.global	vTaskInternalSetTimeOutState
 3393              		.syntax unified
 3394              		.arm
 3395              		.fpu neon
 3397              	vTaskInternalSetTimeOutState:
 3398              	.LFB34:
3162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3399              		.loc 1 3162 0
 3400              		.cfi_startproc
 3401              		@ args = 0, pretend = 0, frame = 0
 3402              		@ frame_needed = 0, uses_anonymous_args = 0
 3403              		@ link register save eliminated.
 3404              	.LVL334:
3164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3405              		.loc 1 3164 0
 3406 0000 14309FE5 		ldr	r3, .L376
 3407 0004 003093E5 		ldr	r3, [r3]
 3408 0008 003080E5 		str	r3, [r0]
3165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 3409              		.loc 1 3165 0
 3410 000c 0C309FE5 		ldr	r3, .L376+4
 3411 0010 003093E5 		ldr	r3, [r3]
 3412 0014 043080E5 		str	r3, [r0, #4]
 3413 0018 1EFF2FE1 		bx	lr
 3414              	.L377:
 3415              		.align	2
 3416              	.L376:
 3417 001c 00000000 		.word	.LANCHOR17
 3418 0020 00000000 		.word	.LANCHOR14
 3419              		.cfi_endproc
 3420              	.LFE34:
 3422              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3423              		.align	2
 3424              		.global	xTaskCheckForTimeOut
 3425              		.syntax unified
 3426              		.arm
 3427              		.fpu neon
 3429              	xTaskCheckForTimeOut:
 3430              	.LFB35:
3170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** BaseType_t xReturn;
 3431              		.loc 1 3170 0
 3432              		.cfi_startproc
 3433              		@ args = 0, pretend = 0, frame = 0
 3434              		@ frame_needed = 0, uses_anonymous_args = 0
 3435              	.LVL335:
 3436 0000 70402DE9 		push	{r4, r5, r6, lr}
 3437              		.cfi_def_cfa_offset 16
 3438              		.cfi_offset 4, -16
 3439              		.cfi_offset 5, -12
 3440              		.cfi_offset 6, -8
 3441              		.cfi_offset 14, -4
3173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxTicksToWait );
 3442              		.loc 1 3173 0
 3443 0004 006050E2 		subs	r6, r0, #0
 3444 0008 0200001A 		bne	.L379
 3445              	.L380:
3173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configASSERT( pxTicksToWait );
 3446              		.loc 1 3173 0 is_stmt 0 discriminator 1
 3447 000c 0110A0E3 		mov	r1, #1
 3448              	.LVL336:
 3449 0010 A0009FE5 		ldr	r0, .L390
 3450              	.LVL337:
 3451 0014 FEFFFFEB 		bl	longjmp
 3452              	.LVL338:
 3453              	.L379:
3174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3454              		.loc 1 3174 0 is_stmt 1
 3455 0018 000051E3 		cmp	r1, #0
 3456 001c 0150A0E1 		mov	r5, r1
 3457 0020 F9FFFF0A 		beq	.L380
3176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	{
 3458              		.loc 1 3176 0
 3459 0024 FEFFFFEB 		bl	vPortEnterCritical
 3460              	.LVL339:
 3461              	.LBB70:
3179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3462              		.loc 1 3179 0
 3463 0028 8C309FE5 		ldr	r3, .L390+4
 3464 002c 002093E5 		ldr	r2, [r3]
 3465              	.LVL340:
3183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 3466              		.loc 1 3183 0
 3467 0030 88309FE5 		ldr	r3, .L390+8
 3468 0034 001093E5 		ldr	r1, [r3]
 3469 0038 7640D1E5 		ldrb	r4, [r1, #118]	@ zero_extendqisi2
 3470 003c 000054E3 		cmp	r4, #0
3187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdTRUE;
 3471              		.loc 1 3187 0
 3472 0040 00309315 		ldrne	r3, [r3]
 3473 0044 0020A013 		movne	r2, #0
 3474              	.LVL341:
 3475 0048 7620C315 		strbne	r2, [r3, #118]
3183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 3476              		.loc 1 3183 0
 3477 004c 1700001A 		bne	.L385
3194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 3478              		.loc 1 3194 0
 3479 0050 003095E5 		ldr	r3, [r5]
 3480 0054 010073E3 		cmn	r3, #1
 3481 0058 1100000A 		beq	.L382
3204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3482              		.loc 1 3204 0
 3483 005c 60009FE5 		ldr	r0, .L390+12
 3484 0060 004096E5 		ldr	r4, [r6]
3180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3485              		.loc 1 3180 0
 3486 0064 041096E5 		ldr	r1, [r6, #4]
3204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3487              		.loc 1 3204 0
 3488 0068 000090E5 		ldr	r0, [r0]
 3489 006c 004054E0 		subs	r4, r4, r0
 3490 0070 0140A013 		movne	r4, #1
 3491 0074 010052E1 		cmp	r2, r1
 3492 0078 0040A033 		movcc	r4, #0
 3493 007c 000054E3 		cmp	r4, #0
 3494 0080 0A00001A 		bne	.L385
3180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3495              		.loc 1 3180 0
 3496 0084 012042E0 		sub	r2, r2, r1
3213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3497              		.loc 1 3213 0
 3498 0088 030052E1 		cmp	r2, r3
3222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdTRUE;
 3499              		.loc 1 3222 0
 3500 008c 00408525 		strcs	r4, [r5]
3213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3501              		.loc 1 3213 0
 3502 0090 0600002A 		bcs	.L385
3216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3503              		.loc 1 3216 0
 3504 0094 023043E0 		sub	r3, r3, r2
3217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdFALSE;
 3505              		.loc 1 3217 0
 3506 0098 0600A0E1 		mov	r0, r6
3216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3507              		.loc 1 3216 0
 3508 009c 003085E5 		str	r3, [r5]
3217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			xReturn = pdFALSE;
 3509              		.loc 1 3217 0
 3510 00a0 FEFFFFEB 		bl	vTaskInternalSetTimeOutState
 3511              	.LVL342:
 3512              	.L382:
 3513              	.LBE70:
3226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3514              		.loc 1 3226 0
 3515 00a4 FEFFFFEB 		bl	vPortExitCritical
 3516              	.LVL343:
3229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 3517              		.loc 1 3229 0
 3518 00a8 0400A0E1 		mov	r0, r4
 3519 00ac 7080BDE8 		pop	{r4, r5, r6, pc}
 3520              	.LVL344:
 3521              	.L385:
 3522              	.LBB71:
3211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3523              		.loc 1 3211 0
 3524 00b0 0140A0E3 		mov	r4, #1
 3525 00b4 FAFFFFEA 		b	.L382
 3526              	.L391:
 3527              		.align	2
 3528              	.L390:
 3529 00b8 28000000 		.word	Unity+40
 3530 00bc 00000000 		.word	.LANCHOR14
 3531 00c0 00000000 		.word	.LANCHOR1
 3532 00c4 00000000 		.word	.LANCHOR17
 3533              	.LBE71:
 3534              		.cfi_endproc
 3535              	.LFE35:
 3537              		.section	.text.vTaskMissedYield,"ax",%progbits
 3538              		.align	2
 3539              		.global	vTaskMissedYield
 3540              		.syntax unified
 3541              		.arm
 3542              		.fpu neon
 3544              	vTaskMissedYield:
 3545              	.LFB36:
3233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	xYieldPending = pdTRUE;
 3546              		.loc 1 3233 0
 3547              		.cfi_startproc
 3548              		@ args = 0, pretend = 0, frame = 0
 3549              		@ frame_needed = 0, uses_anonymous_args = 0
 3550              		@ link register save eliminated.
3234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** }
 3551              		.loc 1 3234 0
 3552 0000 08309FE5 		ldr	r3, .L393
 3553 0004 0120A0E3 		mov	r2, #1
 3554 0008 002083E5 		str	r2, [r3]
 3555 000c 1EFF2FE1 		bx	lr
 3556              	.L394:
 3557              		.align	2
 3558              	.L393:
 3559 0010 00000000 		.word	.LANCHOR19
 3560              		.cfi_endproc
 3561              	.LFE36:
 3563              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3564              		.align	2
 3565              		.global	uxTaskGetTaskNumber
 3566              		.syntax unified
 3567              		.arm
 3568              		.fpu neon
 3570              	uxTaskGetTaskNumber:
 3571              	.LFB37:
3241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxReturn;
 3572              		.loc 1 3241 0
 3573              		.cfi_startproc
 3574              		@ args = 0, pretend = 0, frame = 0
 3575              		@ frame_needed = 0, uses_anonymous_args = 0
 3576              		@ link register save eliminated.
 3577              	.LVL345:
3245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3578              		.loc 1 3245 0
 3579 0000 000050E3 		cmp	r0, #0
 3580              	.LVL346:
3248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3581              		.loc 1 3248 0
 3582 0004 54009015 		ldrne	r0, [r0, #84]
 3583              	.LVL347:
3256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3584              		.loc 1 3256 0
 3585 0008 1EFF2FE1 		bx	lr
 3586              		.cfi_endproc
 3587              	.LFE37:
 3589              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3590              		.align	2
 3591              		.global	vTaskSetTaskNumber
 3592              		.syntax unified
 3593              		.arm
 3594              		.fpu neon
 3596              	vTaskSetTaskNumber:
 3597              	.LFB38:
3264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * pxTCB;
 3598              		.loc 1 3264 0
 3599              		.cfi_startproc
 3600              		@ args = 0, pretend = 0, frame = 0
 3601              		@ frame_needed = 0, uses_anonymous_args = 0
 3602              		@ link register save eliminated.
 3603              	.LVL348:
3267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3604              		.loc 1 3267 0
 3605 0000 000050E3 		cmp	r0, #0
 3606              	.LVL349:
3270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3607              		.loc 1 3270 0
 3608 0004 54108015 		strne	r1, [r0, #84]
 3609 0008 1EFF2FE1 		bx	lr
 3610              		.cfi_endproc
 3611              	.LFE38:
 3613              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 3614              		.align	2
 3615              		.global	vTaskSetThreadLocalStoragePointer
 3616              		.syntax unified
 3617              		.arm
 3618              		.fpu neon
 3620              	vTaskSetThreadLocalStoragePointer:
 3621              	.LFB40:
3447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 3622              		.loc 1 3447 0
 3623              		.cfi_startproc
 3624              		@ args = 0, pretend = 0, frame = 0
 3625              		@ frame_needed = 0, uses_anonymous_args = 0
 3626              		@ link register save eliminated.
 3627              	.LVL350:
3450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3628              		.loc 1 3450 0
 3629 0000 020051E3 		cmp	r1, #2
 3630 0004 1EFF2FC1 		bxgt	lr
3452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 3631              		.loc 1 3452 0
 3632 0008 000050E3 		cmp	r0, #0
3453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3633              		.loc 1 3453 0
 3634 000c 181081E2 		add	r1, r1, #24
 3635              	.LVL351:
3452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 3636              		.loc 1 3452 0
 3637 0010 08309F05 		ldreq	r3, .L406
 3638 0014 00009305 		ldreq	r0, [r3]
 3639              	.LVL352:
3453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3640              		.loc 1 3453 0
 3641 0018 012180E7 		str	r2, [r0, r1, lsl #2]
 3642 001c 1EFF2FE1 		bx	lr
 3643              	.L407:
 3644              		.align	2
 3645              	.L406:
 3646 0020 00000000 		.word	.LANCHOR1
 3647              		.cfi_endproc
 3648              	.LFE40:
 3650              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 3651              		.align	2
 3652              		.global	pvTaskGetThreadLocalStoragePointer
 3653              		.syntax unified
 3654              		.arm
 3655              		.fpu neon
 3657              	pvTaskGetThreadLocalStoragePointer:
 3658              	.LFB41:
3463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	void *pvReturn = NULL;
 3659              		.loc 1 3463 0
 3660              		.cfi_startproc
 3661              		@ args = 0, pretend = 0, frame = 0
 3662              		@ frame_needed = 0, uses_anonymous_args = 0
 3663              		@ link register save eliminated.
 3664              	.LVL353:
3467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3665              		.loc 1 3467 0
 3666 0000 020051E3 		cmp	r1, #2
 3667 0004 050000CA 		bgt	.L411
3469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3668              		.loc 1 3469 0
 3669 0008 000050E3 		cmp	r0, #0
3470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3670              		.loc 1 3470 0
 3671 000c 181081E2 		add	r1, r1, #24
 3672              	.LVL354:
3469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3673              		.loc 1 3469 0
 3674 0010 10309F05 		ldreq	r3, .L412
 3675 0014 00009305 		ldreq	r0, [r3]
 3676              	.LVL355:
3470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3677              		.loc 1 3470 0
 3678 0018 010190E7 		ldr	r0, [r0, r1, lsl #2]
 3679              	.LVL356:
 3680 001c 1EFF2FE1 		bx	lr
 3681              	.LVL357:
 3682              	.L411:
3474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3683              		.loc 1 3474 0
 3684 0020 0000A0E3 		mov	r0, #0
 3685              	.LVL358:
3478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3686              		.loc 1 3478 0
 3687 0024 1EFF2FE1 		bx	lr
 3688              	.L413:
 3689              		.align	2
 3690              	.L412:
 3691 0028 00000000 		.word	.LANCHOR1
 3692              		.cfi_endproc
 3693              	.LFE41:
 3695              		.section	.text.vTaskGetInfo,"ax",%progbits
 3696              		.align	2
 3697              		.global	vTaskGetInfo
 3698              		.syntax unified
 3699              		.arm
 3700              		.fpu neon
 3702              	vTaskGetInfo:
 3703              	.LFB44:
3563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 3704              		.loc 1 3563 0
 3705              		.cfi_startproc
 3706              		@ args = 0, pretend = 0, frame = 0
 3707              		@ frame_needed = 0, uses_anonymous_args = 0
 3708              	.LVL359:
 3709 0000 70402DE9 		push	{r4, r5, r6, lr}
 3710              		.cfi_def_cfa_offset 16
 3711              		.cfi_offset 4, -16
 3712              		.cfi_offset 5, -12
 3713              		.cfi_offset 6, -8
 3714              		.cfi_offset 14, -4
3567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3715              		.loc 1 3567 0
 3716 0004 005050E2 		subs	r5, r0, #0
3563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 3717              		.loc 1 3563 0
 3718 0008 0260A0E1 		mov	r6, r2
3567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3719              		.loc 1 3567 0
 3720 000c C0209F05 		ldreq	r2, .L429
 3721              	.LVL360:
3563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 3722              		.loc 1 3563 0
 3723 0010 0140A0E1 		mov	r4, r1
3567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3724              		.loc 1 3567 0
 3725 0014 00509205 		ldreq	r5, [r2]
 3726              	.LVL361:
3598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3727              		.loc 1 3598 0
 3728 0018 050053E3 		cmp	r3, #5
3570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 3729              		.loc 1 3570 0
 3730 001c 342085E2 		add	r2, r5, #52
3569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 3731              		.loc 1 3569 0
 3732 0020 005081E5 		str	r5, [r1]
3570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 3733              		.loc 1 3570 0
 3734 0024 042081E5 		str	r2, [r1, #4]
3571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 3735              		.loc 1 3571 0
 3736 0028 2C2095E5 		ldr	r2, [r5, #44]
 3737 002c 102081E5 		str	r2, [r1, #16]
3572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 3738              		.loc 1 3572 0
 3739 0030 302095E5 		ldr	r2, [r5, #48]
 3740 0034 1C2081E5 		str	r2, [r1, #28]
3573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3741              		.loc 1 3573 0
 3742 0038 502095E5 		ldr	r2, [r5, #80]
 3743 003c 082081E5 		str	r2, [r1, #8]
3577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3744              		.loc 1 3577 0
 3745 0040 582095E5 		ldr	r2, [r5, #88]
 3746 0044 142081E5 		str	r2, [r1, #20]
3587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3747              		.loc 1 3587 0
 3748 0048 6C2095E5 		ldr	r2, [r5, #108]
 3749 004c 182081E5 		str	r2, [r1, #24]
3598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3750              		.loc 1 3598 0
 3751 0050 1900000A 		beq	.L416
3600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 3752              		.loc 1 3600 0
 3753 0054 78209FE5 		ldr	r2, .L429
 3754 0058 002092E5 		ldr	r2, [r2]
 3755 005c 020055E1 		cmp	r5, r2
3602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 3756              		.loc 1 3602 0
 3757 0060 0030A003 		moveq	r3, #0
 3758              	.LVL362:
 3759 0064 0C30C105 		strbeq	r3, [r1, #12]
3600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 3760              		.loc 1 3600 0
 3761 0068 0800000A 		beq	.L418
3613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 3762              		.loc 1 3613 0
 3763 006c 030053E3 		cmp	r3, #3
3606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3764              		.loc 1 3606 0
 3765 0070 0C30C1E5 		strb	r3, [r1, #12]
3613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 3766              		.loc 1 3613 0
 3767 0074 0500001A 		bne	.L418
3615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
 3768              		.loc 1 3615 0
 3769 0078 FEFFFFEB 		bl	vTaskSuspendAll
 3770              	.LVL363:
3617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							{
 3771              		.loc 1 3617 0
 3772 007c 283095E5 		ldr	r3, [r5, #40]
 3773 0080 000053E3 		cmp	r3, #0
3619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 							}
 3774              		.loc 1 3619 0
 3775 0084 0230A013 		movne	r3, #2
 3776 0088 0C30C115 		strbne	r3, [r1, #12]
3622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 3777              		.loc 1 3622 0
 3778 008c FEFFFFEB 		bl	xTaskResumeAll
 3779              	.LVL364:
 3780              	.L418:
3635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3781              		.loc 1 3635 0
 3782 0090 000056E3 		cmp	r6, #0
 3783 0094 0C00000A 		beq	.L420
 3784              	.LVL365:
 3785 0098 301095E5 		ldr	r1, [r5, #48]
3643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 3786              		.loc 1 3643 0
 3787 009c 0120A0E1 		mov	r2, r1
 3788              	.LVL366:
 3789              	.L421:
 3790 00a0 013042E0 		sub	r3, r2, r1
 3791              	.LVL367:
 3792              	.LBB74:
 3793              	.LBB75:
3695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3794              		.loc 1 3695 0
 3795 00a4 0100D2E4 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 3796              	.LVL368:
 3797 00a8 A50050E3 		cmp	r0, #165
 3798 00ac FBFFFF0A 		beq	.L421
 3799              	.LVL369:
3701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3800              		.loc 1 3701 0
 3801 00b0 2331A0E1 		lsr	r3, r3, #2
3703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 3802              		.loc 1 3703 0
 3803 00b4 B032C4E1 		strh	r3, [r4, #32]	@ movhi
 3804              	.LBE75:
 3805              	.LBE74:
 3806 00b8 7080BDE8 		pop	{r4, r5, r6, pc}
 3807              	.LVL370:
 3808              	.L416:
3630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3809              		.loc 1 3630 0
 3810 00bc 0500A0E1 		mov	r0, r5
 3811 00c0 FEFFFFEB 		bl	eTaskGetState
 3812              	.LVL371:
 3813 00c4 0C00C4E5 		strb	r0, [r4, #12]
 3814 00c8 F0FFFFEA 		b	.L418
 3815              	.L420:
3649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3816              		.loc 1 3649 0
 3817 00cc B062C4E1 		strh	r6, [r4, #32]	@ movhi
 3818 00d0 7080BDE8 		pop	{r4, r5, r6, pc}
 3819              	.L430:
 3820              		.align	2
 3821              	.L429:
 3822 00d4 00000000 		.word	.LANCHOR1
 3823              		.cfi_endproc
 3824              	.LFE44:
 3826              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 3827              		.align	2
 3828              		.syntax unified
 3829              		.arm
 3830              		.fpu neon
 3832              	prvListTasksWithinSingleList:
 3833              	.LFB45:
3659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 3834              		.loc 1 3659 0
 3835              		.cfi_startproc
 3836              		@ args = 0, pretend = 0, frame = 0
 3837              		@ frame_needed = 0, uses_anonymous_args = 0
 3838              	.LVL372:
 3839 0000 F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3840              		.cfi_def_cfa_offset 40
 3841              		.cfi_offset 3, -40
 3842              		.cfi_offset 4, -36
 3843              		.cfi_offset 5, -32
 3844              		.cfi_offset 6, -28
 3845              		.cfi_offset 7, -24
 3846              		.cfi_offset 8, -20
 3847              		.cfi_offset 9, -16
 3848              		.cfi_offset 10, -12
 3849              		.cfi_offset 11, -8
 3850              		.cfi_offset 14, -4
3663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3851              		.loc 1 3663 0
 3852 0004 004091E5 		ldr	r4, [r1]
 3853 0008 000054E3 		cmp	r4, #0
 3854 000c 1D00000A 		beq	.L431
 3855              	.LVL373:
 3856              	.LBB80:
 3857              	.LBB81:
 3858              	.LBB82:
3665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3859              		.loc 1 3665 0
 3860 0010 043091E5 		ldr	r3, [r1, #4]
 3861 0014 089081E2 		add	r9, r1, #8
 3862 0018 0270A0E1 		mov	r7, r2
 3863 001c 0150A0E1 		mov	r5, r1
 3864 0020 0060A0E1 		mov	r6, r0
 3865              	.LBE82:
3661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3866              		.loc 1 3661 0
 3867 0024 0040A0E3 		mov	r4, #0
 3868              	.LBB83:
3665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3869              		.loc 1 3665 0
 3870 0028 043093E5 		ldr	r3, [r3, #4]
 3871              	.LBE83:
3674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxTask++;
 3872              		.loc 1 3674 0
 3873 002c 24B0A0E3 		mov	fp, #36
 3874              	.LBB84:
3665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3875              		.loc 1 3665 0
 3876 0030 090053E1 		cmp	r3, r9
 3877 0034 043081E5 		str	r3, [r1, #4]
 3878 0038 0C309105 		ldreq	r3, [r1, #12]
 3879 003c 04308105 		streq	r3, [r1, #4]
 3880 0040 043091E5 		ldr	r3, [r1, #4]
 3881 0044 0CA093E5 		ldr	r10, [r3, #12]
 3882              	.LVL374:
 3883              	.L435:
 3884              	.LBE84:
 3885              	.LBB85:
3673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 3886              		.loc 1 3673 0
 3887 0048 043095E5 		ldr	r3, [r5, #4]
 3888              	.LBE85:
3674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxTask++;
 3889              		.loc 1 3674 0
 3890 004c 9B6421E0 		mla	r1, fp, r4, r6
 3891 0050 0120A0E3 		mov	r2, #1
 3892              	.LBB86:
3673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 3893              		.loc 1 3673 0
 3894 0054 043093E5 		ldr	r3, [r3, #4]
 3895              	.LBE86:
3675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 3896              		.loc 1 3675 0
 3897 0058 014084E2 		add	r4, r4, #1
 3898              	.LVL375:
 3899              	.LBB87:
3673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 3900              		.loc 1 3673 0
 3901 005c 030059E1 		cmp	r9, r3
 3902 0060 043085E5 		str	r3, [r5, #4]
 3903 0064 0C309505 		ldreq	r3, [r5, #12]
 3904 0068 04308505 		streq	r3, [r5, #4]
 3905 006c 043095E5 		ldr	r3, [r5, #4]
 3906 0070 0C8093E5 		ldr	r8, [r3, #12]
 3907              	.LVL376:
 3908              	.LBE87:
3674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxTask++;
 3909              		.loc 1 3674 0
 3910 0074 0730A0E1 		mov	r3, r7
 3911 0078 0800A0E1 		mov	r0, r8
 3912 007c FEFFFFEB 		bl	vTaskGetInfo
 3913              	.LVL377:
3676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 3914              		.loc 1 3676 0
 3915 0080 08005AE1 		cmp	r10, r8
 3916 0084 EFFFFF1A 		bne	.L435
 3917              	.LVL378:
 3918              	.L431:
 3919              	.LBE81:
 3920              	.LBE80:
3684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3921              		.loc 1 3684 0
 3922 0088 0400A0E1 		mov	r0, r4
 3923 008c F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3924              		.cfi_endproc
 3925              	.LFE45:
 3927              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3928              		.align	2
 3929              		.global	uxTaskGetSystemState
 3930              		.syntax unified
 3931              		.arm
 3932              		.fpu neon
 3934              	uxTaskGetSystemState:
 3935              	.LFB24:
2457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3936              		.loc 1 2457 0
 3937              		.cfi_startproc
 3938              		@ args = 0, pretend = 0, frame = 0
 3939              		@ frame_needed = 0, uses_anonymous_args = 0
 3940              	.LVL379:
 3941 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3942              		.cfi_def_cfa_offset 32
 3943              		.cfi_offset 4, -32
 3944              		.cfi_offset 5, -28
 3945              		.cfi_offset 6, -24
 3946              		.cfi_offset 7, -20
 3947              		.cfi_offset 8, -16
 3948              		.cfi_offset 9, -12
 3949              		.cfi_offset 10, -8
 3950              		.cfi_offset 14, -4
2457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3951              		.loc 1 2457 0
 3952 0004 0270A0E1 		mov	r7, r2
2460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 3953              		.loc 1 2460 0
 3954 0008 FEFFFFEB 		bl	vTaskSuspendAll
 3955              	.LVL380:
2463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 3956              		.loc 1 2463 0
 3957 000c B8309FE5 		ldr	r3, .L448
 3958 0010 003093E5 		ldr	r3, [r3]
 3959 0014 010053E1 		cmp	r3, r1
2458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3960              		.loc 1 2458 0
 3961 0018 0040A083 		movhi	r4, #0
2463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 3962              		.loc 1 2463 0
 3963 001c 2700008A 		bhi	.L440
2470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3964              		.loc 1 2470 0 discriminator 1
 3965 0020 A8909FE5 		ldr	r9, .L448+4
 3966 0024 0080A0E3 		mov	r8, #0
 3967 0028 0050A0E1 		mov	r5, r0
 3968 002c 0840A0E1 		mov	r4, r8
 3969 0030 2460A0E3 		mov	r6, #36
 3970              	.LVL381:
 3971              	.L441:
 3972 0034 5F1F88E2 		add	r1, r8, #380
 3973 0038 0120A0E3 		mov	r2, #1
 3974 003c 965420E0 		mla	r0, r6, r4, r5
 3975 0040 011089E0 		add	r1, r9, r1
 3976 0044 148048E2 		sub	r8, r8, #20
 3977 0048 FEFFFFEB 		bl	prvListTasksWithinSingleList
 3978              	.LVL382:
2472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3979              		.loc 1 2472 0 discriminator 1
 3980 004c 190E78E3 		cmn	r8, #400
2470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3981              		.loc 1 2470 0 discriminator 1
 3982 0050 004084E0 		add	r4, r4, r0
 3983              	.LVL383:
2472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3984              		.loc 1 2472 0 discriminator 1
 3985 0054 F6FFFF1A 		bne	.L441
2476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3986              		.loc 1 2476 0
 3987 0058 74309FE5 		ldr	r3, .L448+8
 3988 005c 0220A0E3 		mov	r2, #2
 3989 0060 965420E0 		mla	r0, r6, r4, r5
 3990 0064 001093E5 		ldr	r1, [r3]
 3991 0068 FEFFFFEB 		bl	prvListTasksWithinSingleList
 3992              	.LVL384:
2477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3993              		.loc 1 2477 0
 3994 006c 64309FE5 		ldr	r3, .L448+12
2476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3995              		.loc 1 2476 0
 3996 0070 004084E0 		add	r4, r4, r0
 3997              	.LVL385:
2477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 3998              		.loc 1 2477 0
 3999 0074 0220A0E3 		mov	r2, #2
 4000 0078 965420E0 		mla	r0, r6, r4, r5
 4001 007c 001093E5 		ldr	r1, [r3]
 4002 0080 FEFFFFEB 		bl	prvListTasksWithinSingleList
 4003              	.LVL386:
 4004 0084 004084E0 		add	r4, r4, r0
 4005              	.LVL387:
2483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4006              		.loc 1 2483 0
 4007 0088 0420A0E3 		mov	r2, #4
 4008 008c 48109FE5 		ldr	r1, .L448+16
 4009 0090 965420E0 		mla	r0, r6, r4, r5
 4010 0094 FEFFFFEB 		bl	prvListTasksWithinSingleList
 4011              	.LVL388:
 4012 0098 004084E0 		add	r4, r4, r0
 4013              	.LVL389:
2491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4014              		.loc 1 2491 0
 4015 009c 0320A0E3 		mov	r2, #3
 4016 00a0 965420E0 		mla	r0, r6, r4, r5
 4017 00a4 34109FE5 		ldr	r1, .L448+20
 4018 00a8 FEFFFFEB 		bl	prvListTasksWithinSingleList
 4019              	.LVL390:
2497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4020              		.loc 1 2497 0
 4021 00ac 000057E3 		cmp	r7, #0
2491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4022              		.loc 1 2491 0
 4023 00b0 004084E0 		add	r4, r4, r0
 4024              	.LVL391:
2497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4025              		.loc 1 2497 0
 4026 00b4 0100000A 		beq	.L440
2502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						#endif
 4027              		.loc 1 2502 0
 4028 00b8 FEFFFFEB 		bl	ulGetRunTimeCounterValue
 4029              	.LVL392:
 4030 00bc 000087E5 		str	r0, [r7]
 4031              	.LVL393:
 4032              	.L440:
2520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4033              		.loc 1 2520 0
 4034 00c0 FEFFFFEB 		bl	xTaskResumeAll
 4035              	.LVL394:
2523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4036              		.loc 1 2523 0
 4037 00c4 0400A0E1 		mov	r0, r4
 4038 00c8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4039              	.L449:
 4040              		.align	2
 4041              	.L448:
 4042 00cc 00000000 		.word	.LANCHOR0
 4043 00d0 00000000 		.word	.LANCHOR2
 4044 00d4 00000000 		.word	.LANCHOR8
 4045 00d8 00000000 		.word	.LANCHOR9
 4046 00dc 00000000 		.word	.LANCHOR6
 4047 00e0 00000000 		.word	.LANCHOR7
 4048              		.cfi_endproc
 4049              	.LFE24:
 4051              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4052              		.align	2
 4053              		.global	uxTaskGetStackHighWaterMark
 4054              		.syntax unified
 4055              		.arm
 4056              		.fpu neon
 4058              	uxTaskGetStackHighWaterMark:
 4059              	.LFB47:
3712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 4060              		.loc 1 3712 0
 4061              		.cfi_startproc
 4062              		@ args = 0, pretend = 0, frame = 0
 4063              		@ frame_needed = 0, uses_anonymous_args = 0
 4064              		@ link register save eliminated.
 4065              	.LVL395:
3717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4066              		.loc 1 3717 0
 4067 0000 000050E3 		cmp	r0, #0
 4068 0004 20309F05 		ldreq	r3, .L455
 4069 0008 00009305 		ldreq	r0, [r3]
 4070              	.LVL396:
 4071 000c 302090E5 		ldr	r2, [r0, #48]
3721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 4072              		.loc 1 3721 0
 4073 0010 0230A0E1 		mov	r3, r2
 4074              	.LVL397:
 4075              	.L452:
 4076 0014 020043E0 		sub	r0, r3, r2
 4077              	.LVL398:
 4078              	.LBB90:
 4079              	.LBB91:
3695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 4080              		.loc 1 3695 0
 4081 0018 0110D3E4 		ldrb	r1, [r3], #1	@ zero_extendqisi2
 4082              	.LVL399:
 4083 001c A50051E3 		cmp	r1, #165
 4084 0020 FBFFFF0A 		beq	.L452
 4085              	.LVL400:
 4086              	.LBE91:
 4087              	.LBE90:
3732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4088              		.loc 1 3732 0
 4089 0024 5001EFE7 		ubfx	r0, r0, #2, #16
 4090              	.LVL401:
 4091 0028 1EFF2FE1 		bx	lr
 4092              	.L456:
 4093              		.align	2
 4094              	.L455:
 4095 002c 00000000 		.word	.LANCHOR1
 4096              		.cfi_endproc
 4097              	.LFE47:
 4099              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4100              		.align	2
 4101              		.global	xTaskGetCurrentTaskHandle
 4102              		.syntax unified
 4103              		.arm
 4104              		.fpu neon
 4106              	xTaskGetCurrentTaskHandle:
 4107              	.LFB50:
3820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskHandle_t xReturn;
 4108              		.loc 1 3820 0
 4109              		.cfi_startproc
 4110              		@ args = 0, pretend = 0, frame = 0
 4111              		@ frame_needed = 0, uses_anonymous_args = 0
 4112              		@ link register save eliminated.
3826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4113              		.loc 1 3826 0
 4114 0000 04309FE5 		ldr	r3, .L458
 4115 0004 000093E5 		ldr	r0, [r3]
 4116              	.LVL402:
3829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4117              		.loc 1 3829 0
 4118 0008 1EFF2FE1 		bx	lr
 4119              	.L459:
 4120              		.align	2
 4121              	.L458:
 4122 000c 00000000 		.word	.LANCHOR1
 4123              		.cfi_endproc
 4124              	.LFE50:
 4126              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4127              		.align	2
 4128              		.global	xTaskGetSchedulerState
 4129              		.syntax unified
 4130              		.arm
 4131              		.fpu neon
 4133              	xTaskGetSchedulerState:
 4134              	.LFB51:
3837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn;
 4135              		.loc 1 3837 0
 4136              		.cfi_startproc
 4137              		@ args = 0, pretend = 0, frame = 0
 4138              		@ frame_needed = 0, uses_anonymous_args = 0
 4139              		@ link register save eliminated.
3840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 4140              		.loc 1 3840 0
 4141 0000 28309FE5 		ldr	r3, .L464
 4142 0004 003093E5 		ldr	r3, [r3]
 4143 0008 000053E3 		cmp	r3, #0
 4144 000c 0500000A 		beq	.L462
3846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4145              		.loc 1 3846 0
 4146 0010 1C309FE5 		ldr	r3, .L464+4
 4147 0014 003093E5 		ldr	r3, [r3]
 4148 0018 000053E3 		cmp	r3, #0
3852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 4149              		.loc 1 3852 0
 4150 001c 0200A003 		moveq	r0, #2
 4151 0020 0000A013 		movne	r0, #0
 4152 0024 1EFF2FE1 		bx	lr
 4153              	.L462:
3842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 4154              		.loc 1 3842 0
 4155 0028 0100A0E3 		mov	r0, #1
3857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4156              		.loc 1 3857 0
 4157 002c 1EFF2FE1 		bx	lr
 4158              	.L465:
 4159              		.align	2
 4160              	.L464:
 4161 0030 00000000 		.word	.LANCHOR10
 4162 0034 00000000 		.word	.LANCHOR16
 4163              		.cfi_endproc
 4164              	.LFE51:
 4166              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4167              		.align	2
 4168              		.global	xTaskPriorityInherit
 4169              		.syntax unified
 4170              		.arm
 4171              		.fpu neon
 4173              	xTaskPriorityInherit:
 4174              	.LFB52:
3865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4175              		.loc 1 3865 0
 4176              		.cfi_startproc
 4177              		@ args = 0, pretend = 0, frame = 0
 4178              		@ frame_needed = 0, uses_anonymous_args = 0
 4179              	.LVL403:
3872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 4180              		.loc 1 3872 0
 4181 0000 000050E3 		cmp	r0, #0
 4182 0004 1EFF2F01 		bxeq	lr
3877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4183              		.loc 1 3877 0
 4184 0008 B8309FE5 		ldr	r3, .L478
 4185 000c 2C2090E5 		ldr	r2, [r0, #44]
3865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4186              		.loc 1 3865 0
 4187 0010 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 4188              		.cfi_def_cfa_offset 24
 4189              		.cfi_offset 4, -24
 4190              		.cfi_offset 5, -20
 4191              		.cfi_offset 6, -16
 4192              		.cfi_offset 7, -12
 4193              		.cfi_offset 8, -8
 4194              		.cfi_offset 14, -4
3877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4195              		.loc 1 3877 0
 4196 0014 001093E5 		ldr	r1, [r3]
 4197 0018 0370A0E1 		mov	r7, r3
 4198 001c 2C1091E5 		ldr	r1, [r1, #44]
 4199 0020 010052E1 		cmp	r2, r1
 4200 0024 2000002A 		bcs	.L468
3882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4201              		.loc 1 3882 0
 4202 0028 183090E5 		ldr	r3, [r0, #24]
3893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4203              		.loc 1 3893 0
 4204 002c 1410A0E3 		mov	r1, #20
3882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4205              		.loc 1 3882 0
 4206 0030 000053E3 		cmp	r3, #0
3884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4207              		.loc 1 3884 0
 4208 0034 003097A5 		ldrge	r3, [r7]
 4209 0038 2C3093A5 		ldrge	r3, [r3, #44]
 4210 003c 143063A2 		rsbge	r3, r3, #20
 4211 0040 183080A5 		strge	r3, [r0, #24]
3893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4212              		.loc 1 3893 0
 4213 0044 80309FE5 		ldr	r3, .L478+4
 4214 0048 0340A0E1 		mov	r4, r3
 4215 004c 913222E0 		mla	r2, r1, r2, r3
 4216 0050 141090E5 		ldr	r1, [r0, #20]
 4217 0054 020051E1 		cmp	r1, r2
3911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4218              		.loc 1 3911 0
 4219 0058 00309715 		ldrne	r3, [r7]
 4220 005c 2C309315 		ldrne	r3, [r3, #44]
 4221 0060 2C308015 		strne	r3, [r0, #44]
3893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4222              		.loc 1 3893 0
 4223 0064 0E00001A 		bne	.L477
3895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4224              		.loc 1 3895 0
 4225 0068 045080E2 		add	r5, r0, #4
 4226 006c 0060A0E1 		mov	r6, r0
 4227 0070 0500A0E1 		mov	r0, r5
 4228              	.LVL404:
 4229 0074 FEFFFFEB 		bl	uxListRemove
 4230              	.LVL405:
3905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4231              		.loc 1 3905 0
 4232 0078 003097E5 		ldr	r3, [r7]
3906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4233              		.loc 1 3906 0
 4234 007c 1400A0E3 		mov	r0, #20
 4235 0080 48209FE5 		ldr	r2, .L478+8
3905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4236              		.loc 1 3905 0
 4237 0084 2C3093E5 		ldr	r3, [r3, #44]
3906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4238              		.loc 1 3906 0
 4239 0088 001092E5 		ldr	r1, [r2]
3905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4240              		.loc 1 3905 0
 4241 008c 2C3086E5 		str	r3, [r6, #44]
3906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4242              		.loc 1 3906 0
 4243 0090 010053E1 		cmp	r3, r1
 4244 0094 0510A0E1 		mov	r1, r5
 4245 0098 904320E0 		mla	r0, r0, r3, r4
 4246 009c 00308285 		strhi	r3, [r2]
 4247 00a0 FEFFFFEB 		bl	vListInsertEnd
 4248              	.LVL406:
 4249              	.L477:
3917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 4250              		.loc 1 3917 0
 4251 00a4 0100A0E3 		mov	r0, #1
 4252 00a8 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 4253              	.LVL407:
 4254              	.L468:
3921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4255              		.loc 1 3921 0
 4256 00ac 003093E5 		ldr	r3, [r3]
 4257 00b0 580090E5 		ldr	r0, [r0, #88]
 4258              	.LVL408:
 4259 00b4 2C3093E5 		ldr	r3, [r3, #44]
 4260 00b8 030050E1 		cmp	r0, r3
 4261 00bc 0000A023 		movcs	r0, #0
 4262 00c0 0100A033 		movcc	r0, #1
3944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4263              		.loc 1 3944 0
 4264 00c4 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 4265              	.L479:
 4266              		.align	2
 4267              	.L478:
 4268 00c8 00000000 		.word	.LANCHOR1
 4269 00cc 00000000 		.word	.LANCHOR2
 4270 00d0 00000000 		.word	.LANCHOR12
 4271              		.cfi_endproc
 4272              	.LFE52:
 4274              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4275              		.align	2
 4276              		.global	xTaskPriorityDisinherit
 4277              		.syntax unified
 4278              		.arm
 4279              		.fpu neon
 4281              	xTaskPriorityDisinherit:
 4282              	.LFB53:
3952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4283              		.loc 1 3952 0
 4284              		.cfi_startproc
 4285              		@ args = 0, pretend = 0, frame = 0
 4286              		@ frame_needed = 0, uses_anonymous_args = 0
 4287              	.LVL409:
 4288 0000 70402DE9 		push	{r4, r5, r6, lr}
 4289              		.cfi_def_cfa_offset 16
 4290              		.cfi_offset 4, -16
 4291              		.cfi_offset 5, -12
 4292              		.cfi_offset 6, -8
 4293              		.cfi_offset 14, -4
3956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 4294              		.loc 1 3956 0
 4295 0004 004050E2 		subs	r4, r0, #0
 4296 0008 0100001A 		bne	.L481
 4297              	.L485:
3954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4298              		.loc 1 3954 0
 4299 000c 0000A0E3 		mov	r0, #0
 4300              	.LVL410:
 4301 0010 7080BDE8 		pop	{r4, r5, r6, pc}
 4302              	.LVL411:
 4303              	.L481:
3962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4304              		.loc 1 3962 0
 4305 0014 90309FE5 		ldr	r3, .L494
 4306 0018 003093E5 		ldr	r3, [r3]
 4307 001c 030054E1 		cmp	r4, r3
 4308 0020 0200000A 		beq	.L483
 4309              	.L484:
3962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4310              		.loc 1 3962 0 is_stmt 0 discriminator 1
 4311 0024 0110A0E3 		mov	r1, #1
 4312 0028 80009FE5 		ldr	r0, .L494+4
 4313              	.LVL412:
 4314 002c FEFFFFEB 		bl	longjmp
 4315              	.LVL413:
 4316              	.L483:
3963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4317              		.loc 1 3963 0 is_stmt 1
 4318 0030 5C3094E5 		ldr	r3, [r4, #92]
 4319 0034 000053E3 		cmp	r3, #0
 4320 0038 F9FFFF0A 		beq	.L484
3968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4321              		.loc 1 3968 0
 4322 003c 2C2094E5 		ldr	r2, [r4, #44]
3964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4323              		.loc 1 3964 0
 4324 0040 013043E2 		sub	r3, r3, #1
3968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4325              		.loc 1 3968 0
 4326 0044 581094E5 		ldr	r1, [r4, #88]
3964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4327              		.loc 1 3964 0
 4328 0048 5C3084E5 		str	r3, [r4, #92]
3971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4329              		.loc 1 3971 0
 4330 004c 012052E0 		subs	r2, r2, r1
 4331 0050 0120A013 		movne	r2, #1
 4332 0054 000053E3 		cmp	r3, #0
 4333 0058 0020A013 		movne	r2, #0
 4334 005c 000052E3 		cmp	r2, #0
 4335 0060 E9FFFF0A 		beq	.L485
3978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4336              		.loc 1 3978 0
 4337 0064 045084E2 		add	r5, r4, #4
 4338 0068 0500A0E1 		mov	r0, r5
 4339              	.LVL414:
 4340 006c FEFFFFEB 		bl	uxListRemove
 4341              	.LVL415:
3990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4342              		.loc 1 3990 0
 4343 0070 583094E5 		ldr	r3, [r4, #88]
3996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4344              		.loc 1 3996 0
 4345 0074 1400A0E3 		mov	r0, #20
3995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4346              		.loc 1 3995 0
 4347 0078 142063E2 		rsb	r2, r3, #20
3990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4348              		.loc 1 3990 0
 4349 007c 2C3084E5 		str	r3, [r4, #44]
3995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4350              		.loc 1 3995 0
 4351 0080 182084E5 		str	r2, [r4, #24]
3996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4352              		.loc 1 3996 0
 4353 0084 28209FE5 		ldr	r2, .L494+8
 4354 0088 001092E5 		ldr	r1, [r2]
 4355 008c 010053E1 		cmp	r3, r1
 4356 0090 0510A0E1 		mov	r1, r5
 4357 0094 00308285 		strhi	r3, [r2]
 4358 0098 18209FE5 		ldr	r2, .L494+12
 4359 009c 902320E0 		mla	r0, r0, r3, r2
 4360 00a0 FEFFFFEB 		bl	vListInsertEnd
 4361              	.LVL416:
4006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4362              		.loc 1 4006 0
 4363 00a4 0100A0E3 		mov	r0, #1
4024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4364              		.loc 1 4024 0
 4365 00a8 7080BDE8 		pop	{r4, r5, r6, pc}
 4366              	.L495:
 4367              		.align	2
 4368              	.L494:
 4369 00ac 00000000 		.word	.LANCHOR1
 4370 00b0 28000000 		.word	Unity+40
 4371 00b4 00000000 		.word	.LANCHOR12
 4372 00b8 00000000 		.word	.LANCHOR2
 4373              		.cfi_endproc
 4374              	.LFE53:
 4376              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4377              		.align	2
 4378              		.global	vTaskPriorityDisinheritAfterTimeout
 4379              		.syntax unified
 4380              		.arm
 4381              		.fpu neon
 4383              	vTaskPriorityDisinheritAfterTimeout:
 4384              	.LFB54:
4032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4385              		.loc 1 4032 0
 4386              		.cfi_startproc
 4387              		@ args = 0, pretend = 0, frame = 0
 4388              		@ frame_needed = 0, uses_anonymous_args = 0
 4389              	.LVL417:
 4390 0000 70402DE9 		push	{r4, r5, r6, lr}
 4391              		.cfi_def_cfa_offset 16
 4392              		.cfi_offset 4, -16
 4393              		.cfi_offset 5, -12
 4394              		.cfi_offset 6, -8
 4395              		.cfi_offset 14, -4
4037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 4396              		.loc 1 4037 0
 4397 0004 004050E2 		subs	r4, r0, #0
 4398 0008 7080BD08 		popeq	{r4, r5, r6, pc}
4041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4399              		.loc 1 4041 0
 4400 000c 5C2094E5 		ldr	r2, [r4, #92]
 4401 0010 000052E3 		cmp	r2, #0
 4402 0014 0200001A 		bne	.L499
 4403              	.LVL418:
 4404              	.L501:
4041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4405              		.loc 1 4041 0 is_stmt 0 discriminator 1
 4406 0018 0110A0E3 		mov	r1, #1
 4407 001c A0009FE5 		ldr	r0, .L508
 4408              	.LVL419:
 4409 0020 FEFFFFEB 		bl	longjmp
 4410              	.LVL420:
 4411              	.L499:
 4412 0024 583094E5 		ldr	r3, [r4, #88]
4063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4413              		.loc 1 4063 0 is_stmt 1
 4414 0028 012042E2 		sub	r2, r2, #1
 4415 002c 122F6FE1 		clz	r2, r2
 4416 0030 A222A0E1 		lsr	r2, r2, #5
 4417 0034 030051E1 		cmp	r1, r3
 4418 0038 0310A031 		movcc	r1, r3
 4419              	.LVL421:
4057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4420              		.loc 1 4057 0
 4421 003c 2C3094E5 		ldr	r3, [r4, #44]
4063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4422              		.loc 1 4063 0
 4423 0040 010053E1 		cmp	r3, r1
 4424 0044 0020A003 		moveq	r2, #0
 4425 0048 000052E3 		cmp	r2, #0
 4426 004c 7080BD08 		popeq	{r4, r5, r6, pc}
4068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4427              		.loc 1 4068 0
 4428 0050 70209FE5 		ldr	r2, .L508+4
 4429 0054 002092E5 		ldr	r2, [r2]
 4430 0058 020054E1 		cmp	r4, r2
 4431 005c EDFFFF0A 		beq	.L501
 4432              	.LVL422:
4079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4433              		.loc 1 4079 0
 4434 0060 182094E5 		ldr	r2, [r4, #24]
4094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4435              		.loc 1 4094 0
 4436 0064 60009FE5 		ldr	r0, .L508+8
 4437              	.LVL423:
4075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4438              		.loc 1 4075 0
 4439 0068 2C1084E5 		str	r1, [r4, #44]
4079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4440              		.loc 1 4079 0
 4441 006c 000052E3 		cmp	r2, #0
4094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4442              		.loc 1 4094 0
 4443 0070 1420A0E3 		mov	r2, #20
4081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 4444              		.loc 1 4081 0
 4445 0074 141061A2 		rsbge	r1, r1, #20
 4446              	.LVL424:
 4447 0078 0050A0E1 		mov	r5, r0
4094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4448              		.loc 1 4094 0
 4449 007c 920323E0 		mla	r3, r2, r3, r0
 4450              	.LVL425:
 4451 0080 142094E5 		ldr	r2, [r4, #20]
4081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 4452              		.loc 1 4081 0
 4453 0084 181084A5 		strge	r1, [r4, #24]
4094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4454              		.loc 1 4094 0
 4455 0088 030052E1 		cmp	r2, r3
 4456 008c 7080BD18 		popne	{r4, r5, r6, pc}
4096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						{
 4457              		.loc 1 4096 0
 4458 0090 046084E2 		add	r6, r4, #4
 4459 0094 0600A0E1 		mov	r0, r6
 4460 0098 FEFFFFEB 		bl	uxListRemove
 4461              	.LVL426:
4105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 4462              		.loc 1 4105 0
 4463 009c 2C209FE5 		ldr	r2, .L508+12
 4464 00a0 1400A0E3 		mov	r0, #20
 4465 00a4 2C3094E5 		ldr	r3, [r4, #44]
 4466 00a8 001092E5 		ldr	r1, [r2]
 4467 00ac 905320E0 		mla	r0, r0, r3, r5
 4468 00b0 010053E1 		cmp	r3, r1
 4469 00b4 0610A0E1 		mov	r1, r6
4126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4470              		.loc 1 4126 0
 4471 00b8 7040BDE8 		pop	{r4, r5, r6, lr}
 4472              		.cfi_restore 14
 4473              		.cfi_restore 6
 4474              		.cfi_restore 5
 4475              		.cfi_restore 4
 4476              		.cfi_def_cfa_offset 0
 4477              	.LVL427:
4105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 4478              		.loc 1 4105 0
 4479 00bc 00308285 		strhi	r3, [r2]
 4480 00c0 FEFFFFEA 		b	vListInsertEnd
 4481              	.LVL428:
 4482              	.L509:
 4483              		.align	2
 4484              	.L508:
 4485 00c4 28000000 		.word	Unity+40
 4486 00c8 00000000 		.word	.LANCHOR1
 4487 00cc 00000000 		.word	.LANCHOR2
 4488 00d0 00000000 		.word	.LANCHOR12
 4489              		.cfi_endproc
 4490              	.LFE54:
 4492              		.section	.text.vTaskList,"ax",%progbits
 4493              		.align	2
 4494              		.global	vTaskList
 4495              		.syntax unified
 4496              		.arm
 4497              		.fpu neon
 4499              	vTaskList:
 4500              	.LFB56:
4223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4501              		.loc 1 4223 0
 4502              		.cfi_startproc
 4503              		@ args = 0, pretend = 0, frame = 0
 4504              		@ frame_needed = 0, uses_anonymous_args = 0
 4505              	.LVL429:
4258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4506              		.loc 1 4258 0
 4507 0000 BC309FE5 		ldr	r3, .L517
4223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4508              		.loc 1 4223 0
 4509 0004 F74F2DE9 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4510              		.cfi_def_cfa_offset 48
 4511              		.cfi_offset 4, -36
 4512              		.cfi_offset 5, -32
 4513              		.cfi_offset 6, -28
 4514              		.cfi_offset 7, -24
 4515              		.cfi_offset 8, -20
 4516              		.cfi_offset 9, -16
 4517              		.cfi_offset 10, -12
 4518              		.cfi_offset 11, -8
 4519              		.cfi_offset 14, -4
4254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4520              		.loc 1 4254 0
 4521 0008 0040A0E3 		mov	r4, #0
 4522 000c 0040C0E5 		strb	r4, [r0]
4223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4523              		.loc 1 4223 0
 4524 0010 0050A0E1 		mov	r5, r0
4263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4525              		.loc 1 4263 0
 4526 0014 2400A0E3 		mov	r0, #36
 4527              	.LVL430:
4258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4528              		.loc 1 4258 0
 4529 0018 006093E5 		ldr	r6, [r3]
 4530              	.LVL431:
4263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4531              		.loc 1 4263 0
 4532 001c 003093E5 		ldr	r3, [r3]
 4533 0020 900300E0 		mul	r0, r0, r3
 4534 0024 FEFFFFEB 		bl	pvPortMalloc
 4535              	.LVL432:
4265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 4536              		.loc 1 4265 0
 4537 0028 007050E2 		subs	r7, r0, #0
 4538 002c 2200000A 		beq	.L510
 4539 0030 90909FE5 		ldr	r9, .L517+4
4268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4540              		.loc 1 4268 0
 4541 0034 0610A0E1 		mov	r1, r6
4302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
 4542              		.loc 1 4302 0
 4543 0038 8CA09FE5 		ldr	r10, .L517+8
4268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4544              		.loc 1 4268 0
 4545 003c 0420A0E1 		mov	r2, r4
 4546 0040 FEFFFFEB 		bl	uxTaskGetSystemState
 4547              	.LVL433:
 4548 0044 0760A0E1 		mov	r6, r7
 4549              	.LVL434:
 4550 0048 0080A0E1 		mov	r8, r0
 4551              	.LVL435:
 4552              	.L512:
4271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4553              		.loc 1 4271 0 discriminator 1
 4554 004c 080054E1 		cmp	r4, r8
 4555 0050 0300001A 		bne	.L514
4308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 4556              		.loc 1 4308 0
 4557 0054 0700A0E1 		mov	r0, r7
4314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4558              		.loc 1 4314 0
 4559 0058 0CD08DE2 		add	sp, sp, #12
 4560              		.cfi_remember_state
 4561              		.cfi_def_cfa_offset 36
 4562              		@ sp needed
 4563 005c F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4564              		.cfi_restore 14
 4565              		.cfi_restore 11
 4566              		.cfi_restore 10
 4567              		.cfi_restore 9
 4568              		.cfi_restore 8
 4569              		.cfi_restore 7
 4570              		.cfi_restore 6
 4571              		.cfi_restore 5
 4572              		.cfi_restore 4
 4573              		.cfi_def_cfa_offset 0
 4574              	.LVL436:
4308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 4575              		.loc 1 4308 0
 4576 0060 FEFFFFEA 		b	vPortFree
 4577              	.LVL437:
 4578              	.L514:
 4579              		.cfi_restore_state
4273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4580              		.loc 1 4273 0
 4581 0064 0C30D6E5 		ldrb	r3, [r6, #12]	@ zero_extendqisi2
4299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4582              		.loc 1 4299 0
 4583 0068 0500A0E1 		mov	r0, r5
 4584 006c 041096E5 		ldr	r1, [r6, #4]
4271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4585              		.loc 1 4271 0
 4586 0070 014084E2 		add	r4, r4, #1
 4587              	.LVL438:
 4588 0074 246086E2 		add	r6, r6, #36
 4589 0078 040053E3 		cmp	r3, #4
 4590 007c 03B0D997 		ldrbls	fp, [r9, r3]	@ zero_extendqisi2
4273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4591              		.loc 1 4273 0
 4592 0080 00B0A083 		movhi	fp, #0
 4593              	.LVL439:
4299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4594              		.loc 1 4299 0
 4595 0084 FEFFFFEB 		bl	prvWriteNameToBuffer
 4596              	.LVL440:
4302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
 4597              		.loc 1 4302 0
 4598 0088 1C3016E5 		ldr	r3, [r6, #-28]
4299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4599              		.loc 1 4299 0
 4600 008c 0050A0E1 		mov	r5, r0
 4601              	.LVL441:
4302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
 4602              		.loc 1 4302 0
 4603 0090 0B20A0E1 		mov	r2, fp
 4604 0094 0A10A0E1 		mov	r1, r10
 4605 0098 04308DE5 		str	r3, [sp, #4]
 4606 009c B43056E1 		ldrh	r3, [r6, #-4]
 4607 00a0 00308DE5 		str	r3, [sp]
 4608 00a4 143016E5 		ldr	r3, [r6, #-20]
 4609 00a8 FEFFFFEB 		bl	sprintf
 4610              	.LVL442:
4303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 4611              		.loc 1 4303 0
 4612 00ac 0500A0E1 		mov	r0, r5
 4613 00b0 FEFFFFEB 		bl	strlen
 4614              	.LVL443:
 4615 00b4 005085E0 		add	r5, r5, r0
 4616              	.LVL444:
 4617 00b8 E3FFFFEA 		b	.L512
 4618              	.LVL445:
 4619              	.L510:
4314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4620              		.loc 1 4314 0
 4621 00bc 0CD08DE2 		add	sp, sp, #12
 4622              		.cfi_def_cfa_offset 36
 4623              		@ sp needed
 4624 00c0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4625              	.LVL446:
 4626              	.L518:
 4627              		.align	2
 4628              	.L517:
 4629 00c4 00000000 		.word	.LANCHOR0
 4630 00c8 00000000 		.word	.LANCHOR21
 4631 00cc 00000000 		.word	.LC1
 4632              		.cfi_endproc
 4633              	.LFE56:
 4635              		.global	__aeabi_uidiv
 4636              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
 4637              		.align	2
 4638              		.global	vTaskGetRunTimeStats
 4639              		.syntax unified
 4640              		.arm
 4641              		.fpu neon
 4643              	vTaskGetRunTimeStats:
 4644              	.LFB57:
4322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4645              		.loc 1 4322 0
 4646              		.cfi_startproc
 4647              		@ args = 0, pretend = 0, frame = 8
 4648              		@ frame_needed = 0, uses_anonymous_args = 0
 4649              	.LVL447:
4363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4650              		.loc 1 4363 0
 4651 0000 D8309FE5 		ldr	r3, .L531
4322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4652              		.loc 1 4322 0
 4653 0004 F74F2DE9 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4654              		.cfi_def_cfa_offset 48
 4655              		.cfi_offset 4, -36
 4656              		.cfi_offset 5, -32
 4657              		.cfi_offset 6, -28
 4658              		.cfi_offset 7, -24
 4659              		.cfi_offset 8, -20
 4660              		.cfi_offset 9, -16
 4661              		.cfi_offset 10, -12
 4662              		.cfi_offset 11, -8
 4663              		.cfi_offset 14, -4
4359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4664              		.loc 1 4359 0
 4665 0008 0040A0E3 		mov	r4, #0
 4666 000c 0040C0E5 		strb	r4, [r0]
4322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 4667              		.loc 1 4322 0
 4668 0010 0060A0E1 		mov	r6, r0
4368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4669              		.loc 1 4368 0
 4670 0014 2400A0E3 		mov	r0, #36
 4671              	.LVL448:
4363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4672              		.loc 1 4363 0
 4673 0018 005093E5 		ldr	r5, [r3]
 4674              	.LVL449:
4368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4675              		.loc 1 4368 0
 4676 001c 003093E5 		ldr	r3, [r3]
 4677 0020 900300E0 		mul	r0, r0, r3
 4678 0024 FEFFFFEB 		bl	pvPortMalloc
 4679              	.LVL450:
4370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 4680              		.loc 1 4370 0
 4681 0028 007050E2 		subs	r7, r0, #0
 4682 002c 0C00000A 		beq	.L519
4373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4683              		.loc 1 4373 0
 4684 0030 04208DE2 		add	r2, sp, #4
 4685 0034 0510A0E1 		mov	r1, r5
 4686 0038 FEFFFFEB 		bl	uxTaskGetSystemState
 4687              	.LVL451:
4376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4688              		.loc 1 4376 0
 4689 003c 04209DE5 		ldr	r2, [sp, #4]
4373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4690              		.loc 1 4373 0
 4691 0040 0080A0E1 		mov	r8, r0
 4692              	.LVL452:
4376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4693              		.loc 1 4376 0
 4694 0044 98309FE5 		ldr	r3, .L531+4
 4695 0048 922383E0 		umull	r2, r3, r2, r3
 4696 004c A332A0E1 		lsr	r3, r3, #5
4379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4697              		.loc 1 4379 0
 4698 0050 040053E1 		cmp	r3, r4
4376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4699              		.loc 1 4376 0
 4700 0054 04308DE5 		str	r3, [sp, #4]
4379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4701              		.loc 1 4379 0
 4702 0058 0300001A 		bne	.L521
 4703              	.LVL453:
 4704              	.L526:
4435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 4705              		.loc 1 4435 0
 4706 005c 0700A0E1 		mov	r0, r7
 4707 0060 FEFFFFEB 		bl	vPortFree
 4708              	.LVL454:
 4709              	.L519:
4441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4710              		.loc 1 4441 0
 4711 0064 0CD08DE2 		add	sp, sp, #12
 4712              		.cfi_remember_state
 4713              		.cfi_def_cfa_offset 36
 4714              		@ sp needed
 4715 0068 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4716              	.LVL455:
 4717              	.L521:
 4718              		.cfi_restore_state
4420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
 4719              		.loc 1 4420 0
 4720 006c 74909FE5 		ldr	r9, .L531+8
 4721 0070 0750A0E1 		mov	r5, r7
4404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
 4722              		.loc 1 4404 0
 4723 0074 70A09FE5 		ldr	r10, .L531+12
 4724              	.LVL456:
 4725              	.L522:
4382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4726              		.loc 1 4382 0 discriminator 1
 4727 0078 080054E1 		cmp	r4, r8
 4728 007c F6FFFF0A 		beq	.L526
4387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4729              		.loc 1 4387 0
 4730 0080 04109DE5 		ldr	r1, [sp, #4]
 4731 0084 180095E5 		ldr	r0, [r5, #24]
 4732 0088 FEFFFFEB 		bl	__aeabi_uidiv
 4733              	.LVL457:
4392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4734              		.loc 1 4392 0
 4735 008c 041095E5 		ldr	r1, [r5, #4]
4387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4736              		.loc 1 4387 0
 4737 0090 00B0A0E1 		mov	fp, r0
 4738              	.LVL458:
4392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4739              		.loc 1 4392 0
 4740 0094 0600A0E1 		mov	r0, r6
 4741              	.LVL459:
 4742 0098 FEFFFFEB 		bl	prvWriteNameToBuffer
 4743              	.LVL460:
4394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4744              		.loc 1 4394 0
 4745 009c 00005BE3 		cmp	fp, #0
4392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4746              		.loc 1 4392 0
 4747 00a0 0060A0E1 		mov	r6, r0
 4748              	.LVL461:
4394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 4749              		.loc 1 4394 0
 4750 00a4 0900000A 		beq	.L523
4404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
 4751              		.loc 1 4404 0
 4752 00a8 0B30A0E1 		mov	r3, fp
 4753 00ac 182095E5 		ldr	r2, [r5, #24]
 4754 00b0 0A10A0E1 		mov	r1, r10
 4755 00b4 FEFFFFEB 		bl	sprintf
 4756              	.LVL462:
 4757              	.L524:
4425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4758              		.loc 1 4425 0 discriminator 2
 4759 00b8 0600A0E1 		mov	r0, r6
4382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4760              		.loc 1 4382 0 discriminator 2
 4761 00bc 014084E2 		add	r4, r4, #1
 4762              	.LVL463:
4425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4763              		.loc 1 4425 0 discriminator 2
 4764 00c0 FEFFFFEB 		bl	strlen
 4765              	.LVL464:
 4766 00c4 245085E2 		add	r5, r5, #36
 4767 00c8 006086E0 		add	r6, r6, r0
 4768              	.LVL465:
 4769 00cc E9FFFFEA 		b	.L522
 4770              	.LVL466:
 4771              	.L523:
4420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 						}
 4772              		.loc 1 4420 0
 4773 00d0 182095E5 		ldr	r2, [r5, #24]
 4774 00d4 0910A0E1 		mov	r1, r9
 4775 00d8 FEFFFFEB 		bl	sprintf
 4776              	.LVL467:
 4777 00dc F5FFFFEA 		b	.L524
 4778              	.L532:
 4779              		.align	2
 4780              	.L531:
 4781 00e0 00000000 		.word	.LANCHOR0
 4782 00e4 1F85EB51 		.word	1374389535
 4783 00e8 0C000000 		.word	.LC3
 4784 00ec 00000000 		.word	.LC2
 4785              		.cfi_endproc
 4786              	.LFE57:
 4788              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4789              		.align	2
 4790              		.global	uxTaskResetEventItemValue
 4791              		.syntax unified
 4792              		.arm
 4793              		.fpu neon
 4795              	uxTaskResetEventItemValue:
 4796              	.LFB58:
4447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** TickType_t uxReturn;
 4797              		.loc 1 4447 0
 4798              		.cfi_startproc
 4799              		@ args = 0, pretend = 0, frame = 0
 4800              		@ frame_needed = 0, uses_anonymous_args = 0
 4801              		@ link register save eliminated.
4450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4802              		.loc 1 4450 0
 4803 0000 1C309FE5 		ldr	r3, .L534
 4804 0004 002093E5 		ldr	r2, [r3]
 4805 0008 180092E5 		ldr	r0, [r2, #24]
 4806              	.LVL468:
4454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4807              		.loc 1 4454 0
 4808 000c 002093E5 		ldr	r2, [r3]
 4809 0010 003093E5 		ldr	r3, [r3]
 4810 0014 2C3093E5 		ldr	r3, [r3, #44]
 4811 0018 143063E2 		rsb	r3, r3, #20
 4812 001c 183082E5 		str	r3, [r2, #24]
4457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** /*-----------------------------------------------------------*/
 4813              		.loc 1 4457 0
 4814 0020 1EFF2FE1 		bx	lr
 4815              	.L535:
 4816              		.align	2
 4817              	.L534:
 4818 0024 00000000 		.word	.LANCHOR1
 4819              		.cfi_endproc
 4820              	.LFE58:
 4822              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4823              		.align	2
 4824              		.global	pvTaskIncrementMutexHeldCount
 4825              		.syntax unified
 4826              		.arm
 4827              		.fpu neon
 4829              	pvTaskIncrementMutexHeldCount:
 4830              	.LFB59:
4463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4831              		.loc 1 4463 0
 4832              		.cfi_startproc
 4833              		@ args = 0, pretend = 0, frame = 0
 4834              		@ frame_needed = 0, uses_anonymous_args = 0
 4835              		@ link register save eliminated.
4466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 4836              		.loc 1 4466 0
 4837 0000 1C309FE5 		ldr	r3, .L541
 4838 0004 002093E5 		ldr	r2, [r3]
 4839 0008 000052E3 		cmp	r2, #0
4468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 4840              		.loc 1 4468 0
 4841 000c 00109315 		ldrne	r1, [r3]
4471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 4842              		.loc 1 4471 0
 4843 0010 000093E5 		ldr	r0, [r3]
4468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 4844              		.loc 1 4468 0
 4845 0014 5C209115 		ldrne	r2, [r1, #92]
 4846 0018 01208212 		addne	r2, r2, #1
 4847 001c 5C208115 		strne	r2, [r1, #92]
4472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4848              		.loc 1 4472 0
 4849 0020 1EFF2FE1 		bx	lr
 4850              	.L542:
 4851              		.align	2
 4852              	.L541:
 4853 0024 00000000 		.word	.LANCHOR1
 4854              		.cfi_endproc
 4855              	.LFE59:
 4857              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4858              		.align	2
 4859              		.global	ulTaskNotifyTake
 4860              		.syntax unified
 4861              		.arm
 4862              		.fpu neon
 4864              	ulTaskNotifyTake:
 4865              	.LFB60:
4480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uint32_t ulReturn;
 4866              		.loc 1 4480 0
 4867              		.cfi_startproc
 4868              		@ args = 0, pretend = 0, frame = 0
 4869              		@ frame_needed = 0, uses_anonymous_args = 0
 4870              	.LVL469:
 4871 0000 70402DE9 		push	{r4, r5, r6, lr}
 4872              		.cfi_def_cfa_offset 16
 4873              		.cfi_offset 4, -16
 4874              		.cfi_offset 5, -12
 4875              		.cfi_offset 6, -8
 4876              		.cfi_offset 14, -4
4480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uint32_t ulReturn;
 4877              		.loc 1 4480 0
 4878 0004 0060A0E1 		mov	r6, r0
4486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4879              		.loc 1 4486 0
 4880 0008 78409FE5 		ldr	r4, .L557
4480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	uint32_t ulReturn;
 4881              		.loc 1 4480 0
 4882 000c 0150A0E1 		mov	r5, r1
4483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 4883              		.loc 1 4483 0
 4884 0010 FEFFFFEB 		bl	vPortEnterCritical
 4885              	.LVL470:
4486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4886              		.loc 1 4486 0
 4887 0014 003094E5 		ldr	r3, [r4]
 4888 0018 703093E5 		ldr	r3, [r3, #112]
 4889 001c 000053E3 		cmp	r3, #0
 4890 0020 0700001A 		bne	.L545
4489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4891              		.loc 1 4489 0
 4892 0024 003094E5 		ldr	r3, [r4]
4491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4893              		.loc 1 4491 0
 4894 0028 000055E3 		cmp	r5, #0
4489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4895              		.loc 1 4489 0
 4896 002c 0110A0E3 		mov	r1, #1
 4897 0030 7410C3E5 		strb	r1, [r3, #116]
4491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4898              		.loc 1 4491 0
 4899 0034 0200000A 		beq	.L545
4493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4900              		.loc 1 4493 0
 4901 0038 0500A0E1 		mov	r0, r5
 4902 003c FEFFFFEB 		bl	prvAddCurrentTaskToDelayedList
 4903              	.LVL471:
4500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4904              		.loc 1 4500 0
 4905              		.syntax divided
 4906              	@ 4500 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 4907 0040 000000EF 		SWI 0
 4908              	@ 0 "" 2
 4909              		.arm
 4910              		.syntax unified
 4911              	.L545:
4512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4912              		.loc 1 4512 0
 4913 0044 FEFFFFEB 		bl	vPortExitCritical
 4914              	.LVL472:
4514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 4915              		.loc 1 4514 0
 4916 0048 FEFFFFEB 		bl	vPortEnterCritical
 4917              	.LVL473:
4517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4918              		.loc 1 4517 0
 4919 004c 003094E5 		ldr	r3, [r4]
 4920 0050 705093E5 		ldr	r5, [r3, #112]
 4921              	.LVL474:
4519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4922              		.loc 1 4519 0
 4923 0054 000055E3 		cmp	r5, #0
 4924 0058 0400000A 		beq	.L547
4523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4925              		.loc 1 4523 0
 4926 005c 003094E5 		ldr	r3, [r4]
4521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4927              		.loc 1 4521 0
 4928 0060 000056E3 		cmp	r6, #0
4523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4929              		.loc 1 4523 0
 4930 0064 0020A013 		movne	r2, #0
4527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 4931              		.loc 1 4527 0
 4932 0068 01204502 		subeq	r2, r5, #1
 4933 006c 702083E5 		str	r2, [r3, #112]
 4934              	.L547:
4535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 4935              		.loc 1 4535 0
 4936 0070 003094E5 		ldr	r3, [r4]
 4937 0074 0020A0E3 		mov	r2, #0
 4938 0078 7420C3E5 		strb	r2, [r3, #116]
4537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4939              		.loc 1 4537 0
 4940 007c FEFFFFEB 		bl	vPortExitCritical
 4941              	.LVL475:
4540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4942              		.loc 1 4540 0
 4943 0080 0500A0E1 		mov	r0, r5
 4944 0084 7080BDE8 		pop	{r4, r5, r6, pc}
 4945              	.L558:
 4946              		.align	2
 4947              	.L557:
 4948 0088 00000000 		.word	.LANCHOR1
 4949              		.cfi_endproc
 4950              	.LFE60:
 4952              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4953              		.align	2
 4954              		.global	xTaskNotifyWait
 4955              		.syntax unified
 4956              		.arm
 4957              		.fpu neon
 4959              	xTaskNotifyWait:
 4960              	.LFB61:
4548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn;
 4961              		.loc 1 4548 0
 4962              		.cfi_startproc
 4963              		@ args = 0, pretend = 0, frame = 0
 4964              		@ frame_needed = 0, uses_anonymous_args = 0
 4965              	.LVL476:
 4966 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 4967              		.cfi_def_cfa_offset 24
 4968              		.cfi_offset 4, -24
 4969              		.cfi_offset 5, -20
 4970              		.cfi_offset 6, -16
 4971              		.cfi_offset 7, -12
 4972              		.cfi_offset 8, -8
 4973              		.cfi_offset 14, -4
4548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn;
 4974              		.loc 1 4548 0
 4975 0004 0360A0E1 		mov	r6, r3
4554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4976              		.loc 1 4554 0
 4977 0008 A0409FE5 		ldr	r4, .L573
4548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	BaseType_t xReturn;
 4978              		.loc 1 4548 0
 4979 000c 0080A0E1 		mov	r8, r0
 4980 0010 0170A0E1 		mov	r7, r1
 4981 0014 0250A0E1 		mov	r5, r2
4551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 4982              		.loc 1 4551 0
 4983 0018 FEFFFFEB 		bl	vPortEnterCritical
 4984              	.LVL477:
4554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 4985              		.loc 1 4554 0
 4986 001c 003094E5 		ldr	r3, [r4]
 4987 0020 7430D3E5 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 4988 0024 020053E3 		cmp	r3, #2
 4989 0028 0B00000A 		beq	.L561
4559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4990              		.loc 1 4559 0
 4991 002c 003094E5 		ldr	r3, [r4]
4564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 4992              		.loc 1 4564 0
 4993 0030 000056E3 		cmp	r6, #0
4562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4994              		.loc 1 4562 0
 4995 0034 0110A0E3 		mov	r1, #1
4559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 4996              		.loc 1 4559 0
 4997 0038 702093E5 		ldr	r2, [r3, #112]
 4998 003c 0820C2E1 		bic	r2, r2, r8
 4999 0040 702083E5 		str	r2, [r3, #112]
4562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5000              		.loc 1 4562 0
 5001 0044 003094E5 		ldr	r3, [r4]
 5002 0048 7410C3E5 		strb	r1, [r3, #116]
4564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 5003              		.loc 1 4564 0
 5004 004c 0200000A 		beq	.L561
4566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5005              		.loc 1 4566 0
 5006 0050 0600A0E1 		mov	r0, r6
 5007 0054 FEFFFFEB 		bl	prvAddCurrentTaskToDelayedList
 5008              	.LVL478:
4573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5009              		.loc 1 4573 0
 5010              		.syntax divided
 5011              	@ 4573 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 5012 0058 000000EF 		SWI 0
 5013              	@ 0 "" 2
 5014              		.arm
 5015              		.syntax unified
 5016              	.L561:
4585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5017              		.loc 1 4585 0
 5018 005c FEFFFFEB 		bl	vPortExitCritical
 5019              	.LVL479:
4587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 5020              		.loc 1 4587 0
 5021 0060 FEFFFFEB 		bl	vPortEnterCritical
 5022              	.LVL480:
4591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 5023              		.loc 1 4591 0
 5024 0064 000055E3 		cmp	r5, #0
4615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 5025              		.loc 1 4615 0
 5026 0068 0020A0E3 		mov	r2, #0
4595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 5027              		.loc 1 4595 0
 5028 006c 00309415 		ldrne	r3, [r4]
 5029 0070 70309315 		ldrne	r3, [r3, #112]
 5030 0074 00308515 		strne	r3, [r5]
4602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 5031              		.loc 1 4602 0
 5032 0078 003094E5 		ldr	r3, [r4]
 5033 007c 7430D3E5 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 5034 0080 020053E3 		cmp	r3, #2
4611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdTRUE;
 5035              		.loc 1 4611 0
 5036 0084 00309405 		ldreq	r3, [r4]
4612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 5037              		.loc 1 4612 0
 5038 0088 0150A003 		moveq	r5, #1
 5039              	.LVL481:
4605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 5040              		.loc 1 4605 0
 5041 008c 0050A013 		movne	r5, #0
4611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdTRUE;
 5042              		.loc 1 4611 0
 5043 0090 70109305 		ldreq	r1, [r3, #112]
 5044 0094 0710C101 		biceq	r1, r1, r7
 5045 0098 70108305 		streq	r1, [r3, #112]
 5046              	.LVL482:
4615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		}
 5047              		.loc 1 4615 0
 5048 009c 003094E5 		ldr	r3, [r4]
 5049 00a0 7420C3E5 		strb	r2, [r3, #116]
4617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5050              		.loc 1 4617 0
 5051 00a4 FEFFFFEB 		bl	vPortExitCritical
 5052              	.LVL483:
4620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5053              		.loc 1 4620 0
 5054 00a8 0500A0E1 		mov	r0, r5
 5055 00ac F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 5056              	.L574:
 5057              		.align	2
 5058              	.L573:
 5059 00b0 00000000 		.word	.LANCHOR1
 5060              		.cfi_endproc
 5061              	.LFE61:
 5063              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5064              		.align	2
 5065              		.global	xTaskGenericNotify
 5066              		.syntax unified
 5067              		.arm
 5068              		.fpu neon
 5070              	xTaskGenericNotify:
 5071              	.LFB62:
4628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * pxTCB;
 5072              		.loc 1 4628 0
 5073              		.cfi_startproc
 5074              		@ args = 0, pretend = 0, frame = 0
 5075              		@ frame_needed = 0, uses_anonymous_args = 0
 5076              	.LVL484:
 5077 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 5078              		.cfi_def_cfa_offset 24
 5079              		.cfi_offset 4, -24
 5080              		.cfi_offset 5, -20
 5081              		.cfi_offset 6, -16
 5082              		.cfi_offset 7, -12
 5083              		.cfi_offset 8, -8
 5084              		.cfi_offset 14, -4
4633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTCB = xTaskToNotify;
 5085              		.loc 1 4633 0
 5086 0004 004050E2 		subs	r4, r0, #0
 5087 0008 0200001A 		bne	.L576
 5088              	.LVL485:
 5089              	.L586:
4633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		pxTCB = xTaskToNotify;
 5090              		.loc 1 4633 0 is_stmt 0 discriminator 1
 5091 000c 0110A0E3 		mov	r1, #1
 5092 0010 00019FE5 		ldr	r0, .L597
 5093 0014 FEFFFFEB 		bl	longjmp
 5094              	.LVL486:
 5095              	.L576:
 5096 0018 0370A0E1 		mov	r7, r3
 5097              	.LVL487:
 5098 001c 0260A0E1 		mov	r6, r2
 5099 0020 0150A0E1 		mov	r5, r1
4636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 5100              		.loc 1 4636 0 is_stmt 1
 5101 0024 FEFFFFEB 		bl	vPortEnterCritical
 5102              	.LVL488:
4638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 5103              		.loc 1 4638 0
 5104 0028 000057E3 		cmp	r7, #0
4645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5105              		.loc 1 4645 0
 5106 002c 0220A0E3 		mov	r2, #2
4640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 5107              		.loc 1 4640 0
 5108 0030 70309415 		ldrne	r3, [r4, #112]
 5109 0034 00308715 		strne	r3, [r7]
4643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5110              		.loc 1 4643 0
 5111 0038 7430D4E5 		ldrb	r3, [r4, #116]	@ zero_extendqisi2
4645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5112              		.loc 1 4645 0
 5113 003c 7420C4E5 		strb	r2, [r4, #116]
4643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5114              		.loc 1 4643 0
 5115 0040 7330EFE6 		uxtb	r3, r3
 5116              	.LVL489:
4647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 5117              		.loc 1 4647 0
 5118 0044 040056E3 		cmp	r6, #4
 5119 0048 06F19F97 		ldrls	pc, [pc, r6, asl #2]
 5120 004c 150000EA 		b	.L578
 5121              	.L580:
 5122 0050 80000000 		.word	.L579
 5123 0054 64000000 		.word	.L581
 5124 0058 74000000 		.word	.L582
 5125 005c 6C000000 		.word	.L595
 5126 0060 98000000 		.word	.L584
 5127              	.L581:
4650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
 5128              		.loc 1 4650 0
 5129 0064 701094E5 		ldr	r1, [r4, #112]
 5130 0068 055081E1 		orr	r5, r1, r5
 5131              	.LVL490:
 5132              	.L595:
4664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 5133              		.loc 1 4664 0
 5134 006c 705084E5 		str	r5, [r4, #112]
 5135 0070 020000EA 		b	.L579
 5136              	.LVL491:
 5137              	.L582:
4654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
 5138              		.loc 1 4654 0
 5139 0074 702094E5 		ldr	r2, [r4, #112]
 5140 0078 012082E2 		add	r2, r2, #1
 5141 007c 702084E5 		str	r2, [r4, #112]
 5142              	.LVL492:
 5143              	.L579:
4691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 5144              		.loc 1 4691 0
 5145 0080 010053E3 		cmp	r3, #1
 5146 0084 0B00000A 		beq	.L587
 5147              	.LVL493:
 5148              	.L596:
 5149 0088 0140A0E3 		mov	r4, #1
 5150              	.LVL494:
 5151              	.L585:
4731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5152              		.loc 1 4731 0
 5153 008c FEFFFFEB 		bl	vPortExitCritical
 5154              	.LVL495:
4734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5155              		.loc 1 4734 0
 5156 0090 0400A0E1 		mov	r0, r4
 5157 0094 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 5158              	.LVL496:
 5159              	.L584:
4662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 5160              		.loc 1 4662 0
 5161 0098 020053E3 		cmp	r3, #2
 5162 009c F2FFFF1A 		bne	.L595
4669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 5163              		.loc 1 4669 0
 5164 00a0 0040A0E3 		mov	r4, #0
 5165              	.LVL497:
 5166 00a4 F8FFFFEA 		b	.L585
 5167              	.LVL498:
 5168              	.L578:
4682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5169              		.loc 1 4682 0
 5170 00a8 702094E5 		ldr	r2, [r4, #112]
 5171 00ac 010072E3 		cmn	r2, #1
 5172 00b0 F2FFFF0A 		beq	.L579
 5173 00b4 D4FFFFEA 		b	.L586
 5174              	.LVL499:
 5175              	.L587:
4693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5176              		.loc 1 4693 0
 5177 00b8 045084E2 		add	r5, r4, #4
 5178 00bc 0500A0E1 		mov	r0, r5
 5179 00c0 FEFFFFEB 		bl	uxListRemove
 5180              	.LVL500:
4694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5181              		.loc 1 4694 0
 5182 00c4 50209FE5 		ldr	r2, .L597+4
 5183 00c8 1400A0E3 		mov	r0, #20
 5184 00cc 2C3094E5 		ldr	r3, [r4, #44]
 5185 00d0 001092E5 		ldr	r1, [r2]
 5186 00d4 010053E1 		cmp	r3, r1
 5187 00d8 0510A0E1 		mov	r1, r5
 5188 00dc 00308285 		strhi	r3, [r2]
 5189 00e0 38209FE5 		ldr	r2, .L597+8
 5190 00e4 902320E0 		mla	r0, r0, r3, r2
 5191 00e8 FEFFFFEB 		bl	vListInsertEnd
 5192              	.LVL501:
4697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5193              		.loc 1 4697 0
 5194 00ec 283094E5 		ldr	r3, [r4, #40]
 5195 00f0 000053E3 		cmp	r3, #0
 5196 00f4 C4FFFF1A 		bne	.L586
4715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 5197              		.loc 1 4715 0
 5198 00f8 24309FE5 		ldr	r3, .L597+12
 5199 00fc 2C2094E5 		ldr	r2, [r4, #44]
 5200 0100 003093E5 		ldr	r3, [r3]
 5201 0104 2C3093E5 		ldr	r3, [r3, #44]
 5202 0108 030052E1 		cmp	r2, r3
 5203 010c DDFFFF9A 		bls	.L596
4719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5204              		.loc 1 4719 0
 5205              		.syntax divided
 5206              	@ 4719 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS/tasks.c" 1
 5207 0110 000000EF 		SWI 0
 5208              	@ 0 "" 2
 5209              		.arm
 5210              		.syntax unified
 5211 0114 DBFFFFEA 		b	.L596
 5212              	.L598:
 5213              		.align	2
 5214              	.L597:
 5215 0118 28000000 		.word	Unity+40
 5216 011c 00000000 		.word	.LANCHOR12
 5217 0120 00000000 		.word	.LANCHOR2
 5218 0124 00000000 		.word	.LANCHOR1
 5219              		.cfi_endproc
 5220              	.LFE62:
 5222              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5223              		.align	2
 5224              		.global	xTaskGenericNotifyFromISR
 5225              		.syntax unified
 5226              		.arm
 5227              		.fpu neon
 5229              	xTaskGenericNotifyFromISR:
 5230              	.LFB63:
4742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * pxTCB;
 5231              		.loc 1 4742 0
 5232              		.cfi_startproc
 5233              		@ args = 4, pretend = 0, frame = 0
 5234              		@ frame_needed = 0, uses_anonymous_args = 0
 5235              	.LVL502:
 5236 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5237              		.cfi_def_cfa_offset 32
 5238              		.cfi_offset 4, -32
 5239              		.cfi_offset 5, -28
 5240              		.cfi_offset 6, -24
 5241              		.cfi_offset 7, -20
 5242              		.cfi_offset 8, -16
 5243              		.cfi_offset 9, -12
 5244              		.cfi_offset 10, -8
 5245              		.cfi_offset 14, -4
4748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5246              		.loc 1 4748 0
 5247 0004 004050E2 		subs	r4, r0, #0
4742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * pxTCB;
 5248              		.loc 1 4742 0
 5249 0008 20709DE5 		ldr	r7, [sp, #32]
4748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5250              		.loc 1 4748 0
 5251 000c 0200001A 		bne	.L600
 5252              	.LVL503:
 5253              	.L610:
4748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5254              		.loc 1 4748 0 is_stmt 0 discriminator 1
 5255 0010 0110A0E3 		mov	r1, #1
 5256 0014 34019FE5 		ldr	r0, .L628
 5257 0018 FEFFFFEB 		bl	longjmp
 5258              	.LVL504:
 5259              	.L600:
 5260 001c 0390A0E1 		mov	r9, r3
 5261 0020 0280A0E1 		mov	r8, r2
 5262 0024 0150A0E1 		mov	r5, r1
4766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5263              		.loc 1 4766 0 is_stmt 1
 5264 0028 FEFFFFEB 		bl	vPortValidateInterruptPriority
 5265              	.LVL505:
4770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 5266              		.loc 1 4770 0
 5267 002c FEFFFFEB 		bl	ulPortSetInterruptMask
 5268              	.LVL506:
4772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 5269              		.loc 1 4772 0
 5270 0030 000059E3 		cmp	r9, #0
4778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5271              		.loc 1 4778 0
 5272 0034 0220A0E3 		mov	r2, #2
4774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 5273              		.loc 1 4774 0
 5274 0038 70309415 		ldrne	r3, [r4, #112]
4770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 5275              		.loc 1 4770 0
 5276 003c 0060A0E1 		mov	r6, r0
 5277              	.LVL507:
4774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 5278              		.loc 1 4774 0
 5279 0040 00308915 		strne	r3, [r9]
4777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5280              		.loc 1 4777 0
 5281 0044 7430D4E5 		ldrb	r3, [r4, #116]	@ zero_extendqisi2
4778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5282              		.loc 1 4778 0
 5283 0048 7420C4E5 		strb	r2, [r4, #116]
4777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5284              		.loc 1 4777 0
 5285 004c 7330EFE6 		uxtb	r3, r3
 5286              	.LVL508:
4780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 5287              		.loc 1 4780 0
 5288 0050 040058E3 		cmp	r8, #4
 5289 0054 08F19F97 		ldrls	pc, [pc, r8, asl #2]
 5290 0058 160000EA 		b	.L602
 5291              	.L604:
 5292 005c 8C000000 		.word	.L603
 5293 0060 70000000 		.word	.L605
 5294 0064 80000000 		.word	.L606
 5295 0068 78000000 		.word	.L625
 5296 006c A8000000 		.word	.L608
 5297              	.L605:
4783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
 5298              		.loc 1 4783 0
 5299 0070 701094E5 		ldr	r1, [r4, #112]
 5300 0074 055081E1 		orr	r5, r1, r5
 5301              	.LVL509:
 5302              	.L625:
4797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 5303              		.loc 1 4797 0
 5304 0078 705084E5 		str	r5, [r4, #112]
 5305 007c 020000EA 		b	.L603
 5306              	.LVL510:
 5307              	.L606:
4787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
 5308              		.loc 1 4787 0
 5309 0080 702094E5 		ldr	r2, [r4, #112]
 5310 0084 012082E2 		add	r2, r2, #1
 5311 0088 702084E5 		str	r2, [r4, #112]
 5312              	.LVL511:
 5313              	.L603:
4823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 5314              		.loc 1 4823 0
 5315 008c 010053E3 		cmp	r3, #1
 5316 0090 0C00000A 		beq	.L611
 5317              	.LVL512:
 5318              	.L627:
 5319 0094 0140A0E3 		mov	r4, #1
 5320              	.LVL513:
 5321              	.L609:
4860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5322              		.loc 1 4860 0
 5323 0098 0600A0E1 		mov	r0, r6
 5324 009c FEFFFFEB 		bl	vPortClearInterruptMask
 5325              	.LVL514:
4863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5326              		.loc 1 4863 0
 5327 00a0 0400A0E1 		mov	r0, r4
 5328 00a4 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5329              	.LVL515:
 5330              	.L608:
4795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 5331              		.loc 1 4795 0
 5332 00a8 020053E3 		cmp	r3, #2
 5333 00ac F1FFFF1A 		bne	.L625
4802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 5334              		.loc 1 4802 0
 5335 00b0 0040A0E3 		mov	r4, #0
 5336              	.LVL516:
 5337 00b4 F7FFFFEA 		b	.L609
 5338              	.LVL517:
 5339              	.L602:
4815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					break;
 5340              		.loc 1 4815 0
 5341 00b8 702094E5 		ldr	r2, [r4, #112]
 5342 00bc 010072E3 		cmn	r2, #1
 5343 00c0 F1FFFF0A 		beq	.L603
 5344 00c4 D1FFFFEA 		b	.L610
 5345              	.LVL518:
 5346              	.L611:
4826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5347              		.loc 1 4826 0
 5348 00c8 283094E5 		ldr	r3, [r4, #40]
 5349              	.LVL519:
 5350 00cc 000053E3 		cmp	r3, #0
 5351 00d0 CEFFFF1A 		bne	.L610
4828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 5352              		.loc 1 4828 0
 5353 00d4 78309FE5 		ldr	r3, .L628+4
 5354 00d8 003093E5 		ldr	r3, [r3]
 5355 00dc 000053E3 		cmp	r3, #0
4837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5356              		.loc 1 4837 0
 5357 00e0 18108412 		addne	r1, r4, #24
 5358 00e4 6C009F15 		ldrne	r0, .L628+8
 5359              	.LVL520:
4828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 5360              		.loc 1 4828 0
 5361 00e8 0B00001A 		bne	.L626
4830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5362              		.loc 1 4830 0
 5363 00ec 045084E2 		add	r5, r4, #4
 5364 00f0 0500A0E1 		mov	r0, r5
 5365 00f4 FEFFFFEB 		bl	uxListRemove
 5366              	.LVL521:
4831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5367              		.loc 1 4831 0
 5368 00f8 5C209FE5 		ldr	r2, .L628+12
 5369 00fc 1400A0E3 		mov	r0, #20
 5370 0100 2C3094E5 		ldr	r3, [r4, #44]
 5371 0104 001092E5 		ldr	r1, [r2]
 5372 0108 010053E1 		cmp	r3, r1
 5373 010c 0510A0E1 		mov	r1, r5
 5374 0110 00308285 		strhi	r3, [r2]
 5375 0114 44209FE5 		ldr	r2, .L628+16
 5376 0118 902320E0 		mla	r0, r0, r3, r2
 5377              	.L626:
4837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5378              		.loc 1 4837 0
 5379 011c FEFFFFEB 		bl	vListInsertEnd
 5380              	.LVL522:
4840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 5381              		.loc 1 4840 0
 5382 0120 3C309FE5 		ldr	r3, .L628+20
 5383 0124 2C2094E5 		ldr	r2, [r4, #44]
 5384 0128 003093E5 		ldr	r3, [r3]
 5385 012c 2C3093E5 		ldr	r3, [r3, #44]
 5386 0130 030052E1 		cmp	r2, r3
 5387 0134 D6FFFF9A 		bls	.L627
4852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5388              		.loc 1 4852 0
 5389 0138 28209FE5 		ldr	r2, .L628+24
 5390 013c 0130A0E3 		mov	r3, #1
4844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 5391              		.loc 1 4844 0
 5392 0140 000057E3 		cmp	r7, #0
4846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 5393              		.loc 1 4846 0
 5394 0144 00308715 		strne	r3, [r7]
4852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5395              		.loc 1 4852 0
 5396 0148 003082E5 		str	r3, [r2]
 5397 014c D0FFFFEA 		b	.L627
 5398              	.L629:
 5399              		.align	2
 5400              	.L628:
 5401 0150 28000000 		.word	Unity+40
 5402 0154 00000000 		.word	.LANCHOR16
 5403 0158 00000000 		.word	.LANCHOR5
 5404 015c 00000000 		.word	.LANCHOR12
 5405 0160 00000000 		.word	.LANCHOR2
 5406 0164 00000000 		.word	.LANCHOR1
 5407 0168 00000000 		.word	.LANCHOR19
 5408              		.cfi_endproc
 5409              	.LFE63:
 5411              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5412              		.align	2
 5413              		.global	vTaskNotifyGiveFromISR
 5414              		.syntax unified
 5415              		.arm
 5416              		.fpu neon
 5418              	vTaskNotifyGiveFromISR:
 5419              	.LFB64:
4871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t * pxTCB;
 5420              		.loc 1 4871 0
 5421              		.cfi_startproc
 5422              		@ args = 0, pretend = 0, frame = 0
 5423              		@ frame_needed = 0, uses_anonymous_args = 0
 5424              	.LVL523:
 5425 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 5426              		.cfi_def_cfa_offset 24
 5427              		.cfi_offset 4, -24
 5428              		.cfi_offset 5, -20
 5429              		.cfi_offset 6, -16
 5430              		.cfi_offset 7, -12
 5431              		.cfi_offset 8, -8
 5432              		.cfi_offset 14, -4
4876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5433              		.loc 1 4876 0
 5434 0004 004050E2 		subs	r4, r0, #0
 5435 0008 0200001A 		bne	.L631
 5436              	.LVL524:
 5437              	.L634:
4876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5438              		.loc 1 4876 0 is_stmt 0 discriminator 1
 5439 000c 0110A0E3 		mov	r1, #1
 5440 0010 C0009FE5 		ldr	r0, .L645
 5441 0014 FEFFFFEB 		bl	longjmp
 5442              	.LVL525:
 5443              	.L631:
 5444 0018 0150A0E1 		mov	r5, r1
4894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5445              		.loc 1 4894 0 is_stmt 1
 5446 001c FEFFFFEB 		bl	vPortValidateInterruptPriority
 5447              	.LVL526:
4898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 5448              		.loc 1 4898 0
 5449 0020 FEFFFFEB 		bl	ulPortSetInterruptMask
 5450              	.LVL527:
4900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5451              		.loc 1 4900 0
 5452 0024 7420D4E5 		ldrb	r2, [r4, #116]	@ zero_extendqisi2
4901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5453              		.loc 1 4901 0
 5454 0028 0230A0E3 		mov	r3, #2
 5455 002c 7430C4E5 		strb	r3, [r4, #116]
4898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 5456              		.loc 1 4898 0
 5457 0030 0070A0E1 		mov	r7, r0
 5458              	.LVL528:
4905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5459              		.loc 1 4905 0
 5460 0034 703094E5 		ldr	r3, [r4, #112]
4911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 5461              		.loc 1 4911 0
 5462 0038 010052E3 		cmp	r2, #1
4905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5463              		.loc 1 4905 0
 5464 003c 013083E2 		add	r3, r3, #1
 5465 0040 703084E5 		str	r3, [r4, #112]
4911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 5466              		.loc 1 4911 0
 5467 0044 2000001A 		bne	.L633
4914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5468              		.loc 1 4914 0
 5469 0048 283094E5 		ldr	r3, [r4, #40]
 5470 004c 000053E3 		cmp	r3, #0
 5471 0050 EDFFFF1A 		bne	.L634
4916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 5472              		.loc 1 4916 0
 5473 0054 80309FE5 		ldr	r3, .L645+4
 5474 0058 003093E5 		ldr	r3, [r3]
 5475 005c 000053E3 		cmp	r3, #0
4925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5476              		.loc 1 4925 0
 5477 0060 18108412 		addne	r1, r4, #24
 5478 0064 74009F15 		ldrne	r0, .L645+8
 5479              	.LVL529:
4916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 5480              		.loc 1 4916 0
 5481 0068 0B00001A 		bne	.L644
4918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5482              		.loc 1 4918 0
 5483 006c 046084E2 		add	r6, r4, #4
 5484 0070 0600A0E1 		mov	r0, r6
 5485 0074 FEFFFFEB 		bl	uxListRemove
 5486              	.LVL530:
4919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5487              		.loc 1 4919 0
 5488 0078 64209FE5 		ldr	r2, .L645+12
 5489 007c 1400A0E3 		mov	r0, #20
 5490 0080 2C3094E5 		ldr	r3, [r4, #44]
 5491 0084 001092E5 		ldr	r1, [r2]
 5492 0088 010053E1 		cmp	r3, r1
 5493 008c 0610A0E1 		mov	r1, r6
 5494 0090 00308285 		strhi	r3, [r2]
 5495 0094 4C209FE5 		ldr	r2, .L645+16
 5496 0098 902320E0 		mla	r0, r0, r3, r2
 5497              	.L644:
4925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5498              		.loc 1 4925 0
 5499 009c FEFFFFEB 		bl	vListInsertEnd
 5500              	.LVL531:
4928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				{
 5501              		.loc 1 4928 0
 5502 00a0 44309FE5 		ldr	r3, .L645+20
 5503 00a4 2C2094E5 		ldr	r2, [r4, #44]
 5504 00a8 003093E5 		ldr	r3, [r3]
 5505 00ac 2C3093E5 		ldr	r3, [r3, #44]
 5506 00b0 030052E1 		cmp	r2, r3
 5507 00b4 0400009A 		bls	.L633
4940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5508              		.loc 1 4940 0
 5509 00b8 30209FE5 		ldr	r2, .L645+24
 5510 00bc 0130A0E3 		mov	r3, #1
4932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					{
 5511              		.loc 1 4932 0
 5512 00c0 000055E3 		cmp	r5, #0
4934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 					}
 5513              		.loc 1 4934 0
 5514 00c4 00308515 		strne	r3, [r5]
4940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				}
 5515              		.loc 1 4940 0
 5516 00c8 003082E5 		str	r3, [r2]
 5517              	.L633:
4948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 5518              		.loc 1 4948 0
 5519 00cc 0700A0E1 		mov	r0, r7
4949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5520              		.loc 1 4949 0
 5521 00d0 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}
 5522              		.cfi_restore 14
 5523              		.cfi_restore 8
 5524              		.cfi_restore 7
 5525              		.cfi_restore 6
 5526              		.cfi_restore 5
 5527              		.cfi_restore 4
 5528              		.cfi_def_cfa_offset 0
 5529              	.LVL532:
4948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	}
 5530              		.loc 1 4948 0
 5531 00d4 FEFFFFEA 		b	vPortClearInterruptMask
 5532              	.LVL533:
 5533              	.L646:
 5534              		.align	2
 5535              	.L645:
 5536 00d8 28000000 		.word	Unity+40
 5537 00dc 00000000 		.word	.LANCHOR16
 5538 00e0 00000000 		.word	.LANCHOR5
 5539 00e4 00000000 		.word	.LANCHOR12
 5540 00e8 00000000 		.word	.LANCHOR2
 5541 00ec 00000000 		.word	.LANCHOR1
 5542 00f0 00000000 		.word	.LANCHOR19
 5543              		.cfi_endproc
 5544              	.LFE64:
 5546              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5547              		.align	2
 5548              		.global	xTaskNotifyStateClear
 5549              		.syntax unified
 5550              		.arm
 5551              		.fpu neon
 5553              	xTaskNotifyStateClear:
 5554              	.LFB65:
4958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 	TCB_t *pxTCB;
 5555              		.loc 1 4958 0
 5556              		.cfi_startproc
 5557              		@ args = 0, pretend = 0, frame = 0
 5558              		@ frame_needed = 0, uses_anonymous_args = 0
 5559              	.LVL534:
 5560 0000 70402DE9 		push	{r4, r5, r6, lr}
 5561              		.cfi_def_cfa_offset 16
 5562              		.cfi_offset 4, -16
 5563              		.cfi_offset 5, -12
 5564              		.cfi_offset 6, -8
 5565              		.cfi_offset 14, -4
4964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5566              		.loc 1 4964 0
 5567 0004 005050E2 		subs	r5, r0, #0
 5568 0008 24309F05 		ldreq	r3, .L652
 5569 000c 0040A0E3 		mov	r4, #0
 5570 0010 00509305 		ldreq	r5, [r3]
 5571              	.LVL535:
4966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 		{
 5572              		.loc 1 4966 0
 5573 0014 FEFFFFEB 		bl	vPortEnterCritical
 5574              	.LVL536:
4968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			{
 5575              		.loc 1 4968 0
 5576 0018 7430D5E5 		ldrb	r3, [r5, #116]	@ zero_extendqisi2
 5577 001c 020053E3 		cmp	r3, #2
4970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 				xReturn = pdPASS;
 5578              		.loc 1 4970 0
 5579 0020 7440C505 		strbeq	r4, [r5, #116]
 5580              	.LVL537:
4971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 			}
 5581              		.loc 1 4971 0
 5582 0024 0140A003 		moveq	r4, #1
 5583              	.LVL538:
4978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5584              		.loc 1 4978 0
 5585 0028 FEFFFFEB 		bl	vPortExitCritical
 5586              	.LVL539:
4981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS\tasks.c **** 
 5587              		.loc 1 4981 0
 5588 002c 0400A0E1 		mov	r0, r4
 5589 0030 7080BDE8 		pop	{r4, r5, r6, pc}
 5590              	.L653:
 5591              		.align	2
 5592              	.L652:
 5593 0034 00000000 		.word	.LANCHOR1
 5594              		.cfi_endproc
 5595              	.LFE65:
 5597              		.global	pxCurrentTCB
 5598              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5599              		.align	2
 5600              		.set	.LANCHOR1,. + 0
 5603              	pxCurrentTCB:
 5604 0000 00000000 		.space	4
 5605              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5606              		.align	2
 5607              		.set	.LANCHOR8,. + 0
 5610              	pxDelayedTaskList:
 5611 0000 00000000 		.space	4
 5612              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5613              		.align	2
 5614              		.set	.LANCHOR9,. + 0
 5617              	pxOverflowDelayedTaskList:
 5618 0000 00000000 		.space	4
 5619              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5620              		.align	2
 5621              		.set	.LANCHOR2,. + 0
 5624              	pxReadyTasksLists:
 5625 0000 00000000 		.space	400
 5625      00000000 
 5625      00000000 
 5625      00000000 
 5625      00000000 
 5626              		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 5627              		.align	2
 5628              		.set	.LANCHOR20,. + 0
 5631              	ulTaskSwitchedInTime:
 5632 0000 00000000 		.space	4
 5633              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5634              		.align	2
 5635              		.set	.LANCHOR0,. + 0
 5638              	uxCurrentNumberOfTasks:
 5639 0000 00000000 		.space	4
 5640              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5641              		.align	2
 5642              		.set	.LANCHOR15,. + 0
 5645              	uxDeletedTasksWaitingCleanUp:
 5646 0000 00000000 		.space	4
 5647              		.section	.bss.uxPendedTicks,"aw",%nobits
 5648              		.align	2
 5649              		.set	.LANCHOR18,. + 0
 5652              	uxPendedTicks:
 5653 0000 00000000 		.space	4
 5654              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5655              		.align	2
 5656              		.set	.LANCHOR16,. + 0
 5659              	uxSchedulerSuspended:
 5660 0000 00000000 		.space	4
 5661              		.section	.bss.uxTaskNumber,"aw",%nobits
 5662              		.align	2
 5663              		.set	.LANCHOR11,. + 0
 5666              	uxTaskNumber:
 5667 0000 00000000 		.space	4
 5668              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5669              		.align	2
 5670              		.set	.LANCHOR12,. + 0
 5673              	uxTopReadyPriority:
 5674 0000 00000000 		.space	4
 5675              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5676              		.align	2
 5677              		.set	.LANCHOR3,. + 0
 5680              	xDelayedTaskList1:
 5681 0000 00000000 		.space	20
 5681      00000000 
 5681      00000000 
 5681      00000000 
 5681      00000000 
 5682              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5683              		.align	2
 5684              		.set	.LANCHOR4,. + 0
 5687              	xDelayedTaskList2:
 5688 0000 00000000 		.space	20
 5688      00000000 
 5688      00000000 
 5688      00000000 
 5688      00000000 
 5689              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5690              		.align	2
 5691              		.set	.LANCHOR13,. + 0
 5694              	xNextTaskUnblockTime:
 5695 0000 00000000 		.space	4
 5696              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5697              		.align	2
 5698              		.set	.LANCHOR17,. + 0
 5701              	xNumOfOverflows:
 5702 0000 00000000 		.space	4
 5703              		.section	.bss.xPendingReadyList,"aw",%nobits
 5704              		.align	2
 5705              		.set	.LANCHOR5,. + 0
 5708              	xPendingReadyList:
 5709 0000 00000000 		.space	20
 5709      00000000 
 5709      00000000 
 5709      00000000 
 5709      00000000 
 5710              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5711              		.align	2
 5712              		.set	.LANCHOR10,. + 0
 5715              	xSchedulerRunning:
 5716 0000 00000000 		.space	4
 5717              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5718              		.align	2
 5719              		.set	.LANCHOR7,. + 0
 5722              	xSuspendedTaskList:
 5723 0000 00000000 		.space	20
 5723      00000000 
 5723      00000000 
 5723      00000000 
 5723      00000000 
 5724              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5725              		.align	2
 5726              		.set	.LANCHOR6,. + 0
 5729              	xTasksWaitingTermination:
 5730 0000 00000000 		.space	20
 5730      00000000 
 5730      00000000 
 5730      00000000 
 5730      00000000 
 5731              		.section	.bss.xTickCount,"aw",%nobits
 5732              		.align	2
 5733              		.set	.LANCHOR14,. + 0
 5736              	xTickCount:
 5737 0000 00000000 		.space	4
 5738              		.section	.bss.xYieldPending,"aw",%nobits
 5739              		.align	2
 5740              		.set	.LANCHOR19,. + 0
 5743              	xYieldPending:
 5744 0000 00000000 		.space	4
 5745              		.section	.rodata.CSWTCH.217,"a",%progbits
 5746              		.set	.LANCHOR21,. + 0
 5749              	CSWTCH.217:
 5750 0000 58       		.byte	88
 5751 0001 52       		.byte	82
 5752 0002 42       		.byte	66
 5753 0003 53       		.byte	83
 5754 0004 44       		.byte	68
 5755              		.section	.rodata.vTaskGetRunTimeStats.str1.1,"aMS",%progbits,1
 5756              	.LC2:
 5757 0000 09257509 		.ascii	"\011%u\011\011%u%%\015\012\000"
 5757      09257525 
 5757      250D0A00 
 5758              	.LC3:
 5759 000c 09257509 		.ascii	"\011%u\011\011<1%%\015\012\000"
 5759      093C3125 
 5759      250D0A00 
 5760              		.section	.rodata.vTaskList.str1.1,"aMS",%progbits,1
 5761              	.LC1:
 5762 0000 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 5762      25750925 
 5762      75092575 
 5762      0D0A00
 5763              		.section	.rodata.vTaskStartScheduler.str1.1,"aMS",%progbits,1
 5764              	.LC0:
 5765 0000 49444C45 		.ascii	"IDLE\000"
 5765      00
 5766              		.text
 5767              	.Letext0:
 5768              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 5769              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 5770              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 5771              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 5772              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 5773              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 5774              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 5775              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 5776              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 5777              		.file 11 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\unity\\src/unity_internals.h"
 5778              		.file 12 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/projdefs.h"
 5779              		.file 13 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS\\portable\\GCC\\ARM_CA9_RZA2M/por
 5780              		.file 14 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/FreeRTOS.h"
 5781              		.file 15 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/list.h"
 5782              		.file 16 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/task.h"
 5783              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 5784              		.file 18 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/portable.h"
 5785              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 5786              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 5787              		.file 21 "D:\\Work\\DeviceTester\\amazon-freertos\\tests\\renesas\\rza2m-gr-mango\\common\\config_
 5788              		.file 22 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/timers.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:17     .text.prvAddNewTaskToReadyList:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:22     .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:166    .text.prvAddNewTaskToReadyList:00000124 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:183    .text.prvWriteNameToBuffer:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:188    .text.prvWriteNameToBuffer:00000000 prvWriteNameToBuffer
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:233    .text.prvResetNextTaskUnblockTime:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:238    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:273    .text.prvResetNextTaskUnblockTime:00000030 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:281    .text.prvInitialiseNewTask.isra.2:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:286    .text.prvInitialiseNewTask.isra.2:00000000 prvInitialiseNewTask.isra.2
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:428    .text.prvInitialiseNewTask.isra.2:000000f4 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:433    .text.prvAddCurrentTaskToDelayedList:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:438    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:563    .text.prvAddCurrentTaskToDelayedList:000000b0 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:573    .text.unlikely.eTaskGetState.part.6:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:578    .text.unlikely.eTaskGetState.part.6:00000000 eTaskGetState.part.6
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:598    .text.unlikely.eTaskGetState.part.6:00000010 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:578    .text.unlikely.eTaskGetState.part.6:00000000 prvDeleteTCB.part.3
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:578    .text.unlikely.eTaskGetState.part.6:00000000 xTaskCreateStatic.part.5
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:605    .text.prvDeleteTCB:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:610    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:658    .text.prvIdleTask:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:663    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:738    .text.prvIdleTask:00000070 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:748    .text.xTaskCreateStatic:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:754    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:830    .text.xTaskCreateStatic:00000080 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:835    .text.xTaskCreate:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:841    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:940    .text.vTaskDelete:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:946    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1053   .text.vTaskDelete:000000d4 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1065   .text.eTaskGetState:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1071   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1159   .text.eTaskGetState:0000009c $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1168   .text.uxTaskPriorityGet:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1174   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1207   .text.uxTaskPriorityGet:00000028 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1212   .text.uxTaskPriorityGetFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1218   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1254   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1259   .text.vTaskPrioritySet:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1265   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1411   .text.vTaskPrioritySet:000000fc $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1419   .text.vTaskResume:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1425   .text.vTaskResume:00000000 vTaskResume
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1522   .text.vTaskResume:000000b4 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1532   .text.xTaskResumeFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1538   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1657   .text.xTaskResumeFromISR:000000d8 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1668   .text.vTaskStartScheduler:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1674   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1771   .text.vTaskStartScheduler:000000ac $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1781   .text.vTaskEndScheduler:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1787   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1816   .text.vTaskEndScheduler:0000001c $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1821   .text.vTaskSuspendAll:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1827   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1843   .text.vTaskSuspendAll:00000014 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1848   .text.xTaskGetTickCount:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1854   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1870   .text.xTaskGetTickCount:0000000c $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1875   .text.xTaskGetTickCountFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1881   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1903   .text.xTaskGetTickCountFromISR:00000014 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1908   .text.uxTaskGetNumberOfTasks:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1914   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1929   .text.uxTaskGetNumberOfTasks:0000000c $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1934   .text.pcTaskGetName:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1940   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1979   .text.pcTaskGetName:00000030 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1985   .text.xTaskIncrementTick:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:1991   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2167   .text.xTaskIncrementTick:00000174 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2183   .text.xTaskResumeAll:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2189   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2347   .text.xTaskResumeAll:00000130 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2360   .text.vTaskDelayUntil:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2366   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2470   .text.vTaskDelayUntil:000000a4 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2478   .text.vTaskDelay:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2484   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2554   .text.vTaskDelay:00000050 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2560   .text.xTaskAbortDelay:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2566   .text.xTaskAbortDelay:00000000 xTaskAbortDelay
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2660   .text.xTaskAbortDelay:000000b4 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2669   .text.vTaskSwitchContext:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2675   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2795   .text.vTaskSwitchContext:00000124 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2810   .text.vTaskSuspend:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2816   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2936   .text.vTaskSuspend:000000dc $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2946   .text.vTaskPlaceOnEventList:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2952   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:2999   .text.vTaskPlaceOnEventList:0000003c $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3005   .text.vTaskPlaceOnUnorderedEventList:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3011   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3069   .text.vTaskPlaceOnUnorderedEventList:00000058 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3076   .text.vTaskPlaceOnEventListRestricted:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3082   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3138   .text.vTaskPlaceOnEventListRestricted:00000048 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3144   .text.xTaskRemoveFromEventList:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3150   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3233   .text.xTaskRemoveFromEventList:000000a0 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3244   .text.vTaskRemoveFromUnorderedEventList:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3250   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3324   .text.vTaskRemoveFromUnorderedEventList:00000090 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3334   .text.vTaskSetTimeOutState:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3340   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3384   .text.vTaskSetTimeOutState:0000003c $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3391   .text.vTaskInternalSetTimeOutState:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3397   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3417   .text.vTaskInternalSetTimeOutState:0000001c $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3423   .text.xTaskCheckForTimeOut:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3429   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3529   .text.xTaskCheckForTimeOut:000000b8 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3538   .text.vTaskMissedYield:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3544   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3559   .text.vTaskMissedYield:00000010 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3564   .text.uxTaskGetTaskNumber:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3570   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3590   .text.vTaskSetTaskNumber:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3596   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3614   .text.vTaskSetThreadLocalStoragePointer:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3620   .text.vTaskSetThreadLocalStoragePointer:00000000 vTaskSetThreadLocalStoragePointer
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3646   .text.vTaskSetThreadLocalStoragePointer:00000020 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3651   .text.pvTaskGetThreadLocalStoragePointer:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3657   .text.pvTaskGetThreadLocalStoragePointer:00000000 pvTaskGetThreadLocalStoragePointer
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3691   .text.pvTaskGetThreadLocalStoragePointer:00000028 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3696   .text.vTaskGetInfo:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3702   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3822   .text.vTaskGetInfo:000000d4 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3827   .text.prvListTasksWithinSingleList:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3832   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3928   .text.uxTaskGetSystemState:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:3934   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4042   .text.uxTaskGetSystemState:000000cc $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4052   .text.uxTaskGetStackHighWaterMark:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4058   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4095   .text.uxTaskGetStackHighWaterMark:0000002c $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4100   .text.xTaskGetCurrentTaskHandle:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4106   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4122   .text.xTaskGetCurrentTaskHandle:0000000c $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4127   .text.xTaskGetSchedulerState:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4133   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4161   .text.xTaskGetSchedulerState:00000030 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4167   .text.xTaskPriorityInherit:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4173   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4268   .text.xTaskPriorityInherit:000000c8 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4275   .text.xTaskPriorityDisinherit:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4281   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4369   .text.xTaskPriorityDisinherit:000000ac $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4377   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4383   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4485   .text.vTaskPriorityDisinheritAfterTimeout:000000c4 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4493   .text.vTaskList:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4499   .text.vTaskList:00000000 vTaskList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4629   .text.vTaskList:000000c4 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4637   .text.vTaskGetRunTimeStats:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4643   .text.vTaskGetRunTimeStats:00000000 vTaskGetRunTimeStats
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4781   .text.vTaskGetRunTimeStats:000000e0 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4789   .text.uxTaskResetEventItemValue:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4795   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4818   .text.uxTaskResetEventItemValue:00000024 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4823   .text.pvTaskIncrementMutexHeldCount:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4829   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4853   .text.pvTaskIncrementMutexHeldCount:00000024 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4858   .text.ulTaskNotifyTake:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4864   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4948   .text.ulTaskNotifyTake:00000088 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4953   .text.xTaskNotifyWait:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:4959   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5059   .text.xTaskNotifyWait:000000b0 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5064   .text.xTaskGenericNotify:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5070   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5122   .text.xTaskGenericNotify:00000050 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5129   .text.xTaskGenericNotify:00000064 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5215   .text.xTaskGenericNotify:00000118 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5223   .text.xTaskGenericNotifyFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5229   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5292   .text.xTaskGenericNotifyFromISR:0000005c $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5299   .text.xTaskGenericNotifyFromISR:00000070 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5401   .text.xTaskGenericNotifyFromISR:00000150 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5412   .text.vTaskNotifyGiveFromISR:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5418   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5536   .text.vTaskNotifyGiveFromISR:000000d8 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5547   .text.xTaskNotifyStateClear:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5553   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5593   .text.xTaskNotifyStateClear:00000034 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5603   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5599   .bss.pxCurrentTCB:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5606   .bss.pxDelayedTaskList:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5610   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5613   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5617   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5620   .bss.pxReadyTasksLists:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5624   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5627   .bss.ulTaskSwitchedInTime:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5631   .bss.ulTaskSwitchedInTime:00000000 ulTaskSwitchedInTime
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5634   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5638   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5641   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5645   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5648   .bss.uxPendedTicks:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5652   .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5655   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5659   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5662   .bss.uxTaskNumber:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5666   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5669   .bss.uxTopReadyPriority:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5673   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5676   .bss.xDelayedTaskList1:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5680   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5683   .bss.xDelayedTaskList2:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5687   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5690   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5694   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5697   .bss.xNumOfOverflows:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5701   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5704   .bss.xPendingReadyList:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5708   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5711   .bss.xSchedulerRunning:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5715   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5718   .bss.xSuspendedTaskList:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5722   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5725   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5729   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5732   .bss.xTickCount:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5736   .bss.xTickCount:00000000 xTickCount
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5739   .bss.xYieldPending:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5743   .bss.xYieldPending:00000000 xYieldPending
C:\Users\a5089698\AppData\Local\Temp\cc84qc5w.s:5749   .rodata.CSWTCH.217:00000000 CSWTCH.217
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vListInitialise
vListInsertEnd
vPortExitCritical
strcpy
strlen
longjmp
memset
vListInitialiseItem
pxPortInitialiseStack
Unity
uxListRemove
vListInsert
vPortFree
pvPortMalloc
vPortValidateInterruptPriority
ulPortSetInterruptMask
vPortClearInterruptMask
vApplicationGetIdleTaskMemory
vInitialiseRunTimeStats
xPortStartScheduler
xTimerCreateTimerTask
vPortEndScheduler
ulGetRunTimeCounterValue
vApplicationStackOverflowHook
sprintf
__aeabi_uidiv
