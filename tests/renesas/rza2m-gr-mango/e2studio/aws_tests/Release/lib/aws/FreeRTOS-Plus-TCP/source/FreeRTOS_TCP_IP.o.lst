   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"FreeRTOS_TCP_IP.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvSocketSetMSS,"ax",%progbits
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  20              		.fpu neon
  22              	prvSocketSetMSS:
  23              	.LFB51:
  24              		.file 1 "D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source/FreeRTOS_TCP_IP.c"
   1:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
   2:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * FreeRTOS+TCP V2.0.10
   3:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *
   5:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * the Software without restriction, including without limitation the rights to
   8:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * subject to the following conditions:
  11:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *
  12:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The above copyright notice and this permission notice shall be included in all
  13:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * copies or substantial portions of the Software.
  14:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *
  15:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *
  22:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * http://aws.amazon.com/freertos
  23:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * http://www.FreeRTOS.org
  24:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
  25:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  26:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
  27:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * FreeRTOS_TCP_IP.c
  28:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Module which handles the TCP connections for FreeRTOS+TCP.
  29:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * It depends on  FreeRTOS_TCP_WIN.c, which handles the TCP windowing
  30:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * schemes.
  31:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *
  32:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Endianness: in this module all ports and IP addresses are stored in
  33:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * host byte-order, except fields in the IP-packets
  34:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
  35:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  36:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /* Standard includes. */
  37:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include <stdint.h>
  38:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include <stdio.h>
  39:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  40:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /* FreeRTOS includes. */
  41:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "FreeRTOS.h"
  42:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "task.h"
  43:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "queue.h"
  44:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "semphr.h"
  45:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  46:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /* FreeRTOS+TCP includes. */
  47:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "FreeRTOS_IP.h"
  48:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "FreeRTOS_Sockets.h"
  49:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "FreeRTOS_IP_Private.h"
  50:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "FreeRTOS_UDP_IP.h"
  51:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "FreeRTOS_TCP_IP.h"
  52:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "FreeRTOS_DHCP.h"
  53:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "NetworkInterface.h"
  54:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "NetworkBufferManagement.h"
  55:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "FreeRTOS_ARP.h"
  56:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #include "FreeRTOS_TCP_WIN.h"
  57:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  58:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  59:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /* Just make sure the contents doesn't get compiled if TCP is not enabled. */
  60:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if ipconfigUSE_TCP == 1
  61:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  62:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /* This compile-time test was moved to here because some macro's
  63:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** were unknown within 'FreeRTOSIPConfigDefaults.h'.  It tests whether
  64:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** the defined MTU size can contain at least a complete TCP packet. */
  65:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  66:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if ( ( ipconfigTCP_MSS + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) > ipconfigNETWORK_MTU )
  67:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#error The ipconfigTCP_MSS setting in FreeRTOSIPConfig.h is too large.
  68:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif
  69:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  70:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
  71:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The meaning of the TCP flags:
  72:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
  73:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_FIN			0x0001u /* No more data from sender */
  74:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_SYN			0x0002u /* Synchronize sequence numbers */
  75:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_RST			0x0004u /* Reset the connection */
  76:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_PSH			0x0008u /* Push function: please push buffered data to the recv applicatio
  77:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_ACK			0x0010u /* Acknowledgment field is significant */
  78:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_URG			0x0020u /* Urgent pointer field is significant */
  79:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_ECN			0x0040u /* ECN-Echo */
  80:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_CWR			0x0080u /* Congestion Window Reduced */
  81:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_NS			0x0100u /* ECN-nonce concealment protection */
  82:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_RSV			0x0E00u /* Reserved, keep 0 */
  83:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  84:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /* A mask to filter all protocol flags. */
  85:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define ipTCP_FLAG_CTRL			0x001Fu
  86:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  87:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
  88:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * A few values of the TCP options:
  89:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
  90:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OPT_END				0u   /* End of TCP options list */
  91:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OPT_NOOP			1u   /* "No-operation" TCP option */
  92:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OPT_MSS				2u   /* Maximum segment size TCP option */
  93:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OPT_WSOPT			3u   /* TCP Window Scale Option (3-byte long) */
  94:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OPT_SACK_P			4u   /* Advertize that SACK is permitted */
  95:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OPT_SACK_A			5u   /* SACK option with first/last */
  96:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OPT_TIMESTAMP		8u   /* Time-stamp option */
  97:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
  98:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OPT_MSS_LEN			4u   /* Length of TCP MSS option. */
  99:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OPT_WSOPT_LEN		3u   /* Length of TCP WSOPT option. */
 100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OPT_TIMESTAMP_LEN	10	/* fixed length of the time-stamp option */
 102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #ifndef ipconfigTCP_ACK_EARLIER_PACKET
 104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#define ipconfigTCP_ACK_EARLIER_PACKET		1
 105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif
 106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The macro NOW_CONNECTED() is use to determine if the connection makes a
 109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * transition from connected to non-connected and vice versa.
 110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * NOW_CONNECTED() returns true when the status has one of these values:
 111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * eESTABLISHED, eFIN_WAIT_1, eFIN_WAIT_2, eCLOSING, eLAST_ACK, eTIME_WAIT
 112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Technically the connection status is closed earlier, but the library wants
 113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * to prevent that the socket will be deleted before the last ACK has been
 114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * and thus causing a 'RST' packet on either side.
 115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define NOW_CONNECTED( status )\
 117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	( ( status >= eESTABLISHED ) && ( status != eCLOSE_WAIT ) )
 118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The highest 4 bits in the TCP offset byte indicate the total length of the
 121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * TCP header, divided by 4.
 122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define VALID_BITS_IN_TCP_OFFSET_BYTE		( 0xF0u )
 124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Acknowledgements to TCP data packets may be delayed as long as more is being expected.
 127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * A normal delay would be 200ms.  Here a much shorter delay of 20 ms is being used to
 128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * gain performance.
 129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define DELAYED_ACK_SHORT_DELAY_MS			( 2 )
 131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define DELAYED_ACK_LONGER_DELAY_MS			( 20 )
 132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The MSS (Maximum Segment Size) will be taken as large as possible. However, packets with
 135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * an MSS of 1460 bytes won't be transported through the internet.  The MSS will be reduced
 136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * to 1400 bytes.
 137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define REDUCED_MSS_THROUGH_INTERNET		( 1400 )
 139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
 142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * the number 5 (words) in the higher niblle of the TCP-offset byte.
 143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OFFSET_LENGTH_BITS			( 0xf0u )
 145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #define TCP_OFFSET_STANDARD_LENGTH		( 0x50u )
 146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Each TCP socket is checked regularly to see if it can send data packets.
 149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * By default, the maximum number of packets sent during one check is limited to 8.
 150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * This amount may be further limited by setting the socket's TX window size.
 151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( !defined( SEND_REPEATED_COUNT ) )
 153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#define SEND_REPEATED_COUNT		( 8 )
 154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif /* !defined( SEND_REPEATED_COUNT ) */
 155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Define a maximum perdiod of time (ms) to leave a TCP-socket unattended.
 158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * When a TCP timer expires, retries and keep-alive messages will be checked.
 159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #ifndef	tcpMAXIMUM_TCP_WAKEUP_TIME_MS
 161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#define	tcpMAXIMUM_TCP_WAKEUP_TIME_MS		20000u
 162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif
 163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The names of the different TCP states may be useful in logging.
 166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
 168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	static const char *pcStateNames[] = {
 169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eCLOSED",
 170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eTCP_LISTEN",
 171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eCONNECT_SYN",
 172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eSYN_FIRST",
 173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eSYN_RECEIVED",
 174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eESTABLISHED",
 175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eFIN_WAIT_1",
 176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eFIN_WAIT_2",
 177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eCLOSE_WAIT",
 178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eCLOSING",
 179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eLAST_ACK",
 180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eTIME_WAIT",
 181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		"eUNKNOWN",
 182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** };
 183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) */
 184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Returns true if the socket must be checked.  Non-active sockets are waiting
 187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * for user action, either connect() or close().
 188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSocketIsActive( UBaseType_t uxStatus );
 190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Either sends a SYN or calls prvTCPSendRepeated (for regular messages).
 193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket );
 195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Try to send a series of messages.
 198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetw
 200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Return or send a packet to the other party.
 203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBu
 205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	uint32_t ulLen, BaseType_t xReleaseAfterSend );
 206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Initialise the data structures which keep track of the TCP windowing system.
 209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket );
 211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Let ARP look-up the MAC-address of the peer and initialise the first SYN
 214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * packet.
 215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket );
 217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigHAS_DEBUG_PRINTF != 0 )
 219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/*
 220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	 * For logging and debugging: make a string showing the TCP flags.
 221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	 */
 222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	static const char *prvTCPFlagMeaning( UBaseType_t xFlags);
 223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
 224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Parse the TCP option(s) received, if present.
 227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffe
 229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Set the initial properties in the options fields, like the preferred
 232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * value of MSS and whether SACK allowed.  Will be transmitted in the state
 233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * 'eCONNECT_SYN'.
 234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPPacket_t * pxTCPPacket );
 236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * For anti-hang protection and TCP keep-alive messages.  Called in two places:
 239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * after receiving a packet and after a state change.  The socket's alive timer
 240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * may be reset.
 241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket );
 243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Prepare an outgoing message, if anything has to be sent.
 246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetwo
 248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Calculate when this socket needs to be checked to do (re-)transmissions.
 251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static TickType_t prvTCPNextTimeout( FreeRTOS_Socket_t *pxSocket );
 253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The API FreeRTOS_send() adds data to the TX stream.  Add
 256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * this data to the windowing system to it can be transmitted.
 257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket );
 259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *  Called to handle the closure of a TCP connection.
 262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetwor
 264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState().  Find the TCP payload data and check and
 267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * return its length.
 268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvCheckRxData( NetworkBufferDescriptor_t *pxNetworkBuffer, uint8_t **ppucRecvDat
 270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState().  Check if the payload data may be accepted.
 273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * If so, it will be added to the socket's reception queue.
 274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvStoreRxData( FreeRTOS_Socket_t *pxSocket, uint8_t *pucRecvData,
 276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulReceiveLength );
 277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Set the TCP options (if any) for the outgoing packet.
 280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static UBaseType_t prvSetOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetwork
 282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState() as long as the TCP status is eSYN_RECEIVED to
 285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * eCONNECT_SYN.
 286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **pp
 288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength );
 289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState() as long as the TCP status is eESTABLISHED.
 292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **pp
 294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength );
 295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState().  There is data to be sent.
 298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * If ipconfigUSE_TCP_WIN is defined, and if only an ACK must be sent, it will
 299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * be checked if it would better be postponed for efficiency.
 300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvSendData( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkB
 302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, BaseType_t xSendLength );
 303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The heart of all: check incoming packet for valid data and acks and do what
 306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * is necessary in each state.
 307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNe
 309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Reply to a peer with the RST flag on, in case a packet can not be handled.
 312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer );
 314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Set the initial value for MSS (Maximum Segment Size) to be used.
 317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket );
 319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Return either a newly created socket, or the current socket in a connected
 322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * state (depends on the 'bReuseSocket' flag).
 323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *
 325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * After a listening socket receives a new connection, it may duplicate itself.
 328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The copying takes place in prvTCPSocketCopy.
 329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket );
 331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * prvTCPStatusAgeCheck() will see if the socket has been in a non-connected
 334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * state for too long.  If so, the socket will be closed, and -1 will be
 335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * returned.
 336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigTCP_HANG_PROTECTION == 1 )
 338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t *pxSocket );
 339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif
 340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static NetworkBufferDescriptor_t *prvTCPBufferResize( FreeRTOS_Socket_t *pxSocket, NetworkBufferDes
 342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	int32_t lDataLen, UBaseType_t uxOptionsLength );
 343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
 345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	const char *FreeRTOS_GetTCPStateName( UBaseType_t ulState );
 346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif
 347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigUSE_TCP_WIN != 0 )
 349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket );
 350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif
 351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Generate a randomized TCP Initial Sequence Number per RFC.
 354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** extern uint32_t ulApplicationGetNextSequenceNumber( uint32_t ulSourceAddress,
 356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 													uint16_t usSourcePort,
 357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 													uint32_t ulDestinationAddress,
 358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 													uint16_t usDestinationPort );
 359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /* prvTCPSocketIsActive() returns true if the socket must be checked.
 363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Non-active sockets are waiting for user action, either connect()
 364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * or close(). */
 365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSocketIsActive( UBaseType_t uxStatus )
 366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	switch( uxStatus )
 368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	case eCLOSED:
 370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	case eCLOSE_WAIT:
 371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	case eFIN_WAIT_2:
 372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	case eCLOSING:
 373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	case eTIME_WAIT:
 374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		return pdFALSE;
 375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	default:
 376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		return pdTRUE;
 377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
 379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigTCP_HANG_PROTECTION == 1 )
 382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t *pxSocket )
 384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	BaseType_t xResult;
 386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		switch( pxSocket->u.xTCP.ucTCPState )
 387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eESTABLISHED:
 389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
 390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			state ESTABLISHED can be protected using keep-alive messages. */
 391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xResult = pdFALSE;
 392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
 393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eCLOSED:
 394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eTCP_LISTEN:
 395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eCLOSE_WAIT:
 396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* These 3 states may last for ever, up to the owner. */
 397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xResult = pdFALSE;
 398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
 399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		default:
 400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* All other (non-connected) states will get anti-hanging
 401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			protection. */
 402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xResult = pdTRUE;
 403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
 404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xResult != pdFALSE )
 406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* How much time has past since the last active moment which is
 408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			defined as A) a state change or B) a packet has arrived. */
 409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
 412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
 413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#if( ipconfigHAS_DEBUG_PRINTF == 1 )
 415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %lxip:%u status %s\n",
 417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxSocket->usLocalPort,
 418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.ulRemoteIP,
 419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.usRemotePort,
 420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
 421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#endif /* ipconfigHAS_DEBUG_PRINTF */
 423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Move to eCLOSE_WAIT, user may close the socket. */
 425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* When 'bPassQueued' true, this socket is an orphan until it
 428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				gets connected. */
 429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
 433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						/* As it did not get connected, and the user can never
 434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						accept() it anymore, it will be deleted now.  Called from
 435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						the IP-task, so it's safe to call the internal Close
 436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						function: vSocketClose(). */
 437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						vSocketClose( pxSocket );
 438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
 439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					/* Return a negative value to tell to inform the caller
 440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					xTCPTimerCheck()
 441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					that the socket got closed and may not be accessed anymore. */
 442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					xResult = -1;
 443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		return xResult;
 447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/*-----------------------------------------------------------*/
 449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif
 451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * As soon as a TCP socket timer expires, this function xTCPSocketCheck
 454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * will be called (from xTCPTimerCheck)
 455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * It can send a delayed ACK or new data
 456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Sequence of calling (normally) :
 457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * IP-Task:
 458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		xTCPTimerCheck()				// Check all sockets ( declared in FreeRTOS_Sockets.c )
 459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		xTCPSocketCheck()				// Either send a delayed ACK or call prvTCPSendPacket()
 460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		prvTCPSendPacket()				// Either send a SYN or call prvTCPSendRepeated ( regular messages )
 461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		prvTCPSendRepeated()			// Send at most 8 messages on a row
 462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *			prvTCPReturnPacket()		// Prepare for returning
 463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/NetworkInterface/xxx
 464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t *pxSocket )
 466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xResult = 0;
 468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xReady = pdFALSE;
 469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* The API FreeRTOS_send() might have added data to the TX stream.  Add
 473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		this data to the windowing system to it can be transmitted. */
 474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvTCPAddTxData( pxSocket );
 475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if ipconfigUSE_TCP_WIN == 1
 478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* The first task of this regular socket check is to send-out delayed
 482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ACK's. */
 483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Earlier data was received but not yet acknowledged.  This
 486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				function is called when the TCP timer for the socket expires, the
 487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ACK may be sent now. */
 488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
 489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( xTCPWindowLoggingLevel > 1 && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
 492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %u)\n",
 493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->usLocalPort,
 494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.usRemotePort,
 495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFi
 496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber   - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSe
 497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
 498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
 499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF
 501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
 503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
 504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						/* The ownership has been passed to the SEND routine,
 505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						clear the pointer to it. */
 506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.pxAckMessage = NULL;
 507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
 508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					#endif /* ipconfigZERO_COPY_TX_DRIVER */
 509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( prvTCPNextTimeout( pxSocket ) > 1 )
 511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					/* Tell the code below that this function is ready. */
 513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					xReady = pdTRUE;
 514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
 517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* The user wants to perform an active shutdown(), skip sending
 519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				the	delayed	ACK.  The function prvTCPSendPacket() will send the
 520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FIN	along with the ACK's. */
 521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.pxAckMessage = NULL;
 527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigUSE_TCP_WIN */
 531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xReady == pdFALSE )
 533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* The second task of this regular socket check is sending out data. */
 535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) )
 537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			prvTCPSendPacket( pxSocket );
 539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Set the time-out for the next wakeup for this socket. */
 542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvTCPNextTimeout( pxSocket );
 543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigTCP_HANG_PROTECTION == 1 )
 545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* In all (non-connected) states in which keep-alive messages can not be sent
 547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			the anti-hang protocol will close sockets that are 'hanging'. */
 548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xResult = prvTCPStatusAgeCheck( pxSocket );
 549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif
 551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return xResult;
 554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
 555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * prvTCPSendPacket() will be called when the socket time-out has been reached.
 559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * It is only called by xTCPSocketCheck().
 560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket )
 562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lResult = 0;
 564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength;
 565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket;
 566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** NetworkBufferDescriptor_t *pxNetworkBuffer;
 567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.ucTCPState != eCONNECT_SYN )
 569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* The connection is in s state other than SYN. */
 571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNetworkBuffer = NULL;
 572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* prvTCPSendRepeated() will only create a network buffer if necessary,
 574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		i.e. when data must be sent to the peer. */
 575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxNetworkBuffer != NULL )
 578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
 583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.ucRepCount >= 3u )
 585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* The connection is in the SYN status. The packet will be repeated
 587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			to most 3 times.  When there is no response, the socket get the
 588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			status 'eCLOSE_WAIT'. */
 589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
 590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.ulRemoteIP,		/* IP address of remote machine. */
 591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
 592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( p
 595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Or else, if the connection has been prepared, or can be prepared
 597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			now, proceed to send the packet with the SYN flag.
 598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
 599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			the Ethernet address of the peer or the gateway is found. */
 600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* About to send a SYN packet.  Call prvSetSynAckOptions() to set
 603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			the proper options: The size of MSS and whether SACK's are
 604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			allowed. */
 605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Return the number of bytes to be sent. */
 608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			lResult = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
 611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			uxOptionsLength is always a multiple of 4.  The complete expression
 612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			would be:
 613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
 614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) <<
 615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Repeat Count is used for a connecting socket, to limit the number
 617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			of tries. */
 618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ucRepCount++;
 619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Send the SYN message to make a connection.  The messages is
 621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			stored in the socket field 'xPacket'.  It will be wrapped in a
 622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pseudo network buffer descriptor before it will be sent. */
 623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Return the total number of bytes sent. */
 628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return lResult;
 629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
 630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * prvTCPSendRepeated will try to send a series of messages, as long as there is
 634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * data to be sent and as long as the transmit window isn't full.
 635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetw
 637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxIndex;
 639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lResult = 0;
 640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength = 0u;
 641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t xSendLength;
 642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* prvTCPPrepareSend() might allocate a network buffer if there is data
 646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		to be sent. */
 647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xSendLength <= 0 )
 649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
 651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* And return the packet to the peer. */
 654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_D
 655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
 657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			*ppxNetworkBuffer = NULL;
 659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigZERO_COPY_TX_DRIVER */
 661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lResult += xSendLength;
 663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Return the total number of bytes sent. */
 666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return lResult;
 667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
 668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Return (or send) a packet the the peer.  The data is stored in pxBuffer,
 672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * which may either point to a real network buffer or to a TCP socket field
 673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * called 'xTCP.xPacket'.   A temporary xNetworkBuffer will be used to pass
 674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * the data to the NIC.
 675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBu
 677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t * pxTCPPacket;
 679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** IPHeader_t *pxIPHeader;
 680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** EthernetHeader_t *pxEthernetHeader;
 681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
 682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow;
 683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** NetworkBufferDescriptor_t xTempBuffer;
 684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /* For sending, a pseudo network buffer will be used, as explained above. */
 685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxNetworkBuffer == NULL )
 687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNetworkBuffer = &xTempBuffer;
 689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
 691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xTempBuffer.pxNextBuffer = NULL;
 693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif
 695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xReleaseAfterSend = pdFALSE;
 698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
 701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xReleaseAfterSend == pdFALSE )
 703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( BaseType_t ) pxNetw
 705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxNetworkBuffer == NULL )
 706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xReleaseAfterSend = pdTRUE;
 710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigZERO_COPY_TX_DRIVER */
 713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxNetworkBuffer != NULL )
 715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader = &pxTCPPacket->xIPHeader;
 718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Fill the packet, using hton translations. */
 721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket != NULL )
 722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Calculate the space in the RX buffer in order to advertise the
 724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			size of this socket's reception window. */
 725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.rxStream != NULL )
 728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* An RX stream was created already, see how much space is
 730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				available. */
 731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
 734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* No RX stream has been created, the full stream size is
 736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				available. */
 737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Take the minimum of the RX buffer space and the RX window size. */
 741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLen
 742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStoppe
 744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* The low-water mark was reached, meaning there was little
 746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				space left.  The socket will wait until the application has read
 747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				or flushed the incoming data, and 'zero-window' will be
 748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				advertised. */
 749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulSpace = 0u;
 750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* If possible, advertise an RX window size of at least 1 MSS, otherwise
 753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			the peer might start 'zero window probing', i.e. sending small packets
 754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			(1, 2, 4, 8... bytes). */
 755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulSpace = pxSocket->u.xTCP.usCurMSS;
 758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Avoid overflow of the 16-bit win field. */
 761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#if( ipconfigUSE_TCP_WIN != 0 )
 762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#else
 766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulWinSize = ulSpace;
 768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#endif
 770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ulWinSize > 0xfffcUL )
 771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulWinSize = 0xfffcUL;
 773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#if( ipconfigHAS_DEBUG_PRINTF != 0 )
 778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE )
 780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( ( xTCPWindowLoggingLevel != 0 ) && ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED 
 782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
 783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					size_t uxFrontSpace;
 784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						if(pxSocket->u.xTCP.rxStream != NULL)
 786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						{
 787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							uxFrontSpace =  uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream ) ;
 788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						}
 789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						else
 790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						{
 791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							uxFrontSpace = 0u;
 792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						}
 793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						FreeRTOS_debug_printf( ( "%s: %lxip:%u: [%lu < %lu] winSize %ld\n",
 795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.bits.bLowWater ? "STOP" : "GO ",
 796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.ulRemoteIP,
 797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.usRemotePort,
 798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.bits.bLowWater ? pxSocket->u.xTCP.uxLittleSpace : uxFrontSpace, pxSocket->u
 799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							(int32_t) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumbe
 800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
 801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
 804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* The new window size has been advertised, switch off the flag. */
 806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Later on, when deciding to delay an ACK, a precise estimate is needed
 809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
 810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			highest sequence number minus 1 that the socket will accept. */
 811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#if( ipconfigTCP_KEEP_ALIVE == 1 )
 814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					/* Sending a keep-alive packet, send the current sequence number
 817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					minus 1, which will	be recognised as a keep-alive packet an
 818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					responded to by acknowledging the last byte. */
 819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1
 823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceN
 824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				else
 826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#endif
 827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSeq
 829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
 831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					/* Suppress FIN in case this packet carries earlier data to be
 833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					retransmitted. */
 834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) )
 835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
 837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
 838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						FreeRTOS_debug_printf( ( "Suppress FIN for %lu + %lu < %lu\n",
 839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
 840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							ulDataLen,
 841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxTCPWindow->tx.ulFINSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ) );
 842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
 843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Tell which sequence number is expected next time */
 847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else
 850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Sending data without a socket, probably replying with a RST flag
 852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			Just swap the two sequence numbers. */
 853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ucTimeToLive		   = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->usLength			   = FreeRTOS_htons( ulLen );
 858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* When pxSocket is NULL, this function is called by prvTCPSendReset()
 861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			and the IP-addresses must be swapped.
 862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			Also swap the IP-addresses in case the IP-tack doesn't have an
 863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ). */
 864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else
 867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Just an increasing number. */
 875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		usPacketIdentifier++;
 877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->usFragmentOffset = 0u;
 878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
 880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* calculate the IP header checksum, in case the driver won't do that. */
 882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxIPHeader->usHeaderChecksum = 0x00u;
 883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHe
 884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* calculate the TCP checksum for an outgoing packet. */
 887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			usGenerateProtocolChecksum( (uint8_t*)pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* A calculated checksum of 0 must be inverted as 0 means the checksum
 890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			is disabled. */
 891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxTCPPacket->xTCPHeader.usChecksum == 0x00u )
 892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPPacket->xTCPHeader.usChecksum = 0xffffU;
 894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif
 897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
 899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNetworkBuffer->pxNextBuffer = NULL;
 900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif
 901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Important: tell NIC driver how many bytes must be sent. */
 903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Fill in the destination MAC addresses. */
 906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xS
 907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			sizeof( pxEthernetHeader->xDestinationAddress ) );
 908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
 910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_
 911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			BaseType_t xIndex;
 917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHE
 919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0u;
 921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif
 926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Send! */
 928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xReleaseAfterSend == pdFALSE )
 931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Swap-back some fields, as pxBuffer probably points to a socket field
 933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			containing the packet header. */
 934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes,
 937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else
 939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Nothing to do: the buffer has been passed to DMA and will be released after use */
 941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	} /* if( pxNetworkBuffer != NULL ) */
 943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
 944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The SYN event is very important: the sequence numbers, which have a kind of
 948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * random starting value, are being synchronised.  The sliding window manager
 949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Size (MSS) in use.
 951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket )
 953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xTCPWindowLoggingLevel )
 955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %lu Water %lu <= %lu <= %lu\n",
 956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.uxRxWinSize * ipconfigTCP_MSS,
 957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.uxLittleSpace ,
 958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.uxEnoughSpace,
 959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.uxRxStreamSize ) );
 960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	vTCPWindowCreate(
 961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		&pxSocket->u.xTCP.xTCPWindow,
 962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
 965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
 966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
 968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
 971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Connecting sockets have a special state: eCONNECT_SYN.  In this phase,
 972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * the Ethernet address of the target will be found using ARP.  In case the
 973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * target IP address is not within the netmask, the hardware address of the
 974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * gateway will be used.
 975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
 976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket )
 977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket;
 979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** IPHeader_t *pxIPHeader;
 980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** eARPLookupResult_t eReturned;
 981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulRemoteIP;
 982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** MACAddress_t xEthAddress;
 983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xReturn = pdTRUE;
 984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulInitialSequenceNumber = 0;
 985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigHAS_PRINTF != 0 )
 987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Only necessary for nicer logging. */
 989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		memset( xEthAddress.ucBytes, '\0', sizeof( xEthAddress.ucBytes ) );
 990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigHAS_PRINTF != 0 */
 992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Determine the ARP cache status for the requested IP address. */
 996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	switch( eReturned )
 999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	case eARPCacheHit:		/* An ARP table lookup found a valid entry. */
1001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		break;				/* We can now prepare the SYN packet. */
1002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	case eARPCacheMiss:		/* An ARP table lookup did not find a valid entry. */
1003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	case eCantSendPacket:	/* There is no IP address, or an ARP is still in progress. */
1004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	default:
1005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Count the number of times it couldn't find the ARP address. */
1006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucRepCount++;
1007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
1009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulRemoteIP,
1010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			FreeRTOS_htonl( ulRemoteIP ),
1011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			eReturned,
1012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 0 ],
1013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 1 ],
1014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 2 ],
1015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 3 ],
1016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 4 ],
1017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xEthAddress.ucBytes[ 5 ] ) );
1018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* And issue a (new) ARP request */
1020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		FreeRTOS_OutputARPRequest( ulRemoteIP );
1021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xReturn = pdFALSE;
1023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xReturn != pdFALSE )
1026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Get a difficult-to-predict initial sequence number for this 4-tuple. */
1028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
1029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 																	  pxSocket->usLocalPort,
1030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 																	  pxSocket->u.xTCP.ulRemoteIP,
1031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 																	  pxSocket->u.xTCP.usRemotePort );
1032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Check for a random number generation error. */
1034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( 0 == ulInitialSequenceNumber )
1035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xReturn = pdFALSE;
1037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xReturn != pdFALSE )
1041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* The MAC-address of the peer (or gateway) has been found,
1043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		now prepare the initial TCP packet and some fields in the socket. */
1044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
1045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader = &pxTCPPacket->xIPHeader;
1046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* reset the retry counter to zero. */
1048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucRepCount = 0u;
1049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* And remember that the connect/SYN data are prepared. */
1051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
1052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Now that the Ethernet address is known, the initial packet can be
1054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prepared. */
1055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastP
1056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Write the Ethernet address in Source, because it will be swapped by
1058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvTCPReturnPacket(). */
1059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
1060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
1062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
1063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ucVersionHeaderLength = 0x45u;
1065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHead
1066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
1067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
1069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Addresses and ports will be stored swapped because prvTCPReturnPacket
1071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		will swap them back while replying. */
1072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
1073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
1074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
1076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
1077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* We are actively connecting, so the peer's Initial Sequence Number (ISN)
1079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		isn't known yet. */
1080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
1081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Start with ISN (Initial Sequence Number). */
1083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
1084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
1086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		the high nibble of the TCP offset field. */
1087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
1088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Only set the SYN flag. */
1090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
1091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Set the values of usInitMSS / usCurMSS for this socket. */
1093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvSocketSetMSS( pxSocket );
1094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* For now this is also the advertised window size. */
1096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
1097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* The initial sequence numbers at our side are known.  Later
1099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
1100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		first wait for a SYN+ACK reply. */
1101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvTCPCreateWindow( pxSocket );
1102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return xReturn;
1105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
1106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /* For logging and debugging: make a string showing the TCP flags
1109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** */
1110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigHAS_DEBUG_PRINTF != 0 )
1111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	static const char *prvTCPFlagMeaning( UBaseType_t xFlags)
1113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		static char retString[10];
1115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		snprintf(retString, sizeof( retString ), "%c%c%c%c%c%c%c%c%c",
1116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_FIN )  ? 'F' : '.',	/* 0x0001: No more data from sender */
1117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_SYN )  ? 'S' : '.',	/* 0x0002: Synchronize sequence numbers */
1118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_RST )  ? 'R' : '.',	/* 0x0004: Reset the connection */
1119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_PSH )  ? 'P' : '.',	/* 0x0008: Push function: please push buffered data to
1120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_ACK )  ? 'A' : '.',	/* 0x0010: Acknowledgment field is significant */
1121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_URG )  ? 'U' : '.',	/* 0x0020: Urgent pointer field is significant */
1122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_ECN )  ? 'E' : '.',	/* 0x0040: ECN-Echo */
1123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_CWR )  ? 'C' : '.',	/* 0x0080: Congestion Window Reduced */
1124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xFlags & ipTCP_FLAG_NS )   ? 'N' : '.');	/* 0x0100: ECN-nonce concealment protection */
1125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		return retString;
1126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/*-----------------------------------------------------------*/
1128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif /* ipconfigHAS_DEBUG_PRINTF */
1130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
1132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Parse the TCP option(s) received, if present.  It has already been verified
1133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * that: ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that the TP header
1134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * is longer than the usual 20 (5 x 4) bytes.
1135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
1136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffe
1137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
1138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t * pxTCPPacket;
1139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t * pxTCPHeader;
1140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** const unsigned char *pucPtr;
1141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** const unsigned char *pucLast;
1142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow;
1143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxNewMSS;
1144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
1146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader = &pxTCPPacket->xTCPHeader;
1147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* A character pointer to iterate through the option data */
1149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pucPtr = pxTCPHeader->ucOptdata;
1150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
1151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
1152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Validate options size calculation. */
1154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pucLast > ( pxNetworkBuffer->pucEthernetBuffer + pxNetworkBuffer->xDataLength ) )
1155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		return;
1157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* The comparison with pucLast is only necessary in case the option data are
1160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	corrupted, we don't like to run into invalid memory and crash. */
1161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	while( pucPtr < pucLast )
1162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		UBaseType_t xRemainingOptionsBytes = pucLast - pucPtr;
1164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pucPtr[ 0 ] == TCP_OPT_END )
1166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* End of options. */
1168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
1169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
1171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* NOP option, inserted to make the length a multiple of 4. */
1173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pucPtr++;
1174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			continue;
1175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Any other well-formed option must be at least two bytes: the option
1178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		type byte followed by a length byte. */
1179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xRemainingOptionsBytes < 2 )
1180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
1182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigUSE_TCP_WIN != 0 )
1184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else if( pucPtr[ 0 ] == TCP_OPT_WSOPT )
1185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Confirm that the option fits in the remaining buffer space. */
1187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( xRemainingOptionsBytes < TCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != TCP_OPT_WSOPT_LEN ) )
1188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				break;
1190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
1193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
1194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pucPtr += TCP_OPT_WSOPT_LEN;
1195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif	/* ipconfigUSE_TCP_WIN */
1197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else if( pucPtr[ 0 ] == TCP_OPT_MSS )
1198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Confirm that the option fits in the remaining buffer space. */
1200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( xRemainingOptionsBytes < TCP_OPT_MSS_LEN )|| ( pucPtr[ 1 ] != TCP_OPT_MSS_LEN ) )
1201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				break;
1203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* An MSS option with the correct option length.  FreeRTOS_htons()
1206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			is not needed here because usChar2u16() already returns a host
1207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			endian number. */
1208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			uxNewMSS = usChar2u16( pucPtr + 2 );
1209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
1211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Perform a basic check on the the new MSS. */
1213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( uxNewMSS == 0 )
1214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					break;
1216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
1219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
1222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* our MSS was bigger than the MSS of the other party: adapt it. */
1224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
1225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
1226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					/* The peer advertises a smaller MSS than this socket was
1228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					using.  Use that as well. */
1229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
1230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
1231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWind
1233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
1234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
1235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
1236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
1237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#if( ipconfigUSE_TCP_WIN != 1 )
1240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Without scaled windows, MSS is the only interesting option. */
1241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				break;
1242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#else
1243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Or else we continue to check another option: selective ACK. */
1244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pucPtr += TCP_OPT_MSS_LEN;
1245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#endif	/* ipconfigUSE_TCP_WIN != 1 */
1246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else
1248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* All other options have a length field, so that we easily
1250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			can skip past them. */
1251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			unsigned char len = pucPtr[ 1 ];
1252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( len < 2 ) || ( len > xRemainingOptionsBytes ) )
1253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* If the length field is too small or too big, the options are malformed.
1255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				Don't process them further. */
1256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				break;
1257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#if( ipconfigUSE_TCP_WIN == 1 )
1260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Selective ACK: the peer has received a packet but it is missing earlier
1262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				packets.  At least this packet does not need retransmission anymore
1263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulTCPWindowTxSack( ) takes care of this administration. */
1264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pucPtr[0] == TCP_OPT_SACK_A )
1265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					len -= 2;
1267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pucPtr += 2;
1268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					while( len >= 8 )
1270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
1271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					uint32_t ulFirst = ulChar2u32( pucPtr );
1272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					uint32_t ulLast  = ulChar2u32( pucPtr + 4 );
1273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
1274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
1275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						starting from the head position.
1276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						Advance the tail pointer in txStream. */
1277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
1278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						{
1279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							/* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
1280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
1281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->xEventBits |= eSOCKET_SEND;
1282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							#if ipconfigSUPPORT_SELECT_FUNCTION == 1
1284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							{
1285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								if( pxSocket->xSelectBits & eSELECT_WRITE )
1286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								{
1287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 									/* The field 'xEventBits' is used to store regular socket events (at most 8),
1288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 									as well as 'select events', which will be left-shifted */
1289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
1290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								}
1291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							}
1292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							#endif
1293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							/* In case the socket owner has installed an OnSent handler,
1295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							call it now. */
1296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							#if( ipconfigUSE_CALLBACKS == 1 )
1297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							{
1298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
1299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								{
1300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 									pxSocket->u.xTCP.pxHandleSent( (Socket_t *)pxSocket, ulCount );
1301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								}
1302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							}
1303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							#endif /* ipconfigUSE_CALLBACKS == 1  */
1304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						}
1305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pucPtr += 8;
1306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						len -= 8;
1307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
1308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					/* len should be 0 by now. */
1309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#endif	/* ipconfigUSE_TCP_WIN == 1 */
1312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pucPtr += len;
1314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
1317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigUSE_TCP_WIN != 0 )
1320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket )
1322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	size_t uxWinSize;
1324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	uint8_t ucFactor;
1325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
1327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
1328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ucFactor = 0u;
1329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		while( uxWinSize > 0xfffful )
1330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Divide by two and increase the binary factor by 1. */
1332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			uxWinSize >>= 1;
1333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ucFactor++;
1334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %lu MSS %lu Factor %u\n",
1337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.uxRxWinSize,
1338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.usInitMSS,
1339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ucFactor ) );
1340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		return ucFactor;
1342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif
1345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
1348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * When opening a TCP connection, while SYN's are being sent, the  parties may
1349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * communicate what MSS (Maximum Segment Size) they intend to use.   MSS is the
1350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * nett size of the payload, always smaller than MTU.
1351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** */
1352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPPacket_t * pxTCPPacket )
1353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
1354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
1355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
1356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength;
1357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */
1359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
1361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
1362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
1363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
1364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_TCP_WIN != 0 )
1366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
1368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
1370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
1371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
1372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
1373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		uxOptionsLength = 8u;
1374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#else
1376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		uxOptionsLength = 4u;
1378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif
1380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_TCP_WIN == 0 )
1382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		return uxOptionsLength;
1384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#else
1386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
1388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
1389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
1390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
1391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		uxOptionsLength += 4u;
1392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		return uxOptionsLength; /* bytes, not words. */
1394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif	/* ipconfigUSE_TCP_WIN == 0 */
1396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
1397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
1399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * For anti-hanging protection and TCP keep-alive messages.  Called in two
1400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * places: after receiving a packet and after a state change.  The socket's
1401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * alive timer may be reset.
1402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
1403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket )
1404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
1405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigTCP_HANG_PROTECTION == 1 )
1406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
1408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif
1410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigTCP_KEEP_ALIVE == 1 )
1412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
1414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
1415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucKeepRepCount = 0u;
1416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
1417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif
1419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	( void ) pxSocket;
1421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
1422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
1425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Changing to a new state. Centralised here to do specific actions such as
1426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * resetting the alive timer, calling the user's OnConnect handler to notify
1427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * that a socket has got (dis)connected, and setting bit to unblock a call to
1428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * FreeRTOS_select()
1429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
1430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** void vTCPStateChange( FreeRTOS_Socket_t *pxSocket, enum eTCP_STATE eTCPState )
1431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
1432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *xParent = NULL;
1433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connect
1434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
1435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigHAS_DEBUG_PRINTF != 0 )
1436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	BaseType_t xPreviousState = ( BaseType_t ) pxSocket->u.xTCP.ucTCPState;
1437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif
1438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigUSE_CALLBACKS == 1 )
1439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	FreeRTOS_Socket_t *xConnected = NULL;
1440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif
1441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Has the connected status changed? */
1443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( bBefore != bAfter )
1444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Is the socket connected now ? */
1446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( bAfter != pdFALSE )
1447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* if bPassQueued is true, this socket is an orphan until it gets connected. */
1449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
1450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Now that it is connected, find it's parent. */
1452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
1453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					xParent = pxSocket;
1455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				else
1457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					xParent = pxSocket->u.xTCP.pxPeerSocket;
1459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					configASSERT( xParent != NULL );
1460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( xParent != NULL )
1462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( xParent->u.xTCP.pxPeerSocket == NULL )
1464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
1465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						xParent->u.xTCP.pxPeerSocket = pxSocket;
1466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
1467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					xParent->xEventBits |= eSOCKET_ACCEPT;
1469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
1471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
1472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						/* Library support FreeRTOS_select().  Receiving a new
1473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						connection is being translated as a READ event. */
1474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
1475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						{
1476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
1477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						}
1478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
1479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					#endif
1480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					#if( ipconfigUSE_CALLBACKS == 1 )
1482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
1483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) != pdFALSE ) &&
1484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
1485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						{
1486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							/* The listening socket does not become connected itself, in stead
1487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							a child socket is created.
1488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							Postpone a call the OnConnect event until the end of this function. */
1489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							xConnected = xParent;
1490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						}
1491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
1492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					#endif
1493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Don't need to access the parent socket anymore, so the
1496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				reference 'pxPeerSocket' may be cleared. */
1497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.pxPeerSocket = NULL;
1498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
1499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* When true, this socket may be returned in a call to accept(). */
1501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
1502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
1504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->xEventBits |= eSOCKET_CONNECT;
1506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
1508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( pxSocket->xSelectBits & eSELECT_WRITE )
1510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
1511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
1512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
1513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#endif
1515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else  /* bAfter == pdFALSE, connection is closed. */
1518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Notify/wake-up the socket-owner by setting a semaphore. */
1520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->xEventBits |= eSOCKET_CLOSED;
1521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
1523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
1525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
1527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#endif
1530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_CALLBACKS == 1 )
1532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) != pdFALSE ) && ( xCon
1534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* The 'connected' state has changed, call the user handler. */
1536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xConnected = pxSocket;
1537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigUSE_CALLBACKS */
1540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE )
1542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Now the socket isn't in an active state anymore so it
1544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			won't need further attention of the IP-task.
1545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			Setting time-out to zero means that the socket won't get checked during
1546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			timer events. */
1547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.usTimeout = 0u;
1548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
1551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( eTCPState == eCLOSED )
1553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Socket goes to status eCLOSED because of a RST.
1555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			When nobody owns the socket yet, delete it. */
1556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
1557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
1558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
1560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
1561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					FreeRTOS_closesocket( pxSocket );
1563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Fill in the new state. */
1569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
1570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* touch the alive timers because moving to another state. */
1572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	prvTCPTouchSocket( pxSocket );
1573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigHAS_DEBUG_PRINTF == 1 )
1575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFA
1577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
1578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->usLocalPort,
1579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulRemoteIP,
1580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.usRemotePort,
1581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			FreeRTOS_GetTCPStateName( ( UBaseType_t ) xPreviousState ),
1582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			FreeRTOS_GetTCPStateName( ( UBaseType_t ) eTCPState ) ) );
1583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigHAS_DEBUG_PRINTF */
1585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_CALLBACKS == 1 )
1587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xConnected != NULL )
1589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* The 'connected' state has changed, call the OnConnect handler of the parent. */
1591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xConnected->u.xTCP.pxHandleConnected( ( Socket_t * ) xConnected, bAfter );
1592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif
1595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xParent != NULL )
1596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		vSocketWakeUpUser( xParent );
1598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
1600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static NetworkBufferDescriptor_t *prvTCPBufferResize( FreeRTOS_Socket_t *pxSocket, NetworkBufferDes
1603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	int32_t lDataLen, UBaseType_t uxOptionsLength )
1604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
1605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** NetworkBufferDescriptor_t *pxReturn;
1606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lNeeded;
1607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xResize;
1608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xBufferAllocFixedSize != pdFALSE )
1610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Network buffers are created with a fixed size and can hold the largest
1612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		MTU. */
1613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
1614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* and therefore, the buffer won't be too small.
1615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		Only ask for a new network buffer in case none was supplied. */
1616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xResize = ( pxNetworkBuffer == NULL );
1617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
1619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Network buffers are created with a variable size. See if it must
1621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		grow. */
1622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
1623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLen
1624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* In case we were called from a TCP timer event, a buffer must be
1625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		created.  Otherwise, test 'xDataLength' of the provided buffer. */
1626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
1627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xResize != pdFALSE )
1630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* The caller didn't provide a network buffer or the provided buffer is
1632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		too small.  As we must send-out a data packet, a buffer will be created
1633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		here. */
1634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
1635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxReturn != NULL )
1637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Set the actual packet size, in case the returned buffer is larger. */
1639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxReturn->xDataLength = lNeeded;
1640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Copy the existing data to the new created buffer. */
1642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxNetworkBuffer )
1643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Either from the previous buffer... */
1645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xData
1646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* ...and release it. */
1648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
1649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
1651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Or from the socket field 'xTCP.xPacket'. */
1653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket-
1654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
1658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* xResize is false, the network buffer provided was big enough. */
1660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxReturn = pxNetworkBuffer;
1661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Thanks to Andrey Ivanov from swissEmbedded for reporting that the
1663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xDataLength member must get the correct length too! */
1664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE
1665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return pxReturn;
1668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
1669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
1672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Prepare an outgoing message, in case anything has to be sent.
1673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
1674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetwo
1675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
1676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lDataLen;
1677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint8_t *pucEthernetBuffer, *pucSendData;
1678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket;
1679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** size_t uxOffset;
1680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulDataGot, ulDistance;
1681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow;
1682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** NetworkBufferDescriptor_t *pxNewBuffer;
1683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lStreamPos;
1684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( *ppxNetworkBuffer ) != NULL )
1686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* A network buffer descriptor was already supplied */
1688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
1689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
1691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* For now let it point to the last packet header */
1693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
1694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
1697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
1698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lDataLen = 0;
1699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lStreamPos = 0;
1700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
1701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.txStream != NULL )
1703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* ulTCPWindowTxGet will return the amount of data which may be sent
1705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		along with the position in the txStream.
1706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		Why check for MSS > 1 ?
1707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		Because some TCP-stacks (like uIP) use it for flow-control. */
1708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.usCurMSS > 1u )
1709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos
1711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( lDataLen > 0 )
1714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Check if the current network buffer is big enough, if not,
1716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			resize it. */
1717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
1718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxNewBuffer != NULL )
1720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				*ppxNetworkBuffer = pxNewBuffer;
1722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
1723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
1724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_
1726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Translate the position in txStream to an offset from the tail
1728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				marker. */
1729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail
1730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Here data is copied from the txStream in 'peek' mode.  Only
1732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				when the packets are acked, the tail marker will be updated. */
1733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, (
1734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#if( ipconfigHAS_DEBUG_PRINTF != 0 )
1736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( ulDataGot != ( uint32_t ) lDataLen )
1738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
1739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %lu offs %lu only %lu != %lu\n",
1740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							lStreamPos, uxOffset, ulDataGot, lDataLen ) );
1741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
1742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#endif
1744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* If the owner of the socket requests a closure, add the FIN
1746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				flag to the last packet. */
1747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bF
1748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStrea
1750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( ulDistance == ulDataGot )
1752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
1753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						#if (ipconfigHAS_DEBUG_PRINTF == 1)
1754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						{
1755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						/* the order of volatile accesses is undefined
1756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							so such workaround */
1757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
1758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
1759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
1760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							FreeRTOS_debug_printf( ( "CheckClose %lu <= %lu (%lu <= %lu <= %lu)\n", ulDataGot, ulDistanc
1762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								uxTail, uxMid, uxHead ) );
1763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						}
1764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						#endif
1765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						/* Although the socket sends a FIN, it will stay in
1766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						ESTABLISHED until all current data has been received or
1767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						delivered. */
1768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
1769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLe
1770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
1771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
1772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
1775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				lDataLen = -1;
1777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
1782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* See if the socket owner wants to shutdown this connection. */
1784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
1785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
1786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
1788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
1789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
1790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
1791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
1792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
1793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigTCP_KEEP_ALIVE != 0 )
1796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
1798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
1800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.ulRemoteIP,			/* IP address of remote machine. */
1801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
1802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				vTCPStateChange( pxSocket, eCLOSE_WAIT );
1803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				lDataLen = -1;
1804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
1806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* If there is no data to be sent, and no window-update message,
1808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				we might want to send a keep-alive message. */
1809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
1810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				TickType_t xMax;
1811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * configTICK_RATE_HZ );
1812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.ucKeepRepCount )
1813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					xMax = ( 3u * configTICK_RATE_HZ );
1815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( xAge > xMax )
1817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
1818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
1819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( xTCPWindowLoggingLevel )
1820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
1821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.ulRemoteIP,
1822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.usRemotePort,
1823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->u.xTCP.ucKeepRepCount ) );
1824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
1825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
1826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.ucKeepRepCount++;
1827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
1828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigTCP_KEEP_ALIVE */
1831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Anything to send, a change of the advertised window size, or maybe send a
1834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	keep-alive message? */
1835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( lDataLen > 0 ) ||
1836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
1837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
1838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
1840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 
1841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
1843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( lDataLen != 0l )
1845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
1847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
1850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return lDataLen;
1853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
1854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
1857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Calculate after how much time this socket needs to be checked again.
1858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
1859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static TickType_t prvTCPNextTimeout ( FreeRTOS_Socket_t *pxSocket )
1860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
1861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
1862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
1864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* The socket is actively connecting to a peer. */
1866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.bits.bConnPrepared )
1867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Ethernet address has been found, use progressive timeout for
1869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			active connect(). */
1870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.ucRepCount < 3u )
1871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
1873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
1875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulDelayMs = 11000UL;
1877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else
1880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Still in the ARP phase: check every half second. */
1882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ulDelayMs = 500UL;
1883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
1886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
1887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
1888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
1889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else if( pxSocket->u.xTCP.usTimeout == 0u )
1891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Let the sliding window mechanism decide what time-out is appropriate. */
1893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindow
1894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ulDelayMs == 0u )
1895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( xResult != ( BaseType_t )0 )
1897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulDelayMs = 1UL;
1899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
1901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
1902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
1903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
1904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else
1906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* ulDelayMs contains the time to wait before a re-transmission. */
1908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
1910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
1912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* field '.usTimeout' has already been set (by the
1914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		keep-alive/delayed-ACK mechanism). */
1915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Return the number of clock ticks before the timer expires. */
1918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
1919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
1920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket )
1923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
1924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lCount, lLength;
1925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* A txStream has been created already, see if the socket has new data for
1927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	the sliding window.
1928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It contains new
1930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	Tx data which has not been passed to the sliding window yet.  The oldest
1931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	data not-yet-confirmed can be found at rxTail. */
1932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
1933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( lLength > 0 )
1935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* All data between txMid and rxHead will now be passed to the sliding
1937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		window manager, so it can start transmitting them.
1938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		Hand over the new data to the sliding window handler.  It will be
1940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		split-up in chunks of 1460 bytes each (or less, depending on
1941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ipconfigTCP_MSS). */
1942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
1943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								( uint32_t ) lLength,
1944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
1945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
1946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Move the rxMid pointer forward up to rxHead. */
1948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( lCount > 0 )
1949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
1951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
1954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
1955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
1957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * prvTCPHandleFin() will be called to handle socket closure
1958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The Closure starts when either a FIN has been received and accepted,
1959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Or when the socket has sent a FIN flag to the peer
1960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Before being called, it has been checked that both reception and transmission
1961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * are complete.
1962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
1963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetwor
1964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
1965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
1966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
1967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
1968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
1969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0;
1970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
1971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
1973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
1975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
1977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* We haven't yet replied with a FIN, do so now. */
1979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
1980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
1981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
1983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* We did send a FIN already, see if it's ACK'd. */
1985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
1986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
1987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
1988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
1989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
1992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
1993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
1994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
1995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
1996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* And wait for the final ACK. */
1997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		vTCPStateChange( pxSocket, eLAST_ACK );
1998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
1999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
2000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
2002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
2003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
2004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* We have sent out a FIN but the peer hasn't replied with a FIN
2006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			yet. Do nothing for the moment. */
2007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucTCPFlags = 0u;
2008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else
2010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
2012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* This is the third of the three-way hand shake: the last
2014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ACK. */
2015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
2016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
2018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* The other party started the closure, so we just wait for the
2020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				last ACK. */
2021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPHeader->ucTCPFlags = 0u;
2022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* And wait for the user to close this socket. */
2025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			vTCPStateChange( pxSocket, eCLOSE_WAIT );
2026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
2030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxTCPHeader->ucTCPFlags != 0u )
2032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOpti
2034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) <<
2037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xTCPWindowLoggingLevel != 0 )
2039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %lu, cur/nxt %lu/%lu) ourSeqNr %lu | Rx %lu\n",
2041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ulAckNr - pxTCPWindow->tx.ulFirstSequenceNumber,
2042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->tx.ulCurrentSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
2043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
2044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
2045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
2046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return xSendLength;
2049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
2050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
2053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * prvCheckRxData(): called from prvTCPHandleState()
2054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *
2055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The first thing that will be done is find the TCP payload data
2056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * and check the length of this data.
2057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
2058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvCheckRxData( NetworkBufferDescriptor_t *pxNetworkBuffer, uint8_t **ppucRecvDat
2059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
2060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
2061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
2062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;
2063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Determine the length and the offset of the user-data sent to this
2065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	node.
2066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	The size of the TCP header is given in a multiple of 4-byte words (single
2068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	byte, needs no ntoh() translation).  A shift-right 2: is the same as
2069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	(offset >> 4) * 4. */
2070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >
2071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Let pucRecvData point to the first byte received. */
2073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER 
2074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Calculate lReceiveLength - the length of the TCP data received.  This is
2076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	equal to the total packet length minus:
2077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
2078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
2079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
2080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( lReceiveLength > lLength )
2082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* More bytes were received than the reported length, often because of
2084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		padding bytes at the end. */
2085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lReceiveLength = lLength;
2086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Subtract the size of the TCP and IP headers and the actual data size is
2089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	known. */
2090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
2091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
2093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
2095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lReceiveLength = 0;
2097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Urgent Pointer:
2100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	This field communicates the current value of the urgent pointer as a
2101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	positive offset from the sequence number in this segment.  The urgent
2102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pointer points to the sequence number of the octet following the urgent
2103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	data.  This field is only be interpreted in segments with the URG control
2104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	bit set. */
2105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
2106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Although we ignore the urgent data, we have to skip it. */
2108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
2109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		*ppucRecvData += lUrgentLength;
2110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
2111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return ( BaseType_t ) lReceiveLength;
2114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
2115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
2118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * prvStoreRxData(): called from prvTCPHandleState()
2119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *
2120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * The second thing is to do is check if the payload data may be accepted
2121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * If so, they will be added to the reception queue.
2122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
2123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvStoreRxData( FreeRTOS_Socket_t *pxSocket, uint8_t *pucRecvData,
2124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulReceiveLength )
2125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
2126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
2127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
2128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
2129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulSequenceNumber, ulSpace;
2130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lOffset, lStored;
2131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xResult = 0;
2132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
2134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
2136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* See if way may accept the data contents and forward it to the socket
2138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		owner.
2139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		If it can't be "accept"ed it may have to be stored and send a selective
2141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ack (SACK) option to confirm it.  In that case, xTCPWindowRxStore() will be
2142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		called later to store an out-of-order packet (in case lOffset is
2143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		negative). */
2144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if ( pxSocket->u.xTCP.rxStream )
2145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ulSpace = ( uint32_t )uxStreamBufferGetSpace ( pxSocket->u.xTCP.rxStream );
2147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else
2149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
2151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
2154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( lOffset >= 0 )
2156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* New data has arrived and may be made available to the user.  See
2158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if the head marker in rxStream may be advanced,	only if lOffset == 0.
2159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			In case the low-water mark is reached, bLowWater will be set
2160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			"low-water" here stands for "little space". */
2161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
2162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( lStored != ( int32_t ) ulReceiveLength )
2164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes??\n", lStored, ulReceiveLength 
2166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Received data could not be stored.  The socket's flag
2168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				bMallocError has been set.  The socket now has the status
2169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				eCLOSE_WAIT and a RST packet will be sent back. */
2170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				prvTCPSendReset( pxNetworkBuffer );
2171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xResult = -1;
2172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* After a missing packet has come in, higher packets may be passed to
2176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		the user. */
2177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_TCP_WIN == 1 )
2178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Now lTCPAddRxdata() will move the rxHead pointer forward
2180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			so data becomes available to the user immediately
2181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			In case the low-water mark is reached, bLowWater will be set. */
2182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
2183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
2185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->ulUserDataLength = 0;
2186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigUSE_TCP_WIN */
2189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
2191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPWindow->ucOptionLength = 0u;
2193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return xResult;
2196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
2197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /* Set the TCP options (if any) for the outgoing packet. */
2200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static UBaseType_t prvSetOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetwork
2201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
2202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
2203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
2204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
2205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
2206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if(	ipconfigUSE_TCP_WIN == 1 )
2208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( uxOptionsLength != 0u )
2209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* TCP options must be sent because a packet which is out-of-order
2211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			was received. */
2212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( xTCPWindowLoggingLevel >= 0 )
2213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "SACK[%d,%d]: optlen %lu sending %lu - %lu\n",
2214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->usLocalPort,
2215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usRemotePort,
2216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					uxOptionsLength,
2217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 1 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequ
2218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 2 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequ
2219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
2220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* The header length divided by 4, goes into the higher nibble,
2222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			effectively a shift-left 2. */
2223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
2224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else
2226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif	/* ipconfigUSE_TCP_WIN */
2227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFAL
2228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* TCP options must be sent because the MSS has changed. */
2230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
2231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xTCPWindowLoggingLevel >= 0 )
2232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
2234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
2237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
2238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
2239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
2240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		uxOptionsLength = 4u;
2241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
2242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return uxOptionsLength;
2245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
2246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
2249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * prvHandleSynReceived(): called from prvTCPHandleState()
2250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *
2251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Called from the states: eSYN_RECEIVED and eCONNECT_SYN
2252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * If the flags received are correct, the socket will move to eESTABLISHED.
2253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
2254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **pp
2255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
2256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
2257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
2258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
2259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
2260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
2261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
2262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0;
2263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Either expect a ACK or a SYN+ACK. */
2265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	uint16_t usExpect = ( uint16_t ) ipTCP_FLAG_ACK;
2266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
2267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
2269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( ucTCPFlags & 0x17u ) != usExpect )
2272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* eSYN_RECEIVED: flags 0010 expected, not 0002. */
2274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* eSYN_RECEIVED: flags ACK  expected, not SYN. */
2275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
2276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ? "eSYN_RECEIVED" : "eCONNECT_SYN",
2277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			usExpect, ucTCPFlags ) );
2278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		vTCPStateChange( pxSocket, eCLOSE_WAIT );
2279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
2280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
2281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
2282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
2284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
2286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
2287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
2289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			TCPPacket_t *pxLastTCPPacket = ( TCPPacket_t * ) ( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
2291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Clear the SYN flag in lastPacket. */
2293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
2294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* This socket was the one connecting actively so now perofmr the
2296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			synchronisation. */
2297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
2298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTC
2299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNu
2300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
2301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->ulNextTxSequenceNumber++;
2302:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else if( ulReceiveLength == 0u )
2304:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
2306:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2307:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2308:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* The SYN+ACK has been confirmed, increase the next sequence number by
2309:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		1. */
2310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
2311:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2312:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_TCP_WIN == 1 )
2313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2314:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
2315:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ? "active" : "passive",
2316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->usLocalPort,
2317:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.ulRemoteIP,
2318:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usRemotePort,
2319:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
2320:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2321:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigUSE_TCP_WIN */
2322:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
2324:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
2326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
2327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
2328:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_TCP_WIN != 0 )
2330:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
2332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2333:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* The other party did not send a scaling factor.
2334:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				A shifting factor in this side must be canceled. */
2335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
2336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
2337:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2338:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2339:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigUSE_TCP_WIN */
2340:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* This was the third step of connecting: SYN, SYN+ACK, ACK	so now the
2341:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		connection is established. */
2342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		vTCPStateChange( pxSocket, eESTABLISHED );
2343:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2344:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2345:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return xSendLength;
2346:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
2347:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2348:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2349:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
2350:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * prvHandleEstablished(): called from prvTCPHandleState()
2351:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *
2352:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Called if the status is eESTABLISHED.  Data reception has been handled
2353:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * earlier.  Here the ACK's from peer will be checked, and if a FIN is received,
2354:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * the code will check if it may be accepted, i.e. if all expected data has been
2355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * completely received.
2356:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
2357:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **pp
2358:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
2359:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
2360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
2361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
2362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
2363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
2364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
2365:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
2366:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lDistance, lSendResult;
2367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2368:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Remember the window size the peer is advertising. */
2369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
2370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_TCP_WIN != 0 )
2371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ulWindowSize =
2373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
2374:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2375:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif
2376:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
2378:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
2380:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2381:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* ulTCPWindowTxAck() returns the number of bytes which have been acked,
2382:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
2383:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		txStream. */
2384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
2385:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Just advancing the tail index, 'ulCount' bytes have been
2387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			confirmed, and because there is new space in the txStream, the
2388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			user/owner should be woken up. */
2389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* _HT_ : only in case the socket's waiting? */
2390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u 
2391:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->xEventBits |= eSOCKET_SEND;
2393:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2394:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
2395:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
2396:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
2397:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
2398:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
2399:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
2400:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
2401:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#endif
2402:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* In case the socket owner has installed an OnSent handler,
2403:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				call it now. */
2404:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#if( ipconfigUSE_CALLBACKS == 1 )
2405:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
2406:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
2407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
2408:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.pxHandleSent( (Socket_t *)pxSocket, ulCount );
2409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
2410:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
2411:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#endif /* ipconfigUSE_CALLBACKS == 1  */
2412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* If this socket has a stream for transmission, add the data to the
2417:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	outgoing segment(s). */
2418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.txStream != NULL )
2419:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvTCPAddTxData( pxSocket );
2421:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2422:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
2424:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipT
2426:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2427:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Peer is requesting to stop, see if we're really finished. */
2428:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xMayClose = pdTRUE;
2429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2430:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Checks are only necessary if we haven't sent a FIN yet. */
2431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
2432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* xTCPWindowTxDone returns true when all Tx queues are empty. */
2434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
2435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			bTxDone	 = xTCPWindowTxDone( pxTCPWindow );
2436:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
2438:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2439:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Refusing FIN: Rx incomp 1 optlen 4 tx done 1. */
2440:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
2441:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->usLocalPort,
2442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usRemotePort,
2443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					bRxComplete, bTxDone ) );
2444:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xMayClose = pdFALSE;
2445:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
2447:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenc
2449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( lDistance > 1 )
2451:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
2452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
2453:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
2454:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
2455:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2456:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					xMayClose = pdFALSE;
2457:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
2458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2460:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2461:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xTCPWindowLoggingLevel > 0 )
2462:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
2464:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLe
2465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber 
2466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xMayClose != pdFALSE )
2469:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
2471:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
2472:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2473:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2475:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xMayClose == pdFALSE )
2476:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
2478:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ulReceiveLength != 0u )
2480:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
2482:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* TCP-offsett equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
2483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
2484:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
2486:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
2488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2489:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2490:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2491:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Now get data to be transmitted. */
2492:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
2493:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		can not	send-out both TCP options and also a full packet. Sending
2494:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		options (SACK) is always more urgent than sending data, which can be
2495:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		sent later. */
2496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( uxOptionsLength == 0u )
2497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* prvTCPPrepareSend might allocate a bigger network buffer, if
2499:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			necessary. */
2500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
2501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( lSendResult > 0 )
2502:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2503:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xSendLength = ( BaseType_t ) lSendResult;
2504:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2506:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2507:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2508:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return xSendLength;
2509:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
2510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2511:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2512:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
2513:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Called from prvTCPHandleState().  There is data to be sent.  If
2514:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * ipconfigUSE_TCP_WIN is defined, and if only an ACK must be sent, it will be
2515:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * checked if it would better be postponed for efficiency.
2516:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
2517:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvSendData( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkB
2518:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	uint32_t ulReceiveLength, BaseType_t xSendLength )
2519:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
2520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
2521:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
2522:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
2523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /* Find out what window size we may advertised. */
2524:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulFrontSpace;
2525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lRxSpace;
2526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigUSE_TCP_WIN == 1 )
2527:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigTCP_ACK_EARLIER_PACKET == 0 )
2528:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		const int32_t lMinLength = 0;
2529:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#else
2530:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		int32_t lMinLength;
2531:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif
2532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif
2533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
2534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
2535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2536:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Free space in rxStream. */
2537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.rxStream != NULL )
2538:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2539:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
2540:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2541:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
2542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
2544:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2545:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSi
2547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2548:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Set the time-out field, so that we'll be called by the IP-task in case no
2549:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	next message will be received. */
2550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumbe
2551:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if ipconfigUSE_TCP_WIN == 1
2552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
2555:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
2557:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2558:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif /* ipconfigTCP_ACK_EARLIER_PACKET */
2559:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* In case we're receiving data continuously, we might postpone sending
2561:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		an ACK to gain performance. */
2562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
2563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
2564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
2565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options 
2566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
2567:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxTCPHeader->ucTCPFlags == ipTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */
2568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
2570:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* There was still a delayed in queue, delete it. */
2572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.pxAckMessage != 0 )
2573:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
2574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
2575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
2576:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
2578:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message.
2580:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				( lRxSpace < ( int32_t ) ( 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS 
2581:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
2583:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
2585:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2586:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Normally a delayed ACK should wait 200 ms for a next incoming
2587:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				packet.  Only wait 20 ms here to gain performance.  A slow ACK
2588:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				for full-size message. */
2589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
2590:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2591:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdF
2593:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %lu) tmout %u d %lu\n",
2595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->usLocalPort,
2596:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usRemotePort,
2597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
2598:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
2599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					xSendLength,
2600:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usTimeout, lRxSpace ) );
2601:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2602:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			*ppxNetworkBuffer = NULL;
2604:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xSendLength = 0;
2605:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
2607:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2608:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* As an ACK is not being delayed, remove any earlier delayed ACK
2609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			message. */
2610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
2611:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
2613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.pxAckMessage = NULL;
2616:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2617:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#else
2619:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2620:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Remove compiler warnings. */
2621:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		( void ) ulReceiveLength;
2622:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		( void ) pxTCPHeader;
2623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		( void ) lRxSpace;
2624:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2625:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigUSE_TCP_WIN */
2626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2627:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xSendLength != 0 )
2628:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFA
2630:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2631:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %lu SEQ %lu (len %lu)\n",
2632:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->usLocalPort,
2633:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usRemotePort,
2634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
2635:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
2636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xSendLength ) );
2637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2638:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Set the parameter 'xReleaseAfterSend' to the value of
2640:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ipconfigZERO_COPY_TX_DRIVER. */
2641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_D
2642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
2643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2644:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* The driver has taken ownership of the Network Buffer. */
2645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			*ppxNetworkBuffer = NULL;
2646:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif
2648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2649:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2650:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return xSendLength;
2651:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
2652:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
2655:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * prvTCPHandleState()
2656:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * is the most important function of this TCP stack
2657:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * We've tried to keep it (relatively short) by putting a lot of code in
2658:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * the static functions above:
2659:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *
2660:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		prvCheckRxData()
2661:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		prvStoreRxData()
2662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		prvSetOptions()
2663:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		prvHandleSynReceived()
2664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		prvHandleEstablished()
2665:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		prvSendData()
2666:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *
2667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * As these functions are declared static, and they're called from one location
2668:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * only, most compilers will inline them, thus avoiding a call and return.
2669:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
2670:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNe
2671:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
2672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
2673:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
2674:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0;
2675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulReceiveLength;	/* Number of bytes contained in the TCP message. */
2676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint8_t *pucRecvData;
2677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
2678:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2679:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* uxOptionsLength: the size of the options to be sent (always a multiple of
2680:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	4 bytes)
2681:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	1. in the SYN phase, we shall communicate the MSS
2682:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	2. in case of a SACK, Selective ACK, ack a segment which comes in
2683:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	out-of-order. */
2684:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength = 0u;
2685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
2686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
2687:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* First get the length and the position of the received data, if any.
2689:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pucRecvData will point to the first byte of the TCP payload. */
2690:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
2691:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
2693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
2695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* This is most probably a keep-alive message from peer.  Setting
2697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			'bWinChange' doesn't cause a window-size-change, the flag is used
2698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			here to force sending an immediate ACK. */
2699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
2700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2701:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2703:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Keep track of the highest sequence number that might be expected within
2704:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	this connection. */
2705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber )
2706:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
2708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2709:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Storing data may result in a fatal error if malloc() fails. */
2711:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
2712:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xSendLength = -1;
2714:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2715:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
2716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
2718:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipT
2720:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
2722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2723:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* In eSYN_RECEIVED a simple ACK is expected, but apparently the
2724:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			'SYN+ACK' didn't arrive.  Step back to the previous state in which
2725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			a first incoming SYN is handled.  The SYN was counted already so
2726:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			decrease it first. */
2727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			vTCPStateChange( pxSocket, eSYN_FIRST );
2728:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSI
2731:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2732:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* It's the first time a FIN has been received, remember its
2733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			sequence number. */
2734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
2735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
2736:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Was peer the first one to send a FIN? */
2738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
2739:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2740:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* If so, don't send the-last-ACK. */
2741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
2742:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2744:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		switch (pxSocket->u.xTCP.ucTCPState)
2746:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eCLOSED:		/* (server + client) no connection state at all. */
2748:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Nothing to do for a closed socket, except waiting for the
2749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			owner. */
2750:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
2751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2752:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eTCP_LISTEN:	/* (server) waiting for a connection request from
2753:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							any remote TCP and port. */
2754:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* The listen state was handled in xProcessReceivedTCPPacket().
2755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			Should not come here. */
2756:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
2757:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2758:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eSYN_FIRST:	/* (server) Just received a SYN request for a server
2759:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							socket. */
2760:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2761:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* A new socket has been created, reply with a SYN+ACK.
2762:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				Acknowledge with seq+1 because the SYN is seen as pseudo data
2763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				with len = 1. */
2764:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
2765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
2766:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength )
2768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
2770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				uxOptionsLength is a multiple of 4.  The complete expression is:
2771:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
2772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
2773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				vTCPStateChange( pxSocket, eSYN_RECEIVED );
2774:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceN
2776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx
2777:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2778:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
2779:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2780:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eCONNECT_SYN:	/* (client) also called SYN_SENT: we've just send a
2781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							SYN, expect	a SYN+ACK and send a ACK now. */
2782:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Fall through */
2783:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eSYN_RECEIVED:	/* (server) we've had a SYN, replied with SYN+SCK
2784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							expect a ACK and do nothing. */
2785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xSendLength = prvHandleSynReceived( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength
2786:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
2787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eESTABLISHED:	/* (server + client) an open connection, data
2789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							received can be	delivered to the user. The normal
2790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							state for the data transfer phase of the connection
2791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							The closing states are also handled here with the
2792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							use of some flags. */
2793:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength
2794:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
2795:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2796:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eLAST_ACK:		/* (server + client) waiting for an acknowledgement
2797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							of the connection termination request previously
2798:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							sent to the remote TCP (which includes an
2799:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							acknowledgement of its connection termination
2800:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							request). */
2801:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Fall through */
2802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eFIN_WAIT_1:	/* (server + client) waiting for a connection termination request from the remo
2803:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							 * or an acknowledgement of the connection termination request previously sent. */
2804:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* Fall through */
2805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eFIN_WAIT_2:	/* (server + client) waiting for a connection termination request from the remo
2806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
2807:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
2808:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eCLOSE_WAIT:	/* (server + client) waiting for a connection
2810:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							termination request from the local user.  Nothing to
2811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							do, connection is closed, wait for owner to close
2812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							this socket. */
2813:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
2814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2815:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eCLOSING:		/* (server + client) waiting for a connection
2816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							termination request acknowledgement from the remote
2817:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							TCP. */
2818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
2819:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		case eTIME_WAIT:	/* (either server or client) waiting for enough time
2821:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							to pass to be sure the remote TCP received the
2822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							acknowledgement of its connection termination
2823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							request. [According to RFC 793 a connection can stay
2824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							in TIME-WAIT for a maximum of four minutes known as
2825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							a MSL (maximum segment lifetime).]  These states are
2826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							implemented implicitly by settings flags like
2827:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							'bFinSent', 'bFinRecv', and 'bFinAcked'. */
2828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
2829:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		default:
2830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
2831:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2832:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2833:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xSendLength > 0 )
2835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
2837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2838:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return xSendLength;
2840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
2841:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2843:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer )
2844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
2845:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
2846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
2848:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	const BaseType_t xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + 0u 
2849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
2851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
2852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
2854:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2855:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */
2856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Remove compiler warnings if ipconfigIGNORE_UNKNOWN_PACKETS == 1. */
2858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	( void ) pxNetworkBuffer;
2859:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* The packet was not consumed. */
2861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return pdFAIL;
2862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
2863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2865:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket )
2866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
  25              		.loc 1 2866 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2867:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulMSS = ipconfigTCP_MSS;
2868:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2869:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAd
  31              		.loc 1 2869 0
  32 0000 30209FE5 		ldr	r2, .L4
  33 0004 303090E5 		ldr	r3, [r0, #48]
  34 0008 142092E5 		ldr	r2, [r2, #20]
  35 000c 333FBFE6 		rev	r3, r3
  36 0010 023023E0 		eor	r3, r3, r2
  37 0014 20209FE5 		ldr	r2, .L4+4
  38 0018 042092E5 		ldr	r2, [r2, #4]
  39 001c 020013E1 		tst	r3, r2
  40              	.LVL1:
2870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Data for this peer will pass through a router, and maybe through
2872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		the internet.  Limit the MSS to 1400 bytes or less. */
2873:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) REDUCED_MSS_THROUGH_INTERNET, ulMSS );
2874:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRe
2877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2878:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
  41              		.loc 1 2878 0
  42 0020 B42500E3 		movw	r2, #1460
  43 0024 783500E3 		movw	r3, #1400
  44 0028 0230A001 		moveq	r3, r2
  45 002c B234C0E1 		strh	r3, [r0, #66]	@ movhi
  46 0030 B434C0E1 		strh	r3, [r0, #68]	@ movhi
  47 0034 1EFF2FE1 		bx	lr
  48              	.L5:
  49              		.align	2
  50              	.L4:
  51 0038 00000000 		.word	xDefaultPartUDPPacketHeader
  52 003c 00000000 		.word	xNetworkAddressing
  53              		.cfi_endproc
  54              	.LFE51:
  56              		.section	.text.prvTCPCreateWindow,"ax",%progbits
  57              		.align	2
  58              		.syntax unified
  59              		.arm
  60              		.fpu neon
  62              	prvTCPCreateWindow:
  63              	.LFB31:
 953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xTCPWindowLoggingLevel )
  64              		.loc 1 953 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              	.LVL2:
  69 0000 07402DE9 		push	{r0, r1, r2, lr}
  70              		.cfi_def_cfa_offset 16
  71              		.cfi_offset 14, -4
 963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
  72              		.loc 1 963 0
  73 0004 B41500E3 		movw	r1, #1460
  74 0008 D02090E5 		ldr	r2, [r0, #208]
 960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		&pxSocket->u.xTCP.xTCPWindow,
  75              		.loc 1 960 0
  76 000c D40080E2 		add	r0, r0, #212
  77              	.LVL3:
 962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
  78              		.loc 1 962 0
  79 0010 08C010E5 		ldr	ip, [r0, #-8]
 960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		&pxSocket->u.xTCP.xTCPWindow,
  80              		.loc 1 960 0
  81 0014 B03950E1 		ldrh	r3, [r0, #-144]
  82 0018 910202E0 		mul	r2, r1, r2
  83 001c 04308DE5 		str	r3, [sp, #4]
  84 0020 910C01E0 		mul	r1, r1, ip
  85 0024 2C3090E5 		ldr	r3, [r0, #44]
  86 0028 00308DE5 		str	r3, [sp]
  87 002c 103090E5 		ldr	r3, [r0, #16]
  88 0030 FEFFFFEB 		bl	vTCPWindowCreate
  89              	.LVL4:
 967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
  90              		.loc 1 967 0
  91 0034 0CD08DE2 		add	sp, sp, #12
  92              		.cfi_def_cfa_offset 4
  93              		@ sp needed
  94 0038 04F09DE4 		ldr	pc, [sp], #4
  95              		.cfi_endproc
  96              	.LFE31:
  98              		.section	.text.prvTCPNextTimeout,"ax",%progbits
  99              		.align	2
 100              		.syntax unified
 101              		.arm
 102              		.fpu neon
 104              	prvTCPNextTimeout:
 105              	.LFB40:
1860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 106              		.loc 1 1860 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 8
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              	.LVL5:
 111 0000 37402DE9 		push	{r0, r1, r2, r4, r5, lr}
 112              		.cfi_def_cfa_offset 24
 113              		.cfi_offset 4, -12
 114              		.cfi_offset 5, -8
 115              		.cfi_offset 14, -4
1861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 116              		.loc 1 1861 0
 117 0004 205E04E3 		movw	r5, #20000
1863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 118              		.loc 1 1863 0
 119 0008 4B30D0E5 		ldrb	r3, [r0, #75]	@ zero_extendqisi2
1860:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 120              		.loc 1 1860 0
 121 000c 0040A0E1 		mov	r4, r0
1861:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 122              		.loc 1 1861 0
 123 0010 04508DE5 		str	r5, [sp, #4]
1863:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 124              		.loc 1 1863 0
 125 0014 020053E3 		cmp	r3, #2
 126 0018 1600001A 		bne	.L9
1866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 127              		.loc 1 1866 0
 128 001c 3930D0E5 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 129 0020 080013E3 		tst	r3, #8
1882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 130              		.loc 1 1882 0
 131 0024 7D3FA003 		moveq	r3, #500
1866:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 132              		.loc 1 1866 0
 133 0028 0500000A 		beq	.L21
1870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 134              		.loc 1 1870 0
 135 002c 4A30D0E5 		ldrb	r3, [r0, #74]	@ zero_extendqisi2
 136 0030 020053E3 		cmp	r3, #2
1872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 137              		.loc 1 1872 0
 138 0034 01304392 		subls	r3, r3, #1
 139 0038 B82B0093 		movwls	r2, #3000
 140 003c 1233A091 		lslls	r3, r2, r3
1876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 141              		.loc 1 1876 0
 142 0040 F83A0283 		movwhi	r3, #11000
 143              	.LVL6:
 144              	.L21:
1882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 145              		.loc 1 1882 0
 146 0044 04308DE5 		str	r3, [sp, #4]
 147              	.L15:
 148              	.LBB28:
1909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 149              		.loc 1 1909 0
 150 0048 04309DE5 		ldr	r3, [sp, #4]
 151 004c FA2FA0E3 		mov	r2, #1000
 152 0050 920302E0 		mul	r2, r2, r3
 153 0054 FA0F52E3 		cmp	r2, #1000
 154 0058 54309F25 		ldrcs	r3, .L24
 155 005c 0130A033 		movcc	r3, #1
 156 0060 92238320 		umullcs	r2, r3, r2, r3
 157 0064 2333A021 		lsrcs	r3, r3, #6
 158 0068 B034C4E1 		strh	r3, [r4, #64]	@ movhi
 159              	.L14:
 160              	.LBE28:
1919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 161              		.loc 1 1919 0
 162 006c B004D4E1 		ldrh	r0, [r4, #64]
 163 0070 0CD08DE2 		add	sp, sp, #12
 164              		.cfi_remember_state
 165              		.cfi_def_cfa_offset 12
 166              		@ sp needed
 167 0074 3080BDE8 		pop	{r4, r5, pc}
 168              	.LVL7:
 169              	.L9:
 170              		.cfi_restore_state
1890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 171              		.loc 1 1890 0
 172 0078 B034D0E1 		ldrh	r3, [r0, #64]
 173 007c 000053E3 		cmp	r3, #0
 174 0080 F9FFFF1A 		bne	.L14
 175              	.LBB29:
1893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ulDelayMs == 0u )
 176              		.loc 1 1893 0
 177 0084 C41090E5 		ldr	r1, [r0, #196]
 178 0088 04208DE2 		add	r2, sp, #4
 179 008c D40080E2 		add	r0, r0, #212
 180              	.LVL8:
 181 0090 FEFFFFEB 		bl	xTCPWindowTxHasData
 182              	.LVL9:
1894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 183              		.loc 1 1894 0
 184 0094 04309DE5 		ldr	r3, [sp, #4]
 185 0098 000053E3 		cmp	r3, #0
 186 009c E9FFFF1A 		bne	.L15
1896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 187              		.loc 1 1896 0
 188 00a0 000050E3 		cmp	r0, #0
1898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 189              		.loc 1 1898 0
 190 00a4 0130A013 		movne	r3, #1
1896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 191              		.loc 1 1896 0
 192 00a8 E5FFFF1A 		bne	.L21
1902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 193              		.loc 1 1902 0
 194 00ac 04508DE5 		str	r5, [sp, #4]
 195 00b0 E4FFFFEA 		b	.L15
 196              	.L25:
 197              		.align	2
 198              	.L24:
 199 00b4 D34D6210 		.word	274877907
 200              	.LBE29:
 201              		.cfi_endproc
 202              	.LFE40:
 204              		.section	.text.prvTCPReturnPacket.constprop.3,"ax",%progbits
 205              		.align	2
 206              		.syntax unified
 207              		.arm
 208              		.fpu neon
 210              	prvTCPReturnPacket.constprop.3:
 211              	.LFB62:
 676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 212              		.loc 1 676 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 40
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              	.LVL10:
 217 0000 70402DE9 		push	{r4, r5, r6, lr}
 218              		.cfi_def_cfa_offset 16
 219              		.cfi_offset 4, -16
 220              		.cfi_offset 5, -12
 221              		.cfi_offset 6, -8
 222              		.cfi_offset 14, -4
 686:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 223              		.loc 1 686 0
 224 0004 006051E2 		subs	r6, r1, #0
 695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 225              		.loc 1 695 0
 226 0008 7A308002 		addeq	r3, r0, #122
 676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 227              		.loc 1 676 0
 228 000c 28D04DE2 		sub	sp, sp, #40
 229              		.cfi_def_cfa_offset 56
 230              	.LVL11:
 688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 231              		.loc 1 688 0
 232 0010 04608D02 		addeq	r6, sp, #4
 676:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 233              		.loc 1 676 0
 234 0014 0250A0E1 		mov	r5, r2
 695:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 235              		.loc 1 695 0
 236 0018 1C308D05 		streq	r3, [sp, #28]
 696:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xReleaseAfterSend = pdFALSE;
 237              		.loc 1 696 0
 238 001c 4630A003 		moveq	r3, #70
 239 0020 20308D05 		streq	r3, [sp, #32]
 240              	.LVL12:
 721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 241              		.loc 1 721 0
 242 0024 000050E3 		cmp	r0, #0
 716:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader = &pxTCPPacket->xIPHeader;
 243              		.loc 1 716 0
 244 0028 184096E5 		ldr	r4, [r6, #24]
 245              	.LVL13:
 721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 246              		.loc 1 721 0
 247 002c E100000A 		beq	.L28
 248              	.LVL14:
 727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 249              		.loc 1 727 0
 250 0030 6C2090E5 		ldr	r2, [r0, #108]
 251              	.LVL15:
 252 0034 000052E3 		cmp	r2, #0
 737:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 253              		.loc 1 737 0
 254 0038 64309005 		ldreq	r3, [r0, #100]
 727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 255              		.loc 1 727 0
 256 003c 0700000A 		beq	.L30
 257              	.LVL16:
 258              	.LBB40:
 259              	.LBB41:
 260              		.file 2 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_Stream_
   1:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*
   2:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * FreeRTOS+TCP V2.0.10
   3:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *
   5:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * the Software without restriction, including without limitation the rights to
   8:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * subject to the following conditions:
  11:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *
  12:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * The above copyright notice and this permission notice shall be included in all
  13:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * copies or substantial portions of the Software.
  14:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *
  15:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *
  22:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * http://aws.amazon.com/freertos
  23:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  * http://www.FreeRTOS.org
  24:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  */
  25:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  26:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*
  27:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *	FreeRTOS_Stream_Buffer.h
  28:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *
  29:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *	A cicular character buffer
  30:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *	An implementation of a circular buffer without a length field
  31:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *	If LENGTH defines the size of the buffer, a maximum of (LENGT-1) bytes can be stored
  32:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  *	In order to add or read data from the buffer, memcpy() will be called at most 2 times
  33:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h ****  */
  34:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  35:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** #ifndef FREERTOS_STREAM_BUFFER_H
  36:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** #define	FREERTOS_STREAM_BUFFER_H
  37:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  38:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** #ifdef __cplusplus
  39:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** extern "C" {
  40:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** #endif
  41:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  42:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** typedef struct xSTREAM_BUFFER {
  43:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxTail;		/* next item to read */
  44:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxMid;		/* iterator within the valid items */
  45:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxHead;		/* next position store a new item */
  46:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	volatile size_t uxFront;	/* iterator within the free space */
  47:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	size_t LENGTH;				/* const value: number of reserved elements */
  48:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	uint8_t ucArray[ sizeof( size_t ) ];
  49:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** } StreamBuffer_t;
  50:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  51:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferClear( StreamBuffer_t *pxBuffer );
  52:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferClear( StreamBuffer_t *pxBuffer )
  53:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
  54:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	/* Make the circular buffer empty */
  55:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxHead = 0u;
  56:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxTail = 0u;
  57:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxFront = 0u;
  58:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxMid = 0u;
  59:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
  60:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
  61:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  62:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower,
  63:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower,
  64:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
  65:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
  66:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxCount;
  67:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
  69:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( uxCount >= pxBuffer->LENGTH )
  70:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
  71:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		uxCount -= pxBuffer->LENGTH;
  72:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
  73:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  74:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxCount;
  75:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
  76:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
  77:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  78:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLow
  79:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLow
  80:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
  81:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Returns the distance between uxLower and uxUpper */
  82:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxCount;
  83:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
  85:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
  86:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
  87:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		uxCount -= pxBuffer->LENGTH;
  88:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
  89:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  90:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxCount;
  91:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
  92:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
  93:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
  94:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer );
  95:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer )
  96:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
  97:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Returns the number of items which can still be added to uxHead
  98:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** before hitting on uxTail */
  99:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxHead = pxBuffer->uxHead;
 100:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 101:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 102:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 103:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 104:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 105:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 106:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer );
 107:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer )
 108:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
 109:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Distance between uxFront and uxTail
 110:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** or the number of items which can still be added to uxFront,
 111:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** before hitting on uxTail */
 112:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 113:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxFront = pxBuffer->uxFront;
 261              		.loc 2 113 0
 262 0040 0C1092E5 		ldr	r1, [r2, #12]
 263              	.LVL17:
 114:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 264              		.loc 2 114 0
 265 0044 003092E5 		ldr	r3, [r2]
 266              	.LVL18:
 267              	.LBB42:
 268              	.LBB43:
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( uxCount >= pxBuffer->LENGTH )
 269              		.loc 2 68 0
 270 0048 102092E5 		ldr	r2, [r2, #16]
 271              	.LVL19:
 272 004c 023083E0 		add	r3, r3, r2
 273              	.LVL20:
 274 0050 013043E2 		sub	r3, r3, #1
 275 0054 013043E0 		sub	r3, r3, r1
 276              	.LVL21:
  69:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 277              		.loc 2 69 0
 278 0058 030052E1 		cmp	r2, r3
  71:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 279              		.loc 2 71 0
 280 005c 02304390 		subls	r3, r3, r2
 281              	.LVL22:
 282              	.L30:
 283              	.LBE43:
 284              	.LBE42:
 285              	.LBE41:
 286              	.LBE40:
 743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 287              		.loc 1 743 0
 288 0060 38C090E5 		ldr	ip, [r0, #56]
 289 0064 A4E39FE5 		ldr	lr, .L49
 741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 290              		.loc 1 741 0
 291 0068 C82090E5 		ldr	r2, [r0, #200]
 292 006c D81090E5 		ldr	r1, [r0, #216]
 743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 293              		.loc 1 743 0
 294 0070 0C001EE1 		tst	lr, ip
 749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 295              		.loc 1 749 0
 296 0074 0020A013 		movne	r2, #0
 743:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 297              		.loc 1 743 0
 298 0078 0100001A 		bne	.L31
 299              	.LBB44:
 300              	.LBB45:
 301              		.file 3 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_IP.h"
   1:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /*
   2:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * FreeRTOS+TCP V2.0.10
   3:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  *
   5:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * the Software without restriction, including without limitation the rights to
   8:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * subject to the following conditions:
  11:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  *
  12:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * The above copyright notice and this permission notice shall be included in all
  13:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * copies or substantial portions of the Software.
  14:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  *
  15:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  *
  22:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * http://aws.amazon.com/freertos
  23:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  * http://www.FreeRTOS.org
  24:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  */
  25:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  26:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #ifndef FREERTOS_IP_H
  27:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define FREERTOS_IP_H
  28:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  29:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #ifdef __cplusplus
  30:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** extern "C" {
  31:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #endif
  32:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  33:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* Application level configuration options. */
  34:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #include "FreeRTOSIPConfig.h"
  35:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #include "FreeRTOSIPConfigDefaults.h"
  36:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #include "IPTraceMacroDefaults.h"
  37:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  38:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* Some constants defining the sizes of several parts of a packet */
  39:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_HEADER			14u
  40:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_IPv4_HEADER			20u
  41:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_IGMP_HEADER			8u
  42:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_ICMP_HEADER			8u
  43:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_UDP_HEADER			8u
  44:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_TCP_HEADER			20u
  45:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  46:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  47:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* The number of octets in the MAC and IP addresses respectively. */
  48:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipMAC_ADDRESS_LENGTH_BYTES ( 6 )
  49:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipIP_ADDRESS_LENGTH_BYTES ( 4 )
  50:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  51:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* IP protocol definitions. */
  52:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipPROTOCOL_ICMP			( 1 )
  53:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipPROTOCOL_IGMP         ( 2 )
  54:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipPROTOCOL_TCP			( 6 )
  55:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipPROTOCOL_UDP			( 17 )
  56:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  57:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* Dimensions the buffers that are filled by received Ethernet frames. */
  58:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_CRC_BYTES					( 4UL )
  59:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipSIZE_OF_ETH_OPTIONAL_802_1Q_TAG_BYTES	( 4UL )
  60:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define ipTOTAL_ETHERNET_FRAME_SIZE				( ( ( uint32_t ) ipconfigNETWORK_MTU ) + ( ( uint32_t ) ipSI
  61:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  62:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /*_RB_ Comment may need updating. */
  63:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* Space left at the beginning of a network buffer storage area to store a
  64:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** pointer back to the network buffer.  Should be a multiple of 8 to ensure 8 byte
  65:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** alignment is maintained on architectures that require it.
  66:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  67:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** In order to get a 32-bit alignment of network packets, an offset of 2 bytes
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** would be desirable, as defined by ipconfigPACKET_FILLER_SIZE.  So the malloc'd
  69:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** buffer will have the following contents:
  70:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint32_t pointer;	// word-aligned
  71:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uchar_8 filler[6];
  72:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	<< ETH-header >>	// half-word-aligned
  73:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uchar_8 dest[6];    // start of pucEthernetBuffer
  74:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uchar_8 dest[6];
  75:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uchar16_t type;
  76:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	<< IP-header >>		// word-aligned
  77:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint8_t ucVersionHeaderLength;
  78:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	etc
  79:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****  */
  80:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #if( ipconfigBUFFER_PADDING != 0 )
  81:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****     #define ipBUFFER_PADDING    ipconfigBUFFER_PADDING
  82:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #else
  83:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h ****     #define ipBUFFER_PADDING    ( 8u + ipconfigPACKET_FILLER_SIZE )
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #endif
  85:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
  86:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* The structure used to store buffers and pass them around the network stack.
  87:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** Buffers can be in use by the stack, in use by the network interface hardware
  88:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** driver, or free (not in use). */
  89:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** typedef struct xNETWORK_BUFFER
  90:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** {
  91:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	ListItem_t xBufferListItem; 	/* Used to reference the buffer form the free buffer list or a socket
  92:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint32_t ulIPAddress;			/* Source or destination IP address, depending on usage scenario. */
  93:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint8_t *pucEthernetBuffer; 	/* Pointer to the start of the Ethernet frame. */
  94:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	size_t xDataLength; 			/* Starts by holding the total Ethernet frame length, then the UDP/TCP payl
  95:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint16_t usPort;				/* Source or destination port, depending on usage scenario. */
  96:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint16_t usBoundPort;			/* The port to which a transmitting socket is bound. */
  97:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
  98:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 		struct xNETWORK_BUFFER *pxNextBuffer; /* Possible optimisation for expert users - requires networ
  99:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#endif
 100:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** } NetworkBufferDescriptor_t;
 101:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 102:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #include "pack_struct_start.h"
 103:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** struct xMAC_ADDRESS
 104:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** {
 105:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	uint8_t ucBytes[ ipMAC_ADDRESS_LENGTH_BYTES ];
 106:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** }
 107:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #include "pack_struct_end.h"
 108:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 109:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** typedef struct xMAC_ADDRESS MACAddress_t;
 110:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 111:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** typedef enum eNETWORK_EVENTS
 112:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** {
 113:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eNetworkUp,		/* The network is configured. */
 114:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eNetworkDown	/* The network connection has been lost. */
 115:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** } eIPCallbackEvent_t;
 116:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 117:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** typedef enum ePING_REPLY_STATUS
 118:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** {
 119:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eSuccess = 0,		/* A correct reply has been received for an outgoing ping. */
 120:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eInvalidChecksum,	/* A reply was received for an outgoing ping but the checksum of the reply was i
 121:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eInvalidData		/* A reply was received to an outgoing ping but the payload of the reply was not cor
 122:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** } ePingReplyStatus_t;
 123:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 124:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** typedef enum eNETWORK_ADDRESS_TYPE 
 125:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** {
 126:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eNetWorkAddressTypeIPV4,
 127:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eNetWorkAddressTypeIPV6,
 128:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	eNetWorkAddressTypeHostName
 129:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** } eNetWorkAddressType_t;
 130:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 131:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** /* Endian related definitions. */
 132:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
 133:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 134:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	/* FreeRTOS_htons / FreeRTOS_htonl: some platforms might have built-in versions
 135:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	using a single instruction so allow these versions to be overridden. */
 136:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#ifndef FreeRTOS_htons
 137:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 		#define FreeRTOS_htons( usIn ) ( (uint16_t) ( ( ( usIn ) << 8U ) | ( ( usIn ) >> 8U ) ) )
 138:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#endif
 139:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 140:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#ifndef	FreeRTOS_htonl
 141:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 		#define FreeRTOS_htonl( ulIn ) 											\
 142:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 			(																	\
 143:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 				( uint32_t ) 													\
 144:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 				( 																\
 145:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) )                ) << 24  ) | 	\
 146:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) ) & 0x0000ff00UL ) <<  8  ) | 	\
 147:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) ) & 0x00ff0000UL ) >>  8  ) | 	\
 148:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 					( ( ( ( uint32_t ) ( ulIn ) )                ) >> 24  )  	\
 149:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 				) 																\
 150:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 			)
 151:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#endif
 152:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 153:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #else /* ipconfigBYTE_ORDER */
 154:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 155:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#define FreeRTOS_htons( x ) ( ( uint16_t ) ( x ) )
 156:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	#define FreeRTOS_htonl( x ) ( ( uint32_t ) ( x ) )
 157:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 158:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #endif /* ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN */
 159:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 160:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define FreeRTOS_ntohs( x ) FreeRTOS_htons( x )
 161:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #define FreeRTOS_ntohl( x ) FreeRTOS_htonl( x )
 162:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 163:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** #if( ipconfigHAS_INLINE_FUNCTIONS == 1 )
 164:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 165:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b);
 166:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b);
 167:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b);
 168:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b);
 169:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d);
 170:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_round_down (uint32_t a, uint32_t d);
 171:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE BaseType_t  FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
 172:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE BaseType_t  FreeRTOS_max_BaseType  (BaseType_t  a, BaseType_t  b);
 173:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE UBaseType_t FreeRTOS_max_UBaseType (UBaseType_t a, UBaseType_t b);
 174:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE UBaseType_t  	FreeRTOS_min_UBaseType (UBaseType_t  a, UBaseType_t  b);
 175:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 176:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 
 177:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
 178:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 179:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 180:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 302              		.loc 3 180 0
 303 007c 010052E1 		cmp	r2, r1
 304 0080 0120A021 		movcs	r2, r1
 305              	.L31:
 306              	.LVL23:
 307              	.LBE45:
 308              	.LBE44:
 755:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 309              		.loc 1 755 0
 310 0084 B214D0E1 		ldrh	r1, [r0, #66]
 311 0088 030051E1 		cmp	r1, r3
 312 008c 0130A093 		movls	r3, #1
 313              	.LVL24:
 314 0090 0030A083 		movhi	r3, #0
 315 0094 020051E1 		cmp	r1, r2
 316 0098 0030A093 		movls	r3, #0
 317 009c 000053E3 		cmp	r3, #0
 318 00a0 FC3F0FE3 		movw	r3, #65532
 319 00a4 0210A001 		moveq	r1, r2
 320              	.LVL25:
 763:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 321              		.loc 1 763 0
 322 00a8 C120D0E5 		ldrb	r2, [r0, #193]	@ zero_extendqisi2
 323 00ac 3122A0E1 		lsr	r2, r1, r2
 324              	.LVL26:
 325 00b0 030052E1 		cmp	r2, r3
 326 00b4 0320A021 		movcs	r2, r3
 327              	.LVL27:
 775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 328              		.loc 1 775 0
 329 00b8 54339FE5 		ldr	r3, .L49+4
 330 00bc 023403E0 		and	r3, r3, r2, lsl #8
 331 00c0 5224E7E7 		ubfx	r2, r2, #8, #8
 332              	.LVL28:
 333 00c4 023083E1 		orr	r3, r3, r2
 811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 334              		.loc 1 811 0
 335 00c8 E42090E5 		ldr	r2, [r0, #228]
 775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 336              		.loc 1 775 0
 337 00cc 7330FFE6 		uxth	r3, r3
 338 00d0 3030C4E5 		strb	r3, [r4, #48]
 339              	.LVL29:
 340 00d4 2334A0E1 		lsr	r3, r3, #8
 811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 341              		.loc 1 811 0
 342 00d8 011082E0 		add	r1, r2, r1
 343              	.LVL30:
 775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 344              		.loc 1 775 0
 345 00dc 3130C4E5 		strb	r3, [r4, #49]
 806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 346              		.loc 1 806 0
 347 00e0 3930D0E5 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 348              		.loc 1 811 0
 349 00e4 3C1080E5 		str	r1, [r0, #60]
 806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 350              		.loc 1 806 0
 351 00e8 1F30C0E7 		bfc	r3, #0, #1
 352 00ec 3930C0E5 		strb	r3, [r0, #57]
 814:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 353              		.loc 1 814 0
 354 00f0 7330EFE6 		uxtb	r3, r3
 355 00f4 020013E3 		tst	r3, #2
 356 00f8 9B00000A 		beq	.L33
 820:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 357              		.loc 1 820 0
 358 00fc FD3003E2 		and	r3, r3, #253
 359 0100 043083E3 		orr	r3, r3, #4
 360 0104 3930C0E5 		strb	r3, [r0, #57]
 822:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceN
 361              		.loc 1 822 0
 362 0108 003190E5 		ldr	r3, [r0, #256]
 363 010c 013043E2 		sub	r3, r3, #1
 364 0110 333FBFE6 		rev	r3, r3
 823:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 365              		.loc 1 823 0
 366 0114 5324E7E7 		ubfx	r2, r3, #8, #8
 367 0118 2630C4E5 		strb	r3, [r4, #38]
 368 011c 2720C4E5 		strb	r2, [r4, #39]
 369 0120 5328E7E7 		ubfx	r2, r3, #16, #8
 370 0124 233CA0E1 		lsr	r3, r3, #24
 371 0128 2820C4E5 		strb	r2, [r4, #40]
 372 012c 2930C4E5 		strb	r3, [r4, #41]
 373              	.L34:
 374 0130 E43090E5 		ldr	r3, [r0, #228]
 375 0134 333FBFE6 		rev	r3, r3
 376              	.LVL31:
 377              	.L48:
 378              	.LBB46:
 853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 379              		.loc 1 853 0
 380 0138 5324E7E7 		ubfx	r2, r3, #8, #8
 381 013c 2A30C4E5 		strb	r3, [r4, #42]
 382 0140 2B20C4E5 		strb	r2, [r4, #43]
 383 0144 5328E7E7 		ubfx	r2, r3, #16, #8
 384 0148 233CA0E1 		lsr	r3, r3, #24
 385              	.LBE46:
 858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 386              		.loc 1 858 0
 387 014c 000050E3 		cmp	r0, #0
 388              	.LBB47:
 853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 389              		.loc 1 853 0
 390 0150 2C20C4E5 		strb	r2, [r4, #44]
 391 0154 2D30C4E5 		strb	r3, [r4, #45]
 392              	.LBE47:
 856:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->usLength			   = FreeRTOS_htons( ulLen );
 393              		.loc 1 856 0
 394 0158 7F30E0E3 		mvn	r3, #127
 395 015c 1630C4E5 		strb	r3, [r4, #22]
 857:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 396              		.loc 1 857 0
 397 0160 2534A0E1 		lsr	r3, r5, #8
 398 0164 053483E1 		orr	r3, r3, r5, lsl #8
 399 0168 7330FFE6 		uxth	r3, r3
 400 016c 1030C4E5 		strb	r3, [r4, #16]
 401 0170 2334A0E1 		lsr	r3, r3, #8
 402 0174 1130C4E5 		strb	r3, [r4, #17]
 858:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 403              		.loc 1 858 0
 404 0178 0300000A 		beq	.L36
 405 017c 94329FE5 		ldr	r3, .L49+8
 406 0180 143093E5 		ldr	r3, [r3, #20]
 407 0184 000053E3 		cmp	r3, #0
 408 0188 0600001A 		bne	.L37
 409              	.L36:
 864:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 410              		.loc 1 864 0
 411 018c 1F20D4E5 		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 412 0190 1E30D4E5 		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 413 0194 023483E1 		orr	r3, r3, r2, lsl #8
 414 0198 2020D4E5 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
 415 019c 023883E1 		orr	r3, r3, r2, lsl #16
 416 01a0 2120D4E5 		ldrb	r2, [r4, #33]	@ zero_extendqisi2
 417 01a4 023C83E1 		orr	r3, r3, r2, lsl #24
 418              	.LVL32:
 419              	.L37:
 870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 420              		.loc 1 870 0
 421 01a8 1B10D4E5 		ldrb	r1, [r4, #27]	@ zero_extendqisi2
 422 01ac 0000A0E3 		mov	r0, #0
 423              	.LVL33:
 424 01b0 1A20D4E5 		ldrb	r2, [r4, #26]	@ zero_extendqisi2
 903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 425              		.loc 1 903 0
 426 01b4 0E5085E2 		add	r5, r5, #14
 427              	.LVL34:
 871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 428              		.loc 1 871 0
 429 01b8 1A30C4E5 		strb	r3, [r4, #26]
 877:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 430              		.loc 1 877 0
 431 01bc 1400C4E5 		strb	r0, [r4, #20]
 432 01c0 1500C4E5 		strb	r0, [r4, #21]
 870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 433              		.loc 1 870 0
 434 01c4 012482E1 		orr	r2, r2, r1, lsl #8
 435 01c8 1C10D4E5 		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0UL, ( uint8_t * ) &( pxIPHeader->ucVersionHe
 436              		.loc 1 882 0
 437 01cc 1800C4E5 		strb	r0, [r4, #24]
 438 01d0 1900C4E5 		strb	r0, [r4, #25]
 870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 439              		.loc 1 870 0
 440 01d4 012882E1 		orr	r2, r2, r1, lsl #16
 441 01d8 1D10D4E5 		ldrb	r1, [r4, #29]	@ zero_extendqisi2
 442 01dc 012C82E1 		orr	r2, r2, r1, lsl #24
 443 01e0 5214E7E7 		ubfx	r1, r2, #8, #8
 444 01e4 1E20C4E5 		strb	r2, [r4, #30]
 445 01e8 1F10C4E5 		strb	r1, [r4, #31]
 446 01ec 5218E7E7 		ubfx	r1, r2, #16, #8
 447 01f0 222CA0E1 		lsr	r2, r2, #24
 448 01f4 2010C4E5 		strb	r1, [r4, #32]
 449              	.LBB48:
 872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 450              		.loc 1 872 0
 451 01f8 2510D4E5 		ldrb	r1, [r4, #37]	@ zero_extendqisi2
 452              	.LBE48:
 870:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 453              		.loc 1 870 0
 454 01fc 2120C4E5 		strb	r2, [r4, #33]
 871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 455              		.loc 1 871 0
 456 0200 5324E7E7 		ubfx	r2, r3, #8, #8
 457 0204 1B20C4E5 		strb	r2, [r4, #27]
 458 0208 5328E7E7 		ubfx	r2, r3, #16, #8
 459 020c 233CA0E1 		lsr	r3, r3, #24
 460              	.LVL35:
 461 0210 1C20C4E5 		strb	r2, [r4, #28]
 462              	.LBB49:
 872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 463              		.loc 1 872 0
 464 0214 2320D4E5 		ldrb	r2, [r4, #35]	@ zero_extendqisi2
 465              	.LBE49:
 871:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 466              		.loc 1 871 0
 467 0218 1D30C4E5 		strb	r3, [r4, #29]
 468              	.LBB50:
 872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 469              		.loc 1 872 0
 470 021c 2230D4E5 		ldrb	r3, [r4, #34]	@ zero_extendqisi2
 471 0220 023483E1 		orr	r3, r3, r2, lsl #8
 472              	.LVL36:
 473 0224 2420D4E5 		ldrb	r2, [r4, #36]	@ zero_extendqisi2
 474 0228 2430C4E5 		strb	r3, [r4, #36]
 475 022c 2334A0E1 		lsr	r3, r3, #8
 476              	.LVL37:
 477 0230 012482E1 		orr	r2, r2, r1, lsl #8
 478              	.LBE50:
 875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		usPacketIdentifier++;
 479              		.loc 1 875 0
 480 0234 E0119FE5 		ldr	r1, .L49+12
 481              	.LBB51:
 872:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 482              		.loc 1 872 0
 483 0238 2530C4E5 		strb	r3, [r4, #37]
 484 023c 2220C4E5 		strb	r2, [r4, #34]
 485              	.LVL38:
 486 0240 2224A0E1 		lsr	r2, r2, #8
 487 0244 2320C4E5 		strb	r2, [r4, #35]
 488              	.LBE51:
 875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		usPacketIdentifier++;
 489              		.loc 1 875 0
 490 0248 B020D1E1 		ldrh	r2, [r1]
 491 024c 2234A0E1 		lsr	r3, r2, #8
 492 0250 023483E1 		orr	r3, r3, r2, lsl #8
 876:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->usFragmentOffset = 0u;
 493              		.loc 1 876 0
 494 0254 012082E2 		add	r2, r2, #1
 495 0258 B020C1E1 		strh	r2, [r1]	@ movhi
 883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 496              		.loc 1 883 0
 497 025c 0E1084E2 		add	r1, r4, #14
 875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		usPacketIdentifier++;
 498              		.loc 1 875 0
 499 0260 7330FFE6 		uxth	r3, r3
 883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 500              		.loc 1 883 0
 501 0264 1420A0E3 		mov	r2, #20
 875:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		usPacketIdentifier++;
 502              		.loc 1 875 0
 503 0268 1230C4E5 		strb	r3, [r4, #18]
 504 026c 2334A0E1 		lsr	r3, r3, #8
 505 0270 1330C4E5 		strb	r3, [r4, #19]
 883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 506              		.loc 1 883 0
 507 0274 FEFFFFEB 		bl	usGenerateChecksum
 508              	.LVL39:
 884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 509              		.loc 1 884 0
 510 0278 B00FBFE6 		rev16	r0, r0
 887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 511              		.loc 1 887 0
 512 027c 1C1096E5 		ldr	r1, [r6, #28]
 884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 513              		.loc 1 884 0
 514 0280 0000E0E1 		mvn	r0, r0
 887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 515              		.loc 1 887 0
 516 0284 0120A0E3 		mov	r2, #1
 884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 517              		.loc 1 884 0
 518 0288 7000FFE6 		uxth	r0, r0
 519 028c 1800C4E5 		strb	r0, [r4, #24]
 520 0290 2004A0E1 		lsr	r0, r0, #8
 521 0294 1900C4E5 		strb	r0, [r4, #25]
 887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 522              		.loc 1 887 0
 523 0298 0400A0E1 		mov	r0, r4
 524 029c FEFFFFEB 		bl	usGenerateProtocolChecksum
 525              	.LVL40:
 891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 526              		.loc 1 891 0
 527 02a0 3230D4E5 		ldrb	r3, [r4, #50]	@ zero_extendqisi2
 906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			sizeof( pxEthernetHeader->xDestinationAddress ) );
 528              		.loc 1 906 0
 529 02a4 0400A0E1 		mov	r0, r4
 891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 530              		.loc 1 891 0
 531 02a8 3320D4E5 		ldrb	r2, [r4, #51]	@ zero_extendqisi2
 532 02ac 023493E1 		orrs	r3, r3, r2, lsl #8
 906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			sizeof( pxEthernetHeader->xDestinationAddress ) );
 533              		.loc 1 906 0
 534 02b0 0620A0E3 		mov	r2, #6
 893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 535              		.loc 1 893 0
 536 02b4 0030E003 		mvneq	r3, #0
 537 02b8 3230C405 		strbeq	r3, [r4, #50]
 538 02bc 3330C405 		strbeq	r3, [r4, #51]
 903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 539              		.loc 1 903 0
 540 02c0 1C5086E5 		str	r5, [r6, #28]
 906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			sizeof( pxEthernetHeader->xDestinationAddress ) );
 541              		.loc 1 906 0
 542 02c4 065084E2 		add	r5, r4, #6
 543              	.LVL41:
 544 02c8 0510A0E1 		mov	r1, r5
 545 02cc FEFFFFEB 		bl	memcpy
 546              	.LVL42:
 910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 547              		.loc 1 910 0
 548 02d0 0620A0E3 		mov	r2, #6
 549 02d4 3C119FE5 		ldr	r1, .L49+8
 550 02d8 0500A0E1 		mov	r0, r5
 551 02dc FEFFFFEB 		bl	memcpy
 552              	.LVL43:
 928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 553              		.loc 1 928 0
 554 02e0 0010A0E3 		mov	r1, #0
 555 02e4 0600A0E1 		mov	r0, r6
 556 02e8 FEFFFFEB 		bl	xNetworkInterfaceOutput
 557              	.LVL44:
 558              	.LBB52:
 934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 559              		.loc 1 934 0
 560 02ec 2320D4E5 		ldrb	r2, [r4, #35]	@ zero_extendqisi2
 561              	.LBE52:
 936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 562              		.loc 1 936 0
 563 02f0 0500A0E1 		mov	r0, r5
 564              	.LBB53:
 934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 565              		.loc 1 934 0
 566 02f4 2230D4E5 		ldrb	r3, [r4, #34]	@ zero_extendqisi2
 567 02f8 2510D4E5 		ldrb	r1, [r4, #37]	@ zero_extendqisi2
 568 02fc 023483E1 		orr	r3, r3, r2, lsl #8
 569              	.LVL45:
 570 0300 2420D4E5 		ldrb	r2, [r4, #36]	@ zero_extendqisi2
 571 0304 2430C4E5 		strb	r3, [r4, #36]
 572 0308 2334A0E1 		lsr	r3, r3, #8
 573              	.LVL46:
 574 030c 012482E1 		orr	r2, r2, r1, lsl #8
 575 0310 2530C4E5 		strb	r3, [r4, #37]
 576              	.LBE53:
 935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes,
 577              		.loc 1 935 0
 578 0314 1E30D4E5 		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 579              		.loc 1 936 0
 580 0318 0410A0E1 		mov	r1, r4
 581              	.LBB54:
 934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 582              		.loc 1 934 0
 583 031c 2220C4E5 		strb	r2, [r4, #34]
 584              	.LVL47:
 585 0320 2224A0E1 		lsr	r2, r2, #8
 586 0324 2320C4E5 		strb	r2, [r4, #35]
 587              	.LBE54:
 935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes,
 588              		.loc 1 935 0
 589 0328 1F20D4E5 		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 590 032c 023483E1 		orr	r3, r3, r2, lsl #8
 591 0330 2020D4E5 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
 592 0334 023883E1 		orr	r3, r3, r2, lsl #16
 593 0338 2120D4E5 		ldrb	r2, [r4, #33]	@ zero_extendqisi2
 594 033c 023C83E1 		orr	r3, r3, r2, lsl #24
 595 0340 5324E7E7 		ubfx	r2, r3, #8, #8
 596 0344 1A30C4E5 		strb	r3, [r4, #26]
 597 0348 1B20C4E5 		strb	r2, [r4, #27]
 598 034c 5328E7E7 		ubfx	r2, r3, #16, #8
 599 0350 233CA0E1 		lsr	r3, r3, #24
 600 0354 1C20C4E5 		strb	r2, [r4, #28]
 936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 601              		.loc 1 936 0
 602 0358 0620A0E3 		mov	r2, #6
 935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes,
 603              		.loc 1 935 0
 604 035c 1D30C4E5 		strb	r3, [r4, #29]
 936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 605              		.loc 1 936 0
 606 0360 FEFFFFEB 		bl	memcpy
 607              	.LVL48:
 943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 608              		.loc 1 943 0
 609 0364 28D08DE2 		add	sp, sp, #40
 610              		.cfi_remember_state
 611              		.cfi_def_cfa_offset 16
 612              		@ sp needed
 613 0368 7080BDE8 		pop	{r4, r5, r6, pc}
 614              	.LVL49:
 615              	.L33:
 616              		.cfi_restore_state
 617 036c 001190E5 		ldr	r1, [r0, #256]
 618 0370 313FBFE6 		rev	r3, r1
 828:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 619              		.loc 1 828 0
 620 0374 5324E7E7 		ubfx	r2, r3, #8, #8
 621 0378 2630C4E5 		strb	r3, [r4, #38]
 622 037c 2720C4E5 		strb	r2, [r4, #39]
 623 0380 5328E7E7 		ubfx	r2, r3, #16, #8
 624 0384 233CA0E1 		lsr	r3, r3, #24
 625 0388 2820C4E5 		strb	r2, [r4, #40]
 626 038c 2930C4E5 		strb	r3, [r4, #41]
 830:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 627              		.loc 1 830 0
 628 0390 2F30D4E5 		ldrb	r3, [r4, #47]	@ zero_extendqisi2
 629 0394 010013E3 		tst	r3, #1
 630 0398 64FFFF0A 		beq	.L34
 631              	.LVL50:
 632              	.LBB55:
 834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 633              		.loc 1 834 0
 634 039c 282045E2 		sub	r2, r5, #40
 635              	.LVL51:
 835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
 636              		.loc 1 835 0
 637 03a0 012082E0 		add	r2, r2, r1
 638              	.LVL52:
 639 03a4 F81090E5 		ldr	r1, [r0, #248]
 640 03a8 010052E1 		cmp	r2, r1
 837:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						FreeRTOS_debug_printf( ( "Suppress FIN for %lu + %lu < %lu\n",
 641              		.loc 1 837 0
 642 03ac 0130C313 		bicne	r3, r3, #1
 643 03b0 2F30C415 		strbne	r3, [r4, #47]
 644 03b4 5DFFFFEA 		b	.L34
 645              	.LVL53:
 646              	.L28:
 647              	.LBE55:
 648              	.LBB56:
 853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 649              		.loc 1 853 0
 650 03b8 2720D4E5 		ldrb	r2, [r4, #39]	@ zero_extendqisi2
 651              	.LVL54:
 652 03bc 2630D4E5 		ldrb	r3, [r4, #38]	@ zero_extendqisi2
 653 03c0 2B10D4E5 		ldrb	r1, [r4, #43]	@ zero_extendqisi2
 654 03c4 023483E1 		orr	r3, r3, r2, lsl #8
 655 03c8 2820D4E5 		ldrb	r2, [r4, #40]	@ zero_extendqisi2
 656 03cc 023883E1 		orr	r3, r3, r2, lsl #16
 657 03d0 2920D4E5 		ldrb	r2, [r4, #41]	@ zero_extendqisi2
 658 03d4 023C83E1 		orr	r3, r3, r2, lsl #24
 659              	.LVL55:
 660 03d8 2A20D4E5 		ldrb	r2, [r4, #42]	@ zero_extendqisi2
 661 03dc 012482E1 		orr	r2, r2, r1, lsl #8
 662 03e0 2C10D4E5 		ldrb	r1, [r4, #44]	@ zero_extendqisi2
 663 03e4 012882E1 		orr	r2, r2, r1, lsl #16
 664 03e8 2D10D4E5 		ldrb	r1, [r4, #45]	@ zero_extendqisi2
 665 03ec 012C82E1 		orr	r2, r2, r1, lsl #24
 666 03f0 5214E7E7 		ubfx	r1, r2, #8, #8
 667 03f4 2620C4E5 		strb	r2, [r4, #38]
 668 03f8 2710C4E5 		strb	r1, [r4, #39]
 669 03fc 5218E7E7 		ubfx	r1, r2, #16, #8
 670 0400 222CA0E1 		lsr	r2, r2, #24
 671 0404 2810C4E5 		strb	r1, [r4, #40]
 672 0408 2920C4E5 		strb	r2, [r4, #41]
 673 040c 49FFFFEA 		b	.L48
 674              	.L50:
 675              		.align	2
 676              	.L49:
 677 0410 80000200 		.word	131200
 678 0414 00FFFF00 		.word	16776960
 679 0418 00000000 		.word	xDefaultPartUDPPacketHeader
 680 041c 00000000 		.word	usPacketIdentifier
 681              	.LBE56:
 682              		.cfi_endproc
 683              	.LFE62:
 685              		.section	.text.prvTCPSendReset,"ax",%progbits
 686              		.align	2
 687              		.syntax unified
 688              		.arm
 689              		.fpu neon
 691              	prvTCPSendReset:
 692              	.LFB50:
2844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
 693              		.loc 1 2844 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              	.LVL56:
 698              	.LBB57:
2847:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	const BaseType_t xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + 0u 
 699              		.loc 1 2847 0
 700 0000 183090E5 		ldr	r3, [r0, #24]
 701              	.LVL57:
2850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 702              		.loc 1 2850 0
 703 0004 1420A0E3 		mov	r2, #20
 704              	.LBE57:
2844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
 705              		.loc 1 2844 0
 706 0008 10402DE9 		push	{r4, lr}
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 4, -8
 709              		.cfi_offset 14, -4
2844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
 710              		.loc 1 2844 0
 711 000c 0010A0E1 		mov	r1, r0
 712              	.LBB58:
2853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 713              		.loc 1 2853 0
 714 0010 0000A0E3 		mov	r0, #0
 715              	.LVL58:
2850:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 716              		.loc 1 2850 0
 717 0014 2F20C3E5 		strb	r2, [r3, #47]
2851:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 718              		.loc 1 2851 0
 719 0018 5020A0E3 		mov	r2, #80
 720 001c 2E20C3E5 		strb	r2, [r3, #46]
2853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 721              		.loc 1 2853 0
 722 0020 2820A0E3 		mov	r2, #40
 723 0024 FEFFFFEB 		bl	prvTCPReturnPacket.constprop.3
 724              	.LVL59:
 725              	.LBE58:
2862:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 726              		.loc 1 2862 0
 727 0028 0000A0E3 		mov	r0, #0
 728 002c 1080BDE8 		pop	{r4, pc}
 729              		.cfi_endproc
 730              	.LFE50:
 732              		.global	__aeabi_uidiv
 733              		.section	.text.prvCheckOptions,"ax",%progbits
 734              		.align	2
 735              		.syntax unified
 736              		.arm
 737              		.fpu neon
 739              	prvCheckOptions:
 740              	.LFB33:
1137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t * pxTCPPacket;
 741              		.loc 1 1137 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 8
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 745              	.LVL60:
1145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader = &pxTCPPacket->xTCPHeader;
 746              		.loc 1 1145 0
 747 0000 183091E5 		ldr	r3, [r1, #24]
 748              	.LVL61:
1137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t * pxTCPPacket;
 749              		.loc 1 1137 0
 750 0004 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 751              		.cfi_def_cfa_offset 36
 752              		.cfi_offset 4, -36
 753              		.cfi_offset 5, -32
 754              		.cfi_offset 6, -28
 755              		.cfi_offset 7, -24
 756              		.cfi_offset 8, -20
 757              		.cfi_offset 9, -16
 758              		.cfi_offset 10, -12
 759              		.cfi_offset 11, -8
 760              		.cfi_offset 14, -4
 761 0008 14D04DE2 		sub	sp, sp, #20
 762              		.cfi_def_cfa_offset 56
1154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 763              		.loc 1 1154 0
 764 000c 1C2091E5 		ldr	r2, [r1, #28]
1149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 765              		.loc 1 1149 0
 766 0010 364083E2 		add	r4, r3, #54
 767              	.LVL62:
1150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 768              		.loc 1 1150 0
 769 0014 2E80D3E5 		ldrb	r8, [r3, #46]	@ zero_extendqisi2
1154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 770              		.loc 1 1154 0
 771 0018 023083E0 		add	r3, r3, r2
 772              	.LVL63:
1150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 773              		.loc 1 1150 0
 774 001c 2882A0E1 		lsr	r8, r8, #4
 775 0020 058048E2 		sub	r8, r8, #5
 776 0024 088184E0 		add	r8, r4, r8, lsl #2
 777              	.LVL64:
1154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 778              		.loc 1 1154 0
 779 0028 030058E1 		cmp	r8, r3
 780 002c 0050A091 		movls	r5, r0
1151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 781              		.loc 1 1151 0
 782 0030 D4308592 		addls	r3, r5, #212
 783 0034 0C308D95 		strls	r3, [sp, #12]
1154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 784              		.loc 1 1154 0
 785 0038 1700009A 		bls	.L55
 786              	.LVL65:
 787              	.L53:
1316:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 788              		.loc 1 1316 0
 789 003c 14D08DE2 		add	sp, sp, #20
 790              		.cfi_remember_state
 791              		.cfi_def_cfa_offset 36
 792              		@ sp needed
 793 0040 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 794              	.LVL66:
 795              	.L65:
 796              		.cfi_restore_state
 797              	.LBB68:
1165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 798              		.loc 1 1165 0
 799 0044 0030D4E5 		ldrb	r3, [r4]	@ zero_extendqisi2
 800 0048 000053E3 		cmp	r3, #0
 801 004c FAFFFF0A 		beq	.L53
1170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 802              		.loc 1 1170 0
 803 0050 010053E3 		cmp	r3, #1
1173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			continue;
 804              		.loc 1 1173 0
 805 0054 01408402 		addeq	r4, r4, #1
 806              	.LVL67:
1170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 807              		.loc 1 1170 0
 808 0058 0F00000A 		beq	.L55
1163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 809              		.loc 1 1163 0
 810 005c 042048E0 		sub	r2, r8, r4
1179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 811              		.loc 1 1179 0
 812 0060 010052E3 		cmp	r2, #1
 813 0064 F4FFFF9A 		bls	.L53
1184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 814              		.loc 1 1184 0
 815 0068 030053E3 		cmp	r3, #3
 816 006c 0D00001A 		bne	.L58
1187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 817              		.loc 1 1187 0
 818 0070 020052E3 		cmp	r2, #2
 819 0074 F0FFFF0A 		beq	.L53
1187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 820              		.loc 1 1187 0 is_stmt 0 discriminator 1
 821 0078 0130D4E5 		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 822 007c 030053E3 		cmp	r3, #3
 823 0080 EDFFFF1A 		bne	.L53
1192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 824              		.loc 1 1192 0 is_stmt 1
 825 0084 0230D4E5 		ldrb	r3, [r4, #2]	@ zero_extendqisi2
1194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 826              		.loc 1 1194 0
 827 0088 034084E2 		add	r4, r4, #3
 828              	.LVL68:
1192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 829              		.loc 1 1192 0
 830 008c C230C5E5 		strb	r3, [r5, #194]
1193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pucPtr += TCP_OPT_WSOPT_LEN;
 831              		.loc 1 1193 0
 832 0090 3A30D5E5 		ldrb	r3, [r5, #58]	@ zero_extendqisi2
 833 0094 083083E3 		orr	r3, r3, #8
 834 0098 3A30C5E5 		strb	r3, [r5, #58]
 835              	.LVL69:
 836              	.L55:
 837              	.LBE68:
1161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 838              		.loc 1 1161 0
 839 009c 080054E1 		cmp	r4, r8
 840 00a0 E7FFFF3A 		bcc	.L65
 841 00a4 E4FFFFEA 		b	.L53
 842              	.LVL70:
 843              	.L58:
 844              	.LBB83:
1197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 845              		.loc 1 1197 0
 846 00a8 020053E3 		cmp	r3, #2
 847 00ac 1E00001A 		bne	.L59
1200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 848              		.loc 1 1200 0
 849 00b0 030052E3 		cmp	r2, #3
 850 00b4 E0FFFF9A 		bls	.L53
1200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 851              		.loc 1 1200 0 is_stmt 0 discriminator 1
 852 00b8 0130D4E5 		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 853 00bc 040053E3 		cmp	r3, #4
 854 00c0 DDFFFF1A 		bne	.L53
 855              	.LVL71:
 856              	.LBB69:
 857              	.LBB70:
 858              		.file 4 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_IP_Priv
   1:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
   2:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * FreeRTOS+TCP V2.0.10
   3:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  *
   5:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * the Software without restriction, including without limitation the rights to
   8:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * subject to the following conditions:
  11:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  *
  12:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * The above copyright notice and this permission notice shall be included in all
  13:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * copies or substantial portions of the Software.
  14:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  *
  15:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  *
  22:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * http://aws.amazon.com/freertos
  23:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * http://www.FreeRTOS.org
  24:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
  25:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
  26:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #ifndef FREERTOS_IP_PRIVATE_H
  27:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define FREERTOS_IP_PRIVATE_H
  28:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
  29:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #ifdef __cplusplus
  30:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** extern "C" {
  31:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #endif
  32:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
  33:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* Application level configuration options. */
  34:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "FreeRTOSIPConfig.h"
  35:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "FreeRTOSIPConfigDefaults.h"
  36:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "FreeRTOS_Sockets.h"
  37:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "IPTraceMacroDefaults.h"
  38:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "FreeRTOS_Stream_Buffer.h"
  39:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #if( ipconfigUSE_TCP == 1 )
  40:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#include "FreeRTOS_TCP_WIN.h"
  41:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#include "FreeRTOS_TCP_IP.h"
  42:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #endif
  43:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
  44:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "event_groups.h"
  45:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
  46:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xNetworkAddressingParameters
  47:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
  48:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulDefaultIPAddress;
  49:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulNetMask;
  50:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulGatewayAddress;
  51:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulDNSServerAddress;
  52:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulBroadcastAddress;
  53:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** } NetworkAddressingParameters_t;
  54:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
  55:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** extern BaseType_t xTCPWindowLoggingLevel;
  56:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
  57:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
  58:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* Protocol headers.                                         */
  59:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
  60:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
  61:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
  62:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xETH_HEADER
  63:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
  64:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	MACAddress_t xDestinationAddress; /*  0 + 6 = 6  */
  65:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	MACAddress_t xSourceAddress;      /*  6 + 6 = 12 */
  66:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usFrameType;              /* 12 + 2 = 14 */
  67:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
  69:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xETH_HEADER EthernetHeader_t;
  70:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
  71:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
  72:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xARP_HEADER
  73:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
  74:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usHardwareType;				/*  0 +  2 =  2 */
  75:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usProtocolType;				/*  2 +  2 =  4 */
  76:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucHardwareAddressLength;		/*  4 +  1 =  5 */
  77:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucProtocolAddressLength;		/*  5 +  1 =  6 */
  78:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usOperation;					/*  6 +  2 =  8 */
  79:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	MACAddress_t xSenderHardwareAddress;	/*  8 +  6 = 14 */
  80:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucSenderProtocolAddress[ 4 ];	/* 14 +  4 = 18  */
  81:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	MACAddress_t xTargetHardwareAddress;	/* 18 +  6 = 24  */
  82:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulTargetProtocolAddress;		/* 24 +  4 = 28  */
  83:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
  85:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xARP_HEADER ARPHeader_t;
  86:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
  87:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
  88:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xIP_HEADER
  89:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
  90:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucVersionHeaderLength;        /*  0 + 1 =  1 */
  91:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucDifferentiatedServicesCode; /*  1 + 1 =  2 */
  92:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usLength;                    /*  2 + 2 =  4 */
  93:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usIdentification;            /*  4 + 2 =  6 */
  94:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usFragmentOffset;            /*  6 + 2 =  8 */
  95:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucTimeToLive;                 /*  8 + 1 =  9 */
  96:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucProtocol;                   /*  9 + 1 = 10 */
  97:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usHeaderChecksum;            /* 10 + 2 = 12 */
  98:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulSourceIPAddress;           /* 12 + 4 = 16 */
  99:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulDestinationIPAddress;      /* 16 + 4 = 20 */
 100:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 101:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 102:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xIP_HEADER IPHeader_t;
 103:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 104:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 105:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xIGMP_HEADER
 106:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 107:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucVersionType;     /* 0 + 1 = 1 */
 108:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucMaxResponseTime; /* 1 + 1 = 2 */
 109:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;       /* 2 + 2 = 4 */
 110:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t usGroupAddress;   /* 4 + 4 = 8 */
 111:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 112:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 113:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xIGMP_HEADER IGMPHeader_t;
 114:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 115:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 116:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xICMP_HEADER
 117:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 118:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucTypeOfMessage;   /* 0 + 1 = 1 */
 119:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucTypeOfService;   /* 1 + 1 = 2 */
 120:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;       /* 2 + 2 = 4 */
 121:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usIdentifier;     /* 4 + 2 = 6 */
 122:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usSequenceNumber; /* 6 + 2 = 8 */
 123:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 124:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 125:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xICMP_HEADER ICMPHeader_t;
 126:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 127:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 128:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xUDP_HEADER
 129:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 130:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usSourcePort;      /* 0 + 2 = 2 */
 131:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usDestinationPort; /* 2 + 2 = 4 */
 132:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usLength;          /* 4 + 2 = 6 */
 133:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;        /* 6 + 2 = 8 */
 134:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 135:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 136:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xUDP_HEADER UDPHeader_t;
 137:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 138:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 139:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xTCP_HEADER
 140:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 141:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usSourcePort;		/* +  2 =  2 */
 142:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usDestinationPort;	/* +  2 =  4 */
 143:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulSequenceNumber;	/* +  4 =  8 */
 144:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulAckNr;   	 	/* +  4 = 12 */
 145:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t  ucTCPOffset;		/* +  1 = 13 */
 146:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t  ucTCPFlags;		/* +  1 = 14 */
 147:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usWindow;			/* +  2 = 15 */
 148:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usChecksum;		/* +  2 = 18 */
 149:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usUrgent;			/* +  2 = 20 */
 150:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #if ipconfigUSE_TCP == 1
 151:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/* the option data is not a part of the TCP header */
 152:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t  ucOptdata[ipSIZE_TCP_OPTIONS];		/* + 12 = 32 */
 153:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #endif
 154:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 155:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 156:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xTCP_HEADER TCPHeader_t;
 157:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 158:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 159:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xPSEUDO_HEADER
 160:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 161:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulSourceAddress;
 162:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulDestinationAddress;
 163:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucZeros;
 164:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucProtocol;
 165:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usUDPLength;
 166:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 167:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 168:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xPSEUDO_HEADER PseudoHeader_t;
 169:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 170:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
 171:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* Nested protocol packets.                                  */
 172:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*-----------------------------------------------------------*/
 173:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 174:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 175:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xARP_PACKET
 176:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 177:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader;	/*  0 + 14 = 14 */
 178:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	ARPHeader_t xARPHeader;			/* 14 + 28 = 42 */
 179:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 180:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 181:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xARP_PACKET ARPPacket_t;
 182:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 183:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 184:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xIP_PACKET
 185:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 186:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader;
 187:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;
 188:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 189:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 190:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xIP_PACKET IPPacket_t;
 191:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 192:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 193:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xICMP_PACKET
 194:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 195:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader;
 196:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;
 197:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	ICMPHeader_t xICMPHeader;
 198:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 199:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 200:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xICMP_PACKET ICMPPacket_t;
 201:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 202:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 203:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xUDP_PACKET
 204:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 205:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader; /*  0 + 14 = 14 */
 206:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;             /* 14 + 20 = 34 */
 207:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	UDPHeader_t xUDPHeader;           /* 34 +  8 = 42 */
 208:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 209:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 210:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xUDP_PACKET UDPPacket_t;
 211:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 212:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 213:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xTCP_PACKET
 214:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 215:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	EthernetHeader_t xEthernetHeader; /*  0 + 14 = 14 */
 216:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	IPHeader_t xIPHeader;             /* 14 + 20 = 34 */
 217:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	TCPHeader_t xTCPHeader;           /* 34 + 32 = 66 */
 218:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 219:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 220:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xTCP_PACKET TCPPacket_t;
 221:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 222:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef union XPROT_PACKET
 223:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 224:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	ARPPacket_t xARPPacket;
 225:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	TCPPacket_t xTCPPacket;
 226:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	UDPPacket_t xUDPPacket;
 227:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	ICMPPacket_t xICMPPacket;
 228:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** } ProtocolPacket_t;
 229:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 230:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 231:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* The maximum UDP payload length. */
 232:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define ipMAX_UDP_PAYLOAD_LENGTH ( ( ipconfigNETWORK_MTU - ipSIZE_OF_IPv4_HEADER ) - ipSIZE_OF_UDP_
 233:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 234:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef enum
 235:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 236:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eReleaseBuffer = 0,		/* Processing the frame did not find anything to do - just release the buffer
 237:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eProcessBuffer,			/* An Ethernet frame has a valid address - continue process its contents. */
 238:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eReturnEthernetFrame,	/* The Ethernet frame contains an ARP or ICMP packet that can be returned to
 239:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eFrameConsumed			/* Processing the Ethernet packet contents resulted in the payload being sent to 
 240:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** } eFrameProcessingResult_t;
 241:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 242:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef enum
 243:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 244:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eNoEvent = -1,
 245:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eNetworkDownEvent,		/* 0: The network interface has been lost and/or needs [re]connecting. */
 246:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eNetworkRxEvent,		/* 1: The network interface has queued a received Ethernet frame. */
 247:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eARPTimerEvent,			/* 2: The ARP timer expired. */
 248:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eStackTxEvent,			/* 3: The software stack has queued a packet to transmit. */
 249:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eDHCPEvent,				/* 4: Process the DHCP state machine. */
 250:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eTCPTimerEvent,			/* 5: See if any TCP socket needs attention. */
 251:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eTCPAcceptEvent,		/* 6: Client API FreeRTOS_accept() waiting for client connections. */
 252:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eTCPNetStat,			/* 7: IP-task is asked to produce a netstat listing. */
 253:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSocketBindEvent,		/* 8: Send a message to the IP-task to bind a socket to a port. */
 254:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSocketCloseEvent,		/* 9: Send a message to the IP-task to close a socket. */
 255:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSocketSelectEvent,		/*10: Send a message to the IP-task for select(). */
 256:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSocketSignalEvent,		/*11: A socket must be signalled. */
 257:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** } eIPEvent_t;
 258:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 259:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct IP_TASK_COMMANDS
 260:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 261:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eIPEvent_t eEventType;
 262:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	void *pvData;
 263:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** } IPStackEvent_t;
 264:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 265:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define ipBROADCAST_IP_ADDRESS 0xffffffffUL
 266:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 267:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* Offset into the Ethernet frame that is used to temporarily store information
 268:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** on the fragmentation status of the packet being sent.  The value is important,
 269:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** as it is past the location into which the destination address will get placed. */
 270:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define ipFRAGMENTATION_PARAMETERS_OFFSET		( 6 )
 271:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define ipSOCKET_OPTIONS_OFFSET					( 6 )
 272:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 273:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* Only used when outgoing fragmentation is being used (FreeRTOSIPConfig.h
 274:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** setting. */
 275:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define ipGET_UDP_PAYLOAD_OFFSET_FOR_FRAGMENT( usFragmentOffset ) ( ( ( usFragmentOffset ) == 0 ) ?
 276:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 277:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* The offset into a UDP packet at which the UDP data (payload) starts. */
 278:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define ipUDP_PAYLOAD_OFFSET_IPv4	( sizeof( UDPPacket_t ) )
 279:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 280:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* The offset into an IP packet into which the IP data (payload) starts. */
 281:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define ipIP_PAYLOAD_OFFSET		( sizeof( IPPacket_t ) )
 282:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 283:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_start.h"
 284:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** struct xUDP_IP_FRAGMENT_PARAMETERS
 285:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 286:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucSocketOptions;
 287:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucPadFor16BitAlignment;
 288:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usFragmentedPacketOffset;
 289:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usFragmentLength;
 290:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usPayloadChecksum;
 291:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 292:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #include "pack_struct_end.h"
 293:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct xUDP_IP_FRAGMENT_PARAMETERS IPFragmentParameters_t;
 294:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 295:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #if( ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN )
 296:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 297:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/* Ethernet frame types. */
 298:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipARP_FRAME_TYPE	( 0x0608U )
 299:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipIPv4_FRAME_TYPE	( 0x0008U )
 300:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 301:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/* ARP related definitions. */
 302:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipARP_PROTOCOL_TYPE				( 0x0008U )
 303:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipARP_HARDWARE_TYPE_ETHERNET	( 0x0100U )
 304:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipARP_REQUEST					( 0x0100U )
 305:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipARP_REPLY						( 0x0200U )
 306:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 307:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #else
 308:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 309:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/* Ethernet frame types. */
 310:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipARP_FRAME_TYPE	( 0x0806U )
 311:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipIPv4_FRAME_TYPE	( 0x0800U )
 312:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 313:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/* ARP related definitions. */
 314:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipARP_PROTOCOL_TYPE ( 0x0800U )
 315:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipARP_HARDWARE_TYPE_ETHERNET ( 0x0001U )
 316:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipARP_REQUEST ( 0x0001 )
 317:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ipARP_REPLY ( 0x0002 )
 318:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 319:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #endif /* ipconfigBYTE_ORDER == pdFREERTOS_LITTLE_ENDIAN */
 320:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 321:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 322:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* For convenience, a MAC address of all zeros and another of all 0xffs are
 323:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** defined const for quick reference. */
 324:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** extern const MACAddress_t xBroadcastMACAddress; /* all 0xff's */
 325:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** extern uint16_t usPacketIdentifier;
 326:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 327:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* Define a default UDP packet header (declared in FreeRTOS_UDP_IP.c) */
 328:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef union xUDPPacketHeader
 329:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 330:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucBytes[24];
 331:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint32_t ulWords[6];
 332:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** } UDPPacketHeader_t;
 333:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** extern UDPPacketHeader_t xDefaultPartUDPPacketHeader;
 334:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 335:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* Structure that stores the netmask, gateway address and DNS server addresses. */
 336:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** extern NetworkAddressingParameters_t xNetworkAddressing;
 337:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 338:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* Structure that stores the defaults for netmask, gateway address and DNS.
 339:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** These values will be copied to 'xNetworkAddressing' in case DHCP is not used,
 340:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** and also in case DHCP does not lead to a confirmed request. */
 341:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** extern NetworkAddressingParameters_t xDefaultAddressing;
 342:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 343:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* True when BufferAllocation_1.c was included, false for BufferAllocation_2.c */
 344:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** extern const BaseType_t xBufferAllocFixedSize;
 345:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 346:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* Defined in FreeRTOS_Sockets.c */
 347:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #if ( ipconfigUSE_TCP == 1 )
 348:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	extern List_t xBoundTCPSocketsList;
 349:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #endif
 350:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 351:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* The local IP address is accessed from within xDefaultPartUDPPacketHeader,
 352:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** rather than duplicated in its own variable. */
 353:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define ipLOCAL_IP_ADDRESS_POINTER ( ( uint32_t * ) &( xDefaultPartUDPPacketHeader.ulWords[ 20u / s
 354:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 355:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* The local MAC address is accessed from within xDefaultPartUDPPacketHeader,
 356:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** rather than duplicated in its own variable. */
 357:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define ipLOCAL_MAC_ADDRESS ( &xDefaultPartUDPPacketHeader.ucBytes[0] )
 358:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 359:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* ICMP packets are sent using the same function as UDP packets.  The port
 360:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** number is used to distinguish between the two, as 0 is an invalid UDP port. */
 361:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define ipPACKET_CONTAINS_ICMP_DATA					( 0 )
 362:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 363:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* For now, the lower 8 bits in 'xEventBits' will be reserved for the above
 364:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** socket events. */
 365:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define SOCKET_EVENT_BIT_COUNT   8
 366:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 367:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define vSetField16( pxBase, xType, xField, usValue ) \
 368:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** { \
 369:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	( ( uint8_t* )( pxBase ) ) [ offsetof( xType, xField ) + 0 ] = ( uint8_t ) ( ( usValue ) >> 8 ); \
 370:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	( ( uint8_t* )( pxBase ) ) [ offsetof( xType, xField ) + 1 ] = ( uint8_t ) ( ( usValue ) & 0xff );
 371:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 372:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 373:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define vSetField32( pxBase, xType, xField, ulValue ) \
 374:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** { \
 375:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 0 ] = ( uint8_t )   ( ( ulValue ) >> 24 ); 
 376:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 1 ] = ( uint8_t ) ( ( ( ulValue ) >> 16 ) &
 377:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 2 ] = ( uint8_t ) ( ( ( ulValue ) >> 8 ) & 
 378:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	( (uint8_t*)( pxBase ) ) [ offsetof( xType, xField ) + 3 ] = ( uint8_t )   ( ( ulValue ) & 0xff );
 379:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 380:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 381:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define vFlip_16( left, right ) \
 382:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	do { \
 383:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint16_t tmp = (left); \
 384:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		(left) = (right); \
 385:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		(right) = tmp; \
 386:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	} while (0)
 387:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 388:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #define vFlip_32( left, right ) \
 389:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	do { \
 390:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint32_t tmp = (left); \
 391:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		(left) = (right); \
 392:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		(right) = tmp; \
 393:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	} while (0)
 394:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 395:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #ifndef ARRAY_SIZE
 396:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#define ARRAY_SIZE(x)	(BaseType_t)(sizeof(x)/sizeof(x)[0])
 397:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #endif
 398:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 399:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 400:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * A version of FreeRTOS_GetReleaseNetworkBuffer() that can be called from an
 401:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * interrupt.  If a non zero value is returned, then the calling ISR should
 402:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * perform a context switch before exiting the ISR.
 403:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 404:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** BaseType_t FreeRTOS_ReleaseFreeNetworkBufferFromISR( void );
 405:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 406:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 407:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Create a message that contains a command to initialise the network interface.
 408:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * This is used during initialisation, and at any time the network interface
 409:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * goes down thereafter.  The network interface hardware driver is responsible
 410:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * for sending the message that contains the network interface down command/
 411:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * event.
 412:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  *
 413:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Only use the FreeRTOS_NetworkDownFromISR() version if the function is to be
 414:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * called from an interrupt service routine.  If FreeRTOS_NetworkDownFromISR()
 415:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * returns a non-zero value then a context switch should be performed ebfore
 416:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * the interrupt is exited.
 417:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 418:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** void FreeRTOS_NetworkDown( void );
 419:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** BaseType_t FreeRTOS_NetworkDownFromISR( void );
 420:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 421:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 422:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Processes incoming ARP packets.
 423:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 424:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame );
 425:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 426:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 427:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Inspect an Ethernet frame to see if it contains data that the stack needs to
 428:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * process.  eProcessBuffer is returned if the frame should be processed by the
 429:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * stack.  eReleaseBuffer is returned if the frame should be discarded.
 430:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 431:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer );
 432:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 433:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 434:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Return the checksum generated over xDataLengthBytes from pucNextData.
 435:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 436:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** uint16_t usGenerateChecksum( uint32_t ulSum, const uint8_t * pucNextData, size_t uxDataLengthBytes 
 437:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 438:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* Socket related private functions. */
 439:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 440:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /* 
 441:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * The caller must ensure that pxNetworkBuffer->xDataLength is the UDP packet 
 442:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * payload size (excluding packet headers) and that the packet in pucEthernetBuffer 
 443:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * is at least the size of UDPPacket_t. 
 444:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 445:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
 446:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 447:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 448:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Initialize the socket list data structures for TCP and UDP. 
 449:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 450:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** BaseType_t vNetworkSocketsInit( void );
 451:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 452:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 453:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Returns pdTRUE if the IP task has been created and is initialised.  Otherwise
 454:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * returns pdFALSE.
 455:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 456:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** BaseType_t xIPIsNetworkTaskReady( void );
 457:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 458:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #if( ipconfigSOCKET_HAS_USER_WAKE_CALLBACK == 1 )
 459:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	struct XSOCKET;
 460:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	typedef void (*SocketWakeupCallback_t)( struct XSOCKET * pxSocket );
 461:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #endif
 462:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 463:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #if( ipconfigUSE_TCP == 1 )
 464:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 465:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/*
 466:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 * Actually a user thing, but because xBoundTCPSocketsList, let it do by the
 467:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 * IP-task
 468:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 */
 469:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	void vTCPNetStat( void );
 470:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 471:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/*
 472:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 * At least one socket needs to check for timeouts
 473:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 */
 474:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	TickType_t xTCPTimerCheck( BaseType_t xWillSleep );
 475:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 476:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/* Every TCP socket has a buffer space just big enough to store
 477:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	the last TCP header received.
 478:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	As a reference of this field may be passed to DMA, force the
 479:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	alignment to 8 bytes. */
 480:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	typedef union
 481:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	{
 482:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		struct
 483:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		{
 484:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			/* Increase the alignment of this union by adding a 64-bit variable. */
 485:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			uint64_t ullAlignmentWord;
 486:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		} a;
 487:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		struct
 488:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		{
 489:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			/* The next field only serves to give 'ucLastPacket' a correct
 490:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			alignment of 8 + 2.  See comments in FreeRTOS_IP.h */
 491:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			uint8_t ucFillPacket[ ipconfigPACKET_FILLER_SIZE ];
 492:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			uint8_t ucLastPacket[ sizeof( TCPPacket_t ) ];
 493:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		} u;
 494:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	} LastTCPPacket_t;
 495:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 496:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/*
 497:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 * Note that the values of all short and long integers in these structs
 498:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 * are being stored in the native-endian way
 499:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 * Translation should take place when accessing any structure which defines
 500:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 * network packets, such as IPHeader_t and TCPHeader_t
 501:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 */
 502:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	typedef struct TCPSOCKET
 503:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	{
 504:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint32_t ulRemoteIP;		/* IP address of remote machine */
 505:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint16_t usRemotePort;		/* Port on remote machine */
 506:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		struct {
 507:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			/* Most compilers do like bit-flags */
 508:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			uint32_t
 509:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bMssChange : 1,		/* This socket has seen a change in MSS */
 510:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bPassAccept : 1,	/* when true, this socket may be returned in a call to accept() */
 511:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bPassQueued : 1,	/* when true, this socket is an orphan until it gets connected
 512:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 									 * Why an orphan? Because it may not be returned in a accept() call until it
 513:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 									 * gets the state eESTABLISHED */
 514:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bReuseSocket : 1,	/* When a listening socket gets a connection, do not create a new instance bu
 515:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bCloseAfterSend : 1,/* As soon as the last byte has been transmitted, finalise the connection
 516:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 									 * Useful in e.g. FTP connections, where the last data bytes are sent along with the FIN f
 517:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bUserShutdown : 1,	/* User requesting a graceful shutdown */
 518:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bCloseRequested : 1,/* Request to finalise the connection */
 519:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bLowWater : 1,		/* high-water level has been reached. Cleared as soon as 'rx-count < lo-water' 
 520:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bWinChange : 1,		/* The value of bLowWater has changed, must send a window update */
 521:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bSendKeepAlive : 1,	/* When this flag is true, a TCP keep-alive message must be send */
 522:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bWaitKeepAlive : 1,	/* When this flag is true, a TCP keep-alive reply is expected */
 523:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bConnPrepared : 1,	/* Connecting socket: Message has been prepared */
 524:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 525:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 					bConnPassed : 1,	/* Connecting socket: Socket has been passed in a successful select()  */
 526:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
 527:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bFinAccepted : 1,	/* This socket has received (or sent) a FIN and accepted it */
 528:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bFinSent : 1,		/* We've sent out a FIN */
 529:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bFinRecv : 1,		/* We've received a FIN from our peer */
 530:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bFinAcked : 1,		/* Our FIN packet has been acked */
 531:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bFinLast : 1,		/* The last ACK (after FIN and FIN+ACK) has been sent or will be sent by the pee
 532:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bRxStopped : 1,		/* Application asked to temporarily stop reception */
 533:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bMallocError : 1,	/* There was an error allocating a stream */
 534:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 				bWinScaling : 1;	/* A TCP-Window Scaling option was offered and accepted in the SYN phase. */
 535:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		} bits;
 536:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint32_t ulHighestRxAllowed;
 537:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 								/* The highest sequence number that we can receive at any moment */
 538:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint16_t usTimeout;		/* Time (in ticks) after which this socket needs attention */
 539:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint16_t usCurMSS;		/* Current Maximum Segment Size */
 540:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint16_t usInitMSS;		/* Initial maximum segment Size */
 541:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint16_t usChildCount;	/* In case of a listening socket: number of connections on this port numbe
 542:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint16_t usBacklog;		/* In case of a listening socket: maximum number of concurrent connections o
 543:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint8_t ucRepCount;		/* Send repeat count, for retransmissions
 544:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 								 * This counter is separate from the xmitCount in the
 545:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 								 * TCP win segments */
 546:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint8_t ucTCPState;		/* TCP state: see eTCP_STATE */
 547:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		struct XSOCKET *pxPeerSocket;	/* for server socket: child, for child socket: parent */
 548:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#if( ipconfigTCP_KEEP_ALIVE == 1 )
 549:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			uint8_t ucKeepRepCount;
 550:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			TickType_t xLastAliveTime;
 551:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#endif /* ipconfigTCP_KEEP_ALIVE */
 552:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#if( ipconfigTCP_HANG_PROTECTION == 1 )
 553:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			TickType_t xLastActTime;
 554:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#endif /* ipconfigTCP_HANG_PROTECTION */
 555:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		size_t uxLittleSpace;
 556:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		size_t uxEnoughSpace;
 557:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		size_t uxRxStreamSize;
 558:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		size_t uxTxStreamSize;
 559:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		StreamBuffer_t *rxStream;
 560:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		StreamBuffer_t *txStream;
 561:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_TCP_WIN == 1 )
 562:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			NetworkBufferDescriptor_t *pxAckMessage;
 563:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#endif /* ipconfigUSE_TCP_WIN */
 564:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		/* Buffer space to store the last TCP header received. */
 565:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		LastTCPPacket_t xPacket;
 566:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint8_t tcpflags;		/* TCP flags */
 567:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_TCP_WIN != 0 )
 568:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			uint8_t ucMyWinScaleFactor;
 569:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			uint8_t ucPeerWinScaleFactor;
 570:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#endif
 571:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_CALLBACKS == 1 )
 572:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			FOnTCPReceive_t pxHandleReceive;	/*
 573:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 										 		 * In case of a TCP socket:
 574:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 										 		 * typedef void (* FOnTCPReceive_t) (Socket_t xSocket, void *pData, size_t xLength );
 575:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 										 		 */
 576:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			FOnTCPSent_t pxHandleSent;
 577:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			FOnConnected_t pxHandleConnected;	/* Actually type: typedef void (* FOnConnected_t) (Socket_t xS
 578:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#endif /* ipconfigUSE_CALLBACKS */
 579:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint32_t ulWindowSize;		/* Current Window size advertised by peer */
 580:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		uint32_t ulRxCurWinSize;	/* Constantly changing: this is the current size available for data rece
 581:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		size_t uxRxWinSize;	/* Fixed value: size of the TCP reception window */
 582:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		size_t uxTxWinSize;	/* Fixed value: size of the TCP transmit window */
 583:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 584:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		TCPWindow_t xTCPWindow;
 585:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	} IPTCPSocket_t;
 586:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 587:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #endif /* ipconfigUSE_TCP */
 588:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 589:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct UDPSOCKET
 590:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 591:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	List_t xWaitingPacketsList;	/* Incoming packets */
 592:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#if( ipconfigUDP_MAX_RX_PACKETS > 0 )
 593:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		UBaseType_t uxMaxPackets; /* Protection: limits the number of packets buffered per socket */
 594:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#endif /* ipconfigUDP_MAX_RX_PACKETS */
 595:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#if( ipconfigUSE_CALLBACKS == 1 )
 596:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		FOnUDPReceive_t pxHandleReceive;	/*
 597:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 											 * In case of a UDP socket:
 598:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 											 * typedef void (* FOnUDPReceive_t) (Socket_t xSocket, void *pData, size_t xLength, stru
 599:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 											 */
 600:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		FOnUDPSent_t pxHandleSent;
 601:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#endif /* ipconfigUSE_CALLBACKS */
 602:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** } IPUDPSocket_t;
 603:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 604:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef enum eSOCKET_EVENT {
 605:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSOCKET_RECEIVE = 0x0001,
 606:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSOCKET_SEND    = 0x0002,
 607:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSOCKET_ACCEPT  = 0x0004,
 608:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSOCKET_CONNECT = 0x0008,
 609:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSOCKET_BOUND   = 0x0010,
 610:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSOCKET_CLOSED	= 0x0020,
 611:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSOCKET_INTR	= 0x0040,
 612:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	eSOCKET_ALL		= 0x007F,
 613:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** } eSocketEvent_t;
 614:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 615:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** typedef struct XSOCKET
 616:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 617:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	EventBits_t xEventBits;
 618:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	EventGroupHandle_t xEventGroup;
 619:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 620:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	ListItem_t xBoundSocketListItem; /* Used to reference the socket from a bound sockets list. */
 621:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	TickType_t xReceiveBlockTime; /* if recv[to] is called while no data is available, wait this amoun
 622:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	TickType_t xSendBlockTime; /* if send[to] is called while there is not enough space to send, wait 
 623:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 624:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint16_t usLocalPort;		/* Local port on this machine */
 625:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucSocketOptions;
 626:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	uint8_t ucProtocol; /* choice of FREERTOS_IPPROTO_UDP/TCP */
 627:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#if( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
 628:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		SemaphoreHandle_t pxUserSemaphore;
 629:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
 630:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#if( ipconfigSOCKET_HAS_USER_WAKE_CALLBACK == 1 )
 631:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		SocketWakeupCallback_t pxUserWakeCallback;
 632:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */
 633:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 634:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
 635:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		struct xSOCKET_SET *pxSocketSet;
 636:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		/* User may indicate which bits are interesting for this socket. */
 637:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		EventBits_t xSelectBits;
 638:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		/* These bits indicate the events which have actually occurred.
 639:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		They are maintained by the IP-task */
 640:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		EventBits_t xSocketBits;
 641:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
 642:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/* TCP/UDP specific fields: */
 643:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/* Before accessing any member of this structure, it should be confirmed */
 644:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/* that the protocol corresponds with the type of structure */
 645:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 646:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	union
 647:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	{
 648:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		IPUDPSocket_t xUDP;
 649:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#if( ipconfigUSE_TCP == 1 )
 650:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			IPTCPSocket_t xTCP;
 651:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			/* Make sure that xTCP is 8-bytes aligned by
 652:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			declaring a 64-bit variable in the same union */
 653:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			uint64_t ullTCPAlignment;
 654:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 		#endif /* ipconfigUSE_TCP */
 655:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	} u;
 656:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** } FreeRTOS_Socket_t;
 657:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 658:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #if( ipconfigUSE_TCP == 1 )
 659:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	/*
 660:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 * Lookup a TCP socket, using a multiple matching: both port numbers and
 661:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 * return IP address.
 662:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	 */
 663:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemo
 664:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 665:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** #endif /* ipconfigUSE_TCP */
 666:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 667:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 668:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Look up a local socket by finding a match with the local port.
 669:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 670:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort );
 671:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 672:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 673:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Called when the application has generated a UDP packet to send.
 674:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 675:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer );
 676:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 677:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 678:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Calculate the upper-layer checksum
 679:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Works both for UDP, ICMP and TCP packages
 680:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * bOut = true: checksum will be set in outgoing packets
 681:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * bOut = false: checksum will be calculated for incoming packets
 682:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  *     returning 0xffff means: checksum was correct
 683:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 684:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** uint16_t usGenerateProtocolChecksum( const uint8_t * const pucEthernetBuffer, size_t uxBufferLength
 685:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 686:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 687:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * An Ethernet frame has been updated (maybe it was an ARP request or a PING
 688:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * request?) and is to be sent back to its source.
 689:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 690:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSen
 691:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 692:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 693:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * The internal version of bind()
 694:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * If 'ulInternal' is true, it is called by the driver
 695:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * The TCP driver needs to bind a socket at the moment a listening socket
 696:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * creates a new connected socket
 697:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 698:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** BaseType_t vSocketBind( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr * pxAddress, size_t u
 699:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 700:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 701:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Internal function to add streaming data to a TCP socket. If ulIn == true,
 702:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * data will be added to the rxStream, otherwise to the tXStream.  Normally data
 703:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * will be written with ulOffset == 0, meaning: at the end of the FIFO.  When
 704:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * packet come in out-of-order, an offset will be used to put it in front and
 705:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * the head will not change yet.
 706:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 707:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** int32_t lTCPAddRxdata(FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t
 708:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 709:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 710:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Currently called for any important event.
 711:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 712:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket );
 713:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 714:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** /*
 715:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  * Some helping function, their meaning should be clear
 716:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h ****  */
 717:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** static portINLINE uint32_t ulChar2u32 (const uint8_t *apChr);
 718:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** static portINLINE uint32_t ulChar2u32 (const uint8_t *apChr)
 719:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 720:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 721:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[1] ) << 16) |
 722:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[2] ) << 8) |
 723:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[3] ) );
 724:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 725:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 
 726:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
 727:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
 728:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** {
 729:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 	return ( uint16_t )
 730:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( ( uint32_t )apChr[0] ) << 8) |
 859              		.loc 4 730 0 is_stmt 1
 860 00c4 0230D4E5 		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 731:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			  ( ( ( uint32_t )apChr[1] ) ) );
 861              		.loc 4 731 0
 862 00c8 0360D4E5 		ldrb	r6, [r4, #3]	@ zero_extendqisi2
 729:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( ( uint32_t )apChr[0] ) << 8) |
 863              		.loc 4 729 0
 864 00cc 036486E1 		orr	r6, r6, r3, lsl #8
 865              	.LVL72:
 866              	.LBE70:
 867              	.LBE69:
1210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 868              		.loc 1 1210 0
 869 00d0 B434D5E1 		ldrh	r3, [r5, #68]
 870 00d4 030056E1 		cmp	r6, r3
 871 00d8 1100000A 		beq	.L60
1213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 872              		.loc 1 1213 0
 873 00dc 000056E3 		cmp	r6, #0
 874 00e0 D5FFFF0A 		beq	.L53
1221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 875              		.loc 1 1221 0
 876 00e4 030056E1 		cmp	r6, r3
 877 00e8 0D00002A 		bcs	.L60
1224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
 878              		.loc 1 1224 0
 879 00ec 3830D5E5 		ldrb	r3, [r5, #56]	@ zero_extendqisi2
1232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 880              		.loc 1 1232 0
 881 00f0 0610A0E1 		mov	r1, r6
 882 00f4 D80095E5 		ldr	r0, [r5, #216]
1224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
 883              		.loc 1 1224 0
 884 00f8 013083E3 		orr	r3, r3, #1
 885 00fc 3830C5E5 		strb	r3, [r5, #56]
1232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 886              		.loc 1 1232 0
 887 0100 FEFFFFEB 		bl	__aeabi_uidiv
 888              	.LVL73:
 889 0104 960000E0 		mul	r0, r6, r0
1233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 890              		.loc 1 1233 0
 891 0108 923100E3 		movw	r3, #402
1232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 892              		.loc 1 1232 0
 893 010c D80085E5 		str	r0, [r5, #216]
1233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 894              		.loc 1 1233 0
 895 0110 B36085E1 		strh	r6, [r5, r3]	@ movhi
1234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 896              		.loc 1 1234 0
 897 0114 193E85E2 		add	r3, r5, #400
 898 0118 B060C3E1 		strh	r6, [r3]	@ movhi
1235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 899              		.loc 1 1235 0
 900 011c B464C5E1 		strh	r6, [r5, #68]	@ movhi
1236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 901              		.loc 1 1236 0
 902 0120 B264C5E1 		strh	r6, [r5, #66]	@ movhi
 903              	.L60:
1244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#endif	/* ipconfigUSE_TCP_WIN != 1 */
 904              		.loc 1 1244 0
 905 0124 044084E2 		add	r4, r4, #4
 906              	.LVL74:
 907 0128 DBFFFFEA 		b	.L55
 908              	.LVL75:
 909              	.L59:
 910              	.LBB71:
1251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( len < 2 ) || ( len > xRemainingOptionsBytes ) )
 911              		.loc 1 1251 0
 912 012c 0160D4E5 		ldrb	r6, [r4, #1]	@ zero_extendqisi2
 913              	.LVL76:
1252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 914              		.loc 1 1252 0
 915 0130 010056E3 		cmp	r6, #1
 916 0134 C0FFFF9A 		bls	.L53
1252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 917              		.loc 1 1252 0 is_stmt 0 discriminator 1
 918 0138 060052E1 		cmp	r2, r6
 919 013c BEFFFF3A 		bcc	.L53
1264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 920              		.loc 1 1264 0 is_stmt 1
 921 0140 050053E3 		cmp	r3, #5
 922 0144 0D00001A 		bne	.L61
1266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pucPtr += 2;
 923              		.loc 1 1266 0
 924 0148 026046E2 		sub	r6, r6, #2
 925              	.LVL77:
 926 014c 0A7084E2 		add	r7, r4, #10
 927 0150 7660EFE6 		uxtb	r6, r6
 928              	.LVL78:
 929 0154 A691A0E1 		lsr	r9, r6, #3
 930 0158 89A1A0E1 		lsl	r10, r9, #3
 931 015c 0AB08AE2 		add	fp, r10, #10
 932 0160 0BB084E0 		add	fp, r4, fp
 933              	.LVL79:
 934              	.L62:
1269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
 935              		.loc 1 1269 0
 936 0164 07005BE1 		cmp	fp, r7
 937 0168 0600001A 		bne	.L64
 938 016c 899269E0 		rsb	r9, r9, r9, lsl #5
 939 0170 02A08AE2 		add	r10, r10, #2
 940 0174 0A4084E0 		add	r4, r4, r10
 941 0178 896186E0 		add	r6, r6, r9, lsl #3
 942 017c 7660EFE6 		uxtb	r6, r6
 943              	.LVL80:
 944              	.L61:
1313:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 945              		.loc 1 1313 0
 946 0180 064084E0 		add	r4, r4, r6
 947              	.LVL81:
 948 0184 C4FFFFEA 		b	.L55
 949              	.LVL82:
 950              	.L64:
 951              	.LBB72:
 952              	.LBB73:
 953              	.LBB74:
 721:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[2] ) << 8) |
 954              		.loc 4 721 0
 955 0188 032057E5 		ldrb	r2, [r7, #-3]	@ zero_extendqisi2
 720:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[1] ) << 16) |
 956              		.loc 4 720 0
 957 018c 043057E5 		ldrb	r3, [r7, #-4]	@ zero_extendqisi2
 958              	.LBE74:
 959              	.LBE73:
 960              	.LBB76:
 961              	.LBB77:
 962 0190 081057E5 		ldrb	r1, [r7, #-8]	@ zero_extendqisi2
 963              	.LBE77:
 964              	.LBE76:
 965              	.LBB80:
 966              	.LBB75:
 722:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[3] ) );
 967              		.loc 4 722 0
 968 0194 020057E5 		ldrb	r0, [r7, #-2]	@ zero_extendqisi2
 721:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[2] ) << 8) |
 969              		.loc 4 721 0
 970 0198 0228A0E1 		lsl	r2, r2, #16
 720:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[1] ) << 16) |
 971              		.loc 4 720 0
 972 019c 032C82E1 		orr	r2, r2, r3, lsl #24
 723:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 973              		.loc 4 723 0
 974 01a0 013057E5 		ldrb	r3, [r7, #-1]	@ zero_extendqisi2
 722:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[3] ) );
 975              		.loc 4 722 0
 976 01a4 032082E1 		orr	r2, r2, r3
 977              	.LBE75:
 978              	.LBE80:
 979              	.LBB81:
 980              	.LBB78:
 721:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[2] ) << 8) |
 981              		.loc 4 721 0
 982 01a8 073057E5 		ldrb	r3, [r7, #-7]	@ zero_extendqisi2
 983              	.LBE78:
 984              	.LBE81:
1273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
 985              		.loc 1 1273 0
 986 01ac 002482E1 		orr	r2, r2, r0, lsl #8
 987 01b0 0C009DE5 		ldr	r0, [sp, #12]
 988              	.LBB82:
 989              	.LBB79:
 721:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[2] ) << 8) |
 990              		.loc 4 721 0
 991 01b4 0338A0E1 		lsl	r3, r3, #16
 720:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[1] ) << 16) |
 992              		.loc 4 720 0
 993 01b8 013C83E1 		orr	r3, r3, r1, lsl #24
 723:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** }
 994              		.loc 4 723 0
 995 01bc 051057E5 		ldrb	r1, [r7, #-5]	@ zero_extendqisi2
 722:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP_Private.h **** 			( ( ( uint32_t )apChr[3] ) );
 996              		.loc 4 722 0
 997 01c0 013083E1 		orr	r3, r3, r1
 998 01c4 061057E5 		ldrb	r1, [r7, #-6]	@ zero_extendqisi2
 999              	.LBE79:
 1000              	.LBE82:
1273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
 1001              		.loc 1 1273 0
 1002 01c8 011483E1 		orr	r1, r3, r1, lsl #8
 1003 01cc FEFFFFEB 		bl	ulTCPWindowTxSack
 1004              	.LVL83:
1277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						{
 1005              		.loc 1 1277 0
 1006 01d0 70C095E5 		ldr	ip, [r5, #112]
 1007 01d4 0030A0E1 		mov	r3, r0
 1008 01d8 00005CE3 		cmp	ip, #0
 1009 01dc 00005013 		cmpne	r0, #0
 1010 01e0 0700000A 		beq	.L63
1280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 							pxSocket->xEventBits |= eSOCKET_SEND;
 1011              		.loc 1 1280 0
 1012 01e4 0020A0E3 		mov	r2, #0
 1013 01e8 0C00A0E1 		mov	r0, ip
 1014              	.LVL84:
 1015 01ec 00208DE5 		str	r2, [sp]
 1016 01f0 0210A0E1 		mov	r1, r2
 1017 01f4 FEFFFFEB 		bl	uxStreamBufferGet
 1018              	.LVL85:
1281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1019              		.loc 1 1281 0
 1020 01f8 003095E5 		ldr	r3, [r5]
 1021 01fc 023083E3 		orr	r3, r3, #2
 1022 0200 003085E5 		str	r3, [r5]
 1023              	.L63:
 1024              	.LVL86:
 1025 0204 087087E2 		add	r7, r7, #8
 1026              	.LVL87:
 1027 0208 D5FFFFEA 		b	.L62
 1028              	.LBE72:
 1029              	.LBE71:
 1030              	.LBE83:
 1031              		.cfi_endproc
 1032              	.LFE33:
 1034              		.section	.text.prvTCPAddTxData,"ax",%progbits
 1035              		.align	2
 1036              		.syntax unified
 1037              		.arm
 1038              		.fpu neon
 1040              	prvTCPAddTxData:
 1041              	.LFB41:
1923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lCount, lLength;
 1042              		.loc 1 1923 0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 0
 1045              		@ frame_needed = 0, uses_anonymous_args = 0
 1046              	.LVL88:
1932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1047              		.loc 1 1932 0
 1048 0000 702090E5 		ldr	r2, [r0, #112]
 1049              	.LVL89:
 1050              	.LBB94:
 1051              	.LBB95:
 1052              	.LBB96:
 1053              	.LBB97:
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
 1054              		.loc 2 84 0
 1055 0004 103092E5 		ldr	r3, [r2, #16]
 1056              	.LBE97:
 1057              	.LBE96:
 115:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 116:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 117:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 118:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 119:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 120:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
 121:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
 122:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
 123:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Returns the number of items which can be read from uxTail
 124:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** before reaching uxHead */
 125:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxHead = pxBuffer->uxHead;
 126:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 127:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 128:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 129:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 130:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 131:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 132:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferMidSpace( const StreamBuffer_t *pxBuffer );
 133:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE size_t uxStreamBufferMidSpace( const StreamBuffer_t *pxBuffer )
 134:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
 135:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Returns the distance between uxHead and uxMid */
 136:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxHead = pxBuffer->uxHead;
 1058              		.loc 2 136 0
 1059 0008 081092E5 		ldr	r1, [r2, #8]
 1060              	.LVL90:
 137:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxMid = pxBuffer->uxMid;
 1061              		.loc 2 137 0
 1062 000c 04C092E5 		ldr	ip, [r2, #4]
 1063              	.LVL91:
 1064              	.LBB99:
 1065              	.LBB98:
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
 1066              		.loc 2 84 0
 1067 0010 031081E0 		add	r1, r1, r3
 1068              	.LVL92:
 1069 0014 0C1041E0 		sub	r1, r1, ip
 1070              	.LVL93:
  85:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 1071              		.loc 2 85 0
 1072 0018 010053E1 		cmp	r3, r1
  87:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 1073              		.loc 2 87 0
 1074 001c 03104190 		subls	r1, r1, r3
 1075              	.LVL94:
 1076              	.LBE98:
 1077              	.LBE99:
 1078              	.LBE95:
 1079              	.LBE94:
1934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1080              		.loc 1 1934 0
 1081 0020 000051E3 		cmp	r1, #0
 1082 0024 1EFF2FD1 		bxle	lr
1923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lCount, lLength;
 1083              		.loc 1 1923 0
 1084 0028 10402DE9 		push	{r4, lr}
 1085              		.cfi_def_cfa_offset 8
 1086              		.cfi_offset 4, -8
 1087              		.cfi_offset 14, -4
 1088 002c 0040A0E1 		mov	r4, r0
1944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 1089              		.loc 1 1944 0
 1090 0030 042092E5 		ldr	r2, [r2, #4]
1942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 								( uint32_t ) lLength,
 1091              		.loc 1 1942 0
 1092 0034 D40080E2 		add	r0, r0, #212
 1093              	.LVL95:
 1094 0038 FEFFFFEB 		bl	lTCPWindowTxAdd
 1095              	.LVL96:
1948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1096              		.loc 1 1948 0
 1097 003c 000050E3 		cmp	r0, #0
 1098 0040 1080BDD8 		pople	{r4, pc}
1950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 1099              		.loc 1 1950 0
 1100 0044 703094E5 		ldr	r3, [r4, #112]
 1101              	.LVL97:
 1102              	.LBB100:
 1103              	.LBB101:
 1104              	.LBB102:
 1105              	.LBB103:
 136:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxMid = pxBuffer->uxMid;
 1106              		.loc 2 136 0
 1107 0048 082093E5 		ldr	r2, [r3, #8]
 1108              	.LVL98:
 1109              	.LBB104:
 1110              	.LBB105:
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
 1111              		.loc 2 84 0
 1112 004c 101093E5 		ldr	r1, [r3, #16]
 1113              	.LBE105:
 1114              	.LBE104:
 1115              		.loc 2 137 0
 1116 0050 04C093E5 		ldr	ip, [r3, #4]
 1117              	.LVL99:
 1118              	.LBB108:
 1119              	.LBB106:
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
 1120              		.loc 2 84 0
 1121 0054 012082E0 		add	r2, r2, r1
 1122              	.LVL100:
 1123 0058 0C2042E0 		sub	r2, r2, ip
 1124              	.LVL101:
 1125              	.LBE106:
 1126              	.LBE108:
 1127              	.LBE103:
 1128              	.LBE102:
 138:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 139:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 140:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** }
 141:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /*-----------------------------------------------------------*/
 142:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 143:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferMoveMid( StreamBuffer_t *pxBuffer, size_t uxCount );
 144:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** static portINLINE void vStreamBufferMoveMid( StreamBuffer_t *pxBuffer, size_t uxCount )
 145:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** {
 146:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** /* Increment uxMid, but no further than uxHead */
 147:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 148:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 149:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( uxCount > uxSize )
 150:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 151:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		uxCount = uxSize;
 152:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 153:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	pxBuffer->uxMid += uxCount;
 1129              		.loc 2 153 0
 1130 005c 04C093E5 		ldr	ip, [r3, #4]
 1131              	.LVL102:
 1132              	.LBB111:
 1133              	.LBB110:
 1134              	.LBB109:
 1135              	.LBB107:
  85:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 1136              		.loc 2 85 0
 1137 0060 020051E1 		cmp	r1, r2
  87:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 1138              		.loc 2 87 0
 1139 0064 01204290 		subls	r2, r2, r1
 1140              	.LVL103:
 1141              	.LBE107:
 1142              	.LBE109:
 1143              	.LBE110:
 1144              	.LBE111:
 1145              		.loc 2 153 0
 1146 0068 020050E1 		cmp	r0, r2
 1147 006c 00208C90 		addls	r2, ip, r0
 1148 0070 02208C80 		addhi	r2, ip, r2
 1149              	.LVL104:
 1150 0074 042083E5 		str	r2, [r3, #4]
 154:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 1151              		.loc 2 154 0
 1152 0078 042093E5 		ldr	r2, [r3, #4]
 1153 007c 010052E1 		cmp	r2, r1
 155:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 156:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 		pxBuffer->uxMid -= pxBuffer->LENGTH;
 1154              		.loc 2 156 0
 1155 0080 04209325 		ldrcs	r2, [r3, #4]
 1156 0084 01104220 		subcs	r1, r2, r1
 1157 0088 04108325 		strcs	r1, [r3, #4]
 1158 008c 1080BDE8 		pop	{r4, pc}
 1159              	.LBE101:
 1160              	.LBE100:
 1161              		.cfi_endproc
 1162              	.LFE41:
 1164              		.section	.text.vTCPStateChange,"ax",%progbits
 1165              		.align	2
 1166              		.global	vTCPStateChange
 1167              		.syntax unified
 1168              		.arm
 1169              		.fpu neon
 1171              	vTCPStateChange:
 1172              	.LFB37:
1431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *xParent = NULL;
 1173              		.loc 1 1431 0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 0
 1176              		@ frame_needed = 0, uses_anonymous_args = 0
 1177              	.LVL105:
 1178 0000 70402DE9 		push	{r4, r5, r6, lr}
 1179              		.cfi_def_cfa_offset 16
 1180              		.cfi_offset 4, -16
 1181              		.cfi_offset 5, -12
 1182              		.cfi_offset 6, -8
 1183              		.cfi_offset 14, -4
1434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigHAS_DEBUG_PRINTF != 0 )
 1184              		.loc 1 1434 0
 1185 0004 080051E3 		cmp	r1, #8
 1186 0008 04005113 		cmpne	r1, #4
1433:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 1187              		.loc 1 1433 0
 1188 000c 4B20D0E5 		ldrb	r2, [r0, #75]	@ zero_extendqisi2
 1189              	.LVL106:
1434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ipconfigHAS_DEBUG_PRINTF != 0 )
 1190              		.loc 1 1434 0
 1191 0010 0150A083 		movhi	r5, #1
 1192 0014 0050A093 		movls	r5, #0
 1193              	.LVL107:
1431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *xParent = NULL;
 1194              		.loc 1 1431 0
 1195 0018 0040A0E1 		mov	r4, r0
 1196 001c 0160A0E1 		mov	r6, r1
1443:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1197              		.loc 1 1443 0
 1198 0020 080052E3 		cmp	r2, #8
 1199 0024 04005213 		cmpne	r2, #4
 1200 0028 0130A083 		movhi	r3, #1
 1201 002c 0030A093 		movls	r3, #0
 1202 0030 050053E1 		cmp	r3, r5
 1203 0034 2800000A 		beq	.L90
1446:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1204              		.loc 1 1446 0
 1205 0038 000055E3 		cmp	r5, #0
 1206 003c 2300000A 		beq	.L91
1449:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 1207              		.loc 1 1449 0
 1208 0040 3830D0E5 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1209 0044 045013E2 		ands	r5, r3, #4
 1210              	.LVL108:
 1211 0048 1C00000A 		beq	.L92
1452:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 1212              		.loc 1 1452 0
 1213 004c 080013E3 		tst	r3, #8
 1214 0050 0500001A 		bne	.L99
1458:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					configASSERT( xParent != NULL );
 1215              		.loc 1 1458 0
 1216 0054 4C5090E5 		ldr	r5, [r0, #76]
 1217              	.LVL109:
1459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 1218              		.loc 1 1459 0
 1219 0058 000055E3 		cmp	r5, #0
 1220 005c 0300001A 		bne	.L93
1459:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 1221              		.loc 1 1459 0 is_stmt 0 discriminator 1
 1222 0060 0110A0E3 		mov	r1, #1
 1223              	.LVL110:
 1224 0064 D8009FE5 		ldr	r0, .L105
 1225              	.LVL111:
 1226 0068 FEFFFFEB 		bl	longjmp
 1227              	.LVL112:
 1228              	.L99:
 1229 006c 0050A0E1 		mov	r5, r0
 1230              	.LVL113:
 1231              	.L93:
1463:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
 1232              		.loc 1 1463 0 is_stmt 1
 1233 0070 4C3095E5 		ldr	r3, [r5, #76]
 1234 0074 000053E3 		cmp	r3, #0
1468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1235              		.loc 1 1468 0
 1236 0078 003095E5 		ldr	r3, [r5]
1465:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
 1237              		.loc 1 1465 0
 1238 007c 4C408505 		streq	r4, [r5, #76]
1468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1239              		.loc 1 1468 0
 1240 0080 043083E3 		orr	r3, r3, #4
 1241 0084 003085E5 		str	r3, [r5]
1497:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 1242              		.loc 1 1497 0
 1243 0088 0030A0E3 		mov	r3, #0
 1244 008c 4C3084E5 		str	r3, [r4, #76]
1498:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1245              		.loc 1 1498 0
 1246 0090 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
1501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 1247              		.loc 1 1501 0
 1248 0094 FB3003E2 		and	r3, r3, #251
 1249 0098 023083E3 		orr	r3, r3, #2
 1250 009c 3830C4E5 		strb	r3, [r4, #56]
 1251              	.LVL114:
 1252              	.L95:
 1253 00a0 0B0052E3 		cmp	r2, #11
 1254 00a4 1600008A 		bhi	.L96
 1255 00a8 813B00E3 		movw	r3, #2945
 1256 00ac 0110A0E3 		mov	r1, #1
 1257              	.LVL115:
 1258 00b0 113213E0 		ands	r3, r3, r1, lsl r2
 1259              	.LVL116:
1547:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 1260              		.loc 1 1547 0
 1261 00b4 0030A013 		movne	r3, #0
 1262 00b8 B034C411 		strhne	r3, [r4, #64]	@ movhi
 1263 00bc 100000EA 		b	.L96
 1264              	.LVL117:
 1265              	.L92:
1505:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1266              		.loc 1 1505 0
 1267 00c0 003090E5 		ldr	r3, [r0]
 1268 00c4 083083E3 		orr	r3, r3, #8
 1269              	.L104:
1520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1270              		.loc 1 1520 0
 1271 00c8 003084E5 		str	r3, [r4]
 1272 00cc F3FFFFEA 		b	.L95
 1273              	.LVL118:
 1274              	.L91:
 1275 00d0 003090E5 		ldr	r3, [r0]
 1276 00d4 203083E3 		orr	r3, r3, #32
 1277 00d8 FAFFFFEA 		b	.L104
 1278              	.L90:
1552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1279              		.loc 1 1552 0
 1280 00dc 000051E3 		cmp	r1, #0
1432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connect
 1281              		.loc 1 1432 0
 1282 00e0 0050A013 		movne	r5, #0
 1283              	.LVL119:
1552:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1284              		.loc 1 1552 0
 1285 00e4 0600001A 		bne	.L96
1556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 1286              		.loc 1 1556 0
 1287 00e8 3830D0E5 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1288 00ec 060013E3 		tst	r3, #6
 1289 00f0 0200000A 		beq	.L102
1560:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 1290              		.loc 1 1560 0
 1291 00f4 080013E3 		tst	r3, #8
 1292 00f8 0000001A 		bne	.L102
1562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 1293              		.loc 1 1562 0
 1294 00fc FEFFFFEB 		bl	FreeRTOS_closesocket
 1295              	.LVL120:
 1296              	.L102:
1432:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connect
 1297              		.loc 1 1432 0
 1298 0100 0650A0E1 		mov	r5, r6
 1299              	.LVL121:
 1300              	.L96:
1569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1301              		.loc 1 1569 0
 1302 0104 4B60C4E5 		strb	r6, [r4, #75]
 1303              	.LVL122:
 1304              	.LBB116:
 1305              	.LBB117:
1407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1306              		.loc 1 1407 0
 1307 0108 FEFFFFEB 		bl	xTaskGetTickCount
 1308              	.LVL123:
1413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 1309              		.loc 1 1413 0
 1310 010c 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
1407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1311              		.loc 1 1407 0
 1312 0110 580084E5 		str	r0, [r4, #88]
1414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 1313              		.loc 1 1414 0
 1314 0114 FB3003E2 		and	r3, r3, #251
 1315 0118 9F30C1E7 		bfc	r3, #1, #1
 1316 011c 3930C4E5 		strb	r3, [r4, #57]
1415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 1317              		.loc 1 1415 0
 1318 0120 0030A0E3 		mov	r3, #0
 1319 0124 5030C4E5 		strb	r3, [r4, #80]
1416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1320              		.loc 1 1416 0
 1321 0128 FEFFFFEB 		bl	xTaskGetTickCount
 1322              	.LVL124:
 1323              	.LBE117:
 1324              	.LBE116:
1595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1325              		.loc 1 1595 0
 1326 012c 000055E3 		cmp	r5, #0
 1327              	.LBB119:
 1328              	.LBB118:
1416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1329              		.loc 1 1416 0
 1330 0130 540084E5 		str	r0, [r4, #84]
 1331              	.LVL125:
 1332              	.LBE118:
 1333              	.LBE119:
1595:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1334              		.loc 1 1595 0
 1335 0134 7080BD08 		popeq	{r4, r5, r6, pc}
1597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1336              		.loc 1 1597 0
 1337 0138 0500A0E1 		mov	r0, r5
1599:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 1338              		.loc 1 1599 0
 1339 013c 7040BDE8 		pop	{r4, r5, r6, lr}
 1340              		.cfi_restore 14
 1341              		.cfi_restore 6
 1342              		.cfi_restore 5
 1343              		.cfi_restore 4
 1344              		.cfi_def_cfa_offset 0
 1345              	.LVL126:
1597:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1346              		.loc 1 1597 0
 1347 0140 FEFFFFEA 		b	vSocketWakeUpUser
 1348              	.LVL127:
 1349              	.L106:
 1350              		.align	2
 1351              	.L105:
 1352 0144 28000000 		.word	Unity+40
 1353              		.cfi_endproc
 1354              	.LFE37:
 1356              		.section	.text.prvTCPPrepareSend,"ax",%progbits
 1357              		.align	2
 1358              		.syntax unified
 1359              		.arm
 1360              		.fpu neon
 1362              	prvTCPPrepareSend:
 1363              	.LFB39:
1675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lDataLen;
 1364              		.loc 1 1675 0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 16
 1367              		@ frame_needed = 0, uses_anonymous_args = 0
 1368              	.LVL128:
1685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1369              		.loc 1 1685 0
 1370 0000 003091E5 		ldr	r3, [r1]
1675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lDataLen;
 1371              		.loc 1 1675 0
 1372 0004 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1373              		.cfi_def_cfa_offset 36
 1374              		.cfi_offset 4, -36
 1375              		.cfi_offset 5, -32
 1376              		.cfi_offset 6, -28
 1377              		.cfi_offset 7, -24
 1378              		.cfi_offset 8, -20
 1379              		.cfi_offset 9, -16
 1380              		.cfi_offset 10, -12
 1381              		.cfi_offset 11, -8
 1382              		.cfi_offset 14, -4
 1383 0008 1CD04DE2 		sub	sp, sp, #28
 1384              		.cfi_def_cfa_offset 64
1699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 1385              		.loc 1 1699 0
 1386 000c 0060A0E3 		mov	r6, #0
1675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lDataLen;
 1387              		.loc 1 1675 0
 1388 0010 0040A0E1 		mov	r4, r0
1685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1389              		.loc 1 1685 0
 1390 0014 000053E3 		cmp	r3, #0
1675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lDataLen;
 1391              		.loc 1 1675 0
 1392 0018 01B0A0E1 		mov	fp, r1
1688:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1393              		.loc 1 1688 0
 1394 001c 18509315 		ldrne	r5, [r3, #24]
 1395              	.LVL129:
1693:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1396              		.loc 1 1693 0
 1397 0020 7A508002 		addeq	r5, r0, #122
 1398              	.LVL130:
1697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lDataLen = 0;
 1399              		.loc 1 1697 0
 1400 0024 D43080E2 		add	r3, r0, #212
1675:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** int32_t lDataLen;
 1401              		.loc 1 1675 0
 1402 0028 0280A0E1 		mov	r8, r2
1697:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lDataLen = 0;
 1403              		.loc 1 1697 0
 1404 002c 0C308DE5 		str	r3, [sp, #12]
 1405              	.LVL131:
1700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1406              		.loc 1 1700 0
 1407 0030 2F30D5E5 		ldrb	r3, [r5, #47]	@ zero_extendqisi2
 1408              	.LVL132:
1699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 1409              		.loc 1 1699 0
 1410 0034 14608DE5 		str	r6, [sp, #20]
1700:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1411              		.loc 1 1700 0
 1412 0038 103083E3 		orr	r3, r3, #16
 1413 003c 2F30C5E5 		strb	r3, [r5, #47]
1702:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1414              		.loc 1 1702 0
 1415 0040 703090E5 		ldr	r3, [r0, #112]
 1416 0044 060053E1 		cmp	r3, r6
 1417 0048 7F00000A 		beq	.L131
1708:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1418              		.loc 1 1708 0
 1419 004c B234D0E1 		ldrh	r3, [r0, #66]
 1420 0050 010053E3 		cmp	r3, #1
 1421 0054 4C00009A 		bls	.L110
1710:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 1422              		.loc 1 1710 0
 1423 0058 C41090E5 		ldr	r1, [r0, #196]
 1424              	.LVL133:
 1425 005c 14208DE2 		add	r2, sp, #20
 1426              	.LVL134:
 1427 0060 D40080E2 		add	r0, r0, #212
 1428              	.LVL135:
 1429 0064 FEFFFFEB 		bl	ulTCPWindowTxGet
 1430              	.LVL136:
1713:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1431              		.loc 1 1713 0
 1432 0068 006050E2 		subs	r6, r0, #0
 1433 006c 6F0000DA 		ble	.L111
 1434              	.LBB129:
 1435              	.LBB130:
1609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1436              		.loc 1 1609 0
 1437 0070 7C329FE5 		ldr	r3, .L150
 1438              	.LBE130:
 1439              	.LBE129:
1717:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1440              		.loc 1 1717 0
 1441 0074 00709BE5 		ldr	r7, [fp]
 1442              	.LVL137:
 1443              	.LBB135:
 1444              	.LBB133:
1609:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1445              		.loc 1 1609 0
 1446 0078 003093E5 		ldr	r3, [r3]
 1447 007c 000053E3 		cmp	r3, #0
 1448 0080 0300000A 		beq	.L112
 1449              	.LVL138:
1629:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1450              		.loc 1 1629 0
 1451 0084 000057E3 		cmp	r7, #0
 1452 0088 6300001A 		bne	.L114
1613:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* and therefore, the buffer won't be too small.
 1453              		.loc 1 1613 0
 1454 008c F2A500E3 		movw	r10, #1522
 1455 0090 080000EA 		b	.L113
 1456              	.LVL139:
 1457              	.L112:
1623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* In case we were called from a TCP timer event, a buffer must be
 1458              		.loc 1 1623 0
 1459 0094 36A088E2 		add	r10, r8, #54
 1460 0098 06A08AE0 		add	r10, r10, r6
 1461              	.LBB131:
 1462              	.LBB132:
 177:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_IP.h **** 	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 1463              		.loc 3 177 0
 1464 009c 46005AE3 		cmp	r10, #70
 1465 00a0 46A0A0B3 		movlt	r10, #70
 1466              	.LVL140:
 1467              	.LBE132:
 1468              	.LBE131:
1626:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1469              		.loc 1 1626 0
 1470 00a4 000057E3 		cmp	r7, #0
 1471 00a8 0200000A 		beq	.L113
 1472 00ac 1C3097E5 		ldr	r3, [r7, #28]
 1473 00b0 0A0053E1 		cmp	r3, r10
 1474 00b4 5800002A 		bcs	.L114
 1475              	.L113:
 1476              	.LVL141:
1634:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1477              		.loc 1 1634 0
 1478 00b8 0010A0E3 		mov	r1, #0
 1479 00bc 0A00A0E1 		mov	r0, r10
 1480              	.LVL142:
 1481 00c0 FEFFFFEB 		bl	pxGetNetworkBufferWithDescriptor
 1482              	.LVL143:
1636:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1483              		.loc 1 1636 0
 1484 00c4 009050E2 		subs	r9, r0, #0
 1485 00c8 4D00000A 		beq	.L134
1642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 1486              		.loc 1 1642 0
 1487 00cc 000057E3 		cmp	r7, #0
1639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1488              		.loc 1 1639 0
 1489 00d0 1CA089E5 		str	r10, [r9, #28]
 1490 00d4 180099E5 		ldr	r0, [r9, #24]
 1491              	.LVL144:
1642:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 1492              		.loc 1 1642 0
 1493 00d8 4B00000A 		beq	.L116
1645:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1494              		.loc 1 1645 0
 1495 00dc 1C2097E5 		ldr	r2, [r7, #28]
 1496 00e0 181097E5 		ldr	r1, [r7, #24]
 1497 00e4 FEFFFFEB 		bl	memcpy
 1498              	.LVL145:
1648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 1499              		.loc 1 1648 0
 1500 00e8 0700A0E1 		mov	r0, r7
 1501 00ec FEFFFFEB 		bl	vReleaseNetworkBufferAndDescriptor
 1502              	.LVL146:
 1503              	.L117:
 1504              	.LBE133:
 1505              	.LBE135:
1721:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 1506              		.loc 1 1721 0
 1507 00f0 00908BE5 		str	r9, [fp]
 1508              	.LVL147:
1733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1509              		.loc 1 1733 0
 1510 00f4 0130A0E3 		mov	r3, #1
1729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1511              		.loc 1 1729 0
 1512 00f8 700094E5 		ldr	r0, [r4, #112]
 1513              	.LBB136:
 1514              	.LBB137:
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
 1515              		.loc 2 84 0
 1516 00fc 14109DE5 		ldr	r1, [sp, #20]
 1517              	.LBE137:
 1518              	.LBE136:
1722:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 1519              		.loc 1 1722 0
 1520 0100 185099E5 		ldr	r5, [r9, #24]
 1521              	.LBB140:
 1522              	.LBB138:
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
 1523              		.loc 2 84 0
 1524 0104 102090E5 		ldr	r2, [r0, #16]
 1525              	.LBE138:
 1526              	.LBE140:
1729:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1527              		.loc 1 1729 0
 1528 0108 00C090E5 		ldr	ip, [r0]
 1529              	.LVL148:
1733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1530              		.loc 1 1733 0
 1531 010c 00308DE5 		str	r3, [sp]
 1532              	.LVL149:
 1533 0110 0630A0E1 		mov	r3, r6
 1534              	.LBB141:
 1535              	.LBB139:
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
 1536              		.loc 2 84 0
 1537 0114 011082E0 		add	r1, r2, r1
 1538              	.LVL150:
 1539 0118 0C1041E0 		sub	r1, r1, ip
 1540              	.LVL151:
  85:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 1541              		.loc 2 85 0
 1542 011c 010052E1 		cmp	r2, r1
  87:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 1543              		.loc 2 87 0
 1544 0120 02104190 		subls	r1, r1, r2
 1545              	.LBE139:
 1546              	.LBE141:
1725:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1547              		.loc 1 1725 0
 1548 0124 362088E2 		add	r2, r8, #54
 1549              	.LVL152:
1733:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1550              		.loc 1 1733 0
 1551 0128 022085E0 		add	r2, r5, r2
 1552              	.LVL153:
 1553 012c FEFFFFEB 		bl	uxStreamBufferGet
 1554              	.LVL154:
1747:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 1555              		.loc 1 1747 0
 1556 0130 B833D4E1 		ldrh	r3, [r4, #56]
 1557 0134 813D03E2 		and	r3, r3, #8256
 1558 0138 400053E3 		cmp	r3, #64
 1559 013c 1200001A 		bne	.L110
1749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1560              		.loc 1 1749 0
 1561 0140 702094E5 		ldr	r2, [r4, #112]
 1562              	.LBB142:
 1563              	.LBB143:
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
 1564              		.loc 2 84 0
 1565 0144 14109DE5 		ldr	r1, [sp, #20]
 1566              	.LBE143:
 1567              	.LBE142:
1749:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1568              		.loc 1 1749 0
 1569 0148 083092E5 		ldr	r3, [r2, #8]
 1570              	.LVL155:
 1571              	.LBB145:
 1572              	.LBB144:
  84:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if ( uxCount >= pxBuffer->LENGTH )
 1573              		.loc 2 84 0
 1574 014c 102092E5 		ldr	r2, [r2, #16]
 1575              	.LVL156:
 1576 0150 023083E0 		add	r3, r3, r2
 1577              	.LVL157:
 1578 0154 013043E0 		sub	r3, r3, r1
 1579              	.LVL158:
  85:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 1580              		.loc 2 85 0
 1581 0158 030052E1 		cmp	r2, r3
  87:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 1582              		.loc 2 87 0
 1583 015c 02304390 		subls	r3, r3, r2
 1584              	.LVL159:
 1585              	.LBE144:
 1586              	.LBE145:
1751:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
 1587              		.loc 1 1751 0
 1588 0160 030050E1 		cmp	r0, r3
 1589 0164 0800001A 		bne	.L110
1768:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLe
 1590              		.loc 1 1768 0
 1591 0168 2F30D5E5 		ldrb	r3, [r5, #47]	@ zero_extendqisi2
 1592 016c 013083E3 		orr	r3, r3, #1
 1593 0170 2F30C5E5 		strb	r3, [r5, #47]
1769:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 1594              		.loc 1 1769 0
 1595 0174 003194E5 		ldr	r3, [r4, #256]
 1596 0178 063083E0 		add	r3, r3, r6
 1597 017c F83084E5 		str	r3, [r4, #248]
1770:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
 1598              		.loc 1 1770 0
 1599 0180 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 1600 0184 203083E3 		orr	r3, r3, #32
 1601 0188 3930C4E5 		strb	r3, [r4, #57]
 1602              	.LVL160:
 1603              	.L110:
1781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1604              		.loc 1 1781 0 discriminator 1
 1605 018c 4B30D4E5 		ldrb	r3, [r4, #75]	@ zero_extendqisi2
 1606 0190 050053E3 		cmp	r3, #5
 1607 0194 4800001A 		bne	.L119
1784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 1608              		.loc 1 1784 0
 1609 0198 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 1610 019c 200013E3 		tst	r3, #32
 1611 01a0 1100000A 		beq	.L121
1785:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1612              		.loc 1 1785 0 discriminator 1
 1613 01a4 D40084E2 		add	r0, r4, #212
 1614 01a8 FEFFFFEB 		bl	xTCPWindowTxDone
 1615              	.LVL161:
1784:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 1616              		.loc 1 1784 0 discriminator 1
 1617 01ac 000050E3 		cmp	r0, #0
 1618 01b0 0D00000A 		beq	.L121
1787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 1619              		.loc 1 1787 0
 1620 01b4 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
1792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 1621              		.loc 1 1792 0
 1622 01b8 0610A0E3 		mov	r1, #6
 1623 01bc 0400A0E1 		mov	r0, r4
1787:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 1624              		.loc 1 1787 0
 1625 01c0 9F32C5E7 		bfc	r3, #5, #1
 1626 01c4 3830C4E5 		strb	r3, [r4, #56]
1788:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 1627              		.loc 1 1788 0
 1628 01c8 2F30D5E5 		ldrb	r3, [r5, #47]	@ zero_extendqisi2
 1629 01cc 013083E3 		orr	r3, r3, #1
 1630 01d0 2F30C5E5 		strb	r3, [r5, #47]
1789:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 1631              		.loc 1 1789 0
 1632 01d4 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
1790:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 1633              		.loc 1 1790 0
 1634 01d8 213083E3 		orr	r3, r3, #33
 1635 01dc 3930C4E5 		strb	r3, [r4, #57]
1791:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 1636              		.loc 1 1791 0
 1637 01e0 F43094E5 		ldr	r3, [r4, #244]
 1638 01e4 F83084E5 		str	r3, [r4, #248]
1792:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 1639              		.loc 1 1792 0
 1640 01e8 FEFFFFEB 		bl	vTCPStateChange
 1641              	.LVL162:
 1642              	.L121:
1797:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 1643              		.loc 1 1797 0
 1644 01ec 5030D4E5 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 1645 01f0 030053E3 		cmp	r3, #3
 1646 01f4 1600009A 		bls	.L123
1802:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				lDataLen = -1;
 1647              		.loc 1 1802 0
 1648 01f8 0810A0E3 		mov	r1, #8
 1649 01fc 0400A0E1 		mov	r0, r4
 1650 0200 FEFFFFEB 		bl	vTCPStateChange
 1651              	.LVL163:
 1652              	.L134:
1776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 1653              		.loc 1 1776 0
 1654 0204 0060E0E3 		mvn	r6, #0
 1655 0208 090000EA 		b	.L115
 1656              	.LVL164:
 1657              	.L116:
 1658              	.LBB146:
 1659              	.LBB134:
1653:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 1660              		.loc 1 1653 0
 1661 020c 4620A0E3 		mov	r2, #70
 1662 0210 7A1084E2 		add	r1, r4, #122
 1663 0214 FEFFFFEB 		bl	memcpy
 1664              	.LVL165:
 1665 0218 B4FFFFEA 		b	.L117
 1666              	.LVL166:
 1667              	.L114:
1664:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1668              		.loc 1 1664 0
 1669 021c 363088E2 		add	r3, r8, #54
 1670 0220 0790A0E1 		mov	r9, r7
 1671 0224 063083E0 		add	r3, r3, r6
 1672 0228 1C3087E5 		str	r3, [r7, #28]
 1673 022c AFFFFFEA 		b	.L117
 1674              	.LVL167:
 1675              	.L111:
 1676              	.LBE134:
 1677              	.LBE146:
1781:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1678              		.loc 1 1781 0
 1679 0230 D5FFFF0A 		beq	.L110
 1680              	.LVL168:
 1681              	.L115:
1836:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 1682              		.loc 1 1836 0
 1683 0234 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 1684 0238 030013E3 		tst	r3, #3
 1685 023c 2000001A 		bne	.L124
 1686              	.LVL169:
 1687              	.L107:
1853:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 1688              		.loc 1 1853 0
 1689 0240 0600A0E1 		mov	r0, r6
 1690 0244 1CD08DE2 		add	sp, sp, #28
 1691              		.cfi_remember_state
 1692              		.cfi_def_cfa_offset 36
 1693              		@ sp needed
 1694 0248 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1695              	.LVL170:
 1696              	.L131:
 1697              		.cfi_restore_state
1698:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lStreamPos = 0;
 1698              		.loc 1 1698 0
 1699 024c 0360A0E1 		mov	r6, r3
 1700 0250 CDFFFFEA 		b	.L110
 1701              	.LVL171:
 1702              	.L123:
1805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 1703              		.loc 1 1805 0
 1704 0254 000056E3 		cmp	r6, #0
 1705 0258 1900001A 		bne	.L124
1805:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 1706              		.loc 1 1805 0 is_stmt 0 discriminator 1
 1707 025c 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 1708 0260 010013E3 		tst	r3, #1
 1709 0264 F2FFFF1A 		bne	.L115
 1710              	.LBB147:
1809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				TickType_t xMax;
 1711              		.loc 1 1809 0 is_stmt 1
 1712 0268 FEFFFFEB 		bl	xTaskGetTickCount
 1713              	.LVL172:
1812:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 1714              		.loc 1 1812 0
 1715 026c 5010D4E5 		ldrb	r1, [r4, #80]	@ zero_extendqisi2
1811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.ucKeepRepCount )
 1716              		.loc 1 1811 0
 1717 0270 202E04E3 		movw	r2, #20000
1809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				TickType_t xMax;
 1718              		.loc 1 1809 0
 1719 0274 543094E5 		ldr	r3, [r4, #84]
1811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.ucKeepRepCount )
 1720              		.loc 1 1811 0
 1721 0278 000051E3 		cmp	r1, #0
1809:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				TickType_t xMax;
 1722              		.loc 1 1809 0
 1723 027c 030040E0 		sub	r0, r0, r3
 1724              	.LVL173:
1811:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pxSocket->u.xTCP.ucKeepRepCount )
 1725              		.loc 1 1811 0
 1726 0280 B83B00E3 		movw	r3, #3000
 1727 0284 0230A001 		moveq	r3, r2
 1728              	.LVL174:
1816:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 1729              		.loc 1 1816 0
 1730 0288 000053E1 		cmp	r3, r0
 1731 028c E8FFFF2A 		bcs	.L115
1818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( xTCPWindowLoggingLevel )
 1732              		.loc 1 1818 0
 1733 0290 FEFFFFEB 		bl	xTaskGetTickCount
 1734              	.LVL175:
1824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 1735              		.loc 1 1824 0
 1736 0294 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
1818:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					if( xTCPWindowLoggingLevel )
 1737              		.loc 1 1818 0
 1738 0298 540084E5 		str	r0, [r4, #84]
1824:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 1739              		.loc 1 1824 0
 1740 029c 023083E3 		orr	r3, r3, #2
 1741 02a0 3930C4E5 		strb	r3, [r4, #57]
1825:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.ucKeepRepCount++;
 1742              		.loc 1 1825 0
 1743 02a4 C43900E3 		movw	r3, #2500
 1744 02a8 B034C4E1 		strh	r3, [r4, #64]	@ movhi
1826:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 1745              		.loc 1 1826 0
 1746 02ac 5030D4E5 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 1747 02b0 013083E2 		add	r3, r3, #1
 1748 02b4 5030C4E5 		strb	r3, [r4, #80]
 1749 02b8 DDFFFFEA 		b	.L115
 1750              	.L119:
 1751              	.LBE147:
1835:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 1752              		.loc 1 1835 0
 1753 02bc 000056E3 		cmp	r6, #0
 1754 02c0 DBFFFF0A 		beq	.L115
 1755              	.L124:
1839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 
 1756              		.loc 1 1839 0
 1757 02c4 2F30D5E5 		ldrb	r3, [r5, #47]	@ zero_extendqisi2
1840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1758              		.loc 1 1840 0
 1759 02c8 142088E2 		add	r2, r8, #20
1844:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1760              		.loc 1 1844 0
 1761 02cc 000056E3 		cmp	r6, #0
1840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1762              		.loc 1 1840 0
 1763 02d0 0221A0E1 		lsl	r2, r2, #2
1849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1764              		.loc 1 1849 0
 1765 02d4 288088E2 		add	r8, r8, #40
 1766              	.LVL176:
1839:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 
 1767              		.loc 1 1839 0
 1768 02d8 F73003E2 		and	r3, r3, #247
1840:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1769              		.loc 1 1840 0
 1770 02dc 2E20C5E5 		strb	r2, [r5, #46]
1842:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1771              		.loc 1 1842 0
 1772 02e0 10308303 		orreq	r3, r3, #16
1846:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 1773              		.loc 1 1846 0
 1774 02e4 18308313 		orrne	r3, r3, #24
 1775 02e8 2F30C5E5 		strb	r3, [r5, #47]
1849:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1776              		.loc 1 1849 0
 1777 02ec 066088E0 		add	r6, r8, r6
 1778              	.LVL177:
1852:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
 1779              		.loc 1 1852 0
 1780 02f0 D2FFFFEA 		b	.L107
 1781              	.L151:
 1782              		.align	2
 1783              	.L150:
 1784 02f4 00000000 		.word	xBufferAllocFixedSize
 1785              		.cfi_endproc
 1786              	.LFE39:
 1788              		.section	.text.prvTCPSendRepeated,"ax",%progbits
 1789              		.align	2
 1790              		.syntax unified
 1791              		.arm
 1792              		.fpu neon
 1794              	prvTCPSendRepeated:
 1795              	.LFB29:
 637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxIndex;
 1796              		.loc 1 637 0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 0, uses_anonymous_args = 0
 1800              	.LVL178:
 1801 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1802              		.cfi_def_cfa_offset 24
 1803              		.cfi_offset 4, -24
 1804              		.cfi_offset 5, -20
 1805              		.cfi_offset 6, -16
 1806              		.cfi_offset 7, -12
 1807              		.cfi_offset 8, -8
 1808              		.cfi_offset 14, -4
 637:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxIndex;
 1809              		.loc 1 637 0
 1810 0004 0070A0E1 		mov	r7, r0
 1811 0008 0180A0E1 		mov	r8, r1
 1812 000c 0850A0E3 		mov	r5, #8
 639:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength = 0u;
 1813              		.loc 1 639 0
 1814 0010 0040A0E3 		mov	r4, #0
 1815              	.LVL179:
 1816              	.L154:
 647:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xSendLength <= 0 )
 1817              		.loc 1 647 0
 1818 0014 0020A0E3 		mov	r2, #0
 1819 0018 0810A0E1 		mov	r1, r8
 1820 001c 0700A0E1 		mov	r0, r7
 1821 0020 FEFFFFEB 		bl	prvTCPPrepareSend
 1822              	.LVL180:
 648:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1823              		.loc 1 648 0
 1824 0024 006050E2 		subs	r6, r0, #0
 1825 0028 060000DA 		ble	.L152
 654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1826              		.loc 1 654 0 discriminator 2
 1827 002c 0620A0E1 		mov	r2, r6
 1828 0030 001098E5 		ldr	r1, [r8]
 1829 0034 0700A0E1 		mov	r0, r7
 1830              	.LVL181:
 662:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1831              		.loc 1 662 0 discriminator 2
 1832 0038 064084E0 		add	r4, r4, r6
 1833              	.LVL182:
 654:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1834              		.loc 1 654 0 discriminator 2
 1835 003c FEFFFFEB 		bl	prvTCPReturnPacket.constprop.3
 1836              	.LVL183:
 643:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1837              		.loc 1 643 0 discriminator 2
 1838 0040 015055E2 		subs	r5, r5, #1
 1839              	.LVL184:
 1840 0044 F2FFFF1A 		bne	.L154
 1841              	.LVL185:
 1842              	.L152:
 667:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 1843              		.loc 1 667 0
 1844 0048 0400A0E1 		mov	r0, r4
 1845 004c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1846              		.cfi_endproc
 1847              	.LFE29:
 1849              		.section	.text.xTCPSocketCheck,"ax",%progbits
 1850              		.align	2
 1851              		.global	xTCPSocketCheck
 1852              		.syntax unified
 1853              		.arm
 1854              		.fpu neon
 1856              	xTCPSocketCheck:
 1857              	.LFB27:
 466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xResult = 0;
 1858              		.loc 1 466 0
 1859              		.cfi_startproc
 1860              		@ args = 0, pretend = 0, frame = 16
 1861              		@ frame_needed = 0, uses_anonymous_args = 0
 1862              	.LVL186:
 1863 0000 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}
 1864              		.cfi_def_cfa_offset 28
 1865              		.cfi_offset 4, -28
 1866              		.cfi_offset 5, -24
 1867              		.cfi_offset 6, -20
 1868              		.cfi_offset 7, -16
 1869              		.cfi_offset 8, -12
 1870              		.cfi_offset 9, -8
 1871              		.cfi_offset 14, -4
 1872 0004 0040A0E1 		mov	r4, r0
 470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1873              		.loc 1 470 0
 1874 0008 4B30D0E5 		ldrb	r3, [r0, #75]	@ zero_extendqisi2
 466:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xResult = 0;
 1875              		.loc 1 466 0
 1876 000c 14D04DE2 		sub	sp, sp, #20
 1877              		.cfi_def_cfa_offset 48
 470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1878              		.loc 1 470 0
 1879 0010 040053E3 		cmp	r3, #4
 1880 0014 0300009A 		bls	.L158
 470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1881              		.loc 1 470 0 is_stmt 0 discriminator 1
 1882 0018 703090E5 		ldr	r3, [r0, #112]
 1883 001c 000053E3 		cmp	r3, #0
 1884 0020 0000000A 		beq	.L158
 474:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 1885              		.loc 1 474 0 is_stmt 1
 1886 0024 FEFFFFEB 		bl	prvTCPAddTxData
 1887              	.LVL187:
 1888              	.L158:
 479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1889              		.loc 1 479 0
 1890 0028 741094E5 		ldr	r1, [r4, #116]
 1891 002c 000051E3 		cmp	r1, #0
 1892 0030 2900001A 		bne	.L159
 1893              	.LVL188:
 1894              	.L165:
 535:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) )
 1895              		.loc 1 535 0
 1896 0034 4B60D4E5 		ldrb	r6, [r4, #75]	@ zero_extendqisi2
 1897 0038 023046E2 		sub	r3, r6, #2
 1898 003c 133F6FE1 		clz	r3, r3
 1899 0040 A332A0E1 		lsr	r3, r3, #5
 1900 0044 040056E3 		cmp	r6, #4
 1901 0048 01308383 		orrhi	r3, r3, #1
 1902 004c 000053E3 		cmp	r3, #0
 1903 0050 0A00000A 		beq	.L161
 1904              	.LVL189:
 1905              	.LBB159:
 1906              	.LBB160:
 568:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 1907              		.loc 1 568 0
 1908 0054 020056E3 		cmp	r6, #2
 1909 0058 3900000A 		beq	.L167
 571:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1910              		.loc 1 571 0
 1911 005c 10108DE2 		add	r1, sp, #16
 1912 0060 0030A0E3 		mov	r3, #0
 1913 0064 083021E5 		str	r3, [r1, #-8]!
 575:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1914              		.loc 1 575 0
 1915 0068 0400A0E1 		mov	r0, r4
 1916 006c FEFFFFEB 		bl	prvTCPSendRepeated
 1917              	.LVL190:
 577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1918              		.loc 1 577 0
 1919 0070 08009DE5 		ldr	r0, [sp, #8]
 1920 0074 000050E3 		cmp	r0, #0
 1921 0078 0000000A 		beq	.L161
 579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 1922              		.loc 1 579 0
 1923 007c FEFFFFEB 		bl	vReleaseNetworkBufferAndDescriptor
 1924              	.LVL191:
 1925              	.L161:
 1926              	.LBE160:
 1927              	.LBE159:
 542:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1928              		.loc 1 542 0
 1929 0080 0400A0E1 		mov	r0, r4
 1930 0084 FEFFFFEB 		bl	prvTCPNextTimeout
 1931              	.LVL192:
 1932              	.LBB181:
 1933              	.LBB182:
 386:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 1934              		.loc 1 386 0
 1935 0088 4B30D4E5 		ldrb	r3, [r4, #75]	@ zero_extendqisi2
 1936 008c 080053E3 		cmp	r3, #8
 1937 0090 0300008A 		bhi	.L176
 1938 0094 232100E3 		movw	r2, #291
 1939 0098 0110A0E3 		mov	r1, #1
 1940 009c 113312E0 		ands	r3, r2, r1, lsl r3
 1941 00a0 2400001A 		bne	.L177
 1942              	.L176:
 1943              	.LVL193:
 1944              	.LBB183:
 409:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1945              		.loc 1 409 0
 1946 00a4 FEFFFFEB 		bl	xTaskGetTickCount
 1947              	.LVL194:
 1948 00a8 583094E5 		ldr	r3, [r4, #88]
 1949 00ac 030040E0 		sub	r0, r0, r3
 1950              	.LVL195:
 412:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 1951              		.loc 1 412 0
 1952 00b0 303507E3 		movw	r3, #30000
 1953 00b4 030050E1 		cmp	r0, r3
 1954 00b8 0500009A 		bls	.L181
 425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1955              		.loc 1 425 0
 1956 00bc 0810A0E3 		mov	r1, #8
 1957 00c0 0400A0E1 		mov	r0, r4
 1958              	.LVL196:
 1959 00c4 FEFFFFEB 		bl	vTCPStateChange
 1960              	.LVL197:
 429:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 1961              		.loc 1 429 0
 1962 00c8 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 1963 00cc 040013E3 		tst	r3, #4
 1964 00d0 3700001A 		bne	.L178
 1965              	.L181:
 442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 1966              		.loc 1 442 0
 1967 00d4 0100A0E3 		mov	r0, #1
 1968 00d8 170000EA 		b	.L157
 1969              	.LVL198:
 1970              	.L159:
 1971              	.LBE183:
 1972              	.LBE182:
 1973              	.LBE181:
 483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 1974              		.loc 1 483 0
 1975 00dc 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 1976 00e0 200013E3 		tst	r3, #32
 468:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1977              		.loc 1 468 0
 1978 00e4 0050A013 		movne	r5, #0
 483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 1979              		.loc 1 483 0
 1980 00e8 0A00001A 		bne	.L162
 488:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 1981              		.loc 1 488 0
 1982 00ec 4B30D4E5 		ldrb	r3, [r4, #75]	@ zero_extendqisi2
 1983 00f0 000053E3 		cmp	r3, #0
 1984 00f4 0200000A 		beq	.L163
 500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 1985              		.loc 1 500 0
 1986 00f8 2820A0E3 		mov	r2, #40
 1987 00fc 0400A0E1 		mov	r0, r4
 1988 0100 FEFFFFEB 		bl	prvTCPReturnPacket.constprop.3
 1989              	.LVL199:
 1990              	.L163:
 510:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 1991              		.loc 1 510 0
 1992 0104 0400A0E1 		mov	r0, r4
 1993 0108 FEFFFFEB 		bl	prvTCPNextTimeout
 1994              	.LVL200:
 1995 010c 010050E3 		cmp	r0, #1
 1996 0110 0050A093 		movls	r5, #0
 1997 0114 0150A083 		movhi	r5, #1
 1998              	.L162:
 1999              	.LVL201:
 523:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 2000              		.loc 1 523 0
 2001 0118 740094E5 		ldr	r0, [r4, #116]
 2002 011c 000050E3 		cmp	r0, #0
 2003 0120 0200000A 		beq	.L164
 525:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.pxAckMessage = NULL;
 2004              		.loc 1 525 0
 2005 0124 FEFFFFEB 		bl	vReleaseNetworkBufferAndDescriptor
 2006              	.LVL202:
 526:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 2007              		.loc 1 526 0
 2008 0128 0030A0E3 		mov	r3, #0
 2009 012c 743084E5 		str	r3, [r4, #116]
 2010              	.L164:
 532:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2011              		.loc 1 532 0
 2012 0130 000055E3 		cmp	r5, #0
 2013 0134 BEFFFF0A 		beq	.L165
 2014              	.LVL203:
 2015              	.L177:
 467:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xReady = pdFALSE;
 2016              		.loc 1 467 0
 2017 0138 0000A0E3 		mov	r0, #0
 2018              	.LVL204:
 2019              	.L157:
 554:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 2020              		.loc 1 554 0
 2021 013c 14D08DE2 		add	sp, sp, #20
 2022              		.cfi_remember_state
 2023              		.cfi_def_cfa_offset 28
 2024              		@ sp needed
 2025 0140 F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2026              	.LVL205:
 2027              	.L167:
 2028              		.cfi_restore_state
 2029              	.LBB186:
 2030              	.LBB179:
 584:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2031              		.loc 1 584 0
 2032 0144 4A30D4E5 		ldrb	r3, [r4, #74]	@ zero_extendqisi2
 2033 0148 020053E3 		cmp	r3, #2
 2034 014c 0300009A 		bls	.L169
 592:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2035              		.loc 1 592 0
 2036 0150 0810A0E3 		mov	r1, #8
 2037 0154 0400A0E1 		mov	r0, r4
 2038 0158 FEFFFFEB 		bl	vTCPStateChange
 2039              	.LVL206:
 2040 015c C7FFFFEA 		b	.L161
 2041              	.L169:
 594:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2042              		.loc 1 594 0
 2043 0160 3950D4E5 		ldrb	r5, [r4, #57]	@ zero_extendqisi2
 2044 0164 085015E2 		ands	r5, r5, #8
 2045 0168 6100001A 		bne	.L170
 2046              	.LVL207:
 2047 016c 303094E5 		ldr	r3, [r4, #48]
 2048              	.LBB161:
 2049              	.LBB162:
 993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2050              		.loc 1 993 0
 2051 0170 10008DE2 		add	r0, sp, #16
 996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2052              		.loc 1 996 0
 2053 0174 08108DE2 		add	r1, sp, #8
 989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2054              		.loc 1 989 0
 2055 0178 08508DE5 		str	r5, [sp, #8]
 2056 017c BC50CDE1 		strh	r5, [sp, #12]	@ movhi
 2057 0180 333FBFE6 		rev	r3, r3
 993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2058              		.loc 1 993 0
 2059 0184 0C3020E5 		str	r3, [r0, #-12]!
 996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2060              		.loc 1 996 0
 2061 0188 FEFFFFEB 		bl	eARPGetCacheEntry
 2062              	.LVL208:
 998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2063              		.loc 1 998 0
 2064 018c 010050E3 		cmp	r0, #1
 2065 0190 0D00000A 		beq	.L172
1006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2066              		.loc 1 1006 0
 2067 0194 4A30D4E5 		ldrb	r3, [r4, #74]	@ zero_extendqisi2
1020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2068              		.loc 1 1020 0
 2069 0198 04009DE5 		ldr	r0, [sp, #4]
 2070              	.LVL209:
1006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2071              		.loc 1 1006 0
 2072 019c 013083E2 		add	r3, r3, #1
 2073 01a0 4A30C4E5 		strb	r3, [r4, #74]
1020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2074              		.loc 1 1020 0
 2075 01a4 FEFFFFEB 		bl	FreeRTOS_OutputARPRequest
 2076              	.LVL210:
 2077 01a8 B4FFFFEA 		b	.L161
 2078              	.LVL211:
 2079              	.L175:
 2080              	.LBE162:
 2081              	.LBE161:
 2082              	.LBB164:
 2083              	.LBB165:
 2084              	.LBB166:
 2085              	.LBB167:
1332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ucFactor++;
 2086              		.loc 1 1332 0
 2087 01ac A330A0E1 		lsr	r3, r3, #1
 2088              	.LVL212:
 2089 01b0 5A0000EA 		b	.L174
 2090              	.LVL213:
 2091              	.L178:
 2092              	.LBE167:
 2093              	.LBE166:
 2094              	.LBE165:
 2095              	.LBE164:
 2096              	.LBE179:
 2097              	.LBE186:
 2098              	.LBB187:
 2099              	.LBB185:
 2100              	.LBB184:
 431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					{
 2101              		.loc 1 431 0
 2102 01b4 080013E3 		tst	r3, #8
 2103 01b8 0100001A 		bne	.L183
 437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					}
 2104              		.loc 1 437 0
 2105 01bc 0400A0E1 		mov	r0, r4
 2106 01c0 FEFFFFEB 		bl	vSocketClose
 2107              	.LVL214:
 2108              	.L183:
 442:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 2109              		.loc 1 442 0
 2110 01c4 0000E0E3 		mvn	r0, #0
 2111              	.LVL215:
 2112              	.LBE184:
 2113              	.LBE185:
 2114              	.LBE187:
 553:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
 2115              		.loc 1 553 0
 2116 01c8 DBFFFFEA 		b	.L157
 2117              	.LVL216:
 2118              	.L172:
 2119              	.LBB188:
 2120              	.LBB180:
 2121              	.LBB174:
 2122              	.LBB163:
1028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 																	  pxSocket->usLocalPort,
 2123              		.loc 1 1028 0
 2124 01cc B8819FE5 		ldr	r8, .L200
 2125 01d0 B433D4E1 		ldrh	r3, [r4, #52]
 2126 01d4 302094E5 		ldr	r2, [r4, #48]
 2127 01d8 B412D4E1 		ldrh	r1, [r4, #36]
 2128 01dc 140098E5 		ldr	r0, [r8, #20]
 2129              	.LVL217:
 2130 01e0 FEFFFFEB 		bl	ulApplicationGetNextSequenceNumber
 2131              	.LVL218:
1034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2132              		.loc 1 1034 0
 2133 01e4 007050E2 		subs	r7, r0, #0
 2134 01e8 A4FFFF0A 		beq	.L161
 2135              	.LVL219:
1051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2136              		.loc 1 1051 0
 2137 01ec 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
1055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2138              		.loc 1 1055 0
 2139 01f0 4620A0E3 		mov	r2, #70
 2140 01f4 0510A0E1 		mov	r1, r5
1059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2141              		.loc 1 1059 0
 2142 01f8 0690A0E3 		mov	r9, #6
1048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2143              		.loc 1 1048 0
 2144 01fc 4A50C4E5 		strb	r5, [r4, #74]
1055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2145              		.loc 1 1055 0
 2146 0200 7A0084E2 		add	r0, r4, #122
 2147              	.LVL220:
1051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2148              		.loc 1 1051 0
 2149 0204 083083E3 		orr	r3, r3, #8
 2150 0208 3930C4E5 		strb	r3, [r4, #57]
1055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2151              		.loc 1 1055 0
 2152 020c FEFFFFEB 		bl	memset
 2153              	.LVL221:
1059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2154              		.loc 1 1059 0
 2155 0210 0920A0E1 		mov	r2, r9
 2156 0214 08108DE2 		add	r1, sp, #8
 2157 0218 800084E2 		add	r0, r4, #128
 2158 021c FEFFFFEB 		bl	memcpy
 2159              	.LVL222:
1062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2160              		.loc 1 1062 0
 2161 0220 0830A0E3 		mov	r3, #8
1093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2162              		.loc 1 1093 0
 2163 0224 0400A0E1 		mov	r0, r4
1062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2164              		.loc 1 1062 0
 2165 0228 8630C4E5 		strb	r3, [r4, #134]
1064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHead
 2166              		.loc 1 1064 0
 2167 022c 4530A0E3 		mov	r3, #69
 2168 0230 8830C4E5 		strb	r3, [r4, #136]
1065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 2169              		.loc 1 1065 0
 2170 0234 3830A0E3 		mov	r3, #56
 2171 0238 8B30C4E5 		strb	r3, [r4, #139]
1066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2172              		.loc 1 1066 0
 2173 023c 7F30E0E3 		mvn	r3, #127
 2174 0240 9030C4E5 		strb	r3, [r4, #144]
1072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 2175              		.loc 1 1072 0
 2176 0244 1430D8E5 		ldrb	r3, [r8, #20]	@ zero_extendqisi2
1062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2177              		.loc 1 1062 0
 2178 0248 8750C4E5 		strb	r5, [r4, #135]
1065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 2179              		.loc 1 1065 0
 2180 024c 8A50C4E5 		strb	r5, [r4, #138]
1072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 2181              		.loc 1 1072 0
 2182 0250 9830C4E5 		strb	r3, [r4, #152]
 2183 0254 1530D8E5 		ldrb	r3, [r8, #21]	@ zero_extendqisi2
1068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2184              		.loc 1 1068 0
 2185 0258 9190C4E5 		strb	r9, [r4, #145]
1080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2186              		.loc 1 1080 0
 2187 025c E45084E5 		str	r5, [r4, #228]
1072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 2188              		.loc 1 1072 0
 2189 0260 9930C4E5 		strb	r3, [r4, #153]
 2190 0264 1630D8E5 		ldrb	r3, [r8, #22]	@ zero_extendqisi2
1083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2191              		.loc 1 1083 0
 2192 0268 007184E5 		str	r7, [r4, #256]
1090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2193              		.loc 1 1090 0
 2194 026c A960C4E5 		strb	r6, [r4, #169]
1072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 2195              		.loc 1 1072 0
 2196 0270 9A30C4E5 		strb	r3, [r4, #154]
 2197 0274 1730D8E5 		ldrb	r3, [r8, #23]	@ zero_extendqisi2
 2198 0278 9B30C4E5 		strb	r3, [r4, #155]
 2199 027c 303094E5 		ldr	r3, [r4, #48]
 2200 0280 333FBFE6 		rev	r3, r3
1073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2201              		.loc 1 1073 0
 2202 0284 5324E7E7 		ubfx	r2, r3, #8, #8
 2203 0288 9430C4E5 		strb	r3, [r4, #148]
 2204 028c 9520C4E5 		strb	r2, [r4, #149]
 2205 0290 5328E7E7 		ubfx	r2, r3, #16, #8
 2206 0294 9620C4E5 		strb	r2, [r4, #150]
 2207 0298 233CA0E1 		lsr	r3, r3, #24
1075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 2208              		.loc 1 1075 0
 2209 029c B423D4E1 		ldrh	r2, [r4, #52]
1073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2210              		.loc 1 1073 0
 2211 02a0 9730C4E5 		strb	r3, [r4, #151]
1075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 2212              		.loc 1 1075 0
 2213 02a4 2234A0E1 		lsr	r3, r2, #8
 2214 02a8 023483E1 		orr	r3, r3, r2, lsl #8
1076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2215              		.loc 1 1076 0
 2216 02ac B422D4E1 		ldrh	r2, [r4, #36]
1075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 2217              		.loc 1 1075 0
 2218 02b0 7330FFE6 		uxth	r3, r3
 2219 02b4 9C30C4E5 		strb	r3, [r4, #156]
 2220 02b8 2334A0E1 		lsr	r3, r3, #8
 2221 02bc 9D30C4E5 		strb	r3, [r4, #157]
1076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2222              		.loc 1 1076 0
 2223 02c0 2234A0E1 		lsr	r3, r2, #8
 2224 02c4 023483E1 		orr	r3, r3, r2, lsl #8
 2225 02c8 7330FFE6 		uxth	r3, r3
 2226 02cc 9E30C4E5 		strb	r3, [r4, #158]
 2227 02d0 2334A0E1 		lsr	r3, r3, #8
 2228 02d4 9F30C4E5 		strb	r3, [r4, #159]
1087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2229              		.loc 1 1087 0
 2230 02d8 5030A0E3 		mov	r3, #80
 2231 02dc A830C4E5 		strb	r3, [r4, #168]
1093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2232              		.loc 1 1093 0
 2233 02e0 FEFFFFEB 		bl	prvSocketSetMSS
 2234              	.LVL223:
1096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2235              		.loc 1 1096 0
 2236 02e4 B434D4E1 		ldrh	r3, [r4, #68]
1101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2237              		.loc 1 1101 0
 2238 02e8 0400A0E1 		mov	r0, r4
1096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2239              		.loc 1 1096 0
 2240 02ec C83084E5 		str	r3, [r4, #200]
1101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2241              		.loc 1 1101 0
 2242 02f0 FEFFFFEB 		bl	prvTCPCreateWindow
 2243              	.LVL224:
 2244              	.L170:
 2245              	.LBE163:
 2246              	.LBE174:
 2247              	.LBB175:
 2248              	.LBB170:
1355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength;
 2249              		.loc 1 1355 0
 2250 02f4 B424D4E1 		ldrh	r2, [r4, #68]
 2251              	.LVL225:
1360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 2252              		.loc 1 1360 0
 2253 02f8 0230A0E3 		mov	r3, #2
 2254 02fc B030C4E5 		strb	r3, [r4, #176]
1361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 2255              		.loc 1 1361 0
 2256 0300 0430A0E3 		mov	r3, #4
 2257 0304 B130C4E5 		strb	r3, [r4, #177]
1363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2258              		.loc 1 1363 0
 2259 0308 B320C4E5 		strb	r2, [r4, #179]
 2260              	.LVL226:
1362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 2261              		.loc 1 1362 0
 2262 030c 2234A0E1 		lsr	r3, r2, #8
 2263 0310 B230C4E5 		strb	r3, [r4, #178]
 2264              	.LBB169:
 2265              	.LBB168:
1327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ucFactor = 0u;
 2266              		.loc 1 1327 0
 2267 0314 CC3094E5 		ldr	r3, [r4, #204]
 2268 0318 930203E0 		mul	r3, r3, r2
 2269              	.LVL227:
 2270 031c 0020A0E3 		mov	r2, #0
 2271              	.LVL228:
 2272              	.L174:
1329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2273              		.loc 1 1329 0
 2274 0320 010853E3 		cmp	r3, #65536
 2275 0324 7210EFE6 		uxtb	r1, r2
 2276              	.LVL229:
 2277 0328 012082E2 		add	r2, r2, #1
 2278 032c 9EFFFF2A 		bcs	.L175
 2279              	.LVL230:
 2280              	.LBE168:
 2281              	.LBE169:
1369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 2282              		.loc 1 1369 0
 2283 0330 0130A0E3 		mov	r3, #1
1370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 2284              		.loc 1 1370 0
 2285 0334 0320A0E3 		mov	r2, #3
1369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 2286              		.loc 1 1369 0
 2287 0338 B430C4E5 		strb	r3, [r4, #180]
 2288              	.LBE170:
 2289              	.LBE175:
 623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2290              		.loc 1 623 0
 2291 033c 0400A0E1 		mov	r0, r4
 2292              	.LBB176:
 2293              	.LBB171:
1387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 2294              		.loc 1 1387 0
 2295 0340 B830C4E5 		strb	r3, [r4, #184]
1388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 2296              		.loc 1 1388 0
 2297 0344 B930C4E5 		strb	r3, [r4, #185]
1389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 2298              		.loc 1 1389 0
 2299 0348 0430A0E3 		mov	r3, #4
 2300 034c BA30C4E5 		strb	r3, [r4, #186]
1390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		uxOptionsLength += 4u;
 2301              		.loc 1 1390 0
 2302 0350 0230A0E3 		mov	r3, #2
 2303 0354 BB30C4E5 		strb	r3, [r4, #187]
 2304              	.LBE171:
 2305              	.LBE176:
 614:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2306              		.loc 1 614 0
 2307 0358 7F30E0E3 		mvn	r3, #127
 2308 035c A830C4E5 		strb	r3, [r4, #168]
 618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2309              		.loc 1 618 0
 2310 0360 4A30D4E5 		ldrb	r3, [r4, #74]	@ zero_extendqisi2
 2311              	.LBB177:
 2312              	.LBB172:
1367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2313              		.loc 1 1367 0
 2314 0364 C110C4E5 		strb	r1, [r4, #193]
1370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 2315              		.loc 1 1370 0
 2316 0368 B520C4E5 		strb	r2, [r4, #181]
 2317              	.LBE172:
 2318              	.LBE177:
 618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2319              		.loc 1 618 0
 2320 036c 013083E2 		add	r3, r3, #1
 2321              	.LBB178:
 2322              	.LBB173:
1371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 2323              		.loc 1 1371 0
 2324 0370 B620C4E5 		strb	r2, [r4, #182]
1372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		uxOptionsLength = 8u;
 2325              		.loc 1 1372 0
 2326 0374 B710C4E5 		strb	r1, [r4, #183]
 2327              	.LVL231:
 2328              	.LBE173:
 2329              	.LBE178:
 623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2330              		.loc 1 623 0
 2331 0378 3420A0E3 		mov	r2, #52
 618:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2332              		.loc 1 618 0
 2333 037c 4A30C4E5 		strb	r3, [r4, #74]
 623:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2334              		.loc 1 623 0
 2335 0380 0010A0E3 		mov	r1, #0
 2336 0384 FEFFFFEB 		bl	prvTCPReturnPacket.constprop.3
 2337              	.LVL232:
 2338 0388 3CFFFFEA 		b	.L161
 2339              	.L201:
 2340              		.align	2
 2341              	.L200:
 2342 038c 00000000 		.word	xDefaultPartUDPPacketHeader
 2343              	.LBE180:
 2344              	.LBE188:
 2345              		.cfi_endproc
 2346              	.LFE27:
 2348              		.section	.text.prvTCPHandleFin.isra.2,"ax",%progbits
 2349              		.align	2
 2350              		.syntax unified
 2351              		.arm
 2352              		.fpu neon
 2354              	prvTCPHandleFin.isra.2:
 2355              	.LFB61:
1963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 2356              		.loc 1 1963 0
 2357              		.cfi_startproc
 2358              		@ args = 0, pretend = 0, frame = 0
 2359              		@ frame_needed = 0, uses_anonymous_args = 0
 2360              	.LVL233:
 2361 0000 70402DE9 		push	{r4, r5, r6, lr}
 2362              		.cfi_def_cfa_offset 16
 2363              		.cfi_offset 4, -16
 2364              		.cfi_offset 5, -12
 2365              		.cfi_offset 6, -8
 2366              		.cfi_offset 14, -4
1963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 2367              		.loc 1 1963 0
 2368 0004 0040A0E1 		mov	r4, r0
1970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2369              		.loc 1 1970 0
 2370 0008 2B20D1E5 		ldrb	r2, [r1, #43]	@ zero_extendqisi2
1963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 2371              		.loc 1 1963 0
 2372 000c 0150A0E1 		mov	r5, r1
1970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2373              		.loc 1 1970 0
 2374 0010 2A30D1E5 		ldrb	r3, [r1, #42]	@ zero_extendqisi2
 2375 0014 023483E1 		orr	r3, r3, r2, lsl #8
 2376 0018 2C20D1E5 		ldrb	r2, [r1, #44]	@ zero_extendqisi2
 2377 001c 023883E1 		orr	r3, r3, r2, lsl #16
 2378 0020 2D20D1E5 		ldrb	r2, [r1, #45]	@ zero_extendqisi2
 2379 0024 023C83E1 		orr	r3, r3, r2, lsl #24
 2380              	.LVL234:
1972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2381              		.loc 1 1972 0
 2382 0028 2F20D1E5 		ldrb	r2, [r1, #47]	@ zero_extendqisi2
 2383 002c 010012E3 		tst	r2, #1
1974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2384              		.loc 1 1974 0
 2385 0030 E8209015 		ldrne	r2, [r0, #232]
 2386 0034 01208212 		addne	r2, r2, #1
 2387 0038 E4208015 		strne	r2, [r0, #228]
 2388              	.LVL235:
1976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2389              		.loc 1 1976 0
 2390 003c 3920D0E5 		ldrb	r2, [r0, #57]	@ zero_extendqisi2
 2391 0040 200012E3 		tst	r2, #32
1979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 2392              		.loc 1 1979 0
 2393 0044 F4309005 		ldreq	r3, [r0, #244]
 2394              	.LVL236:
1980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2395              		.loc 1 1980 0
 2396 0048 20208203 		orreq	r2, r2, #32
1979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 2397              		.loc 1 1979 0
 2398 004c F8308005 		streq	r3, [r0, #248]
1976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2399              		.loc 1 1976 0
 2400 0050 0C00000A 		beq	.L217
1970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2401              		.loc 1 1970 0
 2402 0054 231CA0E1 		lsr	r1, r3, #24
 2403              	.LVL237:
 2404 0058 0304A0E1 		lsl	r0, r3, #8
 2405              	.LVL238:
 2406 005c 031C81E1 		orr	r1, r1, r3, lsl #24
 2407 0060 2334A0E1 		lsr	r3, r3, #8
 2408 0064 FF0800E2 		and	r0, r0, #16711680
 2409 0068 FF3C03E2 		and	r3, r3, #65280
 2410 006c 001081E1 		orr	r1, r1, r0
 2411 0070 033081E1 		orr	r3, r1, r3
1985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2412              		.loc 1 1985 0
 2413 0074 F81094E5 		ldr	r1, [r4, #248]
 2414 0078 011081E2 		add	r1, r1, #1
 2415 007c 010053E1 		cmp	r3, r1
 2416 0080 0100001A 		bne	.L205
1987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2417              		.loc 1 1987 0
 2418 0084 802082E3 		orr	r2, r2, #128
 2419              	.L217:
 2420 0088 3920C4E5 		strb	r2, [r4, #57]
 2421              	.L205:
1991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2422              		.loc 1 1991 0
 2423 008c 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 2424 0090 F82094E5 		ldr	r2, [r4, #248]
 2425 0094 800013E3 		tst	r3, #128
 2426 0098 0F00001A 		bne	.L206
1997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2427              		.loc 1 1997 0
 2428 009c 0A10A0E3 		mov	r1, #10
1994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2429              		.loc 1 1994 0
 2430 00a0 1130A0E3 		mov	r3, #17
1993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
 2431              		.loc 1 1993 0
 2432 00a4 F42084E5 		str	r2, [r4, #244]
1994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2433              		.loc 1 1994 0
 2434 00a8 2F30C5E5 		strb	r3, [r5, #47]
 2435              	.L219:
2025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2436              		.loc 1 2025 0
 2437 00ac 0400A0E1 		mov	r0, r4
 2438 00b0 FEFFFFEB 		bl	vTCPStateChange
 2439              	.LVL239:
 2440              	.L207:
2029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2441              		.loc 1 2029 0
 2442 00b4 F43094E5 		ldr	r3, [r4, #244]
 2443 00b8 003184E5 		str	r3, [r4, #256]
2031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2444              		.loc 1 2031 0
 2445 00bc 2F00D5E5 		ldrb	r0, [r5, #47]	@ zero_extendqisi2
 2446 00c0 1031D4E5 		ldrb	r3, [r4, #272]	@ zero_extendqisi2
 2447 00c4 000050E3 		cmp	r0, #0
2033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2448              		.loc 1 2033 0
 2449 00c8 28008312 		addne	r0, r3, #40
 2450              	.LVL240:
2036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2451              		.loc 1 2036 0
 2452 00cc 143083E2 		add	r3, r3, #20
 2453 00d0 0331A0E1 		lsl	r3, r3, #2
 2454 00d4 2E30C5E5 		strb	r3, [r5, #46]
2049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
 2455              		.loc 1 2049 0
 2456 00d8 7080BDE8 		pop	{r4, r5, r6, pc}
 2457              	.LVL241:
 2458              	.L206:
2003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2459              		.loc 1 2003 0
 2460 00dc 403013E2 		ands	r3, r3, #64
2002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 2461              		.loc 1 2002 0
 2462 00e0 012082E2 		add	r2, r2, #1
 2463 00e4 F42084E5 		str	r2, [r4, #244]
2007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2464              		.loc 1 2007 0
 2465 00e8 2F30C505 		strbeq	r3, [r5, #47]
2003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2466              		.loc 1 2003 0
 2467 00ec F0FFFF0A 		beq	.L207
2011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 2468              		.loc 1 2011 0
 2469 00f0 3A30D4E5 		ldrb	r3, [r4, #58]	@ zero_extendqisi2
2025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2470              		.loc 1 2025 0
 2471 00f4 0810A0E3 		mov	r1, #8
2011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 2472              		.loc 1 2011 0
 2473 00f8 010013E3 		tst	r3, #1
2015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 2474              		.loc 1 2015 0
 2475 00fc 1030A003 		moveq	r3, #16
2021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 2476              		.loc 1 2021 0
 2477 0100 0030A013 		movne	r3, #0
 2478 0104 2F30C5E5 		strb	r3, [r5, #47]
 2479 0108 E7FFFFEA 		b	.L219
 2480              		.cfi_endproc
 2481              	.LFE61:
 2483              		.section	.text.xProcessReceivedTCPPacket,"ax",%progbits
 2484              		.align	2
 2485              		.global	xProcessReceivedTCPPacket
 2486              		.syntax unified
 2487              		.arm
 2488              		.fpu neon
 2490              	xProcessReceivedTCPPacket:
 2491              	.LFB52:
2879:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
2880:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
2881:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2882:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
2883:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *	FreeRTOS_TCP_IP has only 2 public functions, this is the second one:
2884:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *	xProcessReceivedTCPPacket()
2885:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		prvTCPHandleState()
2886:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *			prvTCPPrepareSend()
2887:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *				prvTCPReturnPacket()
2888:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *				xNetworkInterfaceOutput()	// Sends data to the NIC
2889:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *		prvTCPSendRepeated()
2890:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *			prvTCPReturnPacket()		// Prepare for returning
2891:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  *			xNetworkInterfaceOutput()	// Sends data to the NIC
2892:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** */
2893:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
2894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 2492              		.loc 1 2894 0
 2493              		.cfi_startproc
 2494              		@ args = 0, pretend = 0, frame = 24
 2495              		@ frame_needed = 0, uses_anonymous_args = 0
 2496              	.LVL242:
2895:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *pxSocket;
2896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
2897:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint16_t ucTCPFlags;
2898:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulLocalIP;
2899:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint16_t xLocalPort;
2900:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulRemoteIP;
2901:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint16_t xRemotePort;
2902:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xResult = pdPASS;
2903:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2904:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Check for a minimum packet size. */
2905:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( pxNetworkBuffer->xDataLength >= ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP
 2497              		.loc 1 2905 0
 2498 0000 1C3090E5 		ldr	r3, [r0, #28]
2894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *pxSocket;
 2499              		.loc 1 2894 0
 2500 0004 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2501              		.cfi_def_cfa_offset 36
 2502              		.cfi_offset 4, -36
 2503              		.cfi_offset 5, -32
 2504              		.cfi_offset 6, -28
 2505              		.cfi_offset 7, -24
 2506              		.cfi_offset 8, -20
 2507              		.cfi_offset 9, -16
 2508              		.cfi_offset 10, -12
 2509              		.cfi_offset 11, -8
 2510              		.cfi_offset 14, -4
 2511 0008 24D04DE2 		sub	sp, sp, #36
 2512              		.cfi_def_cfa_offset 72
2894:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *pxSocket;
 2513              		.loc 1 2894 0
 2514 000c 14008DE5 		str	r0, [sp, #20]
 2515              		.loc 1 2905 0
 2516 0010 350053E3 		cmp	r3, #53
 2517 0014 0200008A 		bhi	.L221
 2518              	.LVL243:
 2519              	.L225:
2906:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
2908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
2909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
2911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
2912:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2913:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Find the destination socket, and if not found: return a socket listing to
2914:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		the destination PORT. */
2915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket = ( FreeRTOS_Socket_t * )pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePo
2916:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2917:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
2918:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2919:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		return pdFAIL;
 2520              		.loc 1 2919 0
 2521 0018 0000A0E3 		mov	r0, #0
 2522              	.L220:
2920:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2921:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) 
2923:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2924:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* A TCP messages is received but either there is no socket with the
2925:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		given port number or the there is a socket, but it is in one of these
2926:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
2927:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		eTIME_WAIT. */
2928:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2929:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%lxip:%d)\n", xLocalPort, ulRemoteIP,
2930:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2931:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Send a RST to all packets that can not be handled.  As a result
2932:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		the other party will get a ECONN error.  There are two exceptions:
2933:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		1) A packet that already has the RST flag set.
2934:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		2) A packet that only has the ACK flag set.
2935:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		A packet with only the ACK flag set might be the last ACK in
2936:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	 	a three-way hand-shake that closes a connection. */
2937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
2938:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u ) )
2939:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2940:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			prvTCPSendReset( pxNetworkBuffer );
2941:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
2942:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2943:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* The packet can't be handled. */
2944:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xResult = pdFAIL;
2945:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
2946:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	else
2947:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
2948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucRepCount = 0u;
2949:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
2951:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2952:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* The matching socket is in a listening state.  Test if the peer
2953:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			has set the SYN flag. */
2954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
2955:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2956:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* What happens: maybe after a reboot, a client doesn't know the
2957:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				connection had gone.  Send a RST in order to get a new connect
2958:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				request. */
2959:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#if( ipconfigHAS_DEBUG_PRINTF == 1 )
2960:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
2961:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
2962:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
2963:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
2964:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				#endif /* ipconfigHAS_DEBUG_PRINTF */
2965:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
2967:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
2968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					prvTCPSendReset( pxNetworkBuffer );
2969:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
2970:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xResult = pdFAIL;
2971:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2972:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
2973:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2974:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* prvHandleListen() will either return a newly created socket
2975:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				(if bReuseSocket is false), otherwise it returns the current
2976:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				socket which will later get connected. */
2977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
2978:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( pxSocket == NULL )
2980:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
2981:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					xResult = pdFAIL;
2982:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
2983:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
2984:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}	/* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
2985:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else
2986:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
2987:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* This is not a socket in listening mode. Check for the RST
2988:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			flag. */
2989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
2990:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
2991:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* The target socket is not in a listening state, any RST packet
2992:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				will cause the socket to be closed. */
2993:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, x
2994:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* _HT_: should indicate that 'ECONNRESET' must be returned to the used during next API. */
2995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				vTCPStateChange( pxSocket, eCLOSED );
2996:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
2997:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* The packet cannot be handled. */
2998:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xResult = pdFAIL;
2999:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
3000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState
3001:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
3002:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* SYN flag while this socket is already connected. */
3003:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );
3004:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3005:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* The packet cannot be handled. */
3006:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xResult = pdFAIL;
3007:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
3008:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
3009:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
3010:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				/* Update the copy of the TCP header only (skipping eth and IP
3011:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				headers).  It might be used later on, whenever data must be sent
3012:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				to the peer. */
3013:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				const BaseType_t lOffset = ( BaseType_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER );
3014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer +
3015:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
3016:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
3017:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
3018:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3019:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( xResult != pdFAIL )
3020:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
3021:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Touch the alive timers because we received a message	for this
3022:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		socket. */
3023:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvTCPTouchSocket( pxSocket );
3024:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3025:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Parse the TCP option(s), if present. */
3026:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
3027:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		then we MUST assume an MSS size of 536 bytes for backward compatibility. */
3028:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3029:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
3030:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		the number 5 (words) in the higher niblle of the TCP-offset byte. */
3031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH
3032:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
3033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			prvCheckOptions( pxSocket, pxNetworkBuffer );
3034:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
3035:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3036:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3037:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigUSE_TCP_WIN == 1 )
3038:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
3039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
3040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulWindowSize =
3041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
3042:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
3043:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#endif
3044:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3045:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* In prvTCPHandleState() the incoming messages will be handled
3046:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		depending on the current state of the connection. */
3047:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
3048:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
3049:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* prvTCPHandleState() has sent a message, see if there are more to
3050:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			be transmitted. */
3051:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#if( ipconfigUSE_TCP_WIN == 1 )
3052:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
3053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
3054:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
3055:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			#endif /* ipconfigUSE_TCP_WIN */
3056:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
3057:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxNetworkBuffer != NULL )
3059:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
3060:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* We must check if the buffer is unequal to NULL, because the
3061:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			socket might keep a reference to it in case a delayed ACK must be
3062:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			sent. */
3063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
3064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxNetworkBuffer = NULL;
3065:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
3066:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3067:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* And finally, calculate when this socket wants to be woken up. */
3068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvTCPNextTimeout ( pxSocket );
3069:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Return pdPASS to tell that the network buffer is 'consumed'. */
3070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xResult = pdPASS;
3071:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
3072:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* pdPASS being returned means the buffer has been consumed. */
3074:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return xResult;
3075:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
 2523              		.loc 1 3075 0
 2524 001c 24D08DE2 		add	sp, sp, #36
 2525              		.cfi_remember_state
 2526              		.cfi_def_cfa_offset 36
 2527              		@ sp needed
 2528 0020 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2529              	.LVL244:
 2530              	.L221:
 2531              		.cfi_restore_state
2896:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint16_t ucTCPFlags;
 2532              		.loc 1 2896 0
 2533 0024 185090E5 		ldr	r5, [r0, #24]
2908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 2534              		.loc 1 2908 0
 2535 0028 1F30D5E5 		ldrb	r3, [r5, #31]	@ zero_extendqisi2
 2536 002c 1EC0D5E5 		ldrb	ip, [r5, #30]	@ zero_extendqisi2
 2537 0030 2000D5E5 		ldrb	r0, [r5, #32]	@ zero_extendqisi2
 2538              	.LVL245:
2909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 2539              		.loc 1 2909 0
 2540 0034 2410D5E5 		ldrb	r1, [r5, #36]	@ zero_extendqisi2
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 2541              		.loc 1 2910 0
 2542 0038 1C20D5E5 		ldrb	r2, [r5, #28]	@ zero_extendqisi2
2908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 2543              		.loc 1 2908 0
 2544 003c 03C48CE1 		orr	ip, ip, r3, lsl #8
2909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 2545              		.loc 1 2909 0
 2546 0040 2530D5E5 		ldrb	r3, [r5, #37]	@ zero_extendqisi2
2907:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 2547              		.loc 1 2907 0
 2548 0044 2F90D5E5 		ldrb	r9, [r5, #47]	@ zero_extendqisi2
 2549              	.LVL246:
2908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 2550              		.loc 1 2908 0
 2551 0048 00C88CE1 		orr	ip, ip, r0, lsl #16
 2552 004c 2100D5E5 		ldrb	r0, [r5, #33]	@ zero_extendqisi2
2909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 2553              		.loc 1 2909 0
 2554 0050 031481E1 		orr	r1, r1, r3, lsl #8
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 2555              		.loc 1 2910 0
 2556 0054 1B30D5E5 		ldrb	r3, [r5, #27]	@ zero_extendqisi2
2908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 2557              		.loc 1 2908 0
 2558 0058 00CC8CE1 		orr	ip, ip, r0, lsl #24
 2559              	.LVL247:
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 2560              		.loc 1 2910 0
 2561 005c 1A00D5E5 		ldrb	r0, [r5, #26]	@ zero_extendqisi2
2908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 2562              		.loc 1 2908 0
 2563 0060 0C44A0E1 		lsl	r4, ip, #8
 2564              	.LVL248:
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 2565              		.loc 1 2910 0
 2566 0064 030480E1 		orr	r0, r0, r3, lsl #8
2911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2567              		.loc 1 2911 0
 2568 0068 2230D5E5 		ldrb	r3, [r5, #34]	@ zero_extendqisi2
2908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 2569              		.loc 1 2908 0
 2570 006c FF4804E2 		and	r4, r4, #16711680
 2571              	.LVL249:
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 2572              		.loc 1 2910 0
 2573 0070 020880E1 		orr	r0, r0, r2, lsl #16
 2574 0074 1D20D5E5 		ldrb	r2, [r5, #29]	@ zero_extendqisi2
 2575 0078 020C80E1 		orr	r0, r0, r2, lsl #24
 2576              	.LVL250:
2911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2577              		.loc 1 2911 0
 2578 007c 2320D5E5 		ldrb	r2, [r5, #35]	@ zero_extendqisi2
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 2579              		.loc 1 2910 0
 2580 0080 20ECA0E1 		lsr	lr, r0, #24
2911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2581              		.loc 1 2911 0
 2582 0084 023483E1 		orr	r3, r3, r2, lsl #8
 2583              	.LVL251:
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 2584              		.loc 1 2910 0
 2585 0088 00EC8EE1 		orr	lr, lr, r0, lsl #24
2911:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2586              		.loc 1 2911 0
 2587 008c 2324A0E1 		lsr	r2, r3, #8
 2588 0090 033482E1 		orr	r3, r2, r3, lsl #8
 2589              	.LVL252:
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 2590              		.loc 1 2910 0
 2591 0094 0024A0E1 		lsl	r2, r0, #8
 2592              	.LVL253:
 2593 0098 2004A0E1 		lsr	r0, r0, #8
 2594              	.LVL254:
 2595 009c FF2802E2 		and	r2, r2, #16711680
 2596              	.LVL255:
2915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2597              		.loc 1 2915 0
 2598 00a0 7330FFE6 		uxth	r3, r3
2910:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 2599              		.loc 1 2910 0
 2600 00a4 02E08EE1 		orr	lr, lr, r2
 2601 00a8 FF2C00E2 		and	r2, r0, #65280
2909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 2602              		.loc 1 2909 0
 2603 00ac 2104A0E1 		lsr	r0, r1, #8
 2604              	.LVL256:
2915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2605              		.loc 1 2915 0
 2606 00b0 02208EE1 		orr	r2, lr, r2
2909:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 2607              		.loc 1 2909 0
 2608 00b4 011480E1 		orr	r1, r0, r1, lsl #8
 2609              	.LVL257:
2908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 2610              		.loc 1 2908 0
 2611 00b8 2C0CA0E1 		lsr	r0, ip, #24
 2612 00bc 0C0C80E1 		orr	r0, r0, ip, lsl #24
 2613 00c0 2CC4A0E1 		lsr	ip, ip, #8
 2614              	.LVL258:
2915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2615              		.loc 1 2915 0
 2616 00c4 7110FFE6 		uxth	r1, r1
2908:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 2617              		.loc 1 2908 0
 2618 00c8 040080E1 		orr	r0, r0, r4
 2619 00cc FFCC0CE2 		and	ip, ip, #65280
 2620              	.LVL259:
2915:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2621              		.loc 1 2915 0
 2622 00d0 0C0080E1 		orr	r0, r0, ip
 2623 00d4 FEFFFFEB 		bl	pxTCPSocketLookup
 2624              	.LVL260:
2922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2625              		.loc 1 2922 0
 2626 00d8 004050E2 		subs	r4, r0, #0
 2627 00dc 0600000A 		beq	.L223
2922:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2628              		.loc 1 2922 0 is_stmt 0 discriminator 1
 2629 00e0 4B80D4E5 		ldrb	r8, [r4, #75]	@ zero_extendqisi2
 2630              	.LVL261:
 2631 00e4 0B0058E3 		cmp	r8, #11
 2632 00e8 3402008A 		bhi	.L224
 2633 00ec 813B00E3 		movw	r3, #2945
 2634 00f0 0120A0E3 		mov	r2, #1
 2635 00f4 123813E0 		ands	r3, r3, r2, lsl r8
 2636 00f8 3002000A 		beq	.L224
 2637              	.LVL262:
 2638              	.L223:
2937:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u ) )
 2639              		.loc 1 2937 0 is_stmt 1
 2640 00fc 1F3009E2 		and	r3, r9, #31
 2641 0100 100053E3 		cmp	r3, #16
 2642 0104 C3FFFF0A 		beq	.L225
 2643              	.L365:
2966:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 2644              		.loc 1 2966 0
 2645 0108 049019E2 		ands	r9, r9, #4
 2646              	.LVL263:
 2647 010c C1FFFF1A 		bne	.L225
2968:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 2648              		.loc 1 2968 0
 2649 0110 14009DE5 		ldr	r0, [sp, #20]
 2650              	.LVL264:
 2651 0114 FEFFFFEB 		bl	prvTCPSendReset
 2652              	.LVL265:
 2653 0118 BEFFFFEA 		b	.L225
 2654              	.LVL266:
 2655              	.L229:
 2656              	.LBB230:
 2657              	.LBB231:
 2658              	.LBB232:
3076:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
3077:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *
3079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
3080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
3081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *pxReturn = NULL;
3082:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulInitialSequenceNumber;
3083:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3084:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Assume that a new Initial Sequence Number will be required. Request
3085:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	it now in order to fail out if necessary. */
3086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
3087:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 																  pxSocket->usLocalPort,
3088:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 																  pxTCPPacket->xIPHeader.ulSourceIPAddress,
3089:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 																  pxTCPPacket->xTCPHeader.usSourcePort );
3090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3091:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* A pure SYN (without ACK) has come in, create a new socket to answer
3092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	it. */
3093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( 0 != ulInitialSequenceNumber )
3094:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
3095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
3096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
3097:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* The flag bReuseSocket indicates that the same instance of the
3098:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			listening socket should be used for the connection. */
3099:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxReturn = pxSocket;
3100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
3101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.pxPeerSocket = pxSocket;
3102:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
3103:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		else
3104:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
3105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* The socket does not have the bReuseSocket flag set meaning create a
3106:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			new socket when a connection comes in. */
3107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxReturn = NULL;
3108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
3110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
3111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
3112:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->usLocalPort,
3113:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usChildCount,
3114:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usBacklog,
3115:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->u.xTCP.usChildCount == 1 ? "" : "ren" ) );
3116:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				prvTCPSendReset( pxNetworkBuffer );
3117:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
3118:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			else
3119:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
3120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_Socket_t *pxNewSocket = ( FreeRTOS_Socket_t * )
 2659              		.loc 1 3120 0
 2660 011c 0700A0E1 		mov	r0, r7
 2661              	.LVL267:
 2662 0120 0620A0E3 		mov	r2, #6
 2663 0124 0810A0E1 		mov	r1, r8
 2664 0128 FEFFFFEB 		bl	FreeRTOS_socket
 2665              	.LVL268:
3121:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
3122:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3123:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 2666              		.loc 1 3123 0
 2667 012c 013040E2 		sub	r3, r0, #1
3120:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 2668              		.loc 1 3120 0
 2669 0130 0070A0E1 		mov	r7, r0
 2670              	.LVL269:
 2671              		.loc 1 3123 0
 2672 0134 030073E3 		cmn	r3, #3
 2673 0138 4D02008A 		bhi	.L366
 2674              	.LVL270:
 2675              	.LBB233:
 2676              	.LBB234:
3124:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
3125:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
3126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					prvTCPSendReset( pxNetworkBuffer );
3127:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
3128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
3129:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
3130:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					/* The socket will be connected immediately, no time for the
3131:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					owner to setsockopt's, therefore copy properties of the server
3132:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					socket to the new socket.  Only the binding might fail (due to
3133:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					lack of resources). */
3134:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxReturn = pxNewSocket;
3135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
3136:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
3137:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
3138:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
3139:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( ( 0 != ulInitialSequenceNumber ) && ( pxReturn != NULL ) )
3141:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
3142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
3143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
3144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
3145:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3146:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Here is the SYN action. */
3147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.
3148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvSocketSetMSS( pxReturn );
3149:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvTCPCreateWindow( pxReturn );
3151:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		vTCPStateChange( pxReturn, eSYN_FIRST );
3153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3154:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Make a copy of the header up to the TCP header.  It is needed later
3155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		on, whenever data must be sent to the peer. */
3156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxRe
3157:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
3158:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return pxReturn;
3159:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
3160:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
3161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3162:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
3163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * Duplicates a socket after a listening socket receives a connection.
3164:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
3165:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
3166:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
3167:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** struct freertos_sockaddr xAddress;
3168:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 2677              		.loc 1 3169 0
 2678 013c 1C3094E5 		ldr	r3, [r4, #28]
3170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
3171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
3172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
3173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
3174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
3175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
3176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
3177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
3178:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3179:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
3180:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
3181:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
3182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
3183:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */
3184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_CALLBACKS == 1 )
3186:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
3187:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* In case call-backs are used, copy them from parent to child. */
3188:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
3189:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
3190:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
3191:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
3192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigUSE_CALLBACKS */
3193:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3194:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
3195:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
3196:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Child socket of listening sockets will inherit the Socket Set
3197:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		Otherwise the owner has no chance of including it into the set. */
3198:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( pxSocket->pxSocketSet )
3199:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
3200:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
3201:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
3202:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
3203:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
3204:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
3205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3206:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* And bind it to the same local port as its parent. */
3207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
3208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
3209:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3210:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigTCP_HANG_PROTECTION == 1 )
3211:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
3212:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Only when there is anti-hanging protection, a socket may become an
3213:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		orphan temporarily.  Once this socket is really connected, the owner of
3214:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		the server socket will be notified. */
3215:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3216:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* When bPassQueued is true, the socket is an orphan until it gets
3217:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		connected. */
3218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
3219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
3220:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
3221:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#else
3222:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
3223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* A reference to the new socket may be stored and the socket is marked
3224:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		as 'passable'. */
3225:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3226:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* When bPassAccept is pdTRUE_UNSIGNED this socket may be returned in a call to
3227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		accept(). */
3228:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
3229:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if(pxSocket->u.xTCP.pxPeerSocket == NULL )
3230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
3231:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
3232:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
3233:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
3234:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#endif
3235:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxSocket->u.xTCP.usChildCount++;
3237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
3239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->usLocalPort,
3240:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.usChildCount,
3241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.usBacklog,
3242:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );
3243:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3244:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Now bind the child socket to the same port as the listening socket. */
3245:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 2679              		.loc 1 3245 0
 2680 0140 18108DE2 		add	r1, sp, #24
3169:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 2681              		.loc 1 3169 0
 2682 0144 1C3080E5 		str	r3, [r0, #28]
3170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 2683              		.loc 1 3170 0
 2684 0148 203094E5 		ldr	r3, [r4, #32]
 2685 014c 203080E5 		str	r3, [r0, #32]
3171:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 2686              		.loc 1 3171 0
 2687 0150 2630D4E5 		ldrb	r3, [r4, #38]	@ zero_extendqisi2
 2688 0154 2630C0E5 		strb	r3, [r0, #38]
3172:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 2689              		.loc 1 3172 0
 2690 0158 643094E5 		ldr	r3, [r4, #100]
 2691 015c 643080E5 		str	r3, [r0, #100]
3173:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 2692              		.loc 1 3173 0
 2693 0160 683094E5 		ldr	r3, [r4, #104]
 2694 0164 683080E5 		str	r3, [r0, #104]
3174:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 2695              		.loc 1 3174 0
 2696 0168 5C3094E5 		ldr	r3, [r4, #92]
 2697 016c 5C3080E5 		str	r3, [r0, #92]
3175:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 2698              		.loc 1 3175 0
 2699 0170 603094E5 		ldr	r3, [r4, #96]
 2700 0174 603080E5 		str	r3, [r0, #96]
3176:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 2701              		.loc 1 3176 0
 2702 0178 CC3094E5 		ldr	r3, [r4, #204]
 2703 017c CC3080E5 		str	r3, [r0, #204]
3177:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2704              		.loc 1 3177 0
 2705 0180 D03094E5 		ldr	r3, [r4, #208]
 2706 0184 D03080E5 		str	r3, [r0, #208]
3208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2707              		.loc 1 3208 0
 2708 0188 B422D4E1 		ldrh	r2, [r4, #36]
3207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 2709              		.loc 1 3207 0
 2710 018c 14309BE5 		ldr	r3, [fp, #20]
3219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2711              		.loc 1 3219 0
 2712 0190 4C4080E5 		str	r4, [r0, #76]
3207:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 2713              		.loc 1 3207 0
 2714 0194 1C308DE5 		str	r3, [sp, #28]
3208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2715              		.loc 1 3208 0
 2716 0198 2234A0E1 		lsr	r3, r2, #8
 2717 019c 023483E1 		orr	r3, r3, r2, lsl #8
 2718              		.loc 1 3245 0
 2719 01a0 0820A0E3 		mov	r2, #8
3208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2720              		.loc 1 3208 0
 2721 01a4 BA31CDE1 		strh	r3, [sp, #26]	@ movhi
3218:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 2722              		.loc 1 3218 0
 2723 01a8 3830D0E5 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 2724 01ac 043083E3 		orr	r3, r3, #4
 2725 01b0 3830C0E5 		strb	r3, [r0, #56]
3236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2726              		.loc 1 3236 0
 2727 01b4 B634D4E1 		ldrh	r3, [r4, #70]
 2728 01b8 013083E2 		add	r3, r3, #1
 2729 01bc B634C4E1 		strh	r3, [r4, #70]	@ movhi
 2730              		.loc 1 3245 0
 2731 01c0 0830A0E1 		mov	r3, r8
 2732 01c4 FEFFFFEB 		bl	vSocketBind
 2733              	.LVL271:
 2734 01c8 000050E3 		cmp	r0, #0
 2735 01cc 0740A001 		moveq	r4, r7
 2736              	.LVL272:
 2737 01d0 2A02000A 		beq	.L227
3246:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
3247:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
3248:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		vSocketClose( pxNewSocket );
 2738              		.loc 1 3248 0
 2739 01d4 0700A0E1 		mov	r0, r7
 2740 01d8 FEFFFFEB 		bl	vSocketClose
 2741              	.LVL273:
 2742 01dc 260200EA 		b	.L359
 2743              	.LVL274:
 2744              	.L233:
 2745              	.LBE234:
 2746              	.LBE233:
 2747              	.LBE232:
 2748              	.LBE231:
 2749              	.LBE230:
2979:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 2750              		.loc 1 2979 0
 2751 01e0 000054E3 		cmp	r4, #0
 2752 01e4 8BFFFF0A 		beq	.L225
 2753              	.L234:
 2754              	.LVL275:
 2755              	.LBB237:
 2756              	.LBB238:
1407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2757              		.loc 1 1407 0
 2758 01e8 FEFFFFEB 		bl	xTaskGetTickCount
 2759              	.LVL276:
1413:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 2760              		.loc 1 1413 0
 2761 01ec 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
1407:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2762              		.loc 1 1407 0
 2763 01f0 580084E5 		str	r0, [r4, #88]
1414:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 2764              		.loc 1 1414 0
 2765 01f4 FB3003E2 		and	r3, r3, #251
 2766 01f8 9F30C1E7 		bfc	r3, #1, #1
 2767 01fc 3930C4E5 		strb	r3, [r4, #57]
1415:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 2768              		.loc 1 1415 0
 2769 0200 0030A0E3 		mov	r3, #0
 2770 0204 5030C4E5 		strb	r3, [r4, #80]
1416:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2771              		.loc 1 1416 0
 2772 0208 FEFFFFEB 		bl	xTaskGetTickCount
 2773              	.LVL277:
 2774 020c 540084E5 		str	r0, [r4, #84]
 2775              	.LVL278:
 2776              	.LBE238:
 2777              	.LBE237:
3031:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2778              		.loc 1 3031 0
 2779 0210 2E30D5E5 		ldrb	r3, [r5, #46]	@ zero_extendqisi2
 2780 0214 F03003E2 		and	r3, r3, #240
 2781 0218 500053E3 		cmp	r3, #80
 2782 021c 0200009A 		bls	.L289
3033:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2783              		.loc 1 3033 0
 2784 0220 14109DE5 		ldr	r1, [sp, #20]
 2785 0224 0400A0E1 		mov	r0, r4
 2786 0228 FEFFFFEB 		bl	prvCheckOptions
 2787              	.LVL279:
 2788              	.L289:
3039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulWindowSize =
 2789              		.loc 1 3039 0
 2790 022c 3030D5E5 		ldrb	r3, [r5, #48]	@ zero_extendqisi2
 2791 0230 3120D5E5 		ldrb	r2, [r5, #49]	@ zero_extendqisi2
 2792              	.LBB239:
 2793              	.LBB240:
2672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 2794              		.loc 1 2672 0
 2795 0234 14B09DE5 		ldr	fp, [sp, #20]
 2796              	.LBE240:
 2797              	.LBE239:
3039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulWindowSize =
 2798              		.loc 1 3039 0
 2799 0238 022483E1 		orr	r2, r3, r2, lsl #8
 2800 023c 2234A0E1 		lsr	r3, r2, #8
 2801 0240 023483E1 		orr	r3, r3, r2, lsl #8
3041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2802              		.loc 1 3041 0
 2803 0244 C220D4E5 		ldrb	r2, [r4, #194]	@ zero_extendqisi2
3039:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.ulWindowSize =
 2804              		.loc 1 3039 0
 2805 0248 7330FFE6 		uxth	r3, r3
3041:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2806              		.loc 1 3041 0
 2807 024c 1332A0E1 		lsl	r3, r3, r2
3040:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 2808              		.loc 1 3040 0
 2809 0250 C43084E5 		str	r3, [r4, #196]
 2810              	.LVL280:
 2811              	.LBB299:
 2812              	.LBB296:
2672:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 2813              		.loc 1 2672 0
 2814 0254 18509BE5 		ldr	r5, [fp, #24]
 2815              	.LVL281:
 2816              	.LBB241:
 2817              	.LBB242:
2078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 2818              		.loc 1 2078 0
 2819 0258 1C609BE5 		ldr	r6, [fp, #28]
 2820              	.LBE242:
 2821              	.LBE241:
2677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2822              		.loc 1 2677 0
 2823 025c 2720D5E5 		ldrb	r2, [r5, #39]	@ zero_extendqisi2
 2824 0260 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 2825 0264 2870D5E5 		ldrb	r7, [r5, #40]	@ zero_extendqisi2
 2826 0268 023483E1 		orr	r3, r3, r2, lsl #8
 2827 026c 073883E1 		orr	r3, r3, r7, lsl #16
 2828 0270 2970D5E5 		ldrb	r7, [r5, #41]	@ zero_extendqisi2
 2829 0274 073C83E1 		orr	r3, r3, r7, lsl #24
 2830 0278 237CA0E1 		lsr	r7, r3, #24
 2831 027c 0324A0E1 		lsl	r2, r3, #8
 2832 0280 037C87E1 		orr	r7, r7, r3, lsl #24
 2833 0284 2334A0E1 		lsr	r3, r3, #8
 2834 0288 FF2802E2 		and	r2, r2, #16711680
 2835 028c FF3C03E2 		and	r3, r3, #65280
 2836 0290 027087E1 		orr	r7, r7, r2
 2837              	.LBB245:
 2838              	.LBB243:
2078:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 2839              		.loc 1 2078 0
 2840 0294 0E2046E2 		sub	r2, r6, #14
 2841              	.LBE243:
 2842              	.LBE245:
2677:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2843              		.loc 1 2677 0
 2844 0298 037087E1 		orr	r7, r7, r3
 2845              	.LVL282:
2685:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPWindow_t *pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 2846              		.loc 1 2685 0
 2847 029c 2F30D5E5 		ldrb	r3, [r5, #47]	@ zero_extendqisi2
 2848 02a0 0C308DE5 		str	r3, [sp, #12]
 2849              	.LVL283:
 2850              	.LBB246:
 2851              	.LBB244:
2079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2852              		.loc 1 2079 0
 2853 02a4 1060D5E5 		ldrb	r6, [r5, #16]	@ zero_extendqisi2
 2854 02a8 1110D5E5 		ldrb	r1, [r5, #17]	@ zero_extendqisi2
2070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2855              		.loc 1 2070 0
 2856 02ac 2E30D5E5 		ldrb	r3, [r5, #46]	@ zero_extendqisi2
2079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2857              		.loc 1 2079 0
 2858 02b0 011486E1 		orr	r1, r6, r1, lsl #8
2070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2859              		.loc 1 2070 0
 2860 02b4 2331A0E1 		lsr	r3, r3, #2
2079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2861              		.loc 1 2079 0
 2862 02b8 2164A0E1 		lsr	r6, r1, #8
2070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2863              		.loc 1 2070 0
 2864 02bc 3C3003E2 		and	r3, r3, #60
 2865              	.LVL284:
2079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2866              		.loc 1 2079 0
 2867 02c0 016486E1 		orr	r6, r6, r1, lsl #8
2073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2868              		.loc 1 2073 0
 2869 02c4 229083E2 		add	r9, r3, #34
2090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2870              		.loc 1 2090 0
 2871 02c8 143083E2 		add	r3, r3, #20
 2872              	.LVL285:
2079:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2873              		.loc 1 2079 0
 2874 02cc 7660FFE6 		uxth	r6, r6
2073:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2875              		.loc 1 2073 0
 2876 02d0 099085E0 		add	r9, r5, r9
 2877              	.LVL286:
 2878 02d4 020056E1 		cmp	r6, r2
 2879 02d8 0260A0A1 		movge	r6, r2
 2880              	.LVL287:
2090:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2881              		.loc 1 2090 0
 2882 02dc 060053E1 		cmp	r3, r6
2092:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2883              		.loc 1 2092 0
 2884 02e0 036046B0 		sublt	r6, r6, r3
 2885              	.LVL288:
2105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2886              		.loc 1 2105 0
 2887 02e4 0C309DE5 		ldr	r3, [sp, #12]
 2888              	.LVL289:
2096:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2889              		.loc 1 2096 0
 2890 02e8 0060A0A3 		movge	r6, #0
 2891              	.LVL290:
2105:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2892              		.loc 1 2105 0
 2893 02ec 200013E3 		tst	r3, #32
 2894 02f0 0900000A 		beq	.L237
2108:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		*ppucRecvData += lUrgentLength;
 2895              		.loc 1 2108 0
 2896 02f4 3430D5E5 		ldrb	r3, [r5, #52]	@ zero_extendqisi2
 2897 02f8 3520D5E5 		ldrb	r2, [r5, #53]	@ zero_extendqisi2
 2898 02fc 022483E1 		orr	r2, r3, r2, lsl #8
 2899 0300 2234A0E1 		lsr	r3, r2, #8
 2900 0304 023483E1 		orr	r3, r3, r2, lsl #8
 2901 0308 7330FFE6 		uxth	r3, r3
 2902              	.LVL291:
2110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2903              		.loc 1 2110 0
 2904 030c 060053E1 		cmp	r3, r6
2109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 2905              		.loc 1 2109 0
 2906 0310 039089E0 		add	r9, r9, r3
 2907              	.LVL292:
2110:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2908              		.loc 1 2110 0
 2909 0314 036046D0 		suble	r6, r6, r3
 2910              	.LVL293:
 2911 0318 066046C0 		subgt	r6, r6, r6
 2912              	.LVL294:
 2913              	.L237:
 2914              	.LBE244:
 2915              	.LBE246:
2692:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2916              		.loc 1 2692 0
 2917 031c 4B30D4E5 		ldrb	r3, [r4, #75]	@ zero_extendqisi2
 2918 0320 040053E3 		cmp	r3, #4
 2919 0324 0500009A 		bls	.L238
2694:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2920              		.loc 1 2694 0
 2921 0328 E41094E5 		ldr	r1, [r4, #228]
 2922 032c 012087E2 		add	r2, r7, #1
 2923 0330 020051E1 		cmp	r1, r2
2699:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2924              		.loc 1 2699 0
 2925 0334 3920D405 		ldrbeq	r2, [r4, #57]	@ zero_extendqisi2
 2926 0338 01208203 		orreq	r2, r2, #1
 2927 033c 3920C405 		strbeq	r2, [r4, #57]
 2928              	.LVL295:
 2929              	.L238:
2705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2930              		.loc 1 2705 0
 2931 0340 EC2094E5 		ldr	r2, [r4, #236]
 2932 0344 06A087E0 		add	r10, r7, r6
 2933              	.LBB247:
 2934              	.LBB248:
2128:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulSequenceNumber, ulSpace;
 2935              		.loc 1 2128 0
 2936 0348 D48084E2 		add	r8, r4, #212
 2937              	.LBE248:
 2938              	.LBE247:
2705:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2939              		.loc 1 2705 0
 2940 034c 02204AE0 		sub	r2, r10, r2
 2941 0350 000052E3 		cmp	r2, #0
2707:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 2942              		.loc 1 2707 0
 2943 0354 ECA084C5 		strgt	r10, [r4, #236]
 2944              	.LVL296:
 2945              	.LBB256:
 2946              	.LBB253:
2135:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 2947              		.loc 1 2135 0
 2948 0358 002096E2 		adds	r2, r6, #0
 2949 035c 0120A013 		movne	r2, #1
 2950 0360 10208DE5 		str	r2, [sp, #16]
 2951 0364 030053E3 		cmp	r3, #3
 2952 0368 0020A093 		movls	r2, #0
 2953 036c 01200282 		andhi	r2, r2, #1
 2954 0370 000052E3 		cmp	r2, #0
 2955 0374 0230A0E1 		mov	r3, r2
 2956 0378 3700000A 		beq	.L240
2144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2957              		.loc 1 2144 0
 2958 037c 6C2094E5 		ldr	r2, [r4, #108]
 2959 0380 000052E3 		cmp	r2, #0
2150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 2960              		.loc 1 2150 0
 2961 0384 64309405 		ldreq	r3, [r4, #100]
2144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2962              		.loc 1 2144 0
 2963 0388 0700000A 		beq	.L242
 2964              	.LVL297:
 2965              	.LBB249:
 2966              	.LBB250:
  99:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 2967              		.loc 2 99 0
 2968 038c 081092E5 		ldr	r1, [r2, #8]
 2969              	.LVL298:
 100:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 2970              		.loc 2 100 0
 2971 0390 003092E5 		ldr	r3, [r2]
 2972              	.LVL299:
 2973              	.LBB251:
 2974              	.LBB252:
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( uxCount >= pxBuffer->LENGTH )
 2975              		.loc 2 68 0
 2976 0394 102092E5 		ldr	r2, [r2, #16]
 2977              	.LVL300:
 2978 0398 023083E0 		add	r3, r3, r2
 2979              	.LVL301:
 2980 039c 013043E2 		sub	r3, r3, #1
 2981 03a0 013043E0 		sub	r3, r3, r1
 2982              	.LVL302:
  69:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 2983              		.loc 2 69 0
 2984 03a4 030052E1 		cmp	r2, r3
  71:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 2985              		.loc 2 71 0
 2986 03a8 02304390 		subls	r3, r3, r2
 2987              	.LVL303:
 2988              	.L242:
 2989              	.LBE252:
 2990              	.LBE251:
 2991              	.LBE250:
 2992              	.LBE249:
2153:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 2993              		.loc 1 2153 0
 2994 03ac 0710A0E1 		mov	r1, r7
 2995 03b0 0620A0E1 		mov	r2, r6
 2996 03b4 0800A0E1 		mov	r0, r8
 2997 03b8 FEFFFFEB 		bl	lTCPWindowRxCheck
 2998              	.LVL304:
2155:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 2999              		.loc 1 2155 0
 3000 03bc 001050E2 		subs	r1, r0, #0
 3001 03c0 E40100BA 		blt	.L243
2161:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3002              		.loc 1 2161 0
 3003 03c4 0630A0E1 		mov	r3, r6
 3004 03c8 0920A0E1 		mov	r2, r9
 3005 03cc 0400A0E1 		mov	r0, r4
 3006              	.LVL305:
 3007 03d0 FEFFFFEB 		bl	lTCPAddRxdata
 3008              	.LVL306:
2163:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3009              		.loc 1 2163 0
 3010 03d4 000056E1 		cmp	r6, r0
 3011 03d8 DE01000A 		beq	.L243
2170:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xResult = -1;
 3012              		.loc 1 2170 0
 3013 03dc 0B00A0E1 		mov	r0, fp
 3014              	.LVL307:
 3015 03e0 FEFFFFEB 		bl	prvTCPSendReset
 3016              	.LVL308:
 3017              	.L251:
 3018              	.LBE253:
 3019              	.LBE256:
 3020              	.LBE296:
 3021              	.LBE299:
3058:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3022              		.loc 1 3058 0
 3023 03e4 14009DE5 		ldr	r0, [sp, #20]
 3024 03e8 000050E3 		cmp	r0, #0
 3025 03ec 0200000A 		beq	.L285
3063:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxNetworkBuffer = NULL;
 3026              		.loc 1 3063 0
 3027 03f0 FEFFFFEB 		bl	vReleaseNetworkBufferAndDescriptor
 3028              	.LVL309:
3064:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 3029              		.loc 1 3064 0
 3030 03f4 0030A0E3 		mov	r3, #0
 3031 03f8 14308DE5 		str	r3, [sp, #20]
 3032              	.L285:
3068:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		/* Return pdPASS to tell that the network buffer is 'consumed'. */
 3033              		.loc 1 3068 0
 3034 03fc 0400A0E1 		mov	r0, r4
 3035 0400 FEFFFFEB 		bl	prvTCPNextTimeout
 3036              	.LVL310:
3070:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3037              		.loc 1 3070 0
 3038 0404 0100A0E3 		mov	r0, #1
 3039 0408 03FFFFEA 		b	.L220
 3040              	.LVL311:
 3041              	.L355:
2989:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3042              		.loc 1 2989 0
 3043 040c 040019E3 		tst	r9, #4
 3044 0410 0300000A 		beq	.L235
2995:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3045              		.loc 1 2995 0
 3046 0414 0610A0E1 		mov	r1, r6
 3047 0418 0400A0E1 		mov	r0, r4
 3048              	.LVL312:
 3049 041c FEFFFFEB 		bl	vTCPStateChange
 3050              	.LVL313:
 3051 0420 FCFEFFEA 		b	.L225
 3052              	.LVL314:
 3053              	.L235:
3000:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3054              		.loc 1 3000 0
 3055 0424 1F9009E2 		and	r9, r9, #31
 3056              	.LVL315:
 3057 0428 040058E3 		cmp	r8, #4
 3058 042c 029049E2 		sub	r9, r9, #2
 3059 0430 199F6FE1 		clz	r9, r9
 3060 0434 A992A0E1 		lsr	r9, r9, #5
 3061 0438 0090A093 		movls	r9, #0
 3062 043c 000059E3 		cmp	r9, #0
 3063 0440 F4FEFF1A 		bne	.L225
 3064              	.LVL316:
 3065              	.LBB300:
3014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3066              		.loc 1 3014 0
 3067 0444 14309DE5 		ldr	r3, [sp, #20]
 3068 0448 1420A0E3 		mov	r2, #20
 3069 044c 9C0084E2 		add	r0, r4, #156
 3070              	.LVL317:
 3071 0450 181093E5 		ldr	r1, [r3, #24]
 3072 0454 221081E2 		add	r1, r1, #34
 3073 0458 BC0100EA 		b	.L362
 3074              	.LVL318:
 3075              	.L240:
 3076              	.LBE300:
 3077              	.LBB301:
 3078              	.LBB297:
 3079              	.LBB257:
 3080              	.LBB254:
2192:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3081              		.loc 1 2192 0
 3082 045c 1021C4E5 		strb	r2, [r4, #272]
 3083 0460 C50100EA 		b	.L245
 3084              	.LVL319:
 3085              	.L356:
 3086              	.LBE254:
 3087              	.LBE257:
 3088              	.LBB258:
 3089              	.LBB259:
2227:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3090              		.loc 1 2227 0
 3091 0464 4B30D4E5 		ldrb	r3, [r4, #75]	@ zero_extendqisi2
 3092 0468 040053E3 		cmp	r3, #4
 3093 046c CE01009A 		bls	.L246
 3094 0470 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 3095 0474 010013E3 		tst	r3, #1
 3096 0478 CB01000A 		beq	.L246
2230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xTCPWindowLoggingLevel >= 0 )
 3097              		.loc 1 2230 0
 3098 047c 1930C0E7 		bfi	r3, r9, #0, #1
2237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 3099              		.loc 1 2237 0
 3100 0480 0490A0E3 		mov	r9, #4
2230:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( xTCPWindowLoggingLevel >= 0 )
 3101              		.loc 1 2230 0
 3102 0484 3830C4E5 		strb	r3, [r4, #56]
2236:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 3103              		.loc 1 2236 0
 3104 0488 0230A0E3 		mov	r3, #2
 3105 048c 3630CBE5 		strb	r3, [fp, #54]
2237:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 3106              		.loc 1 2237 0
 3107 0490 3790CBE5 		strb	r9, [fp, #55]
2238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 3108              		.loc 1 2238 0
 3109 0494 B234D4E1 		ldrh	r3, [r4, #66]
2239:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		uxOptionsLength = 4u;
 3110              		.loc 1 2239 0
 3111 0498 3930CBE5 		strb	r3, [fp, #57]
 3112              	.LVL320:
2238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 3113              		.loc 1 2238 0
 3114 049c 2324A0E1 		lsr	r2, r3, #8
2241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3115              		.loc 1 2241 0
 3116 04a0 6030A0E3 		mov	r3, #96
2238:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 3117              		.loc 1 2238 0
 3118 04a4 3820CBE5 		strb	r2, [fp, #56]
 3119 04a8 BE0100EA 		b	.L360
 3120              	.LVL321:
 3121              	.L254:
 3122              	.LBE259:
 3123              	.LBE258:
 3124              	.LBB261:
 3125              	.LBB262:
1355:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** UBaseType_t uxOptionsLength;
 3126              		.loc 1 1355 0
 3127 04ac B424D4E1 		ldrh	r2, [r4, #68]
 3128              	.LVL322:
1360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 3129              		.loc 1 1360 0
 3130 04b0 0230A0E3 		mov	r3, #2
 3131 04b4 3630C5E5 		strb	r3, [r5, #54]
1361:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 3132              		.loc 1 1361 0
 3133 04b8 0430A0E3 		mov	r3, #4
 3134 04bc 3730C5E5 		strb	r3, [r5, #55]
1363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3135              		.loc 1 1363 0
 3136 04c0 3920C5E5 		strb	r2, [r5, #57]
 3137              	.LVL323:
1362:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 3138              		.loc 1 1362 0
 3139 04c4 2234A0E1 		lsr	r3, r2, #8
 3140 04c8 3830C5E5 		strb	r3, [r5, #56]
 3141              	.LBB263:
 3142              	.LBB264:
1327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		ucFactor = 0u;
 3143              		.loc 1 1327 0
 3144 04cc CC3094E5 		ldr	r3, [r4, #204]
 3145 04d0 930203E0 		mul	r3, r3, r2
 3146              	.LVL324:
 3147 04d4 0020A0E3 		mov	r2, #0
 3148              	.LVL325:
 3149              	.L257:
1329:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3150              		.loc 1 1329 0
 3151 04d8 010853E3 		cmp	r3, #65536
 3152 04dc 7210EFE6 		uxtb	r1, r2
 3153              	.LVL326:
 3154 04e0 012082E2 		add	r2, r2, #1
 3155 04e4 5900002A 		bcs	.L258
 3156              	.LVL327:
 3157              	.LBE264:
 3158              	.LBE263:
1369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 3159              		.loc 1 1369 0
 3160 04e8 0130A0E3 		mov	r3, #1
1367:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3161              		.loc 1 1367 0
 3162 04ec C110C4E5 		strb	r1, [r4, #193]
1369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 3163              		.loc 1 1369 0
 3164 04f0 3A30C5E5 		strb	r3, [r5, #58]
1370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 3165              		.loc 1 1370 0
 3166 04f4 0320A0E3 		mov	r2, #3
1387:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 3167              		.loc 1 1387 0
 3168 04f8 3E30C5E5 		strb	r3, [r5, #62]
 3169              	.LBE262:
 3170              	.LBE261:
2773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3171              		.loc 1 2773 0
 3172 04fc 0400A0E1 		mov	r0, r4
 3173              	.LBB271:
 3174              	.LBB267:
1388:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 3175              		.loc 1 1388 0
 3176 0500 3F30C5E5 		strb	r3, [r5, #63]
1390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		uxOptionsLength += 4u;
 3177              		.loc 1 1390 0
 3178 0504 0230A0E3 		mov	r3, #2
 3179 0508 4130C5E5 		strb	r3, [r5, #65]
 3180              	.LBE267:
 3181              	.LBE271:
2765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3182              		.loc 1 2765 0
 3183 050c 1230A0E3 		mov	r3, #18
 3184              	.LBB272:
 3185              	.LBB268:
1372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		uxOptionsLength = 8u;
 3186              		.loc 1 1372 0
 3187 0510 3D10C5E5 		strb	r1, [r5, #61]
 3188              	.LVL328:
1389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 3189              		.loc 1 1389 0
 3190 0514 0410A0E3 		mov	r1, #4
 3191              	.LBE268:
 3192              	.LBE272:
2765:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3193              		.loc 1 2765 0
 3194 0518 2F30C5E5 		strb	r3, [r5, #47]
 3195              	.LVL329:
2772:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 3196              		.loc 1 2772 0
 3197 051c 7F30E0E3 		mvn	r3, #127
 3198 0520 2E30C5E5 		strb	r3, [r5, #46]
2775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx
 3199              		.loc 1 2775 0
 3200 0524 017087E2 		add	r7, r7, #1
 3201              	.LVL330:
 3202              	.LBB273:
 3203              	.LBB269:
1370:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 3204              		.loc 1 1370 0
 3205 0528 3B20C5E5 		strb	r2, [r5, #59]
1371:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 3206              		.loc 1 1371 0
 3207 052c 3C20C5E5 		strb	r2, [r5, #60]
1389:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 3208              		.loc 1 1389 0
 3209 0530 4010C5E5 		strb	r1, [r5, #64]
 3210              	.LBE269:
 3211              	.LBE273:
2767:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3212              		.loc 1 2767 0
 3213 0534 3450A0E3 		mov	r5, #52
 3214              	.LVL331:
2773:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3215              		.loc 1 2773 0
 3216 0538 FEFFFFEB 		bl	vTCPStateChange
 3217              	.LVL332:
2776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3218              		.loc 1 2776 0
 3219 053c F03094E5 		ldr	r3, [r4, #240]
2775:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx
 3220              		.loc 1 2775 0
 3221 0540 EC7084E5 		str	r7, [r4, #236]
 3222 0544 E47084E5 		str	r7, [r4, #228]
2776:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3223              		.loc 1 2776 0
 3224 0548 013083E2 		add	r3, r3, #1
 3225 054c 083184E5 		str	r3, [r4, #264]
 3226 0550 F43084E5 		str	r3, [r4, #244]
 3227              	.LVL333:
 3228              	.L259:
 3229              	.LBB274:
 3230              	.LBB275:
2537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3231              		.loc 1 2537 0
 3232 0554 6C0094E5 		ldr	r0, [r4, #108]
2534:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3233              		.loc 1 2534 0
 3234 0558 E4E094E5 		ldr	lr, [r4, #228]
2533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 3235              		.loc 1 2533 0
 3236 055c D82094E5 		ldr	r2, [r4, #216]
 3237 0560 EC3094E5 		ldr	r3, [r4, #236]
2537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3238              		.loc 1 2537 0
 3239 0564 000050E3 		cmp	r0, #0
2520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 3240              		.loc 1 2520 0
 3241 0568 14109DE5 		ldr	r1, [sp, #20]
2533:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 3242              		.loc 1 2533 0
 3243 056c 02208EE0 		add	r2, lr, r2
 3244 0570 032042E0 		sub	r2, r2, r3
2543:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3245              		.loc 1 2543 0
 3246 0574 64309405 		ldreq	r3, [r4, #100]
2520:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 3247              		.loc 1 2520 0
 3248 0578 18C091E5 		ldr	ip, [r1, #24]
 3249              	.LVL334:
2537:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3250              		.loc 1 2537 0
 3251 057c 0700000A 		beq	.L276
 3252              	.LVL335:
 3253              	.LBB276:
 3254              	.LBB277:
 113:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** size_t uxTail = pxBuffer->uxTail;
 3255              		.loc 2 113 0
 3256 0580 0C7090E5 		ldr	r7, [r0, #12]
 3257              	.LVL336:
 114:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 
 3258              		.loc 2 114 0
 3259 0584 003090E5 		ldr	r3, [r0]
 3260              	.LVL337:
 3261              	.LBB278:
 3262              	.LBB279:
  68:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	if( uxCount >= pxBuffer->LENGTH )
 3263              		.loc 2 68 0
 3264 0588 100090E5 		ldr	r0, [r0, #16]
 3265              	.LVL338:
 3266 058c 003083E0 		add	r3, r3, r0
 3267              	.LVL339:
 3268 0590 013043E2 		sub	r3, r3, #1
 3269 0594 073043E0 		sub	r3, r3, r7
 3270              	.LVL340:
  69:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	{
 3271              		.loc 2 69 0
 3272 0598 030050E1 		cmp	r0, r3
  71:D:\Work\DeviceTester\amazon-freertos\lib\FreeRTOS-Plus-TCP\include\FreeRTOS_Stream_Buffer.h **** 	}
 3273              		.loc 2 71 0
 3274 059c 00304390 		subls	r3, r3, r0
 3275              	.LVL341:
 3276              	.L276:
 3277              	.LBE279:
 3278              	.LBE278:
 3279              	.LBE277:
 3280              	.LBE276:
2546:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3281              		.loc 1 2546 0
 3282 05a0 030052E1 		cmp	r2, r3
 3283 05a4 C8208495 		strls	r2, [r4, #200]
 3284 05a8 C8308485 		strhi	r3, [r4, #200]
2550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if ipconfigUSE_TCP_WIN == 1
 3285              		.loc 1 2550 0
 3286 05ac 3C7094E5 		ldr	r7, [r4, #60]
2556:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 3287              		.loc 1 2556 0
 3288 05b0 B234D4E1 		ldrh	r3, [r4, #66]
 3289              	.LVL342:
 3290 05b4 740094E5 		ldr	r0, [r4, #116]
2550:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if ipconfigUSE_TCP_WIN == 1
 3291              		.loc 1 2550 0
 3292 05b8 0E7047E0 		sub	r7, r7, lr
 3293              	.LVL343:
2563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 3294              		.loc 1 2563 0
 3295 05bc 830057E1 		cmp	r7, r3, lsl #1
2562:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 3296              		.loc 1 2562 0
 3297 05c0 10309DE5 		ldr	r3, [sp, #16]
 3298 05c4 0030A0B3 		movlt	r3, #0
 3299 05c8 013003A2 		andge	r3, r3, #1
 3300 05cc 000053E3 		cmp	r3, #0
 3301 05d0 EA00000A 		beq	.L277
2563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 3302              		.loc 1 2563 0
 3303 05d4 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
2564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options 
 3304              		.loc 1 2564 0
 3305 05d8 282045E2 		sub	r2, r5, #40
 3306 05dc 122F6FE1 		clz	r2, r2
 3307 05e0 A222A0E1 		lsr	r2, r2, #5
2563:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 3308              		.loc 1 2563 0
 3309 05e4 203023E2 		eor	r3, r3, #32
2564:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options 
 3310              		.loc 1 2564 0
 3311 05e8 A33212E0 		ands	r3, r2, r3, lsr #5
 3312 05ec E300000A 		beq	.L277
2565:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 3313              		.loc 1 2565 0
 3314 05f0 4B30D4E5 		ldrb	r3, [r4, #75]	@ zero_extendqisi2
 3315 05f4 050053E3 		cmp	r3, #5
 3316 05f8 E000001A 		bne	.L277
2566:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxTCPHeader->ucTCPFlags == ipTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */
 3317              		.loc 1 2566 0
 3318 05fc 2F30DCE5 		ldrb	r3, [ip, #47]	@ zero_extendqisi2
 3319 0600 100053E3 		cmp	r3, #16
 3320 0604 DD00001A 		bne	.L277
2569:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3321              		.loc 1 2569 0
 3322 0608 000051E1 		cmp	r1, r0
 3323 060c 0400000A 		beq	.L278
2572:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 3324              		.loc 1 2572 0
 3325 0610 000050E3 		cmp	r0, #0
 3326 0614 0000000A 		beq	.L279
2574:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 3327              		.loc 1 2574 0
 3328 0618 FEFFFFEB 		bl	vReleaseNetworkBufferAndDescriptor
 3329              	.LVL344:
 3330              	.L279:
2577:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3331              		.loc 1 2577 0
 3332 061c 14309DE5 		ldr	r3, [sp, #20]
 3333 0620 743084E5 		str	r3, [r4, #116]
 3334              	.L278:
2579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				( lRxSpace < ( int32_t ) ( 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS 
 3335              		.loc 1 2579 0
 3336 0624 B234D4E1 		ldrh	r3, [r4, #66]
 3337 0628 030056E1 		cmp	r6, r3
 3338 062c 0200003A 		bcc	.L280
 3339 0630 830057E1 		cmp	r7, r3, lsl #1
2589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3340              		.loc 1 2589 0
 3341 0634 1430A0A3 		movge	r3, #20
2579:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				( lRxSpace < ( int32_t ) ( 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS 
 3342              		.loc 1 2579 0
 3343 0638 000000AA 		bge	.L361
 3344              	.L280:
2582:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3345              		.loc 1 2582 0
 3346 063c 0230A0E3 		mov	r3, #2
 3347              	.L361:
2589:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3348              		.loc 1 2589 0
 3349 0640 B034C4E1 		strh	r3, [r4, #64]	@ movhi
2603:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xSendLength = 0;
 3350              		.loc 1 2603 0
 3351 0644 0030A0E3 		mov	r3, #0
 3352 0648 14308DE5 		str	r3, [sp, #20]
 3353              	.LVL345:
 3354 064c 64FFFFEA 		b	.L251
 3355              	.LVL346:
 3356              	.L258:
 3357              	.LBE275:
 3358              	.LBE274:
 3359              	.LBB281:
 3360              	.LBB270:
 3361              	.LBB266:
 3362              	.LBB265:
1332:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ucFactor++;
 3363              		.loc 1 1332 0
 3364 0650 A330A0E1 		lsr	r3, r3, #1
 3365              	.LVL347:
 3366 0654 9FFFFFEA 		b	.L257
 3367              	.LVL348:
 3368              	.L252:
 3369              	.LBE265:
 3370              	.LBE266:
 3371              	.LBE270:
 3372              	.LBE281:
 3373              	.LBB282:
 3374              	.LBB283:
2257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 3375              		.loc 1 2257 0
 3376 0658 14309DE5 		ldr	r3, [sp, #20]
2268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3377              		.loc 1 2268 0
 3378 065c 020052E3 		cmp	r2, #2
 3379 0660 1010A013 		movne	r1, #16
 3380 0664 1210A003 		moveq	r1, #18
2257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 3381              		.loc 1 2257 0
 3382 0668 187093E5 		ldr	r7, [r3, #24]
 3383              	.LVL349:
2260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 3384              		.loc 1 2260 0
 3385 066c 2F30D7E5 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3386              	.LVL350:
2271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3387              		.loc 1 2271 0
 3388 0670 173003E2 		and	r3, r3, #23
 3389              	.LVL351:
 3390 0674 010053E1 		cmp	r3, r1
 3391 0678 0A00000A 		beq	.L261
2278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 3392              		.loc 1 2278 0
 3393 067c 0810A0E3 		mov	r1, #8
 3394              	.LVL352:
 3395 0680 0400A0E1 		mov	r0, r4
 3396 0684 FEFFFFEB 		bl	vTCPStateChange
 3397              	.LVL353:
2279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 3398              		.loc 1 2279 0
 3399 0688 2F30D7E5 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
2280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 3400              		.loc 1 2280 0
 3401 068c 285089E2 		add	r5, r9, #40
 3402              	.LVL354:
2281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3403              		.loc 1 2281 0
 3404 0690 149089E2 		add	r9, r9, #20
 3405              	.LVL355:
 3406 0694 0991A0E1 		lsl	r9, r9, #2
 3407              	.LVL356:
2279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 3408              		.loc 1 2279 0
 3409 0698 043083E3 		orr	r3, r3, #4
 3410 069c 2F30C7E5 		strb	r3, [r7, #47]
2281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3411              		.loc 1 2281 0
 3412 06a0 2E90C7E5 		strb	r9, [r7, #46]
 3413 06a4 AAFFFFEA 		b	.L259
 3414              	.LVL357:
 3415              	.L261:
2261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0;
 3416              		.loc 1 2261 0
 3417 06a8 2710D7E5 		ldrb	r1, [r7, #39]	@ zero_extendqisi2
 3418              	.LVL358:
2288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3419              		.loc 1 2288 0
 3420 06ac 020052E3 		cmp	r2, #2
2261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0;
 3421              		.loc 1 2261 0
 3422 06b0 2630D7E5 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3423 06b4 013483E1 		orr	r3, r3, r1, lsl #8
 3424 06b8 2810D7E5 		ldrb	r1, [r7, #40]	@ zero_extendqisi2
 3425 06bc 013883E1 		orr	r3, r3, r1, lsl #16
 3426 06c0 2910D7E5 		ldrb	r1, [r7, #41]	@ zero_extendqisi2
 3427 06c4 013C83E1 		orr	r3, r3, r1, lsl #24
 3428 06c8 231CA0E1 		lsr	r1, r3, #24
 3429 06cc 0304A0E1 		lsl	r0, r3, #8
 3430 06d0 031C81E1 		orr	r1, r1, r3, lsl #24
 3431 06d4 2334A0E1 		lsr	r3, r3, #8
 3432 06d8 FF0800E2 		and	r0, r0, #16711680
 3433 06dc FF3C03E2 		and	r3, r3, #65280
 3434 06e0 001081E1 		orr	r1, r1, r0
 3435 06e4 035081E1 		orr	r5, r1, r3
 3436              	.LVL359:
2285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 3437              		.loc 1 2285 0
 3438 06e8 B413D4E1 		ldrh	r1, [r4, #52]
 3439 06ec 8E3100E3 		movw	r3, #398
 3440 06f0 B31084E1 		strh	r1, [r4, r3]	@ movhi
 3441              	.LVL360:
2286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3442              		.loc 1 2286 0
 3443 06f4 633F84E2 		add	r3, r4, #396
 3444 06f8 B412D4E1 		ldrh	r1, [r4, #36]
 3445 06fc B010C3E1 		strh	r1, [r3]	@ movhi
2288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3446              		.loc 1 2288 0
 3447 0700 2900001A 		bne	.L262
 3448              	.LVL361:
 3449              	.LBB284:
2293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3450              		.loc 1 2293 0
 3451 0704 1030A0E3 		mov	r3, #16
2297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTC
 3452              		.loc 1 2297 0
 3453 0708 002194E5 		ldr	r2, [r4, #256]
2293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3454              		.loc 1 2293 0
 3455 070c A930C4E5 		strb	r3, [r4, #169]
 3456              	.LVL362:
2297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTC
 3457              		.loc 1 2297 0
 3458 0710 0510A0E1 		mov	r1, r5
 3459 0714 B234D4E1 		ldrh	r3, [r4, #66]
 3460 0718 0800A0E1 		mov	r0, r8
 3461 071c FEFFFFEB 		bl	vTCPWindowInit
 3462              	.LVL363:
2299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 3463              		.loc 1 2299 0
 3464 0720 013085E2 		add	r3, r5, #1
 3465 0724 EC3084E5 		str	r3, [r4, #236]
 3466 0728 E43084E5 		str	r3, [r4, #228]
2300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPWindow->ulNextTxSequenceNumber++;
 3467              		.loc 1 2300 0
 3468 072c F43094E5 		ldr	r3, [r4, #244]
 3469 0730 013083E2 		add	r3, r3, #1
 3470 0734 F43084E5 		str	r3, [r4, #244]
2301:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 3471              		.loc 1 2301 0
 3472 0738 083194E5 		ldr	r3, [r4, #264]
 3473 073c 013083E2 		add	r3, r3, #1
 3474 0740 083184E5 		str	r3, [r4, #264]
 3475              	.LVL364:
 3476              	.L263:
 3477              	.LBE284:
2310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3478              		.loc 1 2310 0
 3479 0744 F03094E5 		ldr	r3, [r4, #240]
2342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3480              		.loc 1 2342 0
 3481 0748 0510A0E3 		mov	r1, #5
2323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3482              		.loc 1 2323 0
 3483 074c 4B50D4E5 		ldrb	r5, [r4, #75]	@ zero_extendqisi2
2342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3484              		.loc 1 2342 0
 3485 0750 0400A0E1 		mov	r0, r4
2310:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3486              		.loc 1 2310 0
 3487 0754 013083E2 		add	r3, r3, #1
 3488 0758 003184E5 		str	r3, [r4, #256]
2323:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3489              		.loc 1 2323 0
 3490 075c 003096E2 		adds	r3, r6, #0
 3491 0760 0130A013 		movne	r3, #1
 3492 0764 020055E3 		cmp	r5, #2
 3493 0768 01308303 		orreq	r3, r3, #1
 3494 076c 000053E3 		cmp	r3, #0
 3495 0770 0350A0E1 		mov	r5, r3
2326:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 3496              		.loc 1 2326 0
 3497 0774 28508912 		addne	r5, r9, #40
 3498              	.LVL365:
2327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 3499              		.loc 1 2327 0
 3500 0778 14908912 		addne	r9, r9, #20
 3501              	.LVL366:
 3502 077c 0991A011 		lslne	r9, r9, #2
2325:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 3503              		.loc 1 2325 0
 3504 0780 1030A013 		movne	r3, #16
 3505 0784 2F30C715 		strbne	r3, [r7, #47]
2327:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 3506              		.loc 1 2327 0
 3507 0788 2E90C715 		strbne	r9, [r7, #46]
2331:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3508              		.loc 1 2331 0
 3509 078c 3A30D4E5 		ldrb	r3, [r4, #58]	@ zero_extendqisi2
 3510 0790 083013E2 		ands	r3, r3, #8
2335:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 3511              		.loc 1 2335 0
 3512 0794 C130C405 		strbeq	r3, [r4, #193]
2336:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3513              		.loc 1 2336 0
 3514 0798 C230C405 		strbeq	r3, [r4, #194]
2342:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3515              		.loc 1 2342 0
 3516 079c FEFFFFEB 		bl	vTCPStateChange
 3517              	.LVL367:
 3518              	.L266:
 3519              	.LBE283:
 3520              	.LBE282:
2834:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3521              		.loc 1 2834 0
 3522 07a0 000055E3 		cmp	r5, #0
 3523 07a4 6AFFFFCA 		bgt	.L259
 3524 07a8 0DFFFFEA 		b	.L251
 3525              	.LVL368:
 3526              	.L262:
 3527              	.LBB286:
 3528              	.LBB285:
2303:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3529              		.loc 1 2303 0
 3530 07ac 000056E3 		cmp	r6, #0
2305:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 3531              		.loc 1 2305 0
 3532 07b0 E4508405 		streq	r5, [r4, #228]
 3533 07b4 E2FFFFEA 		b	.L263
 3534              	.LVL369:
 3535              	.L255:
 3536              	.LBE285:
 3537              	.LBE286:
 3538              	.LBB287:
 3539              	.LBB288:
2360:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 3540              		.loc 1 2360 0
 3541 07b8 14309DE5 		ldr	r3, [sp, #20]
 3542 07bc 187093E5 		ldr	r7, [r3, #24]
 3543              	.LVL370:
2364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 3544              		.loc 1 2364 0
 3545 07c0 2730D7E5 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3546 07c4 2650D7E5 		ldrb	r5, [r7, #38]	@ zero_extendqisi2
 3547              	.LVL371:
2369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_TCP_WIN != 0 )
 3548              		.loc 1 2369 0
 3549 07c8 3120D7E5 		ldrb	r2, [r7, #49]	@ zero_extendqisi2
2363:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 3550              		.loc 1 2363 0
 3551 07cc 2FA0D7E5 		ldrb	r10, [r7, #47]	@ zero_extendqisi2
 3552              	.LVL372:
2364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 3553              		.loc 1 2364 0
 3554 07d0 035485E1 		orr	r5, r5, r3, lsl #8
 3555 07d4 2830D7E5 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
2377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3556              		.loc 1 2377 0
 3557 07d8 10001AE3 		tst	r10, #16
2364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 3558              		.loc 1 2364 0
 3559 07dc 035885E1 		orr	r5, r5, r3, lsl #16
 3560 07e0 2930D7E5 		ldrb	r3, [r7, #41]	@ zero_extendqisi2
 3561 07e4 035C85E1 		orr	r5, r5, r3, lsl #24
 3562              	.LVL373:
2369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_TCP_WIN != 0 )
 3563              		.loc 1 2369 0
 3564 07e8 3030D7E5 		ldrb	r3, [r7, #48]	@ zero_extendqisi2
 3565 07ec 022483E1 		orr	r2, r3, r2, lsl #8
 3566 07f0 2234A0E1 		lsr	r3, r2, #8
 3567 07f4 023483E1 		orr	r3, r3, r2, lsl #8
2373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3568              		.loc 1 2373 0
 3569 07f8 C220D4E5 		ldrb	r2, [r4, #194]	@ zero_extendqisi2
2369:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	#if( ipconfigUSE_TCP_WIN != 0 )
 3570              		.loc 1 2369 0
 3571 07fc 7330FFE6 		uxth	r3, r3
2373:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3572              		.loc 1 2373 0
 3573 0800 1332A0E1 		lsl	r3, r3, r2
2372:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 3574              		.loc 1 2372 0
 3575 0804 C43084E5 		str	r3, [r4, #196]
2377:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3576              		.loc 1 2377 0
 3577 0808 1E00000A 		beq	.L268
2379:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3578              		.loc 1 2379 0
 3579 080c 2B20D7E5 		ldrb	r2, [r7, #43]	@ zero_extendqisi2
 3580 0810 0800A0E1 		mov	r0, r8
 3581 0814 2A30D7E5 		ldrb	r3, [r7, #42]	@ zero_extendqisi2
 3582 0818 2C10D7E5 		ldrb	r1, [r7, #44]	@ zero_extendqisi2
 3583 081c 023483E1 		orr	r3, r3, r2, lsl #8
 3584 0820 013883E1 		orr	r3, r3, r1, lsl #16
 3585 0824 2D10D7E5 		ldrb	r1, [r7, #45]	@ zero_extendqisi2
 3586 0828 013C83E1 		orr	r3, r3, r1, lsl #24
 3587 082c 231CA0E1 		lsr	r1, r3, #24
 3588 0830 0324A0E1 		lsl	r2, r3, #8
 3589 0834 031C81E1 		orr	r1, r1, r3, lsl #24
 3590 0838 2334A0E1 		lsr	r3, r3, #8
 3591 083c FF2802E2 		and	r2, r2, #16711680
 3592 0840 FF3C03E2 		and	r3, r3, #65280
 3593 0844 021081E1 		orr	r1, r1, r2
 3594 0848 031081E1 		orr	r1, r1, r3
 3595 084c FEFFFFEB 		bl	ulTCPWindowTxAck
 3596              	.LVL374:
2384:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3597              		.loc 1 2384 0
 3598 0850 70C094E5 		ldr	ip, [r4, #112]
 3599 0854 0030A0E1 		mov	r3, r0
 3600 0858 00005CE3 		cmp	ip, #0
 3601 085c 00005013 		cmpne	r0, #0
 3602 0860 0800000A 		beq	.L268
2390:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3603              		.loc 1 2390 0
 3604 0864 0020A0E3 		mov	r2, #0
 3605 0868 0C00A0E1 		mov	r0, ip
 3606              	.LVL375:
 3607 086c 00208DE5 		str	r2, [sp]
 3608 0870 0210A0E1 		mov	r1, r2
 3609 0874 FEFFFFEB 		bl	uxStreamBufferGet
 3610              	.LVL376:
 3611 0878 000050E3 		cmp	r0, #0
2392:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3612              		.loc 1 2392 0
 3613 087c 00309415 		ldrne	r3, [r4]
 3614 0880 02308313 		orrne	r3, r3, #2
 3615 0884 00308415 		strne	r3, [r4]
 3616              	.L268:
2418:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3617              		.loc 1 2418 0
 3618 0888 703094E5 		ldr	r3, [r4, #112]
 3619 088c 000053E3 		cmp	r3, #0
 3620 0890 0100000A 		beq	.L270
2420:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3621              		.loc 1 2420 0
 3622 0894 0400A0E1 		mov	r0, r4
 3623 0898 FEFFFFEB 		bl	prvTCPAddTxData
 3624              	.LVL377:
 3625              	.L270:
2423:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3626              		.loc 1 2423 0
 3627 089c F43094E5 		ldr	r3, [r4, #244]
 3628 08a0 003184E5 		str	r3, [r4, #256]
2425:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3629              		.loc 1 2425 0
 3630 08a4 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 3631 08a8 100013E3 		tst	r3, #16
 3632 08ac 0100001A 		bne	.L271
 3633 08b0 01001AE3 		tst	r10, #1
 3634 08b4 E100000A 		beq	.L272
 3635              	.L271:
 3636              	.LVL378:
2431:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3637              		.loc 1 2431 0
 3638 08b8 200013E3 		tst	r3, #32
 3639 08bc 1400001A 		bne	.L273
2434:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			bTxDone	 = xTCPWindowTxDone( pxTCPWindow );
 3640              		.loc 1 2434 0
 3641 08c0 0800A0E1 		mov	r0, r8
 3642 08c4 FEFFFFEB 		bl	xTCPWindowRxEmpty
 3643              	.LVL379:
 3644 08c8 00A0A0E1 		mov	r10, r0
 3645              	.LVL380:
2435:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3646              		.loc 1 2435 0
 3647 08cc 0800A0E1 		mov	r0, r8
 3648              	.LVL381:
 3649 08d0 FEFFFFEB 		bl	xTCPWindowTxDone
 3650              	.LVL382:
2437:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3651              		.loc 1 2437 0
 3652 08d4 000050E3 		cmp	r0, #0
 3653 08d8 00005A13 		cmpne	r10, #0
 3654 08dc D700000A 		beq	.L272
 3655              	.LVL383:
2364:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 3656              		.loc 1 2364 0
 3657 08e0 253CA0E1 		lsr	r3, r5, #24
 3658 08e4 0524A0E1 		lsl	r2, r5, #8
 3659 08e8 053C83E1 		orr	r3, r3, r5, lsl #24
 3660 08ec 2554A0E1 		lsr	r5, r5, #8
 3661              	.LVL384:
 3662 08f0 FF2802E2 		and	r2, r2, #16711680
 3663 08f4 FF5C05E2 		and	r5, r5, #65280
 3664 08f8 023083E1 		orr	r3, r3, r2
 3665 08fc 053083E1 		orr	r3, r3, r5
2448:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3666              		.loc 1 2448 0
 3667 0900 E45094E5 		ldr	r5, [r4, #228]
 3668 0904 053043E0 		sub	r3, r3, r5
 3669 0908 063083E0 		add	r3, r3, r6
2450:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				{
 3670              		.loc 1 2450 0
 3671 090c 010053E3 		cmp	r3, #1
 3672 0910 CA0000CA 		bgt	.L272
 3673              	.LVL385:
 3674              	.L273:
2470:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 3675              		.loc 1 2470 0
 3676 0914 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 3677 0918 103083E3 		orr	r3, r3, #16
 3678 091c 3930C4E5 		strb	r3, [r4, #57]
 3679              	.LVL386:
 3680              	.L256:
 3681              	.LBE288:
 3682              	.LBE287:
2806:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			break;
 3683              		.loc 1 2806 0
 3684 0920 14309DE5 		ldr	r3, [sp, #20]
 3685 0924 0400A0E1 		mov	r0, r4
 3686 0928 181093E5 		ldr	r1, [r3, #24]
 3687 092c FEFFFFEB 		bl	prvTCPHandleFin.isra.2
 3688              	.LVL387:
 3689 0930 0050A0E1 		mov	r5, r0
 3690              	.LVL388:
 3691 0934 99FFFFEA 		b	.L266
 3692              	.LVL389:
 3693              	.L293:
 3694              	.LBB291:
 3695              	.LBB289:
2483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3696              		.loc 1 2483 0
 3697 0938 143089E2 		add	r3, r9, #20
2481:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			/* TCP-offsett equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
 3698              		.loc 1 2481 0
 3699 093c 285089E2 		add	r5, r9, #40
 3700              	.LVL390:
2483:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3701              		.loc 1 2483 0
 3702 0940 0331A0E1 		lsl	r3, r3, #2
 3703 0944 2E30C7E5 		strb	r3, [r7, #46]
2485:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3704              		.loc 1 2485 0
 3705 0948 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 3706 094c 200013E3 		tst	r3, #32
2487:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3707              		.loc 1 2487 0
 3708 0950 F8309415 		ldrne	r3, [r4, #248]
 3709 0954 F4308415 		strne	r3, [r4, #244]
2496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3710              		.loc 1 2496 0
 3711 0958 000059E3 		cmp	r9, #0
 3712 095c FCFEFF1A 		bne	.L259
 3713              	.LVL391:
 3714              	.L295:
2500:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( lSendResult > 0 )
 3715              		.loc 1 2500 0
 3716 0960 0020A0E3 		mov	r2, #0
 3717 0964 14108DE2 		add	r1, sp, #20
 3718              	.LVL392:
 3719 0968 0400A0E1 		mov	r0, r4
 3720 096c FEFFFFEB 		bl	prvTCPPrepareSend
 3721              	.LVL393:
2501:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3722              		.loc 1 2501 0
 3723 0970 000050E3 		cmp	r0, #0
 3724 0974 0050A0C1 		movgt	r5, r0
 3725 0978 F5FEFFCA 		bgt	.L259
 3726 097c 87FFFFEA 		b	.L266
 3727              	.LVL394:
 3728              	.L277:
 3729              	.LBE289:
 3730              	.LBE291:
 3731              	.LBB292:
 3732              	.LBB280:
2606:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3733              		.loc 1 2606 0
 3734 0980 000050E3 		cmp	r0, #0
 3735 0984 0400000A 		beq	.L283
2610:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3736              		.loc 1 2610 0
 3737 0988 000051E1 		cmp	r1, r0
 3738 098c 0000000A 		beq	.L284
2612:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3739              		.loc 1 2612 0
 3740 0990 FEFFFFEB 		bl	vReleaseNetworkBufferAndDescriptor
 3741              	.LVL395:
 3742              	.L284:
2615:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 3743              		.loc 1 2615 0
 3744 0994 0030A0E3 		mov	r3, #0
 3745 0998 743084E5 		str	r3, [r4, #116]
 3746              	.L283:
2641:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		#if( ipconfigZERO_COPY_TX_DRIVER != 0 )
 3747              		.loc 1 2641 0
 3748 099c 0520A0E1 		mov	r2, r5
 3749 09a0 20508DE2 		add	r5, sp, #32
 3750              	.LVL396:
 3751 09a4 0C1035E5 		ldr	r1, [r5, #-12]!
 3752 09a8 0400A0E1 		mov	r0, r4
 3753 09ac FEFFFFEB 		bl	prvTCPReturnPacket.constprop.3
 3754              	.LVL397:
 3755              	.LBE280:
 3756              	.LBE292:
 3757              	.LBE297:
 3758              	.LBE301:
3053:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3759              		.loc 1 3053 0
 3760 09b0 0400A0E1 		mov	r0, r4
 3761 09b4 0510A0E1 		mov	r1, r5
 3762 09b8 FEFFFFEB 		bl	prvTCPSendRepeated
 3763              	.LVL398:
 3764 09bc 88FEFFEA 		b	.L251
 3765              	.LVL399:
 3766              	.L224:
2950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3767              		.loc 1 2950 0
 3768 09c0 010058E3 		cmp	r8, #1
2948:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3769              		.loc 1 2948 0
 3770 09c4 0060A0E3 		mov	r6, #0
 3771 09c8 4A60C4E5 		strb	r6, [r4, #74]
2950:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3772              		.loc 1 2950 0
 3773 09cc 8EFEFF1A 		bne	.L355
2954:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3774              		.loc 1 2954 0
 3775 09d0 1F7009E2 		and	r7, r9, #31
 3776 09d4 020057E3 		cmp	r7, #2
 3777 09d8 CAFDFF1A 		bne	.L365
2977:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3778              		.loc 1 2977 0
 3779 09dc 14909DE5 		ldr	r9, [sp, #20]
 3780              	.LVL400:
 3781              	.LBB302:
 3782              	.LBB236:
3086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 																  pxSocket->usLocalPort,
 3783              		.loc 1 3086 0
 3784 09e0 78B29FE5 		ldr	fp, .L367
3080:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *pxReturn = NULL;
 3785              		.loc 1 3080 0
 3786 09e4 186099E5 		ldr	r6, [r9, #24]
 3787              	.LVL401:
3086:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 																  pxSocket->usLocalPort,
 3788              		.loc 1 3086 0
 3789 09e8 1B10D6E5 		ldrb	r1, [r6, #27]	@ zero_extendqisi2
 3790 09ec 1A20D6E5 		ldrb	r2, [r6, #26]	@ zero_extendqisi2
 3791 09f0 2300D6E5 		ldrb	r0, [r6, #35]	@ zero_extendqisi2
 3792              	.LVL402:
 3793 09f4 2230D6E5 		ldrb	r3, [r6, #34]	@ zero_extendqisi2
 3794 09f8 012482E1 		orr	r2, r2, r1, lsl #8
 3795 09fc 1C10D6E5 		ldrb	r1, [r6, #28]	@ zero_extendqisi2
 3796 0a00 003483E1 		orr	r3, r3, r0, lsl #8
 3797 0a04 14009BE5 		ldr	r0, [fp, #20]
 3798 0a08 012882E1 		orr	r2, r2, r1, lsl #16
 3799 0a0c 1D10D6E5 		ldrb	r1, [r6, #29]	@ zero_extendqisi2
 3800 0a10 012C82E1 		orr	r2, r2, r1, lsl #24
 3801 0a14 B412D4E1 		ldrh	r1, [r4, #36]
 3802 0a18 FEFFFFEB 		bl	ulApplicationGetNextSequenceNumber
 3803              	.LVL403:
3093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3804              		.loc 1 3093 0
 3805 0a1c 00A050E2 		subs	r10, r0, #0
3081:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** uint32_t ulInitialSequenceNumber;
 3806              		.loc 1 3081 0
 3807 0a20 0A40A001 		moveq	r4, r10
 3808              	.LVL404:
3093:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3809              		.loc 1 3093 0
 3810 0a24 1500000A 		beq	.L227
3095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3811              		.loc 1 3095 0
 3812 0a28 3830D4E5 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 3813 0a2c 082013E2 		ands	r2, r3, #8
3100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 3814              		.loc 1 3100 0
 3815 0a30 04308313 		orrne	r3, r3, #4
3095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3816              		.loc 1 3095 0
 3817 0a34 0C208DE5 		str	r2, [sp, #12]
3100:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 3818              		.loc 1 3100 0
 3819 0a38 3830C415 		strbne	r3, [r4, #56]
3101:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 3820              		.loc 1 3101 0
 3821 0a3c 4C408415 		strne	r4, [r4, #76]
3095:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3822              		.loc 1 3095 0
 3823 0a40 0E00001A 		bne	.L227
3109:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3824              		.loc 1 3109 0
 3825 0a44 B624D4E1 		ldrh	r2, [r4, #70]
 3826 0a48 B834D4E1 		ldrh	r3, [r4, #72]
 3827 0a4c 030052E1 		cmp	r2, r3
 3828 0a50 B1FDFF3A 		bcc	.L229
3111:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 					pxSocket->usLocalPort,
 3829              		.loc 1 3111 0
 3830 0a54 08C29FE5 		ldr	ip, .L367+4
 3831 0a58 010052E3 		cmp	r2, #1
 3832 0a5c 04029FE5 		ldr	r0, .L367+8
 3833              	.LVL405:
 3834 0a60 B412D4E1 		ldrh	r1, [r4, #36]
 3835 0a64 0C00A011 		movne	r0, ip
 3836 0a68 00008DE5 		str	r0, [sp]
 3837 0a6c F8019FE5 		ldr	r0, .L367+12
 3838 0a70 FEFFFFEB 		bl	vLoggingPrintf
 3839              	.LVL406:
 3840              	.L366:
 3841              	.LBB235:
3126:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				}
 3842              		.loc 1 3126 0
 3843 0a74 0900A0E1 		mov	r0, r9
 3844 0a78 FEFFFFEB 		bl	prvTCPSendReset
 3845              	.LVL407:
 3846              	.L359:
 3847              	.LBE235:
3107:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3848              		.loc 1 3107 0
 3849 0a7c 0C409DE5 		ldr	r4, [sp, #12]
 3850              	.L227:
 3851              	.LVL408:
3140:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 3852              		.loc 1 3140 0
 3853 0a80 00005AE3 		cmp	r10, #0
 3854 0a84 00005413 		cmpne	r4, #0
 3855 0a88 D4FDFF0A 		beq	.L233
3142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 3856              		.loc 1 3142 0
 3857 0a8c 2320D6E5 		ldrb	r2, [r6, #35]	@ zero_extendqisi2
3148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3858              		.loc 1 3148 0
 3859 0a90 0400A0E1 		mov	r0, r4
3142:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 3860              		.loc 1 3142 0
 3861 0a94 2230D6E5 		ldrb	r3, [r6, #34]	@ zero_extendqisi2
 3862 0a98 023483E1 		orr	r3, r3, r2, lsl #8
 3863 0a9c 2324A0E1 		lsr	r2, r3, #8
 3864 0aa0 033482E1 		orr	r3, r2, r3, lsl #8
 3865 0aa4 B433C4E1 		strh	r3, [r4, #52]	@ movhi
3143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 3866              		.loc 1 3143 0
 3867 0aa8 1B20D6E5 		ldrb	r2, [r6, #27]	@ zero_extendqisi2
 3868 0aac 1A30D6E5 		ldrb	r3, [r6, #26]	@ zero_extendqisi2
 3869 0ab0 023483E1 		orr	r3, r3, r2, lsl #8
 3870 0ab4 1C20D6E5 		ldrb	r2, [r6, #28]	@ zero_extendqisi2
 3871 0ab8 023883E1 		orr	r3, r3, r2, lsl #16
 3872 0abc 1D20D6E5 		ldrb	r2, [r6, #29]	@ zero_extendqisi2
3144:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3873              		.loc 1 3144 0
 3874 0ac0 00A184E5 		str	r10, [r4, #256]
3143:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 3875              		.loc 1 3143 0
 3876 0ac4 023C83E1 		orr	r3, r3, r2, lsl #24
 3877 0ac8 232CA0E1 		lsr	r2, r3, #24
 3878 0acc 0314A0E1 		lsl	r1, r3, #8
 3879 0ad0 032C82E1 		orr	r2, r2, r3, lsl #24
 3880 0ad4 2334A0E1 		lsr	r3, r3, #8
 3881 0ad8 FF1801E2 		and	r1, r1, #16711680
 3882 0adc FF3C03E2 		and	r3, r3, #65280
 3883 0ae0 012082E1 		orr	r2, r2, r1
 3884 0ae4 033082E1 		orr	r3, r2, r3
 3885 0ae8 303084E5 		str	r3, [r4, #48]
3147:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		prvSocketSetMSS( pxReturn );
 3886              		.loc 1 3147 0
 3887 0aec 2720D6E5 		ldrb	r2, [r6, #39]	@ zero_extendqisi2
 3888 0af0 2630D6E5 		ldrb	r3, [r6, #38]	@ zero_extendqisi2
 3889 0af4 023483E1 		orr	r3, r3, r2, lsl #8
 3890 0af8 2820D6E5 		ldrb	r2, [r6, #40]	@ zero_extendqisi2
 3891 0afc 023883E1 		orr	r3, r3, r2, lsl #16
 3892 0b00 2920D6E5 		ldrb	r2, [r6, #41]	@ zero_extendqisi2
 3893 0b04 023C83E1 		orr	r3, r3, r2, lsl #24
 3894 0b08 232CA0E1 		lsr	r2, r3, #24
 3895 0b0c 0314A0E1 		lsl	r1, r3, #8
 3896 0b10 032C82E1 		orr	r2, r2, r3, lsl #24
 3897 0b14 2334A0E1 		lsr	r3, r3, #8
 3898 0b18 FF1801E2 		and	r1, r1, #16711680
 3899 0b1c FF3C03E2 		and	r3, r3, #65280
 3900 0b20 012082E1 		orr	r2, r2, r1
 3901 0b24 033082E1 		orr	r3, r2, r3
 3902 0b28 E43084E5 		str	r3, [r4, #228]
3148:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3903              		.loc 1 3148 0
 3904 0b2c FEFFFFEB 		bl	prvSocketSetMSS
 3905              	.LVL409:
3150:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3906              		.loc 1 3150 0
 3907 0b30 0400A0E1 		mov	r0, r4
 3908 0b34 FEFFFFEB 		bl	prvTCPCreateWindow
 3909              	.LVL410:
3152:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3910              		.loc 1 3152 0
 3911 0b38 0310A0E3 		mov	r1, #3
 3912 0b3c 0400A0E1 		mov	r0, r4
 3913 0b40 FEFFFFEB 		bl	vTCPStateChange
 3914              	.LVL411:
3156:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3915              		.loc 1 3156 0
 3916 0b44 181099E5 		ldr	r1, [r9, #24]
 3917 0b48 4620A0E3 		mov	r2, #70
 3918 0b4c 7A0084E2 		add	r0, r4, #122
 3919              	.LVL412:
 3920              	.L362:
 3921              	.LBE236:
 3922              	.LBE302:
 3923              	.LBB303:
3014:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3924              		.loc 1 3014 0
 3925 0b50 FEFFFFEB 		bl	memcpy
 3926              	.LVL413:
 3927 0b54 A3FDFFEA 		b	.L234
 3928              	.LVL414:
 3929              	.L243:
 3930              	.LBE303:
 3931              	.LBB304:
 3932              	.LBB298:
 3933              	.LBB293:
 3934              	.LBB255:
2182:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 3935              		.loc 1 2182 0
 3936 0b58 043194E5 		ldr	r3, [r4, #260]
 3937 0b5c 000053E3 		cmp	r3, #0
 3938 0b60 0500000A 		beq	.L245
2184:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxTCPWindow->ulUserDataLength = 0;
 3939              		.loc 1 2184 0
 3940 0b64 0020A0E3 		mov	r2, #0
 3941 0b68 0400A0E1 		mov	r0, r4
 3942 0b6c 0210A0E1 		mov	r1, r2
 3943 0b70 FEFFFFEB 		bl	lTCPAddRxdata
 3944              	.LVL415:
2185:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 3945              		.loc 1 2185 0
 3946 0b74 0030A0E3 		mov	r3, #0
 3947 0b78 043184E5 		str	r3, [r4, #260]
 3948              	.L245:
 3949              	.LVL416:
 3950              	.LBE255:
 3951              	.LBE293:
 3952              	.LBB294:
 3953              	.LBB260:
2205:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3954              		.loc 1 2205 0
 3955 0b7c 1091D4E5 		ldrb	r9, [r4, #272]	@ zero_extendqisi2
 3956              	.LVL417:
 3957 0b80 14309DE5 		ldr	r3, [sp, #20]
2208:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3958              		.loc 1 2208 0
 3959 0b84 000059E3 		cmp	r9, #0
 3960 0b88 18B093E5 		ldr	fp, [r3, #24]
 3961              	.LVL418:
 3962 0b8c 34FEFF0A 		beq	.L356
2219:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 3963              		.loc 1 2219 0
 3964 0b90 0920A0E1 		mov	r2, r9
 3965 0b94 551F84E2 		add	r1, r4, #340
 3966 0b98 36008BE2 		add	r0, fp, #54
 3967 0b9c FEFFFFEB 		bl	memcpy
 3968              	.LVL419:
2223:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 3969              		.loc 1 2223 0
 3970 0ba0 143089E2 		add	r3, r9, #20
 3971 0ba4 0331A0E1 		lsl	r3, r3, #2
 3972              	.LVL420:
 3973              	.L360:
2241:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 3974              		.loc 1 2241 0
 3975 0ba8 2E30CBE5 		strb	r3, [fp, #46]
 3976              	.L246:
 3977              	.LVL421:
 3978              	.LBE260:
 3979              	.LBE294:
2719:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3980              		.loc 1 2719 0
 3981 0bac 4B30D4E5 		ldrb	r3, [r4, #75]	@ zero_extendqisi2
 3982 0bb0 040053E3 		cmp	r3, #4
 3983 0bb4 0600001A 		bne	.L247
 3984 0bb8 0C309DE5 		ldr	r3, [sp, #12]
 3985 0bbc 1F3003E2 		and	r3, r3, #31
 3986 0bc0 020053E3 		cmp	r3, #2
 3987 0bc4 0200001A 		bne	.L247
2727:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
 3988              		.loc 1 2727 0
 3989 0bc8 0310A0E3 		mov	r1, #3
 3990 0bcc 0400A0E1 		mov	r0, r4
 3991 0bd0 FEFFFFEB 		bl	vTCPStateChange
 3992              	.LVL422:
 3993              	.L247:
2730:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 3994              		.loc 1 2730 0
 3995 0bd4 0C309DE5 		ldr	r3, [sp, #12]
 3996 0bd8 010013E3 		tst	r3, #1
 3997 0bdc 0900000A 		beq	.L249
 3998 0be0 3930D4E5 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 3999 0be4 400013E3 		tst	r3, #64
 4000 0be8 0600001A 		bne	.L249
2735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 4001              		.loc 1 2735 0
 4002 0bec 403083E3 		orr	r3, r3, #64
2734:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 4003              		.loc 1 2734 0
 4004 0bf0 E8A084E5 		str	r10, [r4, #232]
2738:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
 4005              		.loc 1 2738 0
 4006 0bf4 200013E3 		tst	r3, #32
2735:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 4007              		.loc 1 2735 0
 4008 0bf8 3930C4E5 		strb	r3, [r4, #57]
2741:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
 4009              		.loc 1 2741 0
 4010 0bfc 3A30D405 		ldrbeq	r3, [r4, #58]	@ zero_extendqisi2
 4011 0c00 01308303 		orreq	r3, r3, #1
 4012 0c04 3A30C405 		strbeq	r3, [r4, #58]
 4013              	.L249:
2745:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 4014              		.loc 1 2745 0
 4015 0c08 4B20D4E5 		ldrb	r2, [r4, #75]	@ zero_extendqisi2
 4016 0c0c 023042E2 		sub	r3, r2, #2
 4017 0c10 080053E3 		cmp	r3, #8
 4018 0c14 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 4019 0c18 F1FDFFEA 		b	.L251
 4020              	.L253:
 4021 0c1c 58060000 		.word	.L252
 4022 0c20 AC040000 		.word	.L254
 4023 0c24 58060000 		.word	.L252
 4024 0c28 B8070000 		.word	.L255
 4025 0c2c 20090000 		.word	.L256
 4026 0c30 20090000 		.word	.L256
 4027 0c34 E4030000 		.word	.L251
 4028 0c38 E4030000 		.word	.L251
 4029 0c3c 20090000 		.word	.L256
 4030              	.LVL423:
 4031              	.L272:
 4032              	.LBB295:
 4033              	.LBB290:
2479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 4034              		.loc 1 2479 0
 4035 0c40 000056E3 		cmp	r6, #0
2477:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 4036              		.loc 1 2477 0
 4037 0c44 1030A0E3 		mov	r3, #16
 4038 0c48 2F30C7E5 		strb	r3, [r7, #47]
2479:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 4039              		.loc 1 2479 0
 4040 0c4c 39FFFF1A 		bne	.L293
2496:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 4041              		.loc 1 2496 0
 4042 0c50 000059E3 		cmp	r9, #0
 4043 0c54 E2FDFF1A 		bne	.L251
 4044 0c58 0650A0E1 		mov	r5, r6
 4045 0c5c 3FFFFFEA 		b	.L295
 4046              	.L368:
 4047              		.align	2
 4048              	.L367:
 4049 0c60 00000000 		.word	xDefaultPartUDPPacketHeader
 4050 0c64 01000000 		.word	.LC1
 4051 0c68 00000000 		.word	.LC0
 4052 0c6c 05000000 		.word	.LC2
 4053              	.LBE290:
 4054              	.LBE295:
 4055              	.LBE298:
 4056              	.LBE304:
 4057              		.cfi_endproc
 4058              	.LFE52:
 4060              		.section	.text.FreeRTOS_GetTCPStateName,"ax",%progbits
 4061              		.align	2
 4062              		.global	FreeRTOS_GetTCPStateName
 4063              		.syntax unified
 4064              		.arm
 4065              		.fpu neon
 4067              	FreeRTOS_GetTCPStateName:
 4068              	.LFB55:
3249:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		return pdFALSE;
3250:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
3251:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3252:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return pdTRUE;
3253:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
3254:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
3255:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3256:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #if( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
3257:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3258:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	const char *FreeRTOS_GetTCPStateName( UBaseType_t ulState )
3259:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 4069              		.loc 1 3259 0
 4070              		.cfi_startproc
 4071              		@ args = 0, pretend = 0, frame = 0
 4072              		@ frame_needed = 0, uses_anonymous_args = 0
 4073              		@ link register save eliminated.
 4074              	.LVL424:
3260:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( ulState >= ( UBaseType_t ) ARRAY_SIZE( pcStateNames ) )
3261:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
3262:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			ulState = ( UBaseType_t ) ARRAY_SIZE( pcStateNames ) - 1u;
3263:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
3264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		return pcStateNames[ ulState ];
3265:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 4075              		.loc 1 3265 0
 4076 0000 0C309FE5 		ldr	r3, .L370
3264:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
 4077              		.loc 1 3264 0
 4078 0004 0C0050E3 		cmp	r0, #12
 4079 0008 0C00A023 		movcs	r0, #12
 4080              	.LVL425:
 4081              		.loc 1 3265 0
 4082 000c 000193E7 		ldr	r0, [r3, r0, lsl #2]
 4083 0010 1EFF2FE1 		bx	lr
 4084              	.L371:
 4085              		.align	2
 4086              	.L370:
 4087 0014 00000000 		.word	.LANCHOR0
 4088              		.cfi_endproc
 4089              	.LFE55:
 4091              		.section	.text.xTCPCheckNewClient,"ax",%progbits
 4092              		.align	2
 4093              		.global	xTCPCheckNewClient
 4094              		.syntax unified
 4095              		.arm
 4096              		.fpu neon
 4098              	xTCPCheckNewClient:
 4099              	.LFB56:
3266:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3267:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** #endif /* ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) ) */
3268:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*-----------------------------------------------------------*/
3269:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3270:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** /*
3271:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * In the API accept(), the user asks is there is a new client?  As API's can
3272:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  * not walk through the xBoundTCPSocketsList the IP-task will do this.
3273:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c ****  */
3274:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
3275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** {
 4100              		.loc 1 3275 0
 4101              		.cfi_startproc
 4102              		@ args = 0, pretend = 0, frame = 0
 4103              		@ frame_needed = 0, uses_anonymous_args = 0
 4104              	.LVL426:
3276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 4105              		.loc 1 3276 0
 4106 0000 B432D0E1 		ldrh	r3, [r0, #36]
3277:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** ListItem_t *pxIterator;
3278:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** FreeRTOS_Socket_t *pxFound;
3279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** BaseType_t xResult = pdFALSE;
3280:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
3281:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
3282:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	who has access. */
3283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 4107              		.loc 1 3283 0
 4108 0004 80109FE5 		ldr	r1, .L388
3276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 4109              		.loc 1 3276 0
 4110 0008 2324A0E1 		lsr	r2, r3, #8
 4111              		.loc 1 3283 0
 4112 000c 081081E2 		add	r1, r1, #8
3276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 4113              		.loc 1 3276 0
 4114 0010 032482E1 		orr	r2, r2, r3, lsl #8
 4115              		.loc 1 3283 0
 4116 0014 043091E5 		ldr	r3, [r1, #4]
3276:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 4117              		.loc 1 3276 0
 4118 0018 7220FFE6 		uxth	r2, r2
 4119              	.LVL427:
 4120              	.L381:
 4121              		.loc 1 3283 0
 4122 001c 010053E1 		cmp	r3, r1
 4123 0020 1300001A 		bne	.L384
3279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 4124              		.loc 1 3279 0
 4125 0024 0000A0E3 		mov	r0, #0
 4126              	.LVL428:
 4127 0028 1EFF2FE1 		bx	lr
 4128              	.LVL429:
 4129              	.L376:
 4130              		.cfi_def_cfa_offset 4
 4131              		.cfi_offset 14, -4
3284:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
3285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
3286:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
3287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
 4132              		.loc 1 3287 0
 4133 002c 00C093E5 		ldr	ip, [r3]
 4134 0030 0C0052E1 		cmp	r2, ip
 4135 0034 0900001A 		bne	.L374
 4136              	.L382:
3288:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
3289:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 4137              		.loc 1 3289 0
 4138 0038 0CC093E5 		ldr	ip, [r3, #12]
 4139              	.LVL430:
3290:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdF
 4140              		.loc 1 3290 0
 4141 003c 27E0DCE5 		ldrb	lr, [ip, #39]	@ zero_extendqisi2
 4142 0040 06005EE3 		cmp	lr, #6
 4143 0044 0500001A 		bne	.L374
 4144              		.loc 1 3290 0 is_stmt 0 discriminator 1
 4145 0048 38E0DCE5 		ldrb	lr, [ip, #56]	@ zero_extendqisi2
 4146 004c 02001EE3 		tst	lr, #2
 4147 0050 0200000A 		beq	.L374
3291:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			{
3292:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 4148              		.loc 1 3292 0 is_stmt 1
 4149 0054 4CC080E5 		str	ip, [r0, #76]
 4150              	.LVL431:
3293:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) 
3294:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				xResult = pdTRUE;
 4151              		.loc 1 3294 0
 4152 0058 0100A0E3 		mov	r0, #1
 4153              	.LVL432:
3295:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 				break;
 4154              		.loc 1 3295 0
 4155 005c 04F09DE4 		ldr	pc, [sp], #4
 4156              	.LVL433:
 4157              	.L374:
3285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 4158              		.loc 1 3285 0
 4159 0060 043093E5 		ldr	r3, [r3, #4]
 4160              	.LVL434:
3283:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 4161              		.loc 1 3283 0
 4162 0064 010053E1 		cmp	r3, r1
 4163 0068 EFFFFF1A 		bne	.L376
3279:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 
 4164              		.loc 1 3279 0
 4165 006c 0000A0E3 		mov	r0, #0
 4166              	.LVL435:
3296:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 			}
3297:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		}
3298:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	}
3299:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	return xResult;
3300:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** }
 4167              		.loc 1 3300 0
 4168 0070 04F09DE4 		ldr	pc, [sp], #4
 4169              	.LVL436:
 4170              	.L384:
 4171              		.cfi_def_cfa_offset 0
 4172              		.cfi_restore 14
3287:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 		{
 4173              		.loc 1 3287 0
 4174 0074 00C093E5 		ldr	ip, [r3]
 4175 0078 0C0052E1 		cmp	r2, ip
3275:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 4176              		.loc 1 3275 0
 4177 007c 04E02D05 		streq	lr, [sp, #-4]!
 4178              		.cfi_def_cfa_offset 4
 4179              		.cfi_offset 14, -4
 4180 0080 ECFFFF0A 		beq	.L382
 4181              	.L383:
 4182              		.cfi_def_cfa_offset 0
 4183              		.cfi_restore 14
3285:D:/Work/DeviceTester/amazon-freertos/lib/FreeRTOS-Plus-TCP/source\FreeRTOS_TCP_IP.c **** 	{
 4184              		.loc 1 3285 0
 4185 0084 043093E5 		ldr	r3, [r3, #4]
 4186              	.LVL437:
 4187 0088 E3FFFFEA 		b	.L381
 4188              	.L389:
 4189              		.align	2
 4190              	.L388:
 4191 008c 00000000 		.word	xBoundTCPSocketsList
 4192              		.cfi_endproc
 4193              	.LFE56:
 4195              		.section	.text.TEST_FreeRTOS_TCP_prvCheckOptions,"ax",%progbits
 4196              		.align	2
 4197              		.global	TEST_FreeRTOS_TCP_prvCheckOptions
 4198              		.syntax unified
 4199              		.arm
 4200              		.fpu neon
 4202              	TEST_FreeRTOS_TCP_prvCheckOptions:
 4203              	.LFB57:
 4204              		.file 5 "D:\\Work\\DeviceTester\\amazon-freertos\\tests\\common\\include/aws_freertos_tcp_test_acc
   1:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** /*
   2:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * Amazon FreeRTOS
   3:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  *
   5:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * the Software without restriction, including without limitation the rights to
   8:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * subject to the following conditions:
  11:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  *
  12:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * The above copyright notice and this permission notice shall be included in all
  13:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * copies or substantial portions of the Software.
  14:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  *
  15:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  *
  22:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * http://aws.amazon.com/freertos
  23:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * http://www.FreeRTOS.org
  24:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  */
  25:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** 
  26:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** /**
  27:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * @file aws_ota_pal_test_access_define.h
  28:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * @brief Function wrappers that access private methods in aws_ota_pal.c.
  29:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  *
  30:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  * Needed for testing private functions.
  31:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****  */
  32:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** 
  33:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** #ifndef _AWS_FREERTOS_TCP_TEST_ACCESS_TCP_DEFINE_H_
  34:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** #define _AWS_FREERTOS_TCP_TEST_ACCESS_TCP_DEFINE_H_
  35:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** 
  36:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** #include "aws_freertos_tcp_test_access_declare.h"
  37:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** 
  38:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** /*-----------------------------------------------------------*/
  39:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** 
  40:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** void TEST_FreeRTOS_TCP_prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
  41:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
  42:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** {
 4205              		.loc 5 42 0
 4206              		.cfi_startproc
 4207              		@ args = 0, pretend = 0, frame = 0
 4208              		@ frame_needed = 0, uses_anonymous_args = 0
 4209              		@ link register save eliminated.
 4210              	.LVL438:
  43:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****     prvCheckOptions( pxSocket, pxNetworkBuffer );
 4211              		.loc 5 43 0
 4212 0000 FEFFFFEA 		b	prvCheckOptions
 4213              	.LVL439:
 4214              		.cfi_endproc
 4215              	.LFE57:
 4217              		.section	.text.TEST_FreeRTOS_TCP_prvTCPCreateWindow,"ax",%progbits
 4218              		.align	2
 4219              		.global	TEST_FreeRTOS_TCP_prvTCPCreateWindow
 4220              		.syntax unified
 4221              		.arm
 4222              		.fpu neon
 4224              	TEST_FreeRTOS_TCP_prvTCPCreateWindow:
 4225              	.LFB58:
  44:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** }
  45:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** /*-----------------------------------------------------------*/
  46:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** 
  47:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** void TEST_FreeRTOS_TCP_prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
  48:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h **** {
 4226              		.loc 5 48 0
 4227              		.cfi_startproc
 4228              		@ args = 0, pretend = 0, frame = 0
 4229              		@ frame_needed = 0, uses_anonymous_args = 0
 4230              		@ link register save eliminated.
 4231              	.LVL440:
  49:D:\Work\DeviceTester\amazon-freertos\tests\common\include\aws_freertos_tcp_test_access_tcp_define.h ****     prvTCPCreateWindow( pxSocket );
 4232              		.loc 5 49 0
 4233 0000 FEFFFFEA 		b	prvTCPCreateWindow
 4234              	.LVL441:
 4235              		.cfi_endproc
 4236              	.LFE58:
 4238              		.section	.rodata.pcStateNames,"a",%progbits
 4239              		.align	2
 4240              		.set	.LANCHOR0,. + 0
 4243              	pcStateNames:
 4244 0000 00000000 		.word	.LC3
 4245 0004 08000000 		.word	.LC4
 4246 0008 14000000 		.word	.LC5
 4247 000c 21000000 		.word	.LC6
 4248 0010 2C000000 		.word	.LC7
 4249 0014 3A000000 		.word	.LC8
 4250 0018 47000000 		.word	.LC9
 4251 001c 53000000 		.word	.LC10
 4252 0020 5F000000 		.word	.LC11
 4253 0024 6B000000 		.word	.LC12
 4254 0028 74000000 		.word	.LC13
 4255 002c 7E000000 		.word	.LC14
 4256 0030 89000000 		.word	.LC15
 4257              		.section	.rodata.str1.1,"aMS",%progbits,1
 4258              	.LC3:
 4259 0000 65434C4F 		.ascii	"eCLOSED\000"
 4259      53454400 
 4260              	.LC4:
 4261 0008 65544350 		.ascii	"eTCP_LISTEN\000"
 4261      5F4C4953 
 4261      54454E00 
 4262              	.LC5:
 4263 0014 65434F4E 		.ascii	"eCONNECT_SYN\000"
 4263      4E454354 
 4263      5F53594E 
 4263      00
 4264              	.LC6:
 4265 0021 6553594E 		.ascii	"eSYN_FIRST\000"
 4265      5F464952 
 4265      535400
 4266              	.LC7:
 4267 002c 6553594E 		.ascii	"eSYN_RECEIVED\000"
 4267      5F524543 
 4267      45495645 
 4267      4400
 4268              	.LC8:
 4269 003a 65455354 		.ascii	"eESTABLISHED\000"
 4269      41424C49 
 4269      53484544 
 4269      00
 4270              	.LC9:
 4271 0047 6546494E 		.ascii	"eFIN_WAIT_1\000"
 4271      5F574149 
 4271      545F3100 
 4272              	.LC10:
 4273 0053 6546494E 		.ascii	"eFIN_WAIT_2\000"
 4273      5F574149 
 4273      545F3200 
 4274              	.LC11:
 4275 005f 65434C4F 		.ascii	"eCLOSE_WAIT\000"
 4275      53455F57 
 4275      41495400 
 4276              	.LC12:
 4277 006b 65434C4F 		.ascii	"eCLOSING\000"
 4277      53494E47 
 4277      00
 4278              	.LC13:
 4279 0074 654C4153 		.ascii	"eLAST_ACK\000"
 4279      545F4143 
 4279      4B00
 4280              	.LC14:
 4281 007e 6554494D 		.ascii	"eTIME_WAIT\000"
 4281      455F5741 
 4281      495400
 4282              	.LC15:
 4283 0089 65554E4B 		.ascii	"eUNKNOWN\000"
 4283      4E4F574E 
 4283      00
 4284              		.section	.rodata.xProcessReceivedTCPPacket.str1.1,"aMS",%progbits,1
 4285              	.LC0:
 4286 0000 00       		.ascii	"\000"
 4287              	.LC1:
 4288 0001 72656E00 		.ascii	"ren\000"
 4289              	.LC2:
 4290 0005 43686563 		.ascii	"Check: Socket %u already has %u / %u child%s\012\000"
 4290      6B3A2053 
 4290      6F636B65 
 4290      74202575 
 4290      20616C72 
 4291              		.text
 4292              	.Letext0:
 4293              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 4294              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 4295              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 4296              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 4297              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4298              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4299              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4300              		.file 13 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4301              		.file 14 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\unity\\src/unity_internals.h"
 4302              		.file 15 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4303              		.file 16 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS\\portable\\GCC\\ARM_CA9_RZA2M/por
 4304              		.file 17 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include\\private/list.h"
 4305              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4306              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4307              		.file 20 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4308              		.file 21 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4309              		.file 22 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4310              		.file 23 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4311              		.file 24 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\third_party\\mcu_vendor\\renesas\\rz_mcu_b
 4312              		.file 25 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/event_groups.h"
 4313              		.file 26 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_Socket
 4314              		.file 27 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_TCP_WI
 4315              		.file 28 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_TCP_IP
 4316              		.file 29 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/FreeRTOS_ARP.h"
 4317              		.file 30 "D:\\Work\\DeviceTester\\amazon-freertos\\tests\\renesas\\rza2m-gr-mango\\common\\config_
 4318              		.file 31 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\include/task.h"
 4319              		.file 32 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/NetworkBufferMa
 4320              		.file 33 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 4321              		.file 34 "D:\\Work\\DeviceTester\\amazon-freertos\\lib\\FreeRTOS-Plus-TCP\\include/NetworkInterfac
DEFINED SYMBOLS
                            *ABS*:00000000 FreeRTOS_TCP_IP.c
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:17     .text.prvSocketSetMSS:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:22     .text.prvSocketSetMSS:00000000 prvSocketSetMSS
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:51     .text.prvSocketSetMSS:00000038 $d
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:57     .text.prvTCPCreateWindow:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:62     .text.prvTCPCreateWindow:00000000 prvTCPCreateWindow
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:99     .text.prvTCPNextTimeout:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:104    .text.prvTCPNextTimeout:00000000 prvTCPNextTimeout
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:199    .text.prvTCPNextTimeout:000000b4 $d
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:205    .text.prvTCPReturnPacket.constprop.3:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:210    .text.prvTCPReturnPacket.constprop.3:00000000 prvTCPReturnPacket.constprop.3
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:677    .text.prvTCPReturnPacket.constprop.3:00000410 $d
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:686    .text.prvTCPSendReset:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:691    .text.prvTCPSendReset:00000000 prvTCPSendReset
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:734    .text.prvCheckOptions:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:739    .text.prvCheckOptions:00000000 prvCheckOptions
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1035   .text.prvTCPAddTxData:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1040   .text.prvTCPAddTxData:00000000 prvTCPAddTxData
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1165   .text.vTCPStateChange:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1171   .text.vTCPStateChange:00000000 vTCPStateChange
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1352   .text.vTCPStateChange:00000144 $d
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1357   .text.prvTCPPrepareSend:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1362   .text.prvTCPPrepareSend:00000000 prvTCPPrepareSend
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1784   .text.prvTCPPrepareSend:000002f4 $d
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1789   .text.prvTCPSendRepeated:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1794   .text.prvTCPSendRepeated:00000000 prvTCPSendRepeated
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1850   .text.xTCPSocketCheck:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:1856   .text.xTCPSocketCheck:00000000 xTCPSocketCheck
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:2342   .text.xTCPSocketCheck:0000038c $d
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:2349   .text.prvTCPHandleFin.isra.2:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:2354   .text.prvTCPHandleFin.isra.2:00000000 prvTCPHandleFin.isra.2
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:2484   .text.xProcessReceivedTCPPacket:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:2490   .text.xProcessReceivedTCPPacket:00000000 xProcessReceivedTCPPacket
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4021   .text.xProcessReceivedTCPPacket:00000c1c $d
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4035   .text.xProcessReceivedTCPPacket:00000c40 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4049   .text.xProcessReceivedTCPPacket:00000c60 $d
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4061   .text.FreeRTOS_GetTCPStateName:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4067   .text.FreeRTOS_GetTCPStateName:00000000 FreeRTOS_GetTCPStateName
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4087   .text.FreeRTOS_GetTCPStateName:00000014 $d
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4092   .text.xTCPCheckNewClient:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4098   .text.xTCPCheckNewClient:00000000 xTCPCheckNewClient
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4191   .text.xTCPCheckNewClient:0000008c $d
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4196   .text.TEST_FreeRTOS_TCP_prvCheckOptions:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4202   .text.TEST_FreeRTOS_TCP_prvCheckOptions:00000000 TEST_FreeRTOS_TCP_prvCheckOptions
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4218   .text.TEST_FreeRTOS_TCP_prvTCPCreateWindow:00000000 $a
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4224   .text.TEST_FreeRTOS_TCP_prvTCPCreateWindow:00000000 TEST_FreeRTOS_TCP_prvTCPCreateWindow
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4239   .rodata.pcStateNames:00000000 $d
C:\Users\a5089698\AppData\Local\Temp\cccpqqGk.s:4243   .rodata.pcStateNames:00000000 pcStateNames
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xDefaultPartUDPPacketHeader
xNetworkAddressing
vTCPWindowCreate
xTCPWindowTxHasData
usGenerateChecksum
usGenerateProtocolChecksum
memcpy
xNetworkInterfaceOutput
usPacketIdentifier
__aeabi_uidiv
ulTCPWindowTxSack
uxStreamBufferGet
lTCPWindowTxAdd
longjmp
FreeRTOS_closesocket
xTaskGetTickCount
vSocketWakeUpUser
Unity
ulTCPWindowTxGet
pxGetNetworkBufferWithDescriptor
vReleaseNetworkBufferAndDescriptor
xTCPWindowTxDone
xBufferAllocFixedSize
eARPGetCacheEntry
FreeRTOS_OutputARPRequest
vSocketClose
ulApplicationGetNextSequenceNumber
memset
pxTCPSocketLookup
FreeRTOS_socket
vSocketBind
lTCPWindowRxCheck
lTCPAddRxdata
vTCPWindowInit
ulTCPWindowTxAck
xTCPWindowRxEmpty
vLoggingPrintf
xBoundTCPSocketsList
